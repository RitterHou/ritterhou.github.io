{"meta":{"title":"侯锐的思考与分享","subtitle":"","description":null,"author":"Raymond","url":"https://www.nosuchfield.com","root":"/"},"pages":[{"title":"404","date":"2025-08-22T15:42:13.328Z","updated":"2025-08-22T15:42:13.328Z","comments":false,"path":"/404.html","permalink":"https://www.nosuchfield.com/404.html","excerpt":"","text":"404 Not Found"},{"title":"搜索","date":"2020-06-28T15:32:00.000Z","updated":"2025-08-22T15:42:13.468Z","comments":true,"path":"search/index.html","permalink":"https://www.nosuchfield.com/search/index.html","excerpt":"","text":"输入要搜索的内容： let url = 'https://www.google.com/search?q=site:www.nosuchfield.com'; function search() { let value = document.getElementById('key').value; window.location.href = url + ' ' + value; } document.getElementById('key').onkeypress = function(e) { if (!e) e = window.event; let keyCode = e.keyCode || e.which; if (keyCode == '13') { search(); } }"}],"posts":[{"title":"XXL-JOB的部署、搭建与使用","slug":"XXL-JOB-Deployment-Setup-and-Usage","date":"2025-08-22T16:57:47.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2025/08/22/XXL-JOB-Deployment-Setup-and-Usage/","link":"","permalink":"https://www.nosuchfield.com/2025/08/22/XXL-JOB-Deployment-Setup-and-Usage/","excerpt":"","text":"XXL-JOB是一个分布式任务调度平台，它可以很方便的实现分布式的任务调度。 部署首先我们下载XXL-JOB的源码 git clone git@github.com:xuxueli/xxl-job.git 之后我们根据doc/db/tables_xxl_job.sql中的sql创建对应的数据库和表。 在启动XXL-JOB之前，有些配置需要修改： xxl-job-admin/src/main/resources/logback.xml中property的value需要设置为xxl-job/xxl-job-admin/data/applogs/xxl-job/xxl-job-admin.log，否则可能会因为文件夹不存在而启动不了 xxl-job-admin/src/main/resources/application.properties中数据库的地址、用户名和密码，以及accessToken等等需要修改为自定义的配置值 修改完配置，就可以启动服务了 mvn clean package cd xxl-job-admin/target java -jar xxl-job-admin-3.1.2-SNAPSHOT.jar 这样服务就启动成功了，之后我们可以访问http://127.0.0.1:8080/xxl-job-admin/进入控制台 服务搭建我们基于SpringBoot来构建业务服务，首先我们添加依赖 &lt;dependency&gt; &lt;groupId&gt;com.xuxueli&lt;/groupId&gt; &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt; &lt;version&gt;3.1.1&lt;/version&gt; &lt;/dependency&gt; 之后创建一个XXL-JOB的配置bean 12345678910111213141516171819@Configurationpublic class XxlJobConfig &#123; @Bean public XxlJobSpringExecutor xxlJobExecutor() &#123; XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor(); // XXL-JOB地址 xxlJobSpringExecutor.setAdminAddresses(&quot;http://127.0.0.1:8080/xxl-job-admin&quot;); // 当前这个XXL-JOB的名称 xxlJobSpringExecutor.setAppname(&quot;test&quot;); // 密钥，和之前的配置需要一致 xxlJobSpringExecutor.setAccessToken(&quot;1sg&quot;); // 设置端口，不设置会自动选择 // xxlJobSpringExecutor.setPort(9999); // 设置日志目录和保存策略 xxlJobSpringExecutor.setLogPath(&quot;./log&quot;); xxlJobSpringExecutor.setLogRetentionDays(30); return xxlJobSpringExecutor; &#125;&#125; 配置好了之后我们就可以新建一个任务了 12345678910@Componentpublic class DemoJob &#123; private static final Logger logger = LoggerFactory.getLogger(DemoJob.class); @XxlJob(&quot;demoJobHandler&quot;) public void demoJobHandler() &#123; logger.info(&quot;XXL-JOB 任务开始执行: &#123;&#125;&quot;, new Date()); &#125;&#125; 添加了配置和任务之后，我们就可以启动服务了。 使用在控制台中，我们选择执行器管理，之后新增一个执行器。其中，AppName就是上面配置的应用名，如上就是test，名称就是这个管理器的自定义名称，注册方式选择自动注册即可。 创建好执行器，我们就可以新增任务了。在任务管理中，我们新增一个执行器为刚刚新增那个执行器的任务。运行模式选择BEAN，JobHandler设置为@XxlJob注解中的值demoJobHandler。之后当任务执行的条件达到时，demoJobHandler方法就会执行了。 参考XXL开源社区XXL-JOB 安装及使用教程","categories":[],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://www.nosuchfield.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"XXL-JOB","slug":"XXL-JOB","permalink":"https://www.nosuchfield.com/tags/XXL-JOB/"},{"name":"分布式任务调度","slug":"分布式任务调度","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://www.nosuchfield.com/tags/Spring-Boot/"},{"name":"任务调度","slug":"任务调度","permalink":"https://www.nosuchfield.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"}]},{"title":"使用NGINX的auth_request进行统一jwt鉴权","slug":"Using-NGINX-auth_request-for-unified-JWT-authentication","date":"2025-07-24T15:22:56.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2025/07/24/Using-NGINX-auth_request-for-unified-JWT-authentication/","link":"","permalink":"https://www.nosuchfield.com/2025/07/24/Using-NGINX-auth_request-for-unified-JWT-authentication/","excerpt":"","text":"NGINX的auth_request模块提供了一种统一的认证机制，可以在NGINX层面进行JWT鉴权，而不需要在每个后端服务中重复实现认证逻辑。 首先我们定义一下nginx的配置，它的配置如下 flat1234567891011121314151617181920212223242526272829303132333435363738server &#123; listen 8965; # 鉴权接口，仅供 Nginx 内部 auth_request 使用 location = /auth &#123; internal; # 该接口只能被 Nginx 内部请求，防止外部访问 # 转发到实际的认证服务 proxy_pass http://localhost:5001/api/auth/verify; # 不转发请求体，提升效率 proxy_pass_request_body off; # 防止后端因 Content-Length 不确定而报错 proxy_set_header Content-Length &quot;&quot;; # 将客户端传来的 Authorization 头（JWT Token）传给认证服务 proxy_set_header Authorization $http_authorization; # 传入原始请求路径，供认证服务判断路径是否需要鉴权 proxy_set_header X-Original-URI $request_uri; &#125; # 所有 / 路径下的请求都进行认证 location / &#123; # 认证请求会先调用上面的 /auth 接口 auth_request /auth; # 如果认证失败（如返回 401），跳转到自定义处理逻辑 error_page 401 = @unauthorized; # 从 /auth 的响应头中提取用户信息 auth_request_set $user_id $upstream_http_x_user_id; # 把用户信息注入到请求头中，转发给后端业务服务 proxy_set_header X-User-ID $user_id; # 转发到后端服务 proxy_pass http://localhost:5001; &#125; # 自定义未授权响应（认证失败时返回） location @unauthorized &#123; # 返回 401 状态码 + 文本内容 return 401 &quot;Unauthorized&quot;; &#125;&#125; 有了这个nginx的配置之后，我们就可以实现鉴权的逻辑了，具体逻辑如下 flat123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import jwtfrom flask import Flask, request, make_response, jsonifyfrom jwt import InvalidTokenErrorapp = Flask(__name__)SECRET_KEY = &quot;a-string-secret-at-least-256-bits-long&quot;# 路径白名单，不需要鉴权的接口PUBLIC_PATHS = [ &quot;/api/public/hello&quot;, &quot;/api/login&quot;, &quot;/api/register&quot;]@app.route(&quot;/api/auth/verify&quot;, methods=[&quot;GET&quot;])def verify_token(): original_uri = request.headers.get(&quot;X-Original-URI&quot;, &quot;&quot;) # 不需要鉴权的接口，直接返回200 if original_uri in PUBLIC_PATHS: return &quot;&quot;, 200 # 否则继续验证 JWT auth_header = request.headers.get(&quot;Authorization&quot;) if not auth_header or not auth_header.startswith(&quot;Bearer &quot;): return &quot;Missing or invalid Authorization header&quot;, 401 # 解析得到token token = auth_header.split(&quot; &quot;, 1)[1] try: payload = jwt.decode(token, SECRET_KEY, algorithms=[&quot;HS256&quot;]) response = make_response(&quot;&quot;, 200) response.headers[&quot;X-User-ID&quot;] = str(payload.get(&quot;user_id&quot;, &quot;&quot;)) return response except InvalidTokenError: return &quot;Invalid token&quot;, 401@app.route(&quot;/api/hello&quot;)def hello(): return jsonify(&#123;&quot;message&quot;: &quot;hello from auth&quot;, &quot;user_id&quot;: request.headers.get(&quot;X-User-ID&quot;)&#125;)@app.route(&quot;/api/public/hello&quot;)def ping(): return &#123;&quot;msg&quot;: &quot;hello without auth&quot;&#125;if __name__ == &quot;__main__&quot;: app.run(host=&quot;0.0.0.0&quot;, port=5001) 启动nginx和如上python服务，之后我们使用如下payload和header以及密钥生成token payload &#123; &quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot; &#125; header &#123; &quot;user_id&quot;: 656670838050885 &#125; 密钥 a-string-secret-at-least-256-bits-long 生成得到token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo2NTY2NzA4MzgwNTA4ODV9.caQ6cp-BA-OMxXu4zTUjV0OiZo1iygvdi7GPQNjNVHM 之后我们就可以使用token进行测试了，具体测试结果如下 ~ AUTH_HEADER=&quot;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo2NTY2NzA4MzgwNTA4ODV9.caQ6cp-BA-OMxXu4zTUjV0OiZo1iygvdi7GPQNjNVHM&quot; ~ curl -H &quot;$AUTH_HEADER&quot; http://localhost:8965/api/hello &#123;&quot;message&quot;:&quot;hello from auth&quot;,&quot;user_id&quot;:&quot;656670838050885&quot;&#125; ~ curl -H &quot;$AUTH_HEADER&quot; http://localhost:8965/api/public/hello &#123;&quot;msg&quot;:&quot;hello without auth&quot;&#125; ~ curl -H &quot;$AUTH_HEADER&quot; http://localhost:8965/api/login &lt;!doctype html&gt; &lt;html lang=en&gt; &lt;title&gt;404 Not Found&lt;/title&gt; &lt;h1&gt;Not Found&lt;/h1&gt; &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt; ~ curl http://localhost:8965/api/public/hello &#123;&quot;msg&quot;:&quot;hello without auth&quot;&#125; ~ curl http://localhost:8965/api/hello Unauthorized% 如上我们正确设置了Authorization之后就可以正常访问需要鉴权的接口了，但是去掉了Authorization之后需要鉴权的接口就会返回Unauthorized。此外还可以看到，不需要鉴权的接口，即使不添加鉴权配置也是可以正常访问的。","categories":[],"tags":[{"name":"JWT","slug":"JWT","permalink":"https://www.nosuchfield.com/tags/JWT/"},{"name":"微服务","slug":"微服务","permalink":"https://www.nosuchfield.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"API网关","slug":"API网关","permalink":"https://www.nosuchfield.com/tags/API%E7%BD%91%E5%85%B3/"},{"name":"认证授权","slug":"认证授权","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.nosuchfield.com/tags/Nginx/"}]},{"title":"使用APISIX解析jwt并获取payload信息","slug":"APISIX-parse-JWT-and-get-payload-information","date":"2025-07-11T11:23:07.000Z","updated":"2025-08-22T15:42:13.329Z","comments":true,"path":"2025/07/11/APISIX-parse-JWT-and-get-payload-information/","link":"","permalink":"https://www.nosuchfield.com/2025/07/11/APISIX-parse-JWT-and-get-payload-information/","excerpt":"","text":"APISIX支持获取jwt的信息，并且将这个信息进行解码并转发给后端服务。 1. 启动服务首先我们根据官方脚本来启动APISIX服务 ~ curl -sL &quot;https://run.api7.ai/apisix/quickstart&quot; | sh Destroying existing apisix-quickstart container, if any. Installing APISIX with the quickstart options. Creating bridge network apisix-quickstart-net. 77e35df073894075ad77facd9d1c7d2a35b280213732c1b631052caede079bab ✔ network apisix-quickstart-net created Starting the container etcd-quickstart. d123605c8b7658b130be97e5f44e7a160aa85858db008032ecf594266225e342 ✔ etcd is listening on etcd-quickstart:2379 Starting the container apisix-quickstart. 38434806c63b3a72f53fb6ad849cb4c11781eebaff79c8db04510226593fcf46 ⚠ WARNING: The Admin API key is currently disabled. You should turn on admin_key_required and set a strong Admin API key in production for security. ✔ APISIX is ready! 2. 配置插件启动了APISIX之后，我们首先创建一个插件配置。在这个插件中我们定义了一个Lua方法，这个方法的目的是从请求的header中获取authorization信息，并进行解码，之后将解码的信息放到HTTP header中传给后端 curl --location --request PUT &#39;http://127.0.0.1:9180/apisix/admin/plugin_configs/1001&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --header &#39;Accept: */*&#39; \\ --header &#39;Host: 127.0.0.1:9180&#39; \\ --header &#39;Connection: keep-alive&#39; \\ --data-raw &#39;&#123; &quot;plugins&quot;: &#123; &quot;serverless-pre-function&quot;: &#123; &quot;phase&quot;: &quot;access&quot;, &quot;functions&quot;: [ &quot;return function(_, ctx) local core = require(\\&quot;apisix.core\\&quot;) local jwt = require(\\&quot;resty.jwt\\&quot;) local auth_header = ctx.var.http_authorization if not auth_header then return end local token = auth_header:match(\\&quot;Bearer%s+(.+)\\&quot;) if not token then return end local obj = jwt:load_jwt(token) if obj and obj.valid and obj.payload then if obj.payload.user_id then core.request.set_header(\\&quot;X-User-Id\\&quot;, obj.payload.user_id) end if obj.payload.role then core.request.set_header(\\&quot;X-User-Role\\&quot;, obj.payload.role) end end end&quot; ] &#125; &#125; &#125;&#39; 如上的fucntions属性中添加了一个Lua方法，格式化之后的Lua代码如下 123456789101112131415161718192021222324return function(_, ctx) local core = require(&quot;apisix.core&quot;) local jwt = require(&quot;resty.jwt&quot;) local auth_header = ctx.var.http_authorization if not auth_header then return end local token = auth_header:match(&quot;Bearer%s+(.+)&quot;) if not token then return end local obj = jwt:load_jwt(token) if obj and obj.valid and obj.payload then if obj.payload.user_id then core.request.set_header(&quot;X-User-Id&quot;, obj.payload.user_id) end if obj.payload.role then core.request.set_header(&quot;X-User-Role&quot;, obj.payload.role) end endend 这段代码实现了如下几个功能： 从 Authorization: Bearer 中提取 JWT 使用 resty.jwt 解码 如果合法，提取 user_id 和 role 注入到 header（X-User-Id, X-User-Role）中供后端读取 3. 配置consumer创建了这个插件之后，我们再新建一个consumer。在APISIX中，consumer代表了一类客户端，比如APP。我们可以针对这类客户端添加一些配置，多种不同类型的客户端（比如APP、网页、开放平台，等等）可以分别设置成不同的consumer以方便管理 curl --location --request PUT &#39;http://127.0.0.1:9180/apisix/admin/consumers/app&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --header &#39;Accept: */*&#39; \\ --header &#39;Host: 127.0.0.1:9180&#39; \\ --header &#39;Connection: keep-alive&#39; \\ --data-raw &#39;&#123; &quot;username&quot;: &quot;app&quot;, &quot;plugins&quot;: &#123; &quot;jwt-auth&quot;: &#123; &quot;key&quot;: &quot;app-key&quot;, &quot;secret&quot;: &quot;a-string-secret-at-least-256-bits-long&quot;, &quot;algorithm&quot;: &quot;HS256&quot; &#125; &#125; &#125;&#39; 如上添加了一个名为app的consumer，它的key是app-key，加密方式是HS256，密钥是a-string-secret-at-least-256-bits-long。有了解析插件和consumer之后，我们就可以创建路由了。 4. 配置路由如下请求会创建一个ID为1的路由，使用了ID为1001插件，并且添加了jwt-auth的配置，路由的后端是https://httpbin.org，这个网站会把我们请求的信息返回给我们。 curl --location --request PUT &#39;http://127.0.0.1:9180/apisix/admin/routes/1&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --header &#39;Accept: */*&#39; \\ --header &#39;Host: 127.0.0.1:9180&#39; \\ --header &#39;Connection: keep-alive&#39; \\ --data-raw &#39;&#123; &quot;uri&quot;: &quot;/headers&quot;, &quot;plugin_config_id&quot;: 1001, &quot;plugins&quot;: &#123; &quot;jwt-auth&quot;: &#123;&#125; &#125;, &quot;upstream&quot;: &#123; &quot;type&quot;: &quot;roundrobin&quot;, &quot;nodes&quot;: &#123; &quot;httpbin.org:80&quot;: 1 &#125; &#125; &#125;&#39; 5. 发起请求在创建好了plugin_config、consumer和route之后，我们就可以测试请求了。首先我们构建如下payload 123456&#123; &quot;key&quot;: &quot;app-key&quot;, &quot;user_id&quot;: 100001, &quot;role&quot;: &quot;admin&quot;, &quot;exp&quot;: 1900000000&#125; 这个payload包含了user_id和role两个业务属性，exp代表这个jwt的过期时间戳，key是APISIX用于识别匹配哪个consumer的，这里我们选择匹配app-key这个consumer。之后我们将该payload和密钥a-string-secret-at-least-256-bits-long一起在https://jwt.io/进行编码，得到编码jwt信息如下 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJhcHAta2V5IiwidXNlcl9pZCI6MTAwMDAxLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE5MDAwMDAwMDB9.qG7PNPz2XlatmjrhNW_xf6SmI8T9JSIx2lJVJcAox0I 之后我们执行HTTP请求，将这个jwt放到Authorization header中 curl --location --request GET &#39;http://127.0.0.1:9080/headers&#39; \\ --header &#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJhcHAta2V5IiwidXNlcl9pZCI6MTAwMDAxLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE5MDAwMDAwMDB9.qG7PNPz2XlatmjrhNW_xf6SmI8T9JSIx2lJVJcAox0I&#39; \\ --header &#39;Accept: */*&#39; \\ --header &#39;Host: httpbin.org:80&#39; \\ --header &#39;Connection: keep-alive&#39; 请求得到的响应如下，可以看到user_id和role属性已经成功的传给后端服务了 12345678910111213&#123; &quot;headers&quot;: &#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Authorization&quot;: &quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJhcHAta2V5IiwidXNlcl9pZCI6MTAwMDAxLCJyb2xlIjoiYWRtaW4iLCJleHAiOjE5MDAwMDAwMDB9.qG7PNPz2XlatmjrhNW_xf6SmI8T9JSIx2lJVJcAox0I&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;User-Agent&quot;: &quot;curl/7.81.0&quot;, &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-68709903-309891501348175943af3223&quot;, &quot;X-Consumer-Username&quot;: &quot;app&quot;, &quot;X-Forwarded-Host&quot;: &quot;httpbin.org&quot;, &quot;X-User-Id&quot;: &quot;100001&quot;, &quot;X-User-Role&quot;: &quot;admin&quot; &#125;&#125;","categories":[],"tags":[{"name":"APISIX","slug":"APISIX","permalink":"https://www.nosuchfield.com/tags/APISIX/"},{"name":"JWT","slug":"JWT","permalink":"https://www.nosuchfield.com/tags/JWT/"},{"name":"微服务","slug":"微服务","permalink":"https://www.nosuchfield.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"API网关","slug":"API网关","permalink":"https://www.nosuchfield.com/tags/API%E7%BD%91%E5%85%B3/"},{"name":"Lua","slug":"Lua","permalink":"https://www.nosuchfield.com/tags/Lua/"},{"name":"认证授权","slug":"认证授权","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"}]},{"title":"《推荐系统实践》","slug":"Recommender-Systems-in-Practice","date":"2025-06-22T10:54:59.000Z","updated":"2025-08-22T15:42:13.346Z","comments":true,"path":"2025/06/22/Recommender-Systems-in-Practice/","link":"","permalink":"https://www.nosuchfield.com/2025/06/22/Recommender-Systems-in-Practice/","excerpt":"","text":"从某种意义上说，推荐系统和搜索引擎对于用户来说是两个互补的工具。搜索引擎满足了用户有明确目的时的主动查找需求，而推荐系统能够在用户没有明确目的的时候帮助他们发现感兴趣的新内容。 基于用户行为分析的推荐算法是个性化推荐系统的重要算法，学术界一般将这种类型的算法称为协同过滤（Collaborative filtering）算法。顾名思义，协同过滤就是指用户可以齐心协力，通过不断地和网站互动，使自己的推荐列表能够不断过滤掉自己不感兴趣的物品，从而越来越满足自己的需求。 用户行为分类用户行为在个性化推荐系统中一般分两种——显性反馈行为（explicit feedback）和隐性反馈行为（implicit feedback）。显示反馈行为是用户主动做的，比如给视频点赞、给书籍打分等等；隐式反馈行为的代表就是用户浏览页面，这种行为显示出来的用户偏好不是那么明显，但是数据量更大。 常用算法基于邻域的算法 基于用户的协同过滤算法 这种算法给用户推荐和他兴趣相似的其他用户喜欢的物品。 找到和目标用户兴趣相似的用户集合（P45）。 找到这个集合中的用户喜欢的，且目标用户没有听说过的物品推荐给目标用户。 基于物品的协同过滤算法 这种算法给用户推荐和他之前喜欢的物品相似的物品。 计算物品之间的相似度（P53）。 根据物品的相似度和用户的历史行为给用户生成推荐列表。 基于用户的协同过滤算法计算两个用户的兴趣相似程度：给定用户u和用户v，N(u)表示用户u曾经有过正反馈的物品集合，N(v)表示用户v曾经有过正反馈的物品集合。可以使用Jaccard公式计算两个用户的兴趣相似程度 wuv&#x3D;|N(u)∩N(v)||N(u)∪N(v)| 或者使用余弦相似公式计算相似程度 wuv&#x3D;|N(u)∩N(v)||N(u)||N(v)| 以余弦相似公式为例，假设有用户ABCD，物品abcde，用户喜欢的物品如下 用户 物品 a 物品 b 物品 c 物品 d 物品 e A ☑️ ☑️ ☑️ B ☑️ ☑️ C ☑️ ☑️ D ☑️ ☑️ ☑️ 那么我们可以得到用户A和BCD的相似度 wAB&#x3D;|{a,b,d}∩{a,c}||{a,b,d}||{a,c}|&#x3D;16 wAC&#x3D;|{a,b,d}∩{b,e}||{a,b,d}||{b,e}|&#x3D;16 wAD&#x3D;|{a,b,d}∩{c,d,e}||{a,b,d}||{c,d,e}|&#x3D;13 具体计算过程以AD的相似度计算为例 分子为交集并且交集为 &#123;d&#125;，|&#123;d&#125;| = 1，所以分子为1 分母为并集，3 x 3 = 9，开根号为3最终值为 1 / 3 以上逻辑可以用代码进行实现： 123456789101112131415161718def similarity(users): w = defaultdict(dict) for u, v in combinations(users.keys(), 2): r1 = len(users[u] &amp; users[v]) r2 = math.sqrt(len(users[u]) * len(users[v]) * 1.0) r = r1 / r2 w[u][v], w[v][u] = r, r # 保存两次，方便后面使用 return wdef main(): users = &#123; &#x27;A&#x27;: &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;, &#x27;B&#x27;: &#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;, &#x27;C&#x27;: &#123;&#x27;b&#x27;, &#x27;e&#x27;&#125;, &#x27;D&#x27;: &#123;&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;&#125; &#125; for k, v in similarity(users).items(): print(f&#x27;&#123;k&#125;: &#123;json.dumps(v)&#125;&#x27;) 执行后得到结果如下 A: &#123;&quot;B&quot;: 0.4082482904638631, &quot;C&quot;: 0.4082482904638631, &quot;D&quot;: 0.3333333333333333&#125; B: &#123;&quot;A&quot;: 0.4082482904638631, &quot;C&quot;: 0.0, &quot;D&quot;: 0.4082482904638631&#125; C: &#123;&quot;A&quot;: 0.4082482904638631, &quot;B&quot;: 0.0, &quot;D&quot;: 0.4082482904638631&#125; D: &#123;&quot;A&quot;: 0.3333333333333333, &quot;B&quot;: 0.4082482904638631, &quot;C&quot;: 0.4082482904638631&#125; 据此我们就可以得到各个用户之间的兴趣相似度了。有了用户兴趣的相似度之后，我们可以给用户推荐和他兴趣最相似的K个用户喜欢的物品。我们可以使用如下公式计算用户u对物品i的感兴趣程度 p(u,i)&#x3D;∑v∈S(u,K)∩N(i)wuvrvi 其中，S(u, K)包含和用户u兴趣最接近的K个用户，N(i)是对物品i有过行为的用户集合，wuv是用户u和用户v的兴趣相似度，rvi代表用户v对物品i的兴趣，因为使用的是单一行为的隐反馈数据，所以所有的rvi&#x3D;1。 具体的逻辑实现如下： 123456789101112131415161718def recommend(user, users, w, k): &quot;&quot;&quot; :param user: 计算指定用户的物品推荐程度 :param users: 数据集 :param w: 前一步计算得到的用户兴趣相似度 :param k: 取k个兴趣最相似的用户 :return: &quot;&quot;&quot; rank = defaultdict(float) # 获取指定用户和其它用户的兴趣相似度，并按照相似度从大到小排序，取前k个数据 for v, wuv in sorted(w[user].items(), key=lambda item: item[1], reverse=True)[:k]: # 取出指定用户的数据集 for i in users[v]: # 如果这个数据已经在当前用户的数据集里面，跳过，因为已经感兴趣的数据不需要再次推荐 if i in users[user]: continue rank[i] += wuv return rank 通过这个代码我们就可以计算得到指定用户的物品推荐程度了。完整的代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import jsonimport mathfrom collections import defaultdictfrom itertools import combinationsdef similarity(users): w = defaultdict(dict) for u, v in combinations(users.keys(), 2): r1 = len(users[u] &amp; users[v]) r2 = math.sqrt(len(users[u]) * len(users[v]) * 1.0) r = r1 / r2 w[u][v], w[v][u] = r, r # 保存两次，方便后面使用 return wdef recommend(user, users, w, k): &quot;&quot;&quot; :param user: 计算指定用户的物品推荐程度 :param users: 数据集 :param w: 前一步计算得到的用户兴趣相似度 :param k: 取k个兴趣最相似的用户 :return: &quot;&quot;&quot; rank = defaultdict(float) # 获取指定用户和其它用户的兴趣相似度，并按照相似度从大到小排序，取前k个数据 for v, wuv in sorted(w[user].items(), key=lambda item: item[1], reverse=True)[:k]: # 取出指定用户的数据集 for i in users[v]: # 如果这个数据已经在当前用户的数据集里面，跳过，因为已经感兴趣的数据不需要再次推荐 if i in users[user]: continue rank[i] += wuv return rankdef main(): users = &#123; &#x27;A&#x27;: &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;, &#x27;B&#x27;: &#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;, &#x27;C&#x27;: &#123;&#x27;b&#x27;, &#x27;e&#x27;&#125;, &#x27;D&#x27;: &#123;&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;&#125; &#125; w = similarity(users) for k, v in w.items(): print(f&#x27;&#123;k&#125;: &#123;json.dumps(v)&#125;&#x27;) rank = recommend(&#x27;C&#x27;, users, w, 3) for k, v in sorted(rank.items(), key=lambda item: item[1], reverse=True): print(f&#x27;&#123;k&#125;: &#123;v&#125;&#x27;)if __name__ == &#x27;__main__&#x27;: main() 执行代码得到的结果如下 A: &#123;&quot;B&quot;: 0.4082482904638631, &quot;C&quot;: 0.4082482904638631, &quot;D&quot;: 0.3333333333333333&#125; B: &#123;&quot;A&quot;: 0.4082482904638631, &quot;C&quot;: 0.0, &quot;D&quot;: 0.4082482904638631&#125; C: &#123;&quot;A&quot;: 0.4082482904638631, &quot;B&quot;: 0.0, &quot;D&quot;: 0.4082482904638631&#125; D: &#123;&quot;A&quot;: 0.3333333333333333, &quot;B&quot;: 0.4082482904638631, &quot;C&quot;: 0.4082482904638631&#125; d: 0.8164965809277261 a: 0.4082482904638631 c: 0.4082482904638631 由上面的结果我们可以知道，针对用户C，最推荐的物品是物品d。 根据上面的例子我们已经简单了解了基于用户的协同过滤算法，不过这种算法存在问题，主要是 随着网站的用户数目越来越大，计算用户兴趣相似度矩阵将越来越困难，其运算时间复杂度和空间复杂度的增长和用户数的增长近似于平方关系 基于用户的协同过滤很难对推荐结果作出解释 因此，在实际的使用中，更常见的是基于物品的协同过滤算法 基于物品的协同过滤算法为了挖掘长尾信息，避免热门物品对推荐产生影响，减小二八定律的出现。可以用如下公式计算物品之间的相似度 wij&#x3D;|N(i)∩N(j)||N(i)||N(j)| 分子是同时喜欢物品i和物品j的用户数，分母是喜欢两个物品用户数的并集。为了减小计算量，我们可以构建一个矩阵来存储某个用户喜欢的物品集合。 举个例子，比如用户A喜欢物品 {a, b, d}，那我们可以构建如下矩阵 | a | b | c | d | e | ----|-----|-----|-----|-----|-----| a | 0 | 1 | 0 | 1 | 0 | b | 1 | 0 | 0 | 1 | 0 | c | 0 | 0 | 0 | 0 | 0 | d | 1 | 1 | 0 | 0 | 0 | e | 0 | 0 | 0 | 0 | 0 | 因为a、b、d可以组成ab、ad、bd，所以将矩阵中的对应位置都填上1。这是一个用户的物品信息，对于多个用户，只需要把这些矩阵相加即可。例如有5个用户，他们的物品信息和生成的对应物品矩阵如下 用户 1: {a, c, d} | a | b | c | d | e | ----|-----|-----|-----|-----|-----| a | 0 | 0 | 1 | 1 | 0 | b | 0 | 0 | 0 | 0 | 0 | c | 1 | 0 | 0 | 1 | 0 | d | 1 | 0 | 1 | 0 | 0 | e | 0 | 0 | 0 | 0 | 0 | 用户 2: {b, c, e} | a | b | c | d | e | ----|-----|-----|-----|-----|-----| a | 0 | 0 | 0 | 0 | 0 | b | 0 | 0 | 1 | 0 | 1 | c | 0 | 1 | 0 | 0 | 1 | d | 0 | 0 | 0 | 0 | 0 | e | 0 | 1 | 1 | 0 | 0 | 用户 3: {a, d, e} | a | b | c | d | e | ----|-----|-----|-----|-----|-----| a | 0 | 0 | 0 | 1 | 1 | b | 0 | 0 | 0 | 0 | 0 | c | 0 | 0 | 0 | 0 | 0 | d | 1 | 0 | 0 | 0 | 1 | e | 1 | 0 | 0 | 1 | 0 | 用户 4: {b, d} | a | b | c | d | e | ----|-----|-----|-----|-----|-----| a | 0 | 0 | 0 | 0 | 0 | b | 0 | 0 | 0 | 1 | 0 | c | 0 | 0 | 0 | 0 | 0 | d | 0 | 1 | 0 | 0 | 0 | e | 0 | 0 | 0 | 0 | 0 | 用户 5: {a, b, c, e} | a | b | c | d | e | ----|-----|-----|-----|-----|-----| a | 0 | 1 | 1 | 0 | 1 | b | 1 | 0 | 1 | 0 | 1 | c | 1 | 1 | 0 | 0 | 1 | d | 0 | 0 | 0 | 0 | 0 | e | 1 | 1 | 1 | 0 | 0 | 将这5个用户的物品信息相加，得到矩阵 | a | b | c | d | e | ----|-----|-----|-----|-----|-----| a | 0 | 1 | 2 | 3 | 2 | b | 1 | 0 | 3 | 2 | 3 | c | 2 | 3 | 0 | 2 | 3 | d | 3 | 2 | 2 | 0 | 2 | e | 2 | 3 | 3 | 2 | 0 | 在这个矩阵中值越高，代表物品的相关度越高。接下来我们将这个规则用代码进行实现 1234567891011121314151617181920212223number = &#x27;number&#x27;def item_similarity(train): # c[i][number]表示使用物品i的用户数量 # c[i][j]表示同时交互物品i和j的用户数 c = defaultdict(lambda: defaultdict(int)) for user, items in train.items(): for i in items: # 统计每个物品被交互的总次数 c[i][number] += 1 # 统计物品i与其他物品的共现次数 for j in items: if i == j: continue c[i][j] += 1 # 计算最终的相似度矩阵 w w = defaultdict(dict) for i, related_items in c.items(): for j, cij in related_items.items(): if j == number: continue # 余弦相似度公式 similarity = cij / math.sqrt(c[i][number] * c[j][number]) w[i][j] = similarity return w 如上我们先计算每个物品各自被用户喜欢的次数，再计算每个物品和其它物品同时被某个用户喜欢的次数，之后根据物品相似度公式即可计算出物品之间的相关性。为了简单起见，如上代码只使用了一个字典变量，物品自己被喜欢的次数被保存在key为number的字段中，物品和其它物品同时被喜欢的次数则保存在key为其它物品ID的字段中。 有了如上逻辑之后，我们就可以计算物品相似度了，假设有用户如下 &#123; &#39;A&#39;: &#123;&#39;a&#39;, &#39;b&#39;, &#39;d&#39;&#125;, &#39;B&#39;: &#123;&#39;a&#39;, &#39;c&#39;&#125;, &#39;C&#39;: &#123;&#39;b&#39;, &#39;e&#39;, &#39;a&#39;&#125;, &#39;D&#39;: &#123;&#39;c&#39;, &#39;d&#39;, &#39;e&#39;&#125; &#125; 计算得到的物品相似度 b: &#123;&#39;a&#39;: 0.8164965809277261, &#39;d&#39;: 0.5, &#39;e&#39;: 0.5&#125; a: &#123;&#39;b&#39;: 0.8164965809277261, &#39;d&#39;: 0.4082482904638631, &#39;c&#39;: 0.4082482904638631, &#39;e&#39;: 0.4082482904638631&#125; d: &#123;&#39;b&#39;: 0.5, &#39;c&#39;: 0.5, &#39;e&#39;: 0.5, &#39;a&#39;: 0.4082482904638631&#125; c: &#123;&#39;e&#39;: 0.5, &#39;d&#39;: 0.5, &#39;a&#39;: 0.4082482904638631&#125; e: &#123;&#39;b&#39;: 0.5, &#39;c&#39;: 0.5, &#39;d&#39;: 0.5, &#39;a&#39;: 0.4082482904638631&#125; 可以看到物品a和物品b的相关度是最高的。在得到物品的相关度之后，我们可以使用如下公式计算用户u对一个物品j的兴趣 puj&#x3D;∑i∈N(u)∩S(j,K)wjirui N(u)是用户喜欢的物品集合，S(j, K)是物品j最相似的K个物品的集合，wji是物品j和i的相似度，rui是用户对物品i的兴趣，可令rui为1。我们可以把这个逻辑使用代码进行实现 1234567891011121314151617181920def recommend(interacted_items: Union[set, dict], w, k): &quot;&quot;&quot; :param interacted_items: 指定用户交互过的物品 :param w: 物品的相似度 :param k: 取最相似的k个物品 :return: &quot;&quot;&quot; if isinstance(interacted_items, set): # 如果只有物品，没有评分，那么将评分统一设置为1 interacted_items = &#123;k: 1 for k in interacted_items&#125; rank = defaultdict(float) # 用户交互过的物品，和用户对这个物品的评分 for item, score in interacted_items.items(): # 物品的相似度信息，得到related_item和item的相似度similarity，按照相似度的值从大到小排序，取k个值 for related_item, similarity in sorted(w[item].items(), key=lambda x: x[1], reverse=True)[:k]: # 如果这个物品已经被用户交互过了，跳过 if related_item in interacted_items: continue # 计算相关的物品的相似度评分 rank[related_item] += score * similarity return rank 有了计算用户和物品相关度的代码，我们就可以把逻辑结合起来，实现向用户推荐物品了。完整的代码实现如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import mathfrom collections import defaultdictfrom typing import Unionnumber = &#x27;number&#x27;def item_similarity(train): # c[i][number]表示使用物品i的用户数量 # c[i][j]表示同时交互物品i和j的用户数 c = defaultdict(lambda: defaultdict(int)) for user, items in train.items(): for i in items: # 统计每个物品被交互的总次数 c[i][number] += 1 # 统计物品i与其他物品的共现次数 for j in items: if i == j: continue c[i][j] += 1 # 计算最终的相似度矩阵 w w = defaultdict(dict) for i, related_items in c.items(): for j, cij in related_items.items(): if j == number: continue # 余弦相似度公式 similarity = cij / math.sqrt(c[i][number] * c[j][number]) w[i][j] = similarity return wdef recommend(interacted_items: Union[set, dict], w, k): &quot;&quot;&quot; :param interacted_items: 指定用户交互过的物品 :param w: 物品的相似度 :param k: 取最相似的k个物品 :return: &quot;&quot;&quot; if isinstance(interacted_items, set): # 如果只有物品，没有评分，那么将评分统一设置为1 interacted_items = &#123;k: 1 for k in interacted_items&#125; rank = defaultdict(float) # 用户交互过的物品，和用户对这个物品的评分 for item, score in interacted_items.items(): # 物品的相似度信息，得到related_item和item的相似度similarity，按照相似度的值从大到小排序，取k个值 for related_item, similarity in sorted(w[item].items(), key=lambda x: x[1], reverse=True)[:k]: # 如果这个物品已经被用户交互过了，跳过 if related_item in interacted_items: continue # 计算相关的物品的相似度评分 rank[related_item] += score * similarity return rankdef main(): users = &#123; &#x27;A&#x27;: &#123;&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;, &#x27;B&#x27;: &#123;&#x27;a&#x27;, &#x27;c&#x27;&#125;, &#x27;C&#x27;: &#123;&#x27;b&#x27;, &#x27;e&#x27;, &#x27;a&#x27;&#125;, &#x27;D&#x27;: &#123;&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;&#125; &#125; w = item_similarity(users) for k, v in w.items(): print(f&#x27;&#123;k&#125;: &#123;dict(sorted(v.items(), key=lambda item: item[1], reverse=True))&#125;&#x27;) rank = recommend(users[&#x27;B&#x27;], w, 3) for k, v in sorted(rank.items(), key=lambda item: item[1], reverse=True): print(f&#x27;&#123;k&#125;: &#123;v&#125;&#x27;)if __name__ == &#x27;__main__&#x27;: main() 以上代码的执行结果如下，可见用户B和物品d的相关度最高 b: &#123;&#39;a&#39;: 0.8164965809277261, &#39;d&#39;: 0.5, &#39;e&#39;: 0.5&#125; d: &#123;&#39;b&#39;: 0.5, &#39;c&#39;: 0.5, &#39;e&#39;: 0.5, &#39;a&#39;: 0.4082482904638631&#125; a: &#123;&#39;b&#39;: 0.8164965809277261, &#39;d&#39;: 0.4082482904638631, &#39;c&#39;: 0.4082482904638631, &#39;e&#39;: 0.4082482904638631&#125; c: &#123;&#39;d&#39;: 0.5, &#39;e&#39;: 0.5, &#39;a&#39;: 0.4082482904638631&#125; e: &#123;&#39;b&#39;: 0.5, &#39;c&#39;: 0.5, &#39;d&#39;: 0.5, &#39;a&#39;: 0.4082482904638631&#125; d: 0.9082482904638631 b: 0.8164965809277261 e: 0.5 基于物品的推荐在工程中使用的比基于用户的推荐要多，因为UserCF（User Collaborative Filtering）的推荐更社会化，反映了用户所在的小型兴趣群体中物品的热门程度，而ItemCF（Item Collaborative Filtering）的推荐更加个性化，反映了用户自己的兴趣传承。 LFM（latent factor model）隐语义模型隐语义模型核心思想是通过隐含特征(latent factor)联系用户兴趣和物品，它可以通过对数据进行分类来实现推荐。这种基于用户对数据的兴趣分类的方式，需要解决如下三个问题： 如何给物品分类 如何确定用户对哪些分类感兴趣，以及感兴趣的程度 对于一个分类，选择哪些物品推荐给用户，以及这些物品的权重如何 隐含语义分析技术（latent variable analysis）采取基于用户行为统计的自动聚类，来实现数据自动分类。 评测指标一个推荐系统好不好，可以从用户满意度、预测准确度、覆盖率、多样性、新颖性、惊喜度、信任度、实时性、健壮性、商业目标等多个角度来进行评测 准确度我们可以使用TopN推荐的方式来计算准确度，TopN的准确度一般通过准确率（precision）&#x2F;召回率（recall）来进行度量。令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么，推荐结果的召回率定义为： Recall&#x3D;∑u∈U|R(u)∩T(u)|∑u∈U|T(u)| 推荐结果的准确率定义为： Precision&#x3D;∑u∈U|R(u)∩T(u)|∑u∈U|R(u)| 简单来说，R(u)代表系统推荐给用户u的Top-N列表（预测值），T(u)代表用户实际喜欢或点击过的项目（真实值），召回率和准确率公式的分子都是同时存在于推荐列表和用户喜欢列表的物品数。召回率的分母是用户喜欢的物品数，召回率是看系统有没有把用户喜欢的物品推荐出来。准确率的分母是系统推荐的物品总数，目的是看推荐有多少是对的。 指标 含义 关注点 Recall 你真正喜欢的内容中，被系统找出来了多少 不漏掉好东西 Precision 系统推荐的内容中，有多少真的是你喜欢的 不乱推荐垃圾 我们可以把召回率和准确率的计算通过如下代码实现 flat123456789101112131415161718192021222324252627def precision_recall(test_data, train_data, n, recommend_func): &quot;&quot;&quot; 计算推荐系统在测试集上的准确率和召回率 :param test_data: dict，用户 -&gt; 测试集中真实交互物品列表 :param train_data: dict，用户 -&gt; 训练集中交互物品列表（用于生成推荐） :param n: int，每个用户推荐的物品数量 :param recommend_func: function(user, n, train_data)，返回推荐物品列表 :return: [recall, precision] &quot;&quot;&quot; hit = 0 # 交集 total_actual = 0 # 所有用户的真实物品总数 total_recommend = 0 # 所有推荐物品总数 for user, actual_items in test_data.items(): # 计算推荐物品 recommended_items = recommend_func(user, n, train_data) # 计算交集 hit += len(set(recommended_items) &amp; set(actual_items)) # 真实物品数 total_actual += len(actual_items) # 推荐物品数 total_recommend += len(recommended_items) recall = hit / total_actual if total_actual else 0 precision = hit / total_recommend if total_recommend else 0 return [recall, precision] 参考推荐系统实践","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"机器学习","slug":"机器学习","permalink":"https://www.nosuchfield.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://www.nosuchfield.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"推荐系统","slug":"推荐系统","permalink":"https://www.nosuchfield.com/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"},{"name":"数据挖掘","slug":"数据挖掘","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"}]},{"title":"《上瘾：让用户养成使用习惯的四大产品逻辑》","slug":"Hooked-How-to-Build-Habit-Forming-Products","date":"2025-06-18T17:44:52.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2025/06/18/Hooked-How-to-Build-Habit-Forming-Products/","link":"","permalink":"https://www.nosuchfield.com/2025/06/18/Hooked-How-to-Build-Habit-Forming-Products/","excerpt":"","text":"Hooked: How to Build Habit-Forming Products 如何卖出更多的产品：产能 -&gt; 营销&#x2F;渠道 -&gt; 产品设计 上瘾如何设计产品：触发 -&gt; 行动 -&gt; 多变的酬赏 -&gt; 投入 习惯是大脑借以掌握复杂举动的途径之一。神经系统科学家指出，人脑中存在一个负责无意识行为的基底神经节，那些无意中产生的条件反射会以习惯的形式存储在基底神经节中，从而使人们腾出精力来关注其他的事物。当大脑试图走捷径而不再主动思考接下来该做些什么时，习惯就养成了。为解决当下面临的问题，大脑会在极短的时间内从行为存储库里提取出相宜的对策。（就是基底核，有点像缓存的作用） 我们所要描述的体验更接近于“痒”，它是潜伏于我们内心的一种渴求，当这种渴求得不到满足时，不适感就会出现。那些让我们养成某种习惯的产品正好可以缓解这种不适感。比起听之任之的做法，利用技术或产品来”挠痒痒”能够更快地满足我们的渴求。一旦我们对某种技术或产品产生依赖，那它就是唯一的灵丹妙药了。 福格行为模型可以用公式来呈现，即B&#x3D;MAT。B代表行为，M代表动机，A代表能力，T代表触发。要想使人们完成特定的行为，动机、能力、触发这三样缺一不可。1否则，人们将无法跨过”行动线”，也就是说，不会实施某种行为。 稀缺效应：物以稀为贵 环境效应：环境会影响人们的价值判断 锚定效应 赠券效应 多变的酬赏主要表现为三种形式：社交酬赏，猎物酬赏，自我酬赏 沉没成本：通过用户对产品的投入程度，留住用户 总体评价：很薄的一本书，有部分的观点有参考意义，但是大部分的论调都是老生常谈。大多数的观点在很多心理学的书籍里面已经讲过了，本书主要是讲怎么依赖于这些原理来进行实操，有一定的参考意义。 https://book.douban.com/subject/27030507/","categories":[],"tags":[{"name":"产品设计","slug":"产品设计","permalink":"https://www.nosuchfield.com/tags/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"},{"name":"用户体验","slug":"用户体验","permalink":"https://www.nosuchfield.com/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"},{"name":"心理学","slug":"心理学","permalink":"https://www.nosuchfield.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"},{"name":"习惯养成","slug":"习惯养成","permalink":"https://www.nosuchfield.com/tags/%E4%B9%A0%E6%83%AF%E5%85%BB%E6%88%90/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://www.nosuchfield.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"}]},{"title":"Kotlin与Java对照手册","slug":"Kotlin-vs-Java-Comparison-Guide","date":"2025-04-24T14:21:27.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2025/04/24/Kotlin-vs-Java-Comparison-Guide/","link":"","permalink":"https://www.nosuchfield.com/2025/04/24/Kotlin-vs-Java-Comparison-Guide/","excerpt":"","text":"1. 基本类型 类型 Kotlin 写法 Java 写法 简要说明 数字 Int, Long, Float, Double, Short, Byte int, long, float, double, short, byte Kotlin 数值类型映射到相应的原生&#x2F;包装类型。 布尔 Boolean boolean 只能取 true&#x2F;false，与数字不互通。 字符 Char char 单个 Unicode 字符，支持转义序列。 字符串 String String 不可变；支持多行文本块 &quot;&quot;&quot;...&quot;&quot;&quot;。 数组 Array&lt;T&gt;, IntArray 等 T[] 提供原始类型专用数组如 IntArray、ByteArray。 无符号整型 UInt, ULong, UShort, UByte 无 编译时检查范围，运行时越界抛 IllegalArgumentException。 2. 语法对照 功能 Java 写法 Kotlin 写法 简要说明 变量定义 int x = 10; final String name = &quot;Tom&quot;; var x = 10 val name = &quot;Tom&quot; var 可变，val 只读；类型由编译器推断。 类 + 构造 public class P &#123; P(String n) &#123; ... &#125; &#125; class P(val name: String) 主构造中声明属性，自动生成字段 &amp; 访问器。 数据类 手动写字段&#x2F;构造&#x2F;equals&#x2F;toString data class User(val id: Int, val n: String) data 自动生成常用方法 &amp; 解构组件。 函数定义 public int sum(int a, int b) &#123; return a + b; &#125; fun sum(a: Int, b: Int) = a + b 表达式函数可省略大括号和 return。 空安全 if (s != null) len = s.length(); else len = 0; val len = s?.length ?: 0 String? 可空，?. 与 ?: 插入编译期空检查。 分支匹配 switch(x) &#123; case 1: ... &#125; when(x) &#123; 1 -&gt; ...; else -&gt; ... &#125; when 是表达式，支持范围 &amp; 任意对象比较。 循环 &amp; 集合 for(int i=0;i&lt;10;i++)``list.stream().filter() for(i in 0 until 10)``list.filter&#123;&#125; 0 until 生成 IntRange；集合链式调用基于扩展函数。 单例 class S &#123; private static S i=new S(); … &#125; object S &#123; fun foo() &#123;&#125; &#125; object 编译时生成线程安全单例，无需额外样板。 3. 独有亮点 特性 示例 简要说明 默认 &amp; 命名参数 fun g(msg: String = &quot;Hi&quot;, name: String = &quot;You&quot;) g(name=&quot;Tom&quot;) 编译器生成默认方法，命名参数避免重载歧义。 扩展函数 fun String.ex() = uppercase() 编译后为静态方法，第一个参数是接收者，调用如成员方法。 解构声明 val (x, y) = Point(1, 2) data class 自动生成 componentN()，一行取多值。 密封类 sealed class R; data class Ok(val d: String): R(); object Err: R() 限定子类范围，when 可做穷尽检查。 内联函数 inline fun &lt;T&gt; m(b: ()-&gt;T): T &#123; … &#125; 在调用处展开函数体，减少高阶函数的运行时开销。 集合构造器 listOf(1, 2), mutableListOf(&quot;A&quot;), mapOf(&quot;a&quot; to 1) 内建集合工厂函数，语法简洁；to 表示键值对。 数组构造器 arrayOf(1, 2), intArrayOf(1, 2) 支持泛型与原始类型数组，避免装箱。 表达式返回值 val max = if (a &gt; b) a else b val result = try &#123; … &#125; catch &#123; … &#125; if、when、try 都是表达式，可直接赋值。 区间语法 &amp; 步进 for (i in 1..5), for (j in 1 until 5 step 2) .. 表闭区间，until 表半开，step 控制步长。 字符串模板 &quot;Hello, $name&quot; &quot;Length: $&#123;s.length&#125;&quot; $变量 可直接拼接，复杂表达式用 $&#123;&#125;。 Lambda 尾随语法 list.filter &#123; it &gt; 0 &#125;.map &#123; it * 2 &#125; 大括号可直接跟随函数调用，链式语法自然、简洁。 4. 常用标准库函数 函数 用法示例 简要说明 let user?.let &#123; print(it.name) &#125; 非空时执行块，it 引用原对象。 apply User().apply &#123; age = 18 &#125; 在对象上执行块并返回该对象，常用于初始化。 also list.also &#123; println(&quot;init&quot;) &#125; 执行副作用并返回对象，常用于日志 &#x2F; 调试。 run val r = run &#123; compute(); result &#125; 无接收者的作用域块，返回最后一行结果。 with with(cfg) &#123; load(); validate() &#125; 对象上下文块，this 指向接收者，返回结果。 takeIf str.takeIf &#123; it.isNotBlank() &#125; 条件为真返回对象，否则返回 null。 sequence sequenceOf(1,2,3).map &#123; … &#125; 惰性集合处理，适合大规模数据管道。 5. 类型系统对比 功能 Java 写法 Kotlin 写法 简要说明 泛型 List&lt;String&gt; List&lt;String&gt; 支持协变 &#x2F; 逆变（out &#x2F; in）和 reified 泛型函数。 类型别名 无 typealias Name = String 简化复杂类型声明。 枚举类 enum Color &#123; RED, GREEN &#125; enum class Color &#123; RED, GREEN &#125; 支持在枚举中定义属性 &amp; 方法。 内联类 无 @JvmInline value class USD(val amount: Int) 编译时包装或展开，零开销封装。 6. 类型检测与转换 功能 Java 写法 Kotlin 写法 简要说明 类型检查 if (obj instanceof String) if (obj is String) is 后自动智能转换，无需显式强转。 安全转换 (String) obj obj as String &#x2F; obj as? String as? 安全转换失败返回 null。 基本转换 Integer.parseInt(str) str.toInt(), toDouble(), toLong() 通过扩展函数提供常见类型转换。 7. 控制流程 &amp; 异常 功能 Java 写法 Kotlin 写法 简要说明 条件 &amp; 循环 if, switch, for, while, do-while if, when, for, while, do-while when 可做表达式，替代 switch。 返回 &amp; 跳转 return, break, continue, throw 同 Java 支持在 lambda 中局部返回，如 return@label。 异常处理 try-catch-finally, checked exception try-catch-finally，无 checked exception Kotlin 不区分受检异常，简化错误处理。 8. 包与导入 功能 Java 写法 Kotlin 写法 简要说明 包声明 package com.example; package com.example 不需要分号。 导入 import java.util.List; import java.util.List 支持导入顶层函数和属性。 别名导入 无 import foo.Bar as Baz 解决命名冲突或简化引用。 9. 面向对象相关 功能 Java 写法 Kotlin 写法 简要说明 接口默认实现 default void f() &#123;&#125; 接口中可直接写方法体 接口内方法可有实现，无需关键字。 抽象类 abstract class Shape &#123; … &#125; abstract class Shape &#123; … &#125; 抽象成员不需再加 abstract 前缀。 继承 &amp; 覆写 class A extends B &#123; @Override … &#125; class A : B() &#123; override fun … &#125; 用 : 表示继承，override 必显式标注。 可见性修饰符 public&#x2F;protected&#x2F;private public&#x2F;protected&#x2F;private&#x2F;internal internal 表示同模块内可见。 内部类 class Outer &#123; class Inner &#123;&#125; &#125; class Outer &#123; inner class Inner &#123;&#125; &#125; 默认是静态嵌套，加 inner 变为非静态内部类。 10. 协程 vs 多线程 场景 Java 写法（线程&#x2F;异步） Kotlin 写法（协程） 简要说明 启动任务 new Thread(() -&gt; work()).start(); GlobalScope.launch &#123; work() &#125; 协程更轻量、省资源，适合大规模并发。 异步返回值 Future&lt;Integer&gt; f = exec.submit(...); val result = async &#123; compute() &#125;.await() 内建 async/await，语义更清晰。 延迟执行 Thread.sleep(1000) delay(1000) 非阻塞挂起，不占用线程。 结构化并发 手动管理线程池和生命周期 coroutineScope &#123; … &#125; 协程作用域自动管理生命周期，避免泄漏。 📦 11. 集合操作对比 功能 Java 写法（Stream） Kotlin 写法（扩展函数） 简要说明 过滤 list.stream().filter(x -&gt; x &gt; 0).collect(...) list.filter &#123; it &gt; 0 &#125; 语法简洁，链式调用更直观。 映射 list.stream().map(x -&gt; x * 2).collect(...) list.map &#123; it * 2 &#125; Lambda 简洁，扩展函数无额外依赖。 分组 Collectors.groupingBy(...) list.groupBy &#123; it.key &#125; 直接返回 Map&lt;K, List&lt;V&gt;&gt;，更易读。 排序 list.sort(Comparator.comparing(...)) list.sortedBy &#123; it.prop &#125; 函数式排序，链式可读性好。 聚合 reduce, sum, collect reduce, sumOf, fold 内建多种聚合函数，常用时无需额外导入。 参考：Kotlin内核编程Kotlin 语言参考文档深入理解Kotlin协程有没有 Kotlin 讲协程比较好的书籍或博客连载Kotlin 官方文档 中文版","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"JVM","slug":"JVM","permalink":"https://www.nosuchfield.com/tags/JVM/"},{"name":"Kotlin","slug":"Kotlin","permalink":"https://www.nosuchfield.com/tags/Kotlin/"}]},{"title":"ComfyUI的操作与使用","slug":"ComfyUI-Operation-and-Usage","date":"2025-03-31T11:21:10.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2025/03/31/ComfyUI-Operation-and-Usage/","link":"","permalink":"https://www.nosuchfield.com/2025/03/31/ComfyUI-Operation-and-Usage/","excerpt":"","text":"简单起见，又或者是没有N卡或者显卡的配置比较低，可以使用腾讯云HAI直接搭建ComfyUI服务。 入门使用可以先clear掉当前的workflow，之后右键新建模块。 首先需要新建一个采样器（KSampler），采样器的配置如下： 参数 值 说明 seed 0 随机种子，控制生成结果的随机性。相同种子会产生相同结果 control_after_generate randomize 生成后种子控制方式：randomize(随机化)、increment(递增)、decrement(递减)、fixed(固定) steps 20 采样步数，通常15-30步较为合适。步数越多质量越好但耗时更长 cfg 8.000 CFG引导强度，控制AI对提示词的遵循程度。范围1-20，推荐7-12 sampler_name euler 采样算法：euler、euler_a、dpm_2、dpm_2_ancestral、lms、ddim等 scheduler normal 调度器类型：normal、karras、exponential、sgm_uniform等 denoise 1.000 去噪强度，1.0为完全去噪，0.0为不去噪。图生图时可调节此值 采样器的model可以选择Load Checkpoint。positive是正向提示词，negative是反向提示词，都可以选择CLIPTextEncode。为了方便区分，可以给prompt修改一个有意义的标题。latent_image可以设置图片的选项，例如EmptyLatentImage。LATENT可以选择VAE Decode模块，然后可以添加一个图片预览模块。 多图合并，使用同一个背景输出大小设置为图片背景总大小。图片正向prompt输出拖拽，然后添加Conditioning(Set Area)节点，在其中设置图片的大小和图片在背景画布中的位置。使用ConditioningCombine节点，合并多个Conditioning节点，之后把合并节点的输出连接到KSample。但是，如果是单纯两个prompt直接连到采样器，两张图片会很割裂。解决办法是再新建一个prompt，之后把两张图片的输出和这个prompt使用一个combine进行合并，之后合并结果再输出到采样器。 模型CheckPoints（检查点模型）是Stable Diffusion的核心基础模型，包含了完整的图像生成能力。它是一个预训练的神经网络模型，决定了生成图像的整体风格、质量和特征。 常用CheckPoints模型类型： 模型类型 特点 适用场景 推荐模型 SD 1.5系列 经典基础模型，兼容性好 入门学习，插件丰富 v1-5-pruned-emaonly.ckpt SDXL系列 更高分辨率，质量更好 高质量出图 sd_xl_base_1.0.safetensors 写实人像 专注真实人物生成 人像摄影、写实风格 realisticVisionV60B1_v51VAE.safetensors 动漫二次元 卡通动漫风格 动漫插画、角色设计 anything-v5-PrtRE.safetensors 艺术绘画 艺术风格强烈 创意艺术、概念设计 dreamshaper_8.safetensors 建筑风景 专注场景和建筑 建筑设计、风景画 architectureExterior_v40.safetensors 模型文件格式：.ckpt：早期格式，文件较大；.safetensors：更安全的格式，加载速度快，推荐使用；.pt：PyTorch原生格式 使用LoRA模型：在主模型的MODEL节点拖拽，可以新增LoRA节点，之后把LoRA的模型替代主模型连接到采样器上面。同样的，主模型的CLIP需要连接到LoRA上面，之后把正向prompt连接到LoRA就可以了（反向prompt还是连接在CheckPoint的CLIP上面）。 LoRA和Checkpoint的定义区别如下 名称 定义 Checkpoint 模型的权重文件，是模型在某个训练时刻的完整状态的保存，通常包括整个模型的参数、优化器状态等。 LoRA（Low-Rank Adaptation） 一种参数高效的微调方法，不直接修改原始模型参数，而是在模型某些层中引入少量可训练参数，从而在不改变大模型主体的前提下实现微调。 它们有着各自不同的使用目的 比较项 Checkpoint LoRA 目标 保存和恢复训练过程或完整模型 节省参数、内存，快速高效地微调大模型 应用场景 模型训练中断恢复、部署模型 微调大语言模型、个性化调整、插件式部署 文件大小 通常非常大（几百MB到几十GB） 非常小（几MB到几十MB） 实际操作首先我们打开腾讯云的HAI界面，并新建一个ComfyUI的服务 服务创建好了之后我们打开对应的ComfyUI服务地址，可以看到如下界面 这里我们禁用掉新版UI，并且安装Crystools节点 之后我们可以看到界面会变成如下样式 随后我们下载并安装realisticVision模型 创建好服务的密码等信息会通过站内信的方式进行发送，可以使用这些信息登录到机器上，之后在机器上面下载realisticVision模型 在ComfyUI/models/checkpoints/文件夹里面下载该模型 1234567891011121314(base) root@VM-0-5-ubuntu:~# cd ComfyUI/models/checkpoints/(base) root@VM-0-5-ubuntu:~/ComfyUI/models/checkpoints# wget &#x27;https://huggingface.co/moiu2998/mymo/resolve/3c3093fa083909be34a10714c93874ce5c9dabc4/realisticVisionV60B1_v51VAE.safetensors&#x27;--2025-06-03 02:31:39-- https://huggingface.co/moiu2998/mymo/resolve/3c3093fa083909be34a10714c93874ce5c9dabc4/realisticVisionV60B1_v51VAE.safetensorsResolving huggingface.co (huggingface.co)... 3.164.110.3, 3.164.110.114, 3.164.110.77, ...Connecting to huggingface.co (huggingface.co)|3.164.110.3|:443... connected.HTTP request sent, awaiting response... 302 Found...HTTP request sent, awaiting response... 200 OKLength: 4265096996 (4.0G) [binary/octet-stream]Saving to: &#x27;realisticVisionV60B1_v51VAE.safetensors&#x27;realisticVisionV60B1_v51VAE.safetensors 100%[=====================================================================================================================================&gt;] 3.97G 11.3MB/s in 5m 57s 2025-06-03 02:37:35 (11.4 MB/s) - &#x27;realisticVisionV60B1_v51VAE.safetensors&#x27; saved [4265096996/4265096996] 之后点击Refresh按钮，可以在checkpoint节点里面看到我们刚刚下载的模型 我们使用这个模型根据一些prompt可以生成一张福特福克斯的图片 刚刚我们的模型是在huggingface上面下载的，civitai同样也可以下载模型 使用命令下载civitai的模型，这里需要注册账号生成token并把token填入到下载链接中 123456789(base) root@VM-0-5-ubuntu:~/ComfyUI/models/checkpoints# wget --content-disposition &#x27;https://civitai.com/api/download/models/501240?type=Model&amp;format=SafeTensor&amp;size=pruned&amp;fp=fp16&amp;token=$&#123;API_TOKEN&#125;&#x27;...HTTP request sent, awaiting response... 200 OKLength: 2132625894 (2.0G)Saving to: &#x27;realisticVisionV60B1_v51HyperVAE.safetensors&#x27;realisticVisionV60B1_v51HyperVAE.safetensors 100%[=====================================================================================================================================&gt;] 1.99G 11.5MB/s in 2m 59s 2025-06-03 02:54:00 (11.3 MB/s) - &#x27;realisticVisionV60B1_v51HyperVAE.safetensors&#x27; saved [2132625894/2132625894] 刷新之后同样可以看到新的模型信息 之后我们使用civitai上面的推荐配置 使用推荐配置即可生成相似的图片 实际生成的图片如下，ComfyUI生成的图片会包含生成图片时用到的整个工作流，如果需要使用相同的工作流只需要在ComfyUI中导入该图片即可 如上图片的信息如下 prompt 1&#123;&quot;4&quot;: &#123;&quot;inputs&quot;: &#123;&quot;ckpt_name&quot;: &quot;realisticVisionV60B1_v51HyperVAE.safetensors&quot;&#125;, &quot;class_type&quot;: &quot;CheckpointLoaderSimple&quot;, &quot;_meta&quot;: &#123;&quot;title&quot;: &quot;Load Checkpoint&quot;&#125;&#125;, &quot;5&quot;: &#123;&quot;inputs&quot;: &#123;&quot;width&quot;: 512, &quot;height&quot;: 512, &quot;batch_size&quot;: 1&#125;, &quot;class_type&quot;: &quot;EmptyLatentImage&quot;, &quot;_meta&quot;: &#123;&quot;title&quot;: &quot;Empty Latent Image&quot;&#125;&#125;, &quot;6&quot;: &#123;&quot;inputs&quot;: &#123;&quot;text&quot;: &quot;instagram photo, front shot, portrait photo of a 24 y.o woman, wearing dress, beautiful face, cinematic shot, dark shot&quot;, &quot;clip&quot;: [&quot;4&quot;, 1]&#125;, &quot;class_type&quot;: &quot;CLIPTextEncode&quot;, &quot;_meta&quot;: &#123;&quot;title&quot;: &quot;CLIP Text Encode (Prompt)&quot;&#125;&#125;, &quot;7&quot;: &#123;&quot;inputs&quot;: &#123;&quot;text&quot;: &quot;(nsfw, naked, nude, deformed iris, deformed pupils, semi-realistic, cgi, 3d, render, sketch, cartoon, drawing, anime, mutated hands and fingers:1.4), (deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, disconnected limbs, mutation, mutated, ugly, disgusting, amputation&quot;, &quot;clip&quot;: [&quot;4&quot;, 1]&#125;, &quot;class_type&quot;: &quot;CLIPTextEncode&quot;, &quot;_meta&quot;: &#123;&quot;title&quot;: &quot;CLIP Text Encode (Prompt)&quot;&#125;&#125;, &quot;8&quot;: &#123;&quot;inputs&quot;: &#123;&quot;samples&quot;: [&quot;10&quot;, 0], &quot;vae&quot;: [&quot;4&quot;, 2]&#125;, &quot;class_type&quot;: &quot;VAEDecode&quot;, &quot;_meta&quot;: &#123;&quot;title&quot;: &quot;VAE Decode&quot;&#125;&#125;, &quot;9&quot;: &#123;&quot;inputs&quot;: &#123;&quot;filename_prefix&quot;: &quot;ComfyUI&quot;, &quot;images&quot;: [&quot;8&quot;, 0]&#125;, &quot;class_type&quot;: &quot;SaveImage&quot;, &quot;_meta&quot;: &#123;&quot;title&quot;: &quot;Save Image&quot;&#125;&#125;, &quot;10&quot;: &#123;&quot;inputs&quot;: &#123;&quot;add_noise&quot;: &quot;enable&quot;, &quot;noise_seed&quot;: 794547607621135, &quot;steps&quot;: 6, &quot;cfg&quot;: 1.5, &quot;sampler_name&quot;: &quot;dpmpp_sde&quot;, &quot;scheduler&quot;: &quot;normal&quot;, &quot;start_at_step&quot;: 0, &quot;end_at_step&quot;: 10000, &quot;return_with_leftover_noise&quot;: &quot;disable&quot;, &quot;model&quot;: [&quot;4&quot;, 0], &quot;positive&quot;: [&quot;6&quot;, 0], &quot;negative&quot;: [&quot;7&quot;, 0], &quot;latent_image&quot;: [&quot;5&quot;, 0]&#125;, &quot;class_type&quot;: &quot;KSamplerAdvanced&quot;, &quot;_meta&quot;: &#123;&quot;title&quot;: &quot;KSampler (Advanced)&quot;&#125;&#125;&#125; workflow 1&#123;&quot;last_node_id&quot;: 10, &quot;last_link_id&quot;: 16, &quot;nodes&quot;: [&#123;&quot;id&quot;: 9, &quot;type&quot;: &quot;SaveImage&quot;, &quot;pos&quot;: [1451, 189], &quot;size&quot;: [210, 270], &quot;flags&quot;: &#123;&#125;, &quot;order&quot;: 6, &quot;mode&quot;: 0, &quot;inputs&quot;: [&#123;&quot;name&quot;: &quot;images&quot;, &quot;type&quot;: &quot;IMAGE&quot;, &quot;link&quot;: 9, &quot;label&quot;: &quot;images&quot;&#125;], &quot;outputs&quot;: [], &quot;properties&quot;: &#123;&#125;, &quot;widgets_values&quot;: [&quot;ComfyUI&quot;]&#125;, &#123;&quot;id&quot;: 4, &quot;type&quot;: &quot;CheckpointLoaderSimple&quot;, &quot;pos&quot;: [26, 474], &quot;size&quot;: [315, 98], &quot;flags&quot;: &#123;&#125;, &quot;order&quot;: 0, &quot;mode&quot;: 0, &quot;inputs&quot;: [], &quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;MODEL&quot;, &quot;type&quot;: &quot;MODEL&quot;, &quot;links&quot;: [10], &quot;slot_index&quot;: 0, &quot;label&quot;: &quot;MODEL&quot;&#125;, &#123;&quot;name&quot;: &quot;CLIP&quot;, &quot;type&quot;: &quot;CLIP&quot;, &quot;links&quot;: [3, 5], &quot;slot_index&quot;: 1, &quot;label&quot;: &quot;CLIP&quot;&#125;, &#123;&quot;name&quot;: &quot;VAE&quot;, &quot;type&quot;: &quot;VAE&quot;, &quot;links&quot;: [8], &quot;slot_index&quot;: 2, &quot;label&quot;: &quot;VAE&quot;&#125;], &quot;properties&quot;: &#123;&quot;Node name for S&amp;R&quot;: &quot;CheckpointLoaderSimple&quot;&#125;, &quot;widgets_values&quot;: [&quot;realisticVisionV60B1_v51HyperVAE.safetensors&quot;]&#125;, &#123;&quot;id&quot;: 7, &quot;type&quot;: &quot;CLIPTextEncode&quot;, &quot;pos&quot;: [413, 389], &quot;size&quot;: [425.27801513671875, 180.6060791015625], &quot;flags&quot;: &#123;&#125;, &quot;order&quot;: 3, &quot;mode&quot;: 0, &quot;inputs&quot;: [&#123;&quot;name&quot;: &quot;clip&quot;, &quot;type&quot;: &quot;CLIP&quot;, &quot;link&quot;: 5, &quot;label&quot;: &quot;clip&quot;&#125;], &quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;CONDITIONING&quot;, &quot;type&quot;: &quot;CONDITIONING&quot;, &quot;links&quot;: [12], &quot;slot_index&quot;: 0, &quot;label&quot;: &quot;CONDITIONING&quot;&#125;], &quot;properties&quot;: &#123;&quot;Node name for S&amp;R&quot;: &quot;CLIPTextEncode&quot;&#125;, &quot;widgets_values&quot;: [&quot;(nsfw, naked, nude, deformed iris, deformed pupils, semi-realistic, cgi, 3d, render, sketch, cartoon, drawing, anime, mutated hands and fingers:1.4), (deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, disconnected limbs, mutation, mutated, ugly, disgusting, amputation&quot;]&#125;, &#123;&quot;id&quot;: 8, &quot;type&quot;: &quot;VAEDecode&quot;, &quot;pos&quot;: [1209, 188], &quot;size&quot;: [210, 46], &quot;flags&quot;: &#123;&#125;, &quot;order&quot;: 5, &quot;mode&quot;: 0, &quot;inputs&quot;: [&#123;&quot;name&quot;: &quot;samples&quot;, &quot;type&quot;: &quot;LATENT&quot;, &quot;link&quot;: 16, &quot;label&quot;: &quot;samples&quot;&#125;, &#123;&quot;name&quot;: &quot;vae&quot;, &quot;type&quot;: &quot;VAE&quot;, &quot;link&quot;: 8, &quot;label&quot;: &quot;vae&quot;&#125;], &quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;IMAGE&quot;, &quot;type&quot;: &quot;IMAGE&quot;, &quot;links&quot;: [9], &quot;slot_index&quot;: 0, &quot;label&quot;: &quot;IMAGE&quot;&#125;], &quot;properties&quot;: &#123;&quot;Node name for S&amp;R&quot;: &quot;VAEDecode&quot;&#125;, &quot;widgets_values&quot;: []&#125;, &#123;&quot;id&quot;: 10, &quot;type&quot;: &quot;KSamplerAdvanced&quot;, &quot;pos&quot;: [862.98046875, 167.984375], &quot;size&quot;: [315, 334], &quot;flags&quot;: &#123;&#125;, &quot;order&quot;: 4, &quot;mode&quot;: 0, &quot;inputs&quot;: [&#123;&quot;name&quot;: &quot;model&quot;, &quot;type&quot;: &quot;MODEL&quot;, &quot;link&quot;: 10, &quot;label&quot;: &quot;model&quot;&#125;, &#123;&quot;name&quot;: &quot;positive&quot;, &quot;type&quot;: &quot;CONDITIONING&quot;, &quot;link&quot;: 11, &quot;label&quot;: &quot;positive&quot;&#125;, &#123;&quot;name&quot;: &quot;negative&quot;, &quot;type&quot;: &quot;CONDITIONING&quot;, &quot;link&quot;: 12, &quot;label&quot;: &quot;negative&quot;&#125;, &#123;&quot;name&quot;: &quot;latent_image&quot;, &quot;type&quot;: &quot;LATENT&quot;, &quot;link&quot;: 15, &quot;label&quot;: &quot;latent_image&quot;&#125;], &quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;LATENT&quot;, &quot;type&quot;: &quot;LATENT&quot;, &quot;links&quot;: [16], &quot;label&quot;: &quot;LATENT&quot;&#125;], &quot;properties&quot;: &#123;&quot;Node name for S&amp;R&quot;: &quot;KSamplerAdvanced&quot;&#125;, &quot;widgets_values&quot;: [&quot;enable&quot;, 794547607621135, &quot;randomize&quot;, 6, 1.5, &quot;dpmpp_sde&quot;, &quot;normal&quot;, 0, 10000, &quot;disable&quot;]&#125;, &#123;&quot;id&quot;: 6, &quot;type&quot;: &quot;CLIPTextEncode&quot;, &quot;pos&quot;: [415, 186], &quot;size&quot;: [422.84503173828125, 164.31304931640625], &quot;flags&quot;: &#123;&#125;, &quot;order&quot;: 2, &quot;mode&quot;: 0, &quot;inputs&quot;: [&#123;&quot;name&quot;: &quot;clip&quot;, &quot;type&quot;: &quot;CLIP&quot;, &quot;link&quot;: 3, &quot;label&quot;: &quot;clip&quot;&#125;], &quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;CONDITIONING&quot;, &quot;type&quot;: &quot;CONDITIONING&quot;, &quot;links&quot;: [11], &quot;slot_index&quot;: 0, &quot;label&quot;: &quot;CONDITIONING&quot;&#125;], &quot;properties&quot;: &#123;&quot;Node name for S&amp;R&quot;: &quot;CLIPTextEncode&quot;&#125;, &quot;widgets_values&quot;: [&quot;instagram photo, front shot, portrait photo of a 24 y.o woman, wearing dress, beautiful face, cinematic shot, dark shot&quot;]&#125;, &#123;&quot;id&quot;: 5, &quot;type&quot;: &quot;EmptyLatentImage&quot;, &quot;pos&quot;: [473, 609], &quot;size&quot;: [315, 106], &quot;flags&quot;: &#123;&#125;, &quot;order&quot;: 1, &quot;mode&quot;: 0, &quot;inputs&quot;: [], &quot;outputs&quot;: [&#123;&quot;name&quot;: &quot;LATENT&quot;, &quot;type&quot;: &quot;LATENT&quot;, &quot;links&quot;: [15], &quot;slot_index&quot;: 0, &quot;label&quot;: &quot;LATENT&quot;&#125;], &quot;properties&quot;: &#123;&quot;Node name for S&amp;R&quot;: &quot;EmptyLatentImage&quot;&#125;, &quot;widgets_values&quot;: [512, 512, 1]&#125;], &quot;links&quot;: [[3, 4, 1, 6, 0, &quot;CLIP&quot;], [5, 4, 1, 7, 0, &quot;CLIP&quot;], [8, 4, 2, 8, 1, &quot;VAE&quot;], [9, 8, 0, 9, 0, &quot;IMAGE&quot;], [10, 4, 0, 10, 0, &quot;MODEL&quot;], [11, 6, 0, 10, 1, &quot;CONDITIONING&quot;], [12, 7, 0, 10, 2, &quot;CONDITIONING&quot;], [15, 5, 0, 10, 3, &quot;LATENT&quot;], [16, 10, 0, 8, 0, &quot;LATENT&quot;]], &quot;groups&quot;: [], &quot;config&quot;: &#123;&#125;, &quot;extra&quot;: &#123;&quot;ds&quot;: &#123;&quot;scale&quot;: 1, &quot;offset&quot;: [2, 0]&#125;, &quot;node_versions&quot;: &#123;&quot;comfy-core&quot;: &quot;0.3.14&quot;&#125;&#125;, &quot;version&quot;: 0.4&#125; 使用LoRA首先我们下载sd_xl_base_1.0模型，LoRA需要使用与之对应的基础模型 12cd ComfyUI/models/checkpoints/wget &#x27;https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/resolve/main/sd_xl_base_1.0.safetensors&#x27; 之后我们再下载LoRA模型，这里我们使用的是Expressionism Cartoons模型 12345678910(base) root@VM-0-5-ubuntu:~# cd ComfyUI/models/loras/(base) root@VM-0-5-ubuntu:~/ComfyUI/models/loras# wget --content-disposition &#x27;https://civitai.com/api/download/models/1608668?type=Model&amp;format=SafeTensor&amp;token=$&#123;API_TOKEN&#125;&#x27;...HTTP request sent, awaiting response... 200 OKLength: 228489836 (218M) [application/octet-stream]Saving to: &#x27;Expressionism_Cartoons.safetensors&#x27;Expressionism_Cartoons.safetensors 100%[=====================================================================================================================================&gt;] 217.90M 11.5MB/s in 19s 2025-06-03 09:32:01 (11.7 MB/s) - &#x27;Expressionism_Cartoons.safetensors&#x27; saved [228489836/228489836] 之后我们根据LoRA模型在Civitai提供的推荐设置，就可以生成对应的图片了 生成的图片如下 使用ControlNet首先需要安装comfyui_controlnet_aux节点，之后还要下载模型。ContrlNet模型是分版本的，与基础大模型要对应。如果基础模型是SD1.5，ControlNet模型也要选择SD1.5。我们从地址 https://huggingface.co/lllyasviel/ControlNet-v1-1/tree/main 可以下载模型，模型的不同类型含义如下 文件名 控制类型 输入图像类型 用途说明 推荐用途 control_v11p_sd15_canny.pth Canny Edge（边缘） 照片或图像 提取轮廓边缘 建筑、物体结构控制 control_v11p_sd15_depth.pth Depth（深度） 照片或图像 模拟三维深度结构 景深、构图调整 control_v11p_sd15_inpaint.pth Inpainting（重绘） 遮挡&#x2F;蒙版图像 区域重绘 修图、局部创作 control_v11p_sd15_lineart.pth Line Art（线稿） 动漫风图像 提取黑白线稿 动漫风格建模 control_v11p_sd15_mlsd.pth MLSD（直线检测） 建筑&#x2F;结构图像 提取直线 建筑、平面图等直线构图 control_v11p_sd15_normalbae.pth Normal Map（法线图） 三维物体图像 表面结构建模 高级3D拟合 control_v11p_sd15_openpose.pth OpenPose（姿态） 人物图像 骨架动作识别 指定人物动作&#x2F;舞姿 control_v11p_sd15_scribble.pth Scribble（手绘草图） 简笔画、草图 草图转图像 草图创作、简笔画上色 control_v11p_sd15_seg.pth Semantic Segmentation（分割图） 分割图（每块颜色代表一种物体） 提供语义结构控制 多物体控制，如人物+背景 control_v11p_sd15_softedge.pth Soft Edge（柔边缘） 模糊边缘图 类似 Canny，但更柔和 人像、柔边轮廓控制 control_v11p_sd15s2_lineart_anime.pth Anime Line Art 动漫线稿 动漫草图 → 动漫图 高拟真二次元创作 我们这里只需要下载我们所需要的模型即可 12345cd ComfyUI/models/controlnet/wget &#x27;https://huggingface.co/lllyasviel/ControlNet-v1-1/resolve/main/control_v11f1p_sd15_depth.pth&#x27;wget &#x27;https://huggingface.co/lllyasviel/ControlNet-v1-1/resolve/main/control_v11p_sd15_canny.pth&#x27;wget &#x27;https://huggingface.co/lllyasviel/ControlNet-v1-1/resolve/main/control_v11p_sd15_openpose.pth&#x27;wget &#x27;https://huggingface.co/lllyasviel/ControlNet-v1-1/resolve/main/control_v11p_sd15_scribble.pth&#x27; 下载好了模型之后我们先新建一个默认工作流。之后创建如下节点： 加载原始输入图像，作为ControlNet的参考图像 Add Node -&gt; image -&gt; Load Image 使用Canny边缘检测算法提取输入图像的边缘轮廓，生成黑白边缘图 Add Node -&gt; ControlNet Preprocessors -&gt; Line Extractors -&gt; Canny Edge 加载ControlNet预训练模型文件，如control_v11p_sd15_canny.pth等 Add Node -&gt; loaders -&gt; Load ControlNet Model 将ControlNet模型应用到条件编码上，结合边缘图控制生成过程 Add Node -&gt; conditioning -&gt; controlnet -&gt; Apply ControlNet 预览最终生成的图像结果 Add Node -&gt; image -&gt; Preview Image 建好了工作节点之后，我们可以使用Canny Edge为图片生成线图 之后我们对工作流进行整合，从而根据原图生成类似的图片 实际生成的图片如下 使用SDXL版本的ControlNetSDXL提供了多合一的ControlNet模型，不再需要下载多个文件，只需要使用一个模型即可，能有效节省磁盘空间。 cd ComfyUI/models/controlnet/ wget &#39;https://huggingface.co/xinsir/controlnet-union-sdxl-1.0/resolve/main/diffusion_pytorch_model_promax.safetensors&#39; 下载好了之后，我们还是先加载默认工作流，之后创建ControlNet的相关节点。在创建的时候可以使用鼠标左键快速双击，然后在输入框中搜索需要使用的节点。 因为这里需要使用SDXL的模型，所以我们还是使用sd_xl_base_1.0模型，并且搭配LoRA一起使用 参考一口气学ComfyUI系列教程ComfyUI基础教程","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://www.nosuchfield.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"ComfyUI","slug":"ComfyUI","permalink":"https://www.nosuchfield.com/tags/ComfyUI/"},{"name":"AI","slug":"AI","permalink":"https://www.nosuchfield.com/tags/AI/"},{"name":"图像生成","slug":"图像生成","permalink":"https://www.nosuchfield.com/tags/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/"},{"name":"Stable Diffusion","slug":"Stable-Diffusion","permalink":"https://www.nosuchfield.com/tags/Stable-Diffusion/"}]},{"title":"ComfyUI简介","slug":"ComfyUI-Introduction","date":"2025-03-30T22:47:59.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2025/03/30/ComfyUI-Introduction/","link":"","permalink":"https://www.nosuchfield.com/2025/03/30/ComfyUI-Introduction/","excerpt":"","text":"ComfyUI 是一个基于节点工作流的现代化 Stable Diffusion 图形用户界面。与传统的WebUI不同，ComfyUI采用节点连接的方式来构建图像生成工作流，让用户能够更精确地控制整个生成过程。 Stable Diffusion 是一款开源的 AI 图像生成技术，基于扩散模型构建。用户可以通过 Stable Diffusion WebUI 或 ComfyUI 等开源工具来运行它，只需下载相应的模型文件（通常为 .ckpt 或 .safetensors 格式）即可开始使用。 核心概念ComfyUI中的图像生成涉及三个关键组件，在CheckpointLoader中进行设置： CLIP：将文本提示转化为主模型可以理解的向量形式 主模型（Main MODEL）：执行实际的图像生成计算 VAE（变分自编码器）：将主模型的潜在空间格式转化为最终可视的图片 安装和配置1. 下载和安装从 GitHub 下载对应版本，解压后运行： run_nvidia_gpu.bat（推荐NVIDIA GPU用户） 或 ./python_embeded/python -s ComfyUI/main.py --windows-standalone-build 2. 安装管理器和插件下载 ComfyUI-Manager 放到 ComfyUI/custom_nodes 文件夹，然后在Manager的Custom Node Manager中安装所需插件（需要科学上网）。 3. 下载模型将模型文件放置到 ComfyUI/models 文件夹中： Checkpoint模型 → checkpoints 文件夹 LoRA模型 → loras 文件夹 VAE模型 → vae 文件夹 推荐入门模型：SD 1.5 模型资源网站： Hugging Face - 开源模型平台 Civitai - 社区模型分享平台 4. 网络配置如果遇到网络连接问题，可以使用SwitchHosts添加以下配置： 1234185.199.108.133 raw.githubusercontent.com185.199.108.133 user-images.githubusercontent.com185.199.108.133 avatars2.githubusercontent.com185.199.108.133 avatars1.githubusercontent.com 扩展功能ComfyUI_StoryDiffusion通过Custom Node Manager安装，然后执行以下命令安装依赖： 12./python_embeded/python.exe -m pip install -r ../ComfyUI_windows_portable/ComfyUI/custom_nodes/ComfyUI_StoryDiffusion/requirements.txt./python_embeded/python.exe -m pip install opencv-python API操作HTTP API方式 启用开发者选项 将设置好的Workflow导出为API格式 创建任务：123curl -X POST &#x27;http://127.0.0.1:8188/prompt&#x27; \\ -H &#x27;Content-Type: application/json&#x27; \\ -d &#x27;&#123;&quot;prompt&quot;: API文件的内容&#125;&#x27; 查询结果：curl -X GET &#39;http://127.0.0.1:8188/history/&#123;prompt_id&#125;&#39; 获取图片：http://127.0.0.1:8188/view?filename=ComfyUI_00003_.png&amp;subfolder&amp;type=output WebSocket方式更简单的实时通信方式： 12345// 建立连接ws://127.0.0.1:8188/ws?clientId=23333// 提交任务&#123;&quot;client_id&quot;: &quot;23333&quot;, &quot;prompt&quot;: &quot;API文件的内容&quot;&#125; 提示：如果不想折腾本地环境，可以考虑使用腾讯云等平台提供的按时计费ComfyUI服务。 参考资料官方资源 ComfyUI GitHub主页 ComfyUI示例库 官方API示例 学习教程 Stable Diffusion 小白入坑指南 ComfyUI安装和基础使用教程 ComfyUI内核节点完整解析 一口气学ComfyUI系列教程 知乎ComfyUI详解","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://www.nosuchfield.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"ComfyUI","slug":"ComfyUI","permalink":"https://www.nosuchfield.com/tags/ComfyUI/"},{"name":"AI","slug":"AI","permalink":"https://www.nosuchfield.com/tags/AI/"},{"name":"图像生成","slug":"图像生成","permalink":"https://www.nosuchfield.com/tags/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/"}]},{"title":"利用whisper为视频自动生成字幕","slug":"Automatically-generate-subtitles-for-videos-with-whisper","date":"2025-01-02T10:37:24.000Z","updated":"2025-08-22T15:42:13.331Z","comments":true,"path":"2025/01/02/Automatically-generate-subtitles-for-videos-with-whisper/","link":"","permalink":"https://www.nosuchfield.com/2025/01/02/Automatically-generate-subtitles-for-videos-with-whisper/","excerpt":"","text":"whisper是一个由openai开发的通用语言识别模型，我们可以使用它来为视频自动创建字幕。 环境安装为了加速，我们需要使用GPU来进行计算，因此需要安装基于CUDA的pytorch。首先我们需要安装Miniconda，这里安装的时候直接点击下一步即可。 安装完毕之后，我们需要创建一个新的环境，这里我们创建一个名为whisper的环境： conda create -n whisper python=3.8 conda activate whisper 1. 安装CUDA安装好了Miniconda之后，我们需要安装CUDA，执行nvidia-smi $ nvidia-smi Thu Jan 2 11:49:53 2025 +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 560.94 Driver Version: 560.94 CUDA Version: 12.6 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Driver-Model | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA GeForce GTX 1060 6GB WDDM | 00000000:01:00.0 On | N/A | | 0% 39C P8 10W / 120W | 505MiB / 6144MiB | 0% Default | | | | N/A | +-----------------------------------------+------------------------+----------------------+ 通过这个命令可以看到Driver Version: 560.94和CUDA Version: 12.6，因此我们需要安装12.6版本的CUDA，更加详细的版本对照表在这里。在安装的时候可以选择自定义安装选项，一般来说只要勾选CUDA下的 Development和Runtime即可。 安装完毕之后执行命令nvcc -V查看CUDA版本： $ nvcc -V nvcc: NVIDIA (R) Cuda compiler driver Copyright (c) 2005-2024 NVIDIA Corporation Built on Thu_Sep_12_02:55:00_Pacific_Daylight_Time_2024 Cuda compilation tools, release 12.6, V12.6.77 Build cuda_12.6.r12.6/compiler.34841621_0 2. 安装cuDNN根据自己下载的CUDA来选择对应版本的cuDNN，下载地址在这里。下载完毕之后解压到CUDA的安装目录下，一般来说是C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA&#123;版本号&#125;，如果有重名的文件直接替换即可。 之后进入extras\\demo_suite目录，执行如下命令： bandwidthTest.exe deviceQuery.exe 如果出现了PASS的字样，说明安装成功。 3. 安装pytorch切换到我们之前创建的whisper环境，使用如下命令安装CUDA版本的pytorch： pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118 安装之后执行python命令进入python环境，执行如下代码： 12import torchtorch.cuda.is_available() 如果显示True则说明CUDA版本的pytorch安装成功。 4. 安装whisper切换到我们之前创建的whisper环境，执行如下命令安装whisper： pip install -U openai-whisper pip install setuptools-rust 安装完毕之后执行如下命令就可以使用whisper了： whisper &#39;C:/Users/raymond/Desktop/voice.aac&#39; --language zh --model turbo 如上命令表示对C:/Users/raymond/Desktop/voice.aac文件进行中文语言的识别，使用turbo模型。第一次执行该命令会下载模型文件，模型文件较大，下载时请确保网络通畅。执行结果如下 [00:00.000 --&gt; 00:03.060] 提到肉毒毒素 [00:03.060 --&gt; 00:04.540] 你会想到什么 [00:04.540 --&gt; 00:10.820] 你真的了解它吗 [00:10.820 --&gt; 00:12.540] 2017年 [00:12.540 --&gt; 00:14.180] 肉毒毒素以万能药标签 [00:14.180 --&gt; 00:15.500] 登上时代周刊方面 [00:15.500 --&gt; 00:17.280] 目前它在全球 [00:17.280 --&gt; 00:18.960] 已被应用于几十种适应症 [00:18.960 --&gt; 00:20.560] 仅在2019年 [00:20.560 --&gt; 00:23.000] 接受注射的就已超过620万例 [00:23.000 --&gt; 00:24.880] 但不要忘了 [00:24.880 --&gt; 00:26.780] 肉毒毒素更是一种神经毒素 [00:26.780 --&gt; 00:29.000] 还曾被当作生化武器使用 ... 省略 ... 生成字幕我们可以使用ffmpeg将音频从视频中提取出来，然后使用whisper生成字幕，最后使用ffmpeg将字幕添加到视频中。 使用如下命令提取音频： ffmpeg -i input.mp4 -vn -acodec copy output.aac 然后使用whisper生成字幕，我们先在pycharm中创建一个test-whisper项目，并且把python解释器设置为Miniconda创建的whisper环境。创建一个main.py文件，写入如下代码： 12345678910111213141516import whisperfrom whisper.utils import get_writerroot = &#x27;E:/&#x27;# 使用turbo模型model = whisper.load_model(&#x27;turbo&#x27;)prompt = &#x27;如果使用了中文，请使用简体中文来表示文本内容&#x27;# 选择声音文件，识别中文，并且打印详细信息result = model.transcribe(root + &#x27;output.aac&#x27;, language=&#x27;zh&#x27;, initial_prompt=prompt, verbose=True)print(result[&#x27;text&#x27;])# 保存字幕文件writer = get_writer(&#x27;srt&#x27;, root)writer(result, &#x27;output.srt&#x27;) 如上代码表示使用turbo模型，识别中文，打印详细信息，并且保存字幕文件。执行完毕之后我们可以在E:/目录下看到生成的字幕文件。 最后我们使用ffmpeg将字幕添加到视频中： ffmpeg -i input.mp4 -i output.srt -c:s mov_text -c:v copy -c:a copy output.mp4 之后我们在播放这个视频的时候就会有字幕了。 参考video-subtitle-generator基于Anaconda的pytorch-cudaCUDA与cuDNN的安装与配置ffmpeg视频合并、格式转换、截图","categories":[],"tags":[{"name":"自然语言处理","slug":"自然语言处理","permalink":"https://www.nosuchfield.com/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"机器学习","slug":"机器学习","permalink":"https://www.nosuchfield.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}]},{"title":"ffmpeg笔记","slug":"ffmpeg-notes","date":"2024-06-18T10:13:25.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2024/06/18/ffmpeg-notes/","link":"","permalink":"https://www.nosuchfield.com/2024/06/18/ffmpeg-notes/","excerpt":"","text":"合并一个文件夹内的所有视频12345find *.mp4 | sed &#x27;s:\\ :\\\\\\ :g&#x27;| sed &#x27;s/^/file /&#x27; &gt; fl.txtffmpeg -f concat -i fl.txt -c copy output.mp4// 忽略错误信息ffmpeg -safe 0 -f concat -i fl.txt -c copy output.mp4rm fl.txt 参考资源 视频压缩123456// 视频使用h.264编码，声音使用aac编码ffmpeg -i input.mp4 -vcodec h264 -acodec aac output.mp4// 视频使用h.265编码，压缩到更小文档ffmpeg -i input.mp4 -vcodec libx265 -crf 28 output.mp4// 视频使用h.264编码，保留更好的质量ffmpeg -i input.mp4 -vcodec libx264 -crf 20 output.mp4 crf越小，视频质量越高；crf越大，视频文件越小 编码参数也可以简写，从-vcodec和-acodec改为-c:v和-c:a： 123ffmpeg -i input.mp4 -c:v libx264 -crf 23 output.mp4ffmpeg -i input.mp4 -c:v libx265 -crf 28 output.mp4ffmpeg -i input.mp4 -c:v libvpx-vp9 -crf 31 -b:v 0 output.mkv 参考资源 其中AVC/H264和HEVC/H265都是软件编码，速度很慢。可以选择英伟达的硬件编码：hevc_nvenc与h264_nvenc，它们使用硬件加速，速度很快。 参考资源 使用英伟达显卡进行编码： 1ffmpeg -i video.mp4 -c:v hevc_nvenc -crf 28 output.mp4 将视频从H.264转码到H.265，花了55分钟，视频体积从3.8GB减小到430MB，效果立竿见影。转码命令：ffmpeg -i 1.mp4 -c:v libx265 -vtag hvc1 -c:a copy 1_hevc.mp4 在win10可以用scoop安装ffmpeg，更新Windows上面通过scoop安装的所有程序scoop list | foreach &#123; scoop update $_.Name &#125;。 将视频以同样的编码，按照指定时间进行裁剪 1ffmpeg -ss 00:05 -to 08:53.500 -i ./input.mp4 -c copy video.mp4 利用ffmpeg快速剪辑视频 1ffmpeg -ss 07:18 -to 13:45 -i ./aaa.mkv -c copy bbb.mkv -ss表示开始时间 -to表示结束时间 -i是输入文档 -c表示使用被剪辑视频一样的编码 bbb是输出文档的名称 合并视频和声音，视频使用原始编码，声音改为aac编码 1ffmpeg -i 1.mp4 -i 1.opus -c:v copy -c:a aac output.mp4 将PNG格式图片转为JPG格式图片 1ffmpeg -i image.png -preset ultrafast image.jpg 修改图片的尺寸 12ffmpeg -i image.jpeg -vf scale=413:626 2寸.jpegffmpeg -i image.jpeg -vf scale=390:567 1寸.jpeg 将一个音频重复10次 1ffmpeg -stream_loop 10 -i input.m4a -c copy output.m4a","categories":[],"tags":[{"name":"视频编码","slug":"视频编码","permalink":"https://www.nosuchfield.com/tags/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/"},{"name":"视频","slug":"视频","permalink":"https://www.nosuchfield.com/tags/%E8%A7%86%E9%A2%91/"},{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://www.nosuchfield.com/tags/ffmpeg/"},{"name":"码率","slug":"码率","permalink":"https://www.nosuchfield.com/tags/%E7%A0%81%E7%8E%87/"}]},{"title":"如何参与Apache顶级开源项目","slug":"How-to-Participate-in-Apache-Top-Level-Projects","date":"2024-01-24T11:27:14.000Z","updated":"2025-08-22T15:42:13.340Z","comments":true,"path":"2024/01/24/How-to-Participate-in-Apache-Top-Level-Projects/","link":"","permalink":"https://www.nosuchfield.com/2024/01/24/How-to-Participate-in-Apache-Top-Level-Projects/","excerpt":"","text":"我们在日常工作中经常会使用到很多的开源项目，开源也是一个在工作和学习中都离不开的内容。一般来说，开源项目可以选择直接开源，也可以选择捐赠给某些基金会，例如Linux Foundation、CNCF和ASF等等。以ASF为例，如果一个项目想要成为顶级项目，则需要先通过孵化器孵化，孵化结束毕业才能成为顶级项目。最近我因为一些原因参与了云原生网关APISIX开源项目，这里做一下介绍。 搭建环境首先我们需要下载源代码并且构建开发流程，根据官网介绍，我们把项目代码fork到自己的仓库并clone到本地，随后在本地仓库中将原始的项目设置为上游upstream，之后新建分支进行开发即可 ~ git clone git@github.com:RitterHou/apisix.git ~ cd apisix ~ git remote -v ~ git remote add upstream https://github.com/apache/apisix.git ~ git config --global user.name &quot;derobukal&quot; ~ git config --global user.email &quot;derobukal@gmail.com&quot; ~ git fetch upstream ~ git checkout master ~ git rebase upstream/master ~ git push origin master ~ git checkout -b issue-10484 ~ cd .. 根据官方教程，我们还需要安装APISIX的开发环境注1 ~ export https_proxy=&quot;http://192.168.65.100:7890&quot; ~ export http_proxy=&quot;http://192.168.65.100:7890&quot; ~ wget https://raw.githubusercontent.com/apache/apisix/master/utils/install-dependencies.sh ~ APISIX_RUNTIME=&#39;1.1.1&#39; bash install-dependencies.sh ~ cd apisix ~ make deps ~ sudo mkdir /usr/local/apisix ~ sudo mkdir /usr/local/apisix/logs ~ sudo chown raymond:raymond /usr/local/apisix -R ~ sudo make install 以及安装和启动etcd ~ ETCD_VERSION=&#39;3.4.18&#39; wget https://github.com/etcd-io/etcd/releases/download/v$&#123;ETCD_VERSION&#125;/etcd-v$&#123;ETCD_VERSION&#125;-linux-amd64.tar.gz &amp;&amp; tar -xvf etcd-v$&#123;ETCD_VERSION&#125;-linux-amd64.tar.gz &amp;&amp; cd etcd-v$&#123;ETCD_VERSION&#125;-linux-amd64 &amp;&amp; sudo cp -a etcd etcdctl /usr/bin/ ~ cd .. ~ etcd 最简单的PR搭建好了环境之后，就可以修改代码并提交PR了。一般来说开源项目都会有多种类型的改动，以apisix为例，它限制了PR可以为固定的几种类型： feat fix docs style refactor perf test build ci chore revert change 包含了文档修改、新功能、bug修复等等，我们选择比较简单的文档修改作为第一个PR。我在使用APISIX的过程中，发现它证书相关的文档中存在一个错误 在上图中，这里的地址不应该是/hello而应该是/get，因此我们可以在本地仓库新建一个分支并对这个问题作出修改。修改后我们将这次改动提交（为了使提交更加的清晰和安全，建议合并commit并对commit进行签名）并push到我们自己的远程仓库，随后在GitHub上面创建一个针对原始仓库的Pull Request。一般项目在创建一个PR的时候都会有模板信息，照着模板信息进行填写即可，填写完毕就可以提交PR并等待项目的成员进行处理了 修复issue中的问题在APISIX中有着很多的ISSUE 我们可以关注这些ISSUE看有没有自己能解决的问题。一般来说，带有good first issue标签的都是比较简单并且适合新人的，我们可以优先从这些issue中寻找自己能解决的问题 在确定了issue之后，我们可以请求管理员将这个issue分配给自己，防止别人也会去解决这个问题从而浪费时间。当然，有的时候issue即使已经被分配给别人了，但是如果他一直没有解决这个问题，我们仍然可以请求将这个issue分配给自己 搭建测试环境对于issue-10484，因为涉及到代码更改，因此需要执行测试。APISIX使用了test-nginx框架来执行测试，官方有关于如何进行测试的介绍 https://apisix.apache.org/docs/apisix/internal/testing-framework/ https://apisix.apache.org/blog/2022/06/27/getting-start-with-apisix-test-cases/ 我们需要安装测试框架注2 sudo cpan Test::Nginx 并下载依赖测试模块 ➜ apisix git:(issue-10484) git clone https://github.com/api7/test-toolkit/ t/toolkit 修改完代码之后可以执行相关的测试 ~ PATH=/usr/local/openresty/nginx/sbin:/usr/bin PERL5LIB=.:$PERL5LIB FLUSH_ETCD=1 prove -Itest-nginx/lib -r t/admin/ssl2.t t/admin/ssl2.t .. ok All tests successful. Files=1, Tests=52, 11 wallclock secs ( 0.06 usr 0.01 sys + 3.61 cusr 1.05 csys = 4.73 CPU) Result: PASS 如果测试没有问题就可以提交PR了。 通过CI的测试apisix使用GitHub的workflow进行CI执行测试，以redhat-ci.yaml为例，它会在多个平台上执行多个文件夹内的测试。 12345678910111213141516jobs: test_apisix: name: run ci on redhat ubi runs-on: ubuntu-20.04 timeout-minutes: 90 strategy: fail-fast: false matrix: events_module: - lua-resty-worker-events - lua-resty-events test_dir: - t/plugin/[a-k]* - t/plugin/[l-z]* - t/admin t/cli t/config-center-yaml t/control t/core t/debug t/discovery t/error_page t/misc - t/node t/pubsub t/router t/script t/secret t/stream-node t/utils t/xds-library 如上所示，GitHub action中的matrix默认会对其下面的的多个选项进行合并，例如redhat-ci.yaml的events_module和test_dir组合起来就会构成8个执行脚本 lua-resty-worker-events t/plugin/[a-k]* lua-resty-worker-events t/plugin/[l-z]* lua-resty-worker-events t/admin t/cli t/config-center-yaml t/control t/core t/debug t/discovery t/error_page t/misc lua-resty-worker-events t/node t/pubsub t/router t/script t/secret t/stream-node t/utils t/xds-library lua-resty-events t/plugin/[a-k]* lua-resty-events t/plugin/[l-z]* lua-resty-events t/admin t/cli t/config-center-yaml t/control t/core t/debug t/discovery t/error_page t/misc lua-resty-events t/node t/pubsub t/router t/script t/secret t/stream-node t/utils t/xds-library github的CI会对这些所有的任务执行测试。如果测试执行失败了，需要重点关注失败的日志，并在本地调试直到可以通过测试。如果遇到数据不对的问题，可以重新对数据进行初始化 apisix quit &amp;&amp; apisix init &amp;&amp; apisix init_etcd &amp;&amp; apisix start 社区交流在代码提交并创建了PR之后，我们可能会收到一些反馈，这时候我们就需要针对这些反馈作出回应。以#10771为例 我在提交了代码之后，管理员认为需要将aes_encrypt_pkey和aes_decrypt_pkey方法中的field字段去掉。我一开始在写代码的时候就发现这个字段去掉会导致数据加解密过程中ssl和data的行为不一致，可能导致错误。不过管理员让我放心删，没问题，本着信任的态度我就把参数删除掉了 但是删除掉了之后测试却怎么也跑不过，我因为非常信任社区管理员也没有怀疑是因为ssl和data逻辑不一致导致的，而是从其它地方入手进行排查。最终花了大量的时间经过了很多**的排查之后，发现其实就是因为ssl和data的行为逻辑不一致导致的。我随后询问了管理员，并且把field参数加了回来 把field参数加回来之后，所有的test cases就都能跑过了 所有测试用例通过，一段时间之后PR被review没有问题，就会被合并到master分支了 参考Revolution OSS04E00-吴晟：开源项目进入 Apache 孵化器意味着什么Apache 是如何运作的？新手如何快速参与开源项目如何从小白成长为 Apache Committer? 注 在执行install-dependencies.sh脚本的时候，会下载golang的依赖，比如gRPC-Go，这里需要保证网络能够顺畅访问golang的官方仓库。 为了保证test-nginx正常安装，需要网络顺畅，能够正常访问相关资源。","categories":[],"tags":[{"name":"APISIX","slug":"APISIX","permalink":"https://www.nosuchfield.com/tags/APISIX/"},{"name":"开源","slug":"开源","permalink":"https://www.nosuchfield.com/tags/%E5%BC%80%E6%BA%90/"},{"name":"apache","slug":"apache","permalink":"https://www.nosuchfield.com/tags/apache/"}]},{"title":"使用frp实现内网ssh穿透","slug":"Implementing-ssh-network-penetration-with-frp","date":"2024-01-05T22:00:22.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2024/01/05/Implementing-ssh-network-penetration-with-frp/","link":"","permalink":"https://www.nosuchfield.com/2024/01/05/Implementing-ssh-network-penetration-with-frp/","excerpt":"","text":"最近需要远程访问一台虚拟机内的Linux，因为虚拟机没有公网IP，因此选择使用frp转发ssh流量的方式来实现远程访问。首先访问frp的release页面并根据操作系统和CPU下载相应的版本，之后解压得到frpc和frps文件。 frps是服务端版本，它需要部署在一台拥有公网IP的主机上，它的配置frps.ini如下 [common] bind_port = 10625 token = y9XBLEu2ymW1s5N3W7OuDPhUG4IohVmQ 其中bind_port代表了它所监听的端口号，而token则是客户端连接时需要用到的验证信息。 frpc是客户端版本，它的配置frpc.ini如下 [common] server_addr = 100.26.21.285 server_port = 10625 authentication_method = token token = y9XBLEu2ymW1s5N3W7OuDPhUG4IohVmQ [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 10626 common代表通用配置，它包含了4个配置 作为服务端的远程主机的公网IP frps在远程主机所监听的端口号 验证方式，这里是通过token进行验证 验证的token值 ssh代表了进行ssh转发的设置，它的含义如下 转发的方式，这里是tcp协议 本地主机的地址，因为访问的就是当前机器，设为127.0.0.1 本地ssh服务所监听的端口，默认端口22 远程（服务端）进行ssh流量转发时所监听的端口 有了如上的配置之后，我们可以在远程主机上使用该配置启动frps ./frps -c ./frps.ini 需要注意远程主机的10625和10626端口需要关闭防火墙的设置，以保证可以通过外部进行访问。之后启用本地的客户端 ./frpc -c ./frpc.ini 本地机器如果没有安装ssh服务，则需要先安装ssh服务。启动了服务端和客户端之后，可以在服务端看到客户端成功连接的日志信息，之后通过 ssh ray@100.26.21.285 -p 10626 命令就可以成功访问虚拟机内Linux的ssh服务了，整个网络流程大致如下 客户端提前通过服务端的10625端口已经创建好了客户端与服务端的连接 用户访问远程主机frps的10626端口 远程主机上的frps通过与客户端的连接将流量发给frpc frpc将流量转发给本地的ssh服务 用户最终可以操作本地的ssh 参考使用frp端口映射实现内网穿透(SSH、HTTP服务)","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"代理","slug":"代理","permalink":"https://www.nosuchfield.com/tags/%E4%BB%A3%E7%90%86/"},{"name":"ssh","slug":"ssh","permalink":"https://www.nosuchfield.com/tags/ssh/"},{"name":"frp","slug":"frp","permalink":"https://www.nosuchfield.com/tags/frp/"}]},{"title":"安装并使用zsh","slug":"Installation-and-use-of-zsh","date":"2023-10-18T16:18:09.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2023/10/18/Installation-and-use-of-zsh/","link":"","permalink":"https://www.nosuchfield.com/2023/10/18/Installation-and-use-of-zsh/","excerpt":"","text":"首先我们安装zsh，并切换默认的shell为zsh，之后重启进入zsh sudo apt-get install zsh chsh -s /bin/zsh sudo shutdown -r now 之后我们安装oh-my-zsh，因为网络的原因所以设置了代理 wget -e https_proxy=192.168.65.100:7890 https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh chmod +x install.sh ./install.sh 然后再安装zsh命令自动补全插件zsh-autosuggestions git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions 之后编辑~/.zshrc文件，修改ZSH_THEME=&quot;simple&quot;，并且在plugins里面添加zsh-autosuggestions配置 ZSH_THEME=&quot;simple&quot; plugins=(git zsh-autosuggestions)","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"https://www.nosuchfield.com/tags/shell/"},{"name":"bash","slug":"bash","permalink":"https://www.nosuchfield.com/tags/bash/"},{"name":"zsh","slug":"zsh","permalink":"https://www.nosuchfield.com/tags/zsh/"}]},{"title":"APISIX的使用","slug":"APISIX-usage","date":"2023-10-12T19:22:36.000Z","updated":"2025-08-22T15:42:13.330Z","comments":true,"path":"2023/10/12/APISIX-usage/","link":"","permalink":"https://www.nosuchfield.com/2023/10/12/APISIX-usage/","excerpt":"","text":"APISIX是一款基于Openresty的动态、实时、高性能API网关，它提供了负载均衡、服务熔断等丰富的功能。 安装服务在https://github.com/apache/apisix-docker中提供了很多很便利的docker配置，可以很方便的启动APISIX的相关服务。 ~ git clone git@github.com:apache/apisix-docker.git ~ cd apisix-docker/example/ ~ docker-compose up Starting example_etcd_1 ... done Starting example_grafana_1 ... done Starting example_apisix-dashboard_1 ... done Starting example_web2_1 ... done Starting example_web1_1 ... done Starting example_prometheus_1 ... done Starting example_apisix_1 ... done Attaching to example_grafana_1, example_etcd_1, example_apisix-dashboard_1, example_web1_1, example_web2_1, example_prometheus_1, example_apisix_1 如上启动了7个容器，分别是： 配置中心：etcd 展示prometheus的指标：grafana apisix的管理控制台：apisix-dashboard 测试服务：web2 测试服务：web1 采集apisix的指标：prometheus apisix本体 接下来我们可以测试一下apisix ~ curl http://127.0.0.1:9180/apisix/admin/routes -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; &#123;&quot;total&quot;:0,&quot;list&quot;:[]&#125; 如上命令用于查看apisix的所有路由信息，使用默认的API-KEY。 使用Admin API管理路由路由用于通过规则匹配客户端的请求，并根据请求加载相应的插件，最后将请求转发到指定的上游服务。由此可知路由由三部分组成 客户端请求的匹配规则：包含method、host、uri等 插件，例如流控、安全认证等等，插件是可选的 上游服务 APISIX的Admin接口都采用了Restful风格，路由资源的地址为/apisix/admin/routes/&#123;id&#125;，它的操作接口如下 方法 路径 功能 GET &#x2F;apisix&#x2F;admin&#x2F;routes 获取资源列表 GET &#x2F;apisix&#x2F;admin&#x2F;routes&#x2F;{id} 获取指定资源 PUT &#x2F;apisix&#x2F;admin&#x2F;routes&#x2F;{id} 根据指定id创建资源 POST &#x2F;apisix&#x2F;admin&#x2F;routes 创建资源，id自动生成 DELETE &#x2F;apisix&#x2F;admin&#x2F;routes&#x2F;{id} 删除指定id的资源 接下来我们创建一个上游为web1的路由 ~ curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/1 \\ -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -i -d &#39; &#123; &quot;methods&quot;: [&quot;GET&quot;], &quot;uri&quot;: &quot;/web1&quot;, &quot;upstream&quot;: &#123; &quot;type&quot;: &quot;roundrobin&quot;, &quot;nodes&quot;: &#123; &quot;web1:80&quot;: 1 &#125; &#125; &#125;&#39; HTTP/1.1 201 Created ... &#123;&quot;key&quot;:&quot;/apisix/routes/1&quot;,&quot;value&quot;:&#123;&quot;status&quot;:1,&quot;methods&quot;:[&quot;GET&quot;],&quot;id&quot;:&quot;1&quot;,&quot;priority&quot;:0,&quot;uri&quot;:&quot;/web1&quot;,&quot;update_time&quot;:1706606490,&quot;upstream&quot;:&#123;&quot;scheme&quot;:&quot;http&quot;,&quot;hash_on&quot;:&quot;vars&quot;,&quot;type&quot;:&quot;roundrobin&quot;,&quot;nodes&quot;:&#123;&quot;web1:80&quot;:1&#125;,&quot;pass_host&quot;:&quot;pass&quot;&#125;,&quot;create_time&quot;:1706606490&#125;&#125; 返回201表示创建成功，之后我们可以访问这个新建的路由接口 ~ curl http://127.0.0.1:9080/web1 hello web1 上游（Upstream）除了直接使用服务之外，为了方便，我们还可以把服务的资源直接定义为一个上游（Upstream） ~ curl -X PUT http://127.0.0.1:9180/apisix/admin/upstreams/1 \\ -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -i -d &#39; &#123; &quot;type&quot;: &quot;roundrobin&quot;, &quot;nodes&quot;: &#123; &quot;web1:80&quot;: 1 &#125; &#125;&#39; HTTP/1.1 201 Created ... &#123;&quot;key&quot;:&quot;/apisix/upstreams/1&quot;,&quot;value&quot;:&#123;&quot;scheme&quot;:&quot;http&quot;,&quot;create_time&quot;:1706606769,&quot;hash_on&quot;:&quot;vars&quot;,&quot;id&quot;:&quot;1&quot;,&quot;type&quot;:&quot;roundrobin&quot;,&quot;update_time&quot;:1706606769,&quot;pass_host&quot;:&quot;pass&quot;,&quot;nodes&quot;:&#123;&quot;web1:80&quot;:1&#125;&#125;&#125; 如上我们把web1这个服务定义为上游（Upstream）1，之后我们可以直接使用这个上游构建路由 ~ curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/1 \\ -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -i -d &#39; &#123; &quot;methods&quot;: [&quot;GET&quot;], &quot;uri&quot;: &quot;/web1&quot;, &quot;upstream_id&quot;: &quot;1&quot; &#125;&#39; HTTP/1.1 200 OK ... &#123;&quot;key&quot;:&quot;/apisix/routes/1&quot;,&quot;value&quot;:&#123;&quot;upstream_id&quot;:&quot;1&quot;,&quot;methods&quot;:[&quot;GET&quot;],&quot;status&quot;:1,&quot;priority&quot;:0,&quot;uri&quot;:&quot;/web1&quot;,&quot;update_time&quot;:1706606904,&quot;id&quot;:&quot;1&quot;,&quot;create_time&quot;:1706606490&#125;&#125; 之后访问地址还是一样的效果 ~ curl http://127.0.0.1:9080/web1 hello web1 查看我们刚刚创建的路由和上游 ~ curl http://127.0.0.1:9180/apisix/admin/upstreams -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; &#123;&quot;total&quot;:1,&quot;list&quot;:[&#123;&quot;key&quot;:&quot;/apisix/upstreams/1&quot;,&quot;value&quot;:&#123;&quot;scheme&quot;:&quot;http&quot;,&quot;create_time&quot;:1706607099,&quot;hash_on&quot;:&quot;vars&quot;,&quot;nodes&quot;:&#123;&quot;web1:80&quot;:1&#125;,&quot;type&quot;:&quot;roundrobin&quot;,&quot;id&quot;:&quot;1&quot;,&quot;pass_host&quot;:&quot;pass&quot;,&quot;update_time&quot;:1706607099&#125;,&quot;createdIndex&quot;:35,&quot;modifiedIndex&quot;:35&#125;]&#125; ~ curl http://127.0.0.1:9180/apisix/admin/routes -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; &#123;&quot;total&quot;:1,&quot;list&quot;:[&#123;&quot;key&quot;:&quot;/apisix/routes/1&quot;,&quot;value&quot;:&#123;&quot;create_time&quot;:1706607103,&quot;methods&quot;:[&quot;GET&quot;],&quot;id&quot;:&quot;1&quot;,&quot;priority&quot;:0,&quot;uri&quot;:&quot;/web1&quot;,&quot;upstream_id&quot;:&quot;1&quot;,&quot;update_time&quot;:1706607103,&quot;status&quot;:1&#125;,&quot;createdIndex&quot;:36,&quot;modifiedIndex&quot;:36&#125;]&#125; 我们还可以删除我们刚刚创建的路由和上游 ~ curl -X DELETE http://127.0.0.1:9180/apisix/admin/routes/1 -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; &#123;&quot;key&quot;:&quot;/apisix/routes/1&quot;,&quot;deleted&quot;:&quot;1&quot;&#125; ~ curl -X DELETE http://127.0.0.1:9180/apisix/admin/upstreams/1 -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; &#123;&quot;key&quot;:&quot;/apisix/upstreams/1&quot;,&quot;deleted&quot;:&quot;1&quot;&#125; 插件APISIX支持很多插件，以常见的流控插件为例 ~ curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/1 \\ -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -i -d &#39; &#123; &quot;methods&quot;: [&quot;GET&quot;], &quot;uri&quot;: &quot;/web1&quot;, &quot;plugins&quot;: &#123; &quot;limit-count&quot;: &#123; &quot;count&quot;: 2, &quot;time_window&quot;: 10, &quot;rejected_code&quot;: 503, &quot;key&quot;: &quot;remote_addr&quot; &#125;, &quot;prometheus&quot;: &#123;&#125; &#125;, &quot;upstream&quot;: &#123; &quot;type&quot;: &quot;roundrobin&quot;, &quot;nodes&quot;: &#123; &quot;web1:80&quot;: 1 &#125; &#125; &#125;&#39; HTTP/1.1 200 OK ... 如上创建了一个路由，它使用了插件limit-count，参数表示每个远程地址每10秒钟最多请求两次，否则就会得到503错误。我们测试可以看到请求两次之后就开始报503错误，等待一会儿之后服务又恢复了 ~ curl http://127.0.0.1:9080/web1 hello web1% ~ curl http://127.0.0.1:9080/web1 hello web1% ~ curl http://127.0.0.1:9080/web1 &lt;html&gt; &lt;head&gt;&lt;title&gt;503 Service Temporarily Unavailable&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;center&gt;&lt;h1&gt;503 Service Temporarily Unavailable&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt; &lt;p&gt;&lt;em&gt;Powered by &lt;a href=&quot;https://apisix.apache.org/&quot;&gt;APISIX&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt; &lt;/html&gt; ~ curl http://127.0.0.1:9080/web1 &lt;html&gt; &lt;head&gt;&lt;title&gt;503 Service Temporarily Unavailable&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;center&gt;&lt;h1&gt;503 Service Temporarily Unavailable&lt;/h1&gt;&lt;/center&gt; &lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt; &lt;p&gt;&lt;em&gt;Powered by &lt;a href=&quot;https://apisix.apache.org/&quot;&gt;APISIX&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt; &lt;/html&gt; ~ curl http://127.0.0.1:9080/web1 hello web1% 与上游类似，我们也可以定义一个插件配置，之后在路由中直接使用 ~ curl http://127.0.0.1:9180/apisix/admin/plugin_configs/1 \\ -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -X PUT -i -d &#39; &#123; &quot;desc&quot;: &quot;enable limit-count plugin&quot;, &quot;plugins&quot;: &#123; &quot;limit-count&quot;: &#123; &quot;count&quot;: 2, &quot;time_window&quot;: 10, &quot;rejected_code&quot;: 503 &#125; &#125; &#125;&#39; HTTP/1.1 201 Created ... &#123;&quot;key&quot;:&quot;/apisix/plugin_configs/1&quot;,&quot;value&quot;:&#123;&quot;create_time&quot;:1706607965,&quot;desc&quot;:&quot;enable limit-count plugin&quot;,&quot;plugins&quot;:&#123;&quot;limit-count&quot;:&#123;&quot;count&quot;:2,&quot;time_window&quot;:10,&quot;key_type&quot;:&quot;var&quot;,&quot;rejected_code&quot;:503,&quot;policy&quot;:&quot;local&quot;,&quot;allow_degradation&quot;:false,&quot;show_limit_quota_header&quot;:true,&quot;key&quot;:&quot;remote_addr&quot;&#125;&#125;,&quot;id&quot;:&quot;1&quot;,&quot;update_time&quot;:1706607965&#125;&#125; 如上定义了一个id为1的插件，之后我们使用它构建一个路由 ~ curl -X PUT http://127.0.0.1:9180/apisix/admin/routes/1 \\ -H &#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&#39; -i -d &#39; &#123; &quot;methods&quot;: [&quot;GET&quot;], &quot;uri&quot;: &quot;/web1&quot;, &quot;upstream_id&quot;: &quot;1&quot;, &quot;plugin_config_id&quot;: &quot;1&quot; &#125;&#39; HTTP/1.1 200 OK ... &#123;&quot;key&quot;:&quot;/apisix/routes/1&quot;,&quot;value&quot;:&#123;&quot;create_time&quot;:1706607103,&quot;plugin_config_id&quot;:&quot;1&quot;,&quot;priority&quot;:0,&quot;update_time&quot;:1706608060,&quot;methods&quot;:[&quot;GET&quot;],&quot;uri&quot;:&quot;/web1&quot;,&quot;upstream_id&quot;:&quot;1&quot;,&quot;status&quot;:1,&quot;id&quot;:&quot;1&quot;&#125;&#125; 之后访问地址http://127.0.0.1:9080/web1的效果和前面是一样的。 Dashboardapisix还可以使用Dashboard来管理路由，浏览器访问http://127.0.0.1:9000即可 默认的用户名和密码都是admin。登录之后我们就可以进行管理了，例如要新建一个路由 我们依次设置路由的名称、path、method以及上游信息 创建完成之后就可以在路由列表看到我们刚刚创建的路由了 之后访问我们刚刚创建的路由，和使用AdminAPI创建的效果是一样的 ~ curl http://127.0.0.1:9080/web2 hello web2 参考APISIX 使用小记https://apisix.apache.org/docs/apisix/admin-api/","categories":[],"tags":[{"name":"APISIX","slug":"APISIX","permalink":"https://www.nosuchfield.com/tags/APISIX/"},{"name":"Lua","slug":"Lua","permalink":"https://www.nosuchfield.com/tags/Lua/"},{"name":"网关","slug":"网关","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E5%85%B3/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.nosuchfield.com/tags/Nginx/"},{"name":"运维","slug":"运维","permalink":"https://www.nosuchfield.com/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Openresty","slug":"Openresty","permalink":"https://www.nosuchfield.com/tags/Openresty/"}]},{"title":"自己动手实现一个可以运行在JVM上的编程语言","slug":"Implementing-a-Programming-Language-Running-on-the-JVM","date":"2023-09-06T21:16:49.000Z","updated":"2025-08-22T15:42:13.340Z","comments":true,"path":"2023/09/06/Implementing-a-Programming-Language-Running-on-the-JVM/","link":"","permalink":"https://www.nosuchfield.com/2023/09/06/Implementing-a-Programming-Language-Running-on-the-JVM/","excerpt":"","text":"众所周知，JVM虚拟机被设计为可以执行栈式指令的机器。因此任何一个语言只要编译之后得到的字节码符合JVM的标准，就可以在JVM上执行，例如Kotlin、Groovy、Scala、Clojure。 我们自己设计一款语言，并命名为Jinx，它支持类定义、变量定义、变量打印。它的语法解析逻辑如下 12345678910111213141516171819202122232425grammar Jinx;@header &#123;package com.nosuchfield.jinx.code;&#125;jinx: CLASS ID LEFT_BR classBody RIGHT_BR EOF;classBody: (variable | print)*;variable: VARIABLE ID EQUALS value;print: PRINT ID;value: STRING | INT | DOUBLE;LEFT_BR: &#x27;&#123;&#x27;;RIGHT_BR: &#x27;&#125;&#x27;;CLASS: &#x27;class&#x27;;VARIABLE: &#x27;var&#x27;;PRINT: &#x27;print&#x27;;EQUALS: &#x27;=&#x27;;STRING: &#x27;&quot;&#x27; (&#x27;\\\\&quot;&#x27; | ~&#x27;&quot;&#x27;)+ &#x27;&quot;&#x27;;DOUBLE: [0-9]+ &#x27;.&#x27; [0-9]+;INT: [0-9]+;// 这个ID不能放在前面，不然会被提前解析，导致print等字符串被解析为IDID: [a-zA-Z] [a-zA-Z0-9]*;WS: [\\n\\r\\t ]+ -&gt; skip; Jinx的最外层是类class，class的内部可以包含变量的定义和打印，变量的值支持字符串、整数和小数。有了ANTLR4的解析逻辑之后，我们就可以处理程序的语法树了，语法树的解析如下 flat1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class Loader extends JinxBaseListener &#123; /** * 变量表，以变量名为key，包括：变量索引idx、变量类型 */ private final Map&lt;String, ImmutablePair&lt;Integer, Integer&gt;&gt; variables = new HashMap&lt;&gt;(); /** * 指令列表 */ private final List&lt;Instruction&gt; instructions = new ArrayList&lt;&gt;(); private String className; @Override public void enterJinx(JinxParser.JinxContext ctx) &#123; className = ctx.ID().getText(); &#125; @Override public void exitVariable(JinxParser.VariableContext ctx) &#123; // 变量名 String name = ctx.ID().getText(); JinxParser.ValueContext variable = ctx.value(); // 变量值 String text = variable.getText(); // 变量类型 int type = variable.getStart().getType(); // 变量索引（在局部变量表中这是第几个变量） int idx = variables.size(); // 把这个变量保存在内存，方便后面知道这个变量的索引和类型 variables.put(name, ImmutablePair.of(idx, type)); // 创建保存这个变量的指令 instructions.add(new VariableInstruction(idx, type, text)); &#125; @Override public void exitPrint(JinxParser.PrintContext ctx) &#123; String name = ctx.ID().getText(); if (!variables.containsKey(name)) &#123; System.err.printf(&quot;variable %s not exist\\n&quot;, name); System.exit(1); &#125; int idx = variables.get(name).getLeft(); int type = variables.get(name).getRight(); // 创建打印的指令 instructions.add(new PrintInstruction(idx, type)); &#125; public List&lt;Instruction&gt; getInstructions() &#123; return instructions; &#125; public String getClassName() &#123; return className; &#125;&#125; 在上面的语法树解析中，我们会解析每一个变量的定义语法和打印语法。 变量定义我们会在定义每个变量的时候记录下变量的类型和索引，并把记录的数据关联到这个变量的名字上。此外，我们还会针对这个变量的类型、索引和值生成JVM保存变量的指令。 变量打印在打印程序的解析中，我们会先通过变量的名称从关联表中取出变量的类型和索引（如果不存在就报错），之后根据变量的类型和索引创建JVM打印的指令。 上面的语法树解析最终生成了一个指令列表instructions，我们接下来根据这个指令列表生成JVM所需要的字节码： 123456789101112131415private byte[] generateBytecode(List&lt;Instruction&gt; instructions, String className) &#123; ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES); classWriter.visit(V1_8, ACC_PUBLIC + ACC_SUPER, className, null, &quot;java/lang/Object&quot;, null); // main方法 MethodVisitor methodVisitor = classWriter.visitMethod(ACC_PUBLIC + ACC_STATIC, &quot;main&quot;, &quot;([Ljava/lang/String;)V&quot;, null, null); for (Instruction instruction : instructions) &#123; instruction.apply(methodVisitor); &#125; methodVisitor.visitInsn(RETURN); methodVisitor.visitMaxs(0, 0); // 设置COMPUTE_FRAMES后会自动计算，但是此处设置不能省略 methodVisitor.visitEnd(); classWriter.visitEnd(); return classWriter.toByteArray();&#125; 如上我们根据指令和类名使用ASM生成了字节码数据，它生成了一个包含main方法的类，并且把我们的指令放在main方法中。每个指令都调用了其apply方法，接下来我们具体看一下变量定义和变量打印的apply方法是如何实现的。 变量定义12345678910111213141516171819public void apply(MethodVisitor mv) &#123;switch (type) &#123; case JinxLexer.DOUBLE -&gt; &#123; double val = Double.parseDouble(value); // 常量池的数据推到栈顶 mv.visitLdcInsn(val); // 栈顶double值存入本地局部变量，idx代表索引 mv.visitVarInsn(DSTORE, idx); &#125; case JinxLexer.INT -&gt; &#123; int val = Integer.parseInt(value); mv.visitLdcInsn(val); mv.visitVarInsn(ISTORE, idx); &#125; case JinxLexer.STRING -&gt; &#123; mv.visitLdcInsn(Utils.removeFirstAndLastChar(value)); mv.visitVarInsn(ASTORE, idx); &#125;&#125; 变量的定义很简单，都是先把变量的值从常量池取出，然后推到操作数栈的顶部。之后从操作数栈顶取数据，根据变量的idx把变量保存到局部变量表的指定索引位置。区别在于浮点型的保存指令是DSTORE，整型是ISTORE，字符串是ASTORE。 变量打印1234567891011121314151617public void apply(MethodVisitor mv) &#123; mv.visitFieldInsn(GETSTATIC, &quot;java/lang/System&quot;, &quot;out&quot;, &quot;Ljava/io/PrintStream;&quot;); switch (type) &#123; case JinxLexer.INT -&gt; &#123; mv.visitVarInsn(ILOAD, idx); mv.visitMethodInsn(INVOKEVIRTUAL, &quot;java/io/PrintStream&quot;, &quot;println&quot;, &quot;(I)V&quot;, false); &#125; case JinxLexer.DOUBLE -&gt; &#123; mv.visitVarInsn(DLOAD, idx); mv.visitMethodInsn(INVOKEVIRTUAL, &quot;java/io/PrintStream&quot;, &quot;println&quot;, &quot;(D)V&quot;, false); &#125; case JinxLexer.STRING -&gt; &#123; mv.visitVarInsn(ALOAD, idx); mv.visitMethodInsn(INVOKEVIRTUAL, &quot;java/io/PrintStream&quot;, &quot;println&quot;, &quot;(Ljava/lang/String;)V&quot;, false); &#125; &#125;&#125; 变量的打印会先使用System.out变量，之后从局部变量表中根据变量的idx取出变量的值，然后执行println方法，入参分别为整型、浮点型和字符串。 有了以上这些指令，我们就可以正常生成字节码了，我们进行语法分析生成instructions，并使用instructions最终生成字节码文件。 1234567891011121314151617181920public void compile0(String file) throws IOException &#123; // 词法分析 JinxLexer lexer = new JinxLexer(CharStreams.fromFileName(file)); CommonTokenStream tokens = new CommonTokenStream(lexer); // 语法分析 JinxParser parser = new JinxParser(tokens); parser.removeErrorListeners(); parser.addErrorListener(new ErrorHandler()); // 语法分析错误处理 ParseTree tree = parser.jinx(); // 语法树遍历 ParseTreeWalker parseTreeWalker = new ParseTreeWalker(); Loader loader = new Loader(); parseTreeWalker.walk(loader, tree); // 遍历语法树生成Java指令 List&lt;Instruction&gt; instructions = loader.getInstructions(); // 生成Java.class文件 String className = loader.getClassName(); String classFile = Paths.get(new File(file).getParent(), className + &quot;.class&quot;).toString(); writeByteArrayToFile(classFile, generateBytecode(instructions, className));&#125; 上面代码的最后一行就是根据指令列表和类名生成字节码，并把字节码保存到文件中。我们创建一个源代码 class Test &#123; var name = &quot;Mike&quot; var salary = 2370 print name print salary var number = 1.1 print number &#125; 使用编译器解析如上代码并最终生成一个字节码文件Test.class，运行这个字节码文件可以打印出变量的值 $ java Test Mike 2370 1.1 我们也可以查看字节码的信息如下 $ javap -verbose Test Classfile /src/main/resources/jinx/Test.class Last modified Jan 3, 2023; size 342 bytes MD5 checksum fff7d9ac9c044299ffd5a6194c452502 public class Test minor version: 0 major version: 52 flags: ACC_PUBLIC, ACC_SUPER Constant pool: #1 = Utf8 Test #2 = Class #1 // Test #3 = Utf8 java/lang/Object #4 = Class #3 // java/lang/Object #5 = Utf8 main #6 = Utf8 ([Ljava/lang/String;)V #7 = Utf8 Mike #8 = String #7 // Mike #9 = Integer 2370 #10 = Utf8 java/lang/System #11 = Class #10 // java/lang/System #12 = Utf8 out #13 = Utf8 Ljava/io/PrintStream; #14 = NameAndType #12:#13 // out:Ljava/io/PrintStream; #15 = Fieldref #11.#14 // java/lang/System.out:Ljava/io/PrintStream; #16 = Utf8 java/io/PrintStream #17 = Class #16 // java/io/PrintStream #18 = Utf8 println #19 = Utf8 (Ljava/lang/String;)V #20 = NameAndType #18:#19 // println:(Ljava/lang/String;)V #21 = Methodref #17.#20 // java/io/PrintStream.println:(Ljava/lang/String;)V #22 = Utf8 (I)V #23 = NameAndType #18:#22 // println:(I)V #24 = Methodref #17.#23 // java/io/PrintStream.println:(I)V #25 = Double 1.1d #27 = Utf8 (D)V #28 = NameAndType #18:#27 // println:(D)V #29 = Methodref #17.#28 // java/io/PrintStream.println:(D)V #30 = Utf8 Code &#123; public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code: stack=3, locals=4, args_size=1 0: ldc #8 // String Mike 2: astore_0 3: ldc #9 // int 2370 5: istore_1 6: getstatic #15 // Field java/lang/System.out:Ljava/io/PrintStream; 9: aload_0 10: invokevirtual #21 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 13: getstatic #15 // Field java/lang/System.out:Ljava/io/PrintStream; 16: iload_1 17: invokevirtual #24 // Method java/io/PrintStream.println:(I)V 20: ldc2_w #25 // double 1.1d 23: dstore_2 24: getstatic #15 // Field java/lang/System.out:Ljava/io/PrintStream; 27: dload_2 28: invokevirtual #29 // Method java/io/PrintStream.println:(D)V 31: return &#125; 参考ANTLR4表达式Java代码Java ASM系列Enkel-JVM-language","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"编译器","slug":"编译器","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://www.nosuchfield.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"JVM","slug":"JVM","permalink":"https://www.nosuchfield.com/tags/JVM/"},{"name":"ANTLR4","slug":"ANTLR4","permalink":"https://www.nosuchfield.com/tags/ANTLR4/"},{"name":"字节码","slug":"字节码","permalink":"https://www.nosuchfield.com/tags/%E5%AD%97%E8%8A%82%E7%A0%81/"}]},{"title":"使用ANTLR4格式化JSON","slug":"Formatting-JSON-with-ANTLR4","date":"2023-09-02T21:11:04.000Z","updated":"2025-08-22T15:42:13.338Z","comments":true,"path":"2023/09/02/Formatting-JSON-with-ANTLR4/","link":"","permalink":"https://www.nosuchfield.com/2023/09/02/Formatting-JSON-with-ANTLR4/","excerpt":"","text":"JSON由对象和数组组成，对象是一个Key和Value的关系映射，数组则是由多个value组成。对象使用大括号&#123;&#125;表示，数组则使用中括号[]表示。因此我们可以得到对象和数组的表达式 object: &#39;&#123;&#39; &#39;&#125;&#39; | &#39;&#123;&#39; kv (&#39;,&#39; kv)* &#39;&#125;&#39;; array: &#39;[&#39; &#39;]&#39; | &#39;[&#39; v (&#39;,&#39; v)* &#39;]&#39;; 其中kv表示一个KeyValue的关系映射，多个KeyValue中间使用逗号,分割，一个对象可以不包含元素，或者包含一个或多个元素。v表示一个元素，数组的多个元素中间同样使用,分割，数组可以没有元素，也可以包含一个或多个元素。 kv由key和value组成，key只需要是一个字符串就可以，而对象的value和数组的value一样，支持以下多种元素 对象 数组 文本 数字 true false null 由此可以得到kv和v的表达式如下 kv: STRING &#39;:&#39; v; v: STRING # value | NUMBER # value | object # objectValue | array # arrayValue | &#39;true&#39; # value | &#39;false&#39; # value | &#39;null&#39; # value; 其中字符串和数字的规则如下 STRING: &#39;&quot;&#39; ~&#39;&quot;&#39;+ &#39;&quot;&#39;; NUMBER: &#39;-&#39;? [0-9]+ (&#39;.&#39; [0-9]+)?; 字符串需要由双引号包住，并且内部不能有双引号；数字则可以是带有负号的小数。 完整的Json.g4如下 1234567891011121314151617181920212223grammar Json;@header &#123;package com.nosuchfield.json.code;&#125;json: (object | array) EOF;object: &#x27;&#123;&#x27; &#x27;&#125;&#x27; | &#x27;&#123;&#x27; kv (&#x27;,&#x27; kv)* &#x27;&#125;&#x27;;array: &#x27;[&#x27; &#x27;]&#x27; | &#x27;[&#x27; v (&#x27;,&#x27; v)* &#x27;]&#x27;;kv: STRING &#x27;:&#x27; v;v: STRING # value | NUMBER # value | object # objectValue | array # arrayValue | &#x27;true&#x27; # value | &#x27;false&#x27; # value | &#x27;null&#x27; # value;STRING: &#x27;&quot;&#x27; ~&#x27;&quot;&#x27;+ &#x27;&quot;&#x27;;NUMBER: &#x27;-&#x27;? [0-9]+ (&#x27;.&#x27; [0-9]+)?;WS: [ \\t\\r\\n]+ -&gt; skip; 通过以上规则生成JsonBaseListener.java，继承这个类，在继承的子类中解析语法树 flat123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119public class JsonListener extends JsonBaseListener &#123; /** * 逗号加换行 */ private final String COMMA_NEWLINE = &quot;,\\n&quot;; /** * 缩进 */ private String indent = &quot;&quot;; /** * 添加缩进 */ private void addTab() &#123; indent += &quot; &quot;; &#125; /** * 移除缩进 */ private void removeTab() &#123; indent = indent.replaceFirst(&quot; &#123;2&#125;&quot;, &quot;&quot;); &#125; /** * 结果 */ private StringBuilder result = new StringBuilder(); @Override public void enterJson(JsonParser.JsonContext ctx) &#123; if (ctx.getChild(0) instanceof JsonParser.ArrayContext) &#123; result.append(&quot;[\\n&quot;); addTab(); &#125; if (ctx.getChild(0) instanceof JsonParser.ObjectContext) &#123; result.append(&quot;&#123;\\n&quot;); addTab(); &#125; &#125; @Override public void exitJson(JsonParser.JsonContext ctx) &#123; if (ctx.getChild(0) instanceof JsonParser.ArrayContext) &#123; result = removeLastComma(result); result.append(&quot;]&quot;); removeTab(); &#125; if (ctx.getChild(0) instanceof JsonParser.ObjectContext) &#123; result = removeLastComma(result); result.append(&quot;&#125;&quot;); removeTab(); &#125; &#125; @Override public void enterObjectValue(JsonParser.ObjectValueContext ctx) &#123; if (ctx.getParent() instanceof JsonParser.ArrayContext) &#123; result.append(indent); &#125; result.append(&quot;&#123;\\n&quot;); addTab(); &#125; @Override public void exitObjectValue(JsonParser.ObjectValueContext ctx) &#123; result = removeLastComma(result); removeTab(); result.append(indent).append(&quot;&#125;&quot; + COMMA_NEWLINE); &#125; @Override public void enterArrayValue(JsonParser.ArrayValueContext ctx) &#123; if (ctx.getParent() instanceof JsonParser.ArrayContext) &#123; result.append(indent); &#125; result.append(&quot;[\\n&quot;); addTab(); &#125; @Override public void exitArrayValue(JsonParser.ArrayValueContext ctx) &#123; result = removeLastComma(result); removeTab(); result.append(indent).append(&quot;]&quot; + COMMA_NEWLINE); &#125; @Override public void enterKv(JsonParser.KvContext ctx) &#123; result.append(indent).append(ctx.STRING().getText()).append(&quot;: &quot;); &#125; @Override public void exitValue(JsonParser.ValueContext ctx) &#123; if (ctx.getParent() instanceof JsonParser.ArrayContext) &#123; result.append(indent); &#125; result.append(ctx.getText()).append(COMMA_NEWLINE); &#125; public String getResult() &#123; return result.toString(); &#125; /** * 将最后的逗号加换行替换为换行 */ private StringBuilder removeLastComma(StringBuilder data) &#123; if (!data.toString().endsWith(COMMA_NEWLINE)) &#123; return data; &#125; data = new StringBuilder(data.substring(0, data.length() - 2)); data.append(&quot;\\n&quot;); return data; &#125;&#125; 随后我们对上面的语法树解析进行测试，我们这里先新增一个错误处理器，它可以在解析出错的时候打印我们所需要的错误信息，并且退出程序 12345678public class JsonErrorHandler extends BaseErrorListener &#123; @Override public void syntaxError(Recognizer&lt;?, ?&gt; recognizer, Object offendingSymbol, int line, int charPositionInLine, String msg, RecognitionException e) &#123; System.err.printf(&quot;failed: %s\\n&quot;, msg); System.err.printf(&quot; at %s:%s:%d\\n&quot;, recognizer.getInputStream().getSourceName(), line, charPositionInLine); System.exit(1); &#125;&#125; 上面的程序会在解析出错的时候打印错误消息、源文件名称、出错行号、出错位置等信息。最后我们调用语法解析和错误处理实现JSON格式化 flat123456789101112131415161718192021222324252627public class TestJson &#123; @Test public void testJson() throws IOException &#123; JsonLexer lexer = new JsonLexer(CharStreams.fromFileName(&quot;src/main/resources/json/data.json&quot;)); // 移除Lexer默认的错误处理器 lexer.removeErrorListeners(); // 给Lexer新增错误处理器 lexer.addErrorListener(new JsonErrorHandler()); CommonTokenStream tokens = new CommonTokenStream(lexer); JsonParser parser = new JsonParser(tokens); // 移除Parser默认的错误处理器 parser.removeErrorListeners(); // 新增Parser自定义的错误处理器 parser.addErrorListener(new JsonErrorHandler()); ParseTree tree = parser.json(); System.out.println(tree.toStringTree(parser)); ParseTreeWalker parseTreeWalker = new ParseTreeWalker(); JsonListener listener = new JsonListener(); parseTreeWalker.walk(listener, tree); System.out.println(listener.getResult()); &#125;&#125; 给以上代码提供输入如下（测试数据） &#123;&quot;jiblisca&quot;:true,&quot;untqhvhmvm&quot;:&quot;xgQwUW39uJ5ypfQpOKRY&quot;,&quot;jnjibur&quot;:268757502,&quot;lqpfrifpio&quot;:[&quot;NQRib805YL0XJn&quot;,[[false,[-1580033815.1137862,[&quot;yHv&quot;,false,&quot;udDTLXohYfPu-PyG&quot;,1332240391],518407756.13681334,&#123;&quot;ctuysyrz&quot;:[true,&quot;0NFL&quot;,&quot;jec6pJw&quot;,&#123;&quot;cwqfrhum&quot;:-783147957.874186,&quot;xtubtlfckuao&quot;:-368517848.71591294,&quot;ywrahr&quot;:&quot;MIR&quot;,&quot;jfaehyg&quot;:true,&quot;fbzoxj&quot;:&quot;2ntMW&quot;&#125;,172065695,[false,-1637596578,&#123;&quot;iwxowaesjgo&quot;:[&quot;k-zAI&quot;,2057666098,&quot;zWQEyHPRNR8vuy-zN&quot;,false,-1106132231.291643,true,true],&quot;zcohkx&quot;:-1858649698.353925,&quot;rnwnjtlpwbmr&quot;:-1975656507.3243446,&quot;nhirxtpj&quot;:[true,&quot;Y&quot;,&quot;z6YpDrySLrmdCp2HmJg&quot;,&quot;8w&quot;,1445567342,true,93210936.93854937,false,true,true],&quot;yszjc&quot;:&quot;HdN9_KP3tONwG&quot;&#125;,&#123;&quot;uwnxwxsu&quot;:[201196508,291579062],&quot;wstwlmtelch&quot;:-398145147,&quot;ofbncxfxtv&quot;:false,&quot;wtpznvkz&quot;:&quot;gVjYLVfaUhKzH&quot;,&quot;cavizm&quot;:-962506056,&quot;tqxbvlrj&quot;:true,&quot;bkscbyjpvvxv&quot;:&quot;ePDg&quot;,&quot;ehjnbj&quot;:&quot;OAq&quot;,&quot;aahdlcb&quot;:[1525086695.729831]&#125;,&quot;v&quot;,&quot;63h1&quot;,803121240.8479614],&quot;KRzBaY&quot;,true],&quot;ymzew&quot;:-1558737088,&quot;nuzkphun&quot;:true,&quot;dmnasuc&quot;:625973610.6807092,&quot;ziawhxcnji&quot;:[572866483],&quot;yxfkhyze&quot;:[815113315.8538294,-2129300018.6161578],&quot;pmszful&quot;:true,&quot;xngtw&quot;:true,&quot;eujepvqlv&quot;:&#123;&quot;lspcfzthqdnt&quot;:[false,&#123;&quot;dthfxdx&quot;:false,&quot;noxfk&quot;:&quot;tJ&quot;,&quot;yiditdjduxgf&quot;:1004394045.6336272,&quot;qcrcgr&quot;:[-1267017025.0959017,false,&quot;klMrb2Y39rWkr9DJ&quot;,&quot;NuR-M1USRv4w75MUbf&quot;],&quot;akmiakh&quot;:&quot;VRyHYn2Ro-RjXK&quot;,&quot;ecjfyqg&quot;:&quot;6B-oZO6N9rrIe&quot;,&quot;dirvsino&quot;:true,&quot;szvdicetf&quot;:&quot;WfHXmN9FzD&quot;,&quot;wfynw&quot;:&quot;xaL&quot;,&quot;jjcblbklo&quot;:-1107045875&#125;,-765645410],&quot;hzqdqjvikdnw&quot;:[1256577984.9352612,&quot;DS&quot;,&quot;R_7TYx1AUChH&quot;,&quot;E9KOhaCLscFOF4clmR&quot;,&quot;H0lI3&quot;,610691776,-663230838,-1898258501.1059694,&#123;&quot;lcqglazzgh&quot;:1662343864.886904,&quot;jncbdhbq&quot;:[-49003190.47029225,&quot;TAjz2-nQwbKCiOdyY&quot;,false,true],&quot;rkxio&quot;:&quot;X3MUIWd2i&quot;,&quot;yeizypbptk&quot;:&#123;&quot;wbpsmoblfpqe&quot;:1471474993,&quot;eqfji&quot;:false&#125;,&quot;kawpokrxba&quot;:&#123;&quot;mtstcu&quot;:true,&quot;ckzjwty&quot;:false,&quot;cawmkcykq&quot;:&quot;ZD-1Fw&quot;,&quot;rfsjii&quot;:-645766911.695778,&quot;vomilk&quot;:true,&quot;ciyaq&quot;:&quot;1yDUk4icGIGEc8K3BrV&quot;,&quot;ztaclc&quot;:false,&quot;uymrarwyedn&quot;:&quot;voTvbsP-&quot;,&quot;xupizdfxume&quot;:-1307890946.6241786&#125;,&quot;wdiyepddnnvx&quot;:&quot;uQ&quot;,&quot;yzkhc&quot;:&#123;&quot;mnonwq&quot;:true,&quot;qurwnvmj&quot;:-1632566694,&quot;uttimeumn&quot;:true,&quot;fkquaxdszzj&quot;:false,&quot;dvgooxczock&quot;:false,&quot;znzlahdch&quot;:&quot;EyVdBdJnuxv0jWLT_E&quot;,&quot;lynmveaeze&quot;:true,&quot;qcnqohu&quot;:&quot;95uLav3ofxkF&quot;,&quot;vsephhopgqjs&quot;:&quot;IPqxrwtQWzYNAaq&quot;,&quot;jekejmmktn&quot;:true&#125;,&quot;pqliuno&quot;:[&quot;SMx_OFql6pfYbRpD4&quot;,-2037343674,1745220421.0971427,true],&quot;bmonpddi&quot;:true,&quot;kxkyymmje&quot;:620374657&#125;],&quot;zrhvmxdyyjh&quot;:&#123;&quot;vzgdb&quot;:&quot;fQ2&quot;,&quot;dkkjfan&quot;:2093289195.6157095,&quot;hxilf&quot;:&quot;15wq_4A88P-q6abYokW&quot;,&quot;ztwygkl&quot;:[&#123;&quot;yilav&quot;:295047340,&quot;pkrkp&quot;:false,&quot;rywas&quot;:&quot;QAq5V&quot;,&quot;uipzrbdkksk&quot;:true,&quot;tktlhhhduv&quot;:&quot;5hLUAGKF3O7&quot;,&quot;ruzukp&quot;:783216430.8641344,&quot;tjldf&quot;:&quot;K&quot;,&quot;myjbnf&quot;:false&#125;,&quot;cg_6&quot;,[&quot;xquwXCnMV&quot;,true,&quot;6_fSikQUx6pc3i62&quot;,&quot;mmt07av8&quot;,true,&quot;oaoqX9eH6nC1&quot;,false],&quot;brCwv2S98_7wwo&quot;,false,false,&#123;&quot;qvbgrnkmi&quot;:false,&quot;mqnnvbrt&quot;:true,&quot;begfthdohs&quot;:-230310597.31990305,&quot;gdegfp&quot;:false&#125;,&quot;rJg5&quot;,[&quot;IRJsoCgVm&quot;,&quot;QsZ79UIkJX5I&quot;,1277666032.555033,false,&quot;0Pi8Vb75nuJo9i5Kx&quot;],&quot;2fWQ&quot;],&quot;gdplat&quot;:&#123;&quot;zdwwkejjdegs&quot;:&#123;&quot;kjyhiaw&quot;:&quot;S&quot;,&quot;hzcejeqddbm&quot;:1782552098,&quot;twqqtdjr&quot;:false,&quot;mjvfelcjco&quot;:true&#125;,&quot;bjilbcvg&quot;:&quot;yi22px&quot;,&quot;pqanpuep&quot;:&quot;JuTxsd&quot;,&quot;kwtoarc&quot;:&#123;&quot;mqpwehfex&quot;:false,&quot;nyatqfpf&quot;:-81214563,&quot;wemrjgsu&quot;:1186467801.6164417,&quot;qlukyu&quot;:&quot;Q89w4U&quot;&#125;,&quot;ydhacbl&quot;:&quot;7_cNUVl-8xm7eO&quot;,&quot;bwclbjew&quot;:true,&quot;strtrchvyi&quot;:&#123;&quot;bhrmamzzk&quot;:-1741870274,&quot;ieyjnxxzo&quot;:&quot;GnLM&quot;,&quot;vhrkkfvpbu&quot;:true,&quot;hwnyrvvyc&quot;:18148794,&quot;yygbbosckcpj&quot;:false,&quot;vmlbef&quot;:&quot;mx7kKizeTbV6UAgM&quot;,&quot;llfdpofuyc&quot;:&quot;SI&quot;&#125;,&quot;araoghzad&quot;:&quot;vh5bpGHVrRFHe6jkslA4&quot;&#125;,&quot;ewxetvji&quot;:-1915194954.9288518,&quot;vygteulutuia&quot;:-687082470.461731,&quot;sylvtbpyxpv&quot;:[true,&quot;Bd1Lbo9HrsosJz&quot;,true,1661056706.9351947,&#123;&quot;napojkmbmtnb&quot;:&quot;K8qhBgVf2&quot;&#125;,&#123;&quot;tdwgduamqzjr&quot;:&quot;5soO7VdYymt&quot;&#125;,[&quot;ZT6Lu6v5sA6sxm5Jgc&quot;,true,false,-1331227053,true,-1626944534.757287,&quot;E081lwl_F&quot;,&quot;AY1X5J&quot;],&quot;Mqwrzvv3-4f&quot;,true],&quot;cjewk&quot;:&#123;&quot;jyegnpvxongm&quot;:[&quot;du-JO_h3ha-cL&quot;,true,2119526563.8454704,&quot;vQlj-_bKKSg&quot;,true,-1855657706,&quot;shPIK0Qd3kKw&quot;,-1840121992,&quot;MC4bIFkG&quot;,false],&quot;nlwdkmaqrow&quot;:&#123;&quot;wlbqzzaid&quot;:false,&quot;pxnkojphosvs&quot;:false,&quot;ruhfnxziqfqc&quot;:false,&quot;addalck&quot;:false,&quot;ljlprzknucu&quot;:1753085112.9196386,&quot;wltodjniw&quot;:&quot;j7&quot;,&quot;wnzvrm&quot;:-1637888671,&quot;vvxjzie&quot;:false&#125;&#125;,&quot;szpmjnzv&quot;:&quot;wdGmYh6EvoX0NgFkCrkD&quot;&#125;,&quot;mxihkwltfsbo&quot;:[&#123;&quot;lbcxcgmi&quot;:&#123;&quot;kyhwprnlaykk&quot;:-1654721763,&quot;bekokzcfci&quot;:-2006218079.6375644&#125;,&quot;xfyzqnzj&quot;:-1101032517.9761262,&quot;cqjrtvyqk&quot;:1963190051,&quot;wyunlrkugl&quot;:-18149228,&quot;rizbrtqhgp&quot;:-327426495.8731129,&quot;ugwabes&quot;:&#123;&quot;iydrlbh&quot;:true,&quot;uuexfax&quot;:false,&quot;iycxiey&quot;:false,&quot;tctxoyuqud&quot;:true,&quot;hwxdp&quot;:1436591181,&quot;kqtofejlzqk&quot;:true,&quot;nxkhgpt&quot;:true,&quot;kshhle&quot;:&quot;D-7d3SjgYxwe&quot;,&quot;pyonwhiwxs&quot;:&quot;UwDWYhFLAmE&quot;,&quot;hnzptg&quot;:17851658.762328025&#125;,&quot;pvwjohqqv&quot;:&#123;&quot;bskechbkgsj&quot;:false,&quot;vmondcksu&quot;:true,&quot;zzzqwthqz&quot;:true,&quot;qtvwjxgi&quot;:735586632.2417802,&quot;tpeszlntwc&quot;:&quot;nfMhA&quot;,&quot;vducyzcxr&quot;:1258096315.6944892,&quot;qubdbxmj&quot;:false,&quot;ggjdqysfbl&quot;:true,&quot;yfszvziw&quot;:false&#125;,&quot;ijjmzrikfod&quot;:true,&quot;jzlbbzu&quot;:[1263784951.5696201]&#125;,&#123;&quot;nmcfopyjjgek&quot;:&quot;VmV4m2XTbl2Q&quot;,&quot;rahbuqez&quot;:&quot;VG5zjBMUrlYSiE1Q&quot;,&quot;gjmgvfxy&quot;:-1098931132,&quot;rlxmdruhfa&quot;:-1566201025,&quot;bypbzzlkdda&quot;:794168717,&quot;sseovyfgmim&quot;:1625400066&#125;,[[false],&quot;7s&quot;,false,-1792686772],&quot;LcQMp&quot;,&#123;&quot;eyskoaiclyrp&quot;:true,&quot;ykvckqzt&quot;:[true,456824446.2293131,false,-194213144,&quot;-0FK8cZ&quot;,&quot;Vs9pqD&quot;,40955994.64801259,&quot;22O_pduKVdJNjK&quot;],&quot;pbcwlrrd&quot;:[&quot;7CIUVS&quot;,830635977,&quot;zQgvevNKzJu4J7G1QOD&quot;,&quot;Fy587cYzxdGeHp&quot;,true,false,false,&quot;jHHEiRm1XDip812ay&quot;,&quot;QnJEnGKRWbV2UfV1W2&quot;,false],&quot;zycngzbnkhjy&quot;:&#123;&quot;qveirmselnlr&quot;:false,&quot;evxpwcjqewr&quot;:-1036352108,&quot;vsdyhn&quot;:1812991518,&quot;sfbamr&quot;:823258991.8101388,&quot;ecdbxut&quot;:628749189,&quot;kstdpuardsp&quot;:false,&quot;wvzjhks&quot;:&quot;ft-8wgPHQBUAdH&quot;,&quot;kubndyydkez&quot;:false&#125;,&quot;ukaira&quot;:&quot;drHL&quot;,&quot;vubyzwj&quot;:&#123;&quot;vyfvwnrhbrx&quot;:true,&quot;tsctapcrvsr&quot;:-1542183906,&quot;wdhbubeacsxq&quot;:&quot;F8F26oXlr-sWjbo8d8sL&quot;,&quot;zxzfhcpdvkld&quot;:false,&quot;mhbbn&quot;:false,&quot;lpqsvxjy&quot;:true,&quot;jvumeskjakwo&quot;:&quot;9t8TDE1cRD&quot;,&quot;hcxjdwthfx&quot;:-2123335432.551466,&quot;kcnrcjvcg&quot;:&quot;HsOu&quot;,&quot;vnbdjdormw&quot;:&quot;pZlFuTOHYPun0PBquau&quot;&#125;,&quot;jvpcmje&quot;:[-1287661073.8969119,-1746956894.5312994,false,false,-545292372,301226574.6635491,&quot;mZmwhtjFKAmjbc0H&quot;,true,1243514255.4264624,&quot;CIlmMi3_OpKE&quot;],&quot;bardgjjvw&quot;:&#123;&quot;owoutcbzxw&quot;:true,&quot;helht&quot;:-2029186276,&quot;ndiege&quot;:-1770369600.9380581,&quot;ocfmcz&quot;:&quot;UG0EKrZj8OHvj&quot;,&quot;bkrdqcwrsy&quot;:false&#125;,&quot;tayncq&quot;:-54301328.77438324,&quot;qklilfdlqxe&quot;:&#123;&quot;ocslcoybsgw&quot;:true,&quot;whdqqqkzk&quot;:&quot;GGNYDPm6mG&quot;,&quot;wbfyotuusoxl&quot;:638734799&#125;&#125;,&#123;&quot;disbiih&quot;:false,&quot;filrn&quot;:true,&quot;knoyfaafb&quot;:-95015850.7195931,&quot;snfohgsazpbm&quot;:&#123;&quot;aomgjb&quot;:&quot;-T9VijaYOtERd2or2&quot;,&quot;lriqgm&quot;:&quot;UBjV&quot;,&quot;srdrt&quot;:false,&quot;hjylsqnvnrtx&quot;:1329372693,&quot;reiabljj&quot;:false&#125;,&quot;fdyrtpjx&quot;:[false,729402067]&#125;,&#123;&quot;rwamjrihx&quot;:[&quot;mze0hyu&quot;],&quot;vcupnfbzrvt&quot;:&quot;PIfgD&quot;,&quot;dasvddzwmy&quot;:&quot;yeqIvyBzrV&quot;,&quot;sbnqmmiieuo&quot;:[&quot;KEP6ZemQnPJLO_&quot;,-213839080.27558124,true,-778141096.7149704,-511285001,true,true,-1409391923.8947365,true,false],&quot;dtdrecwqgx&quot;:&quot;YTxIK6tkL&quot;,&quot;recwbj&quot;:180381864,&quot;jtriyomlywu&quot;:&quot;_z&quot;,&quot;rlbzpfilgom&quot;:1892960222.0466895,&quot;saaharnhz&quot;:&#123;&quot;qfqlbiqbetwt&quot;:&quot;2KEKdjOK&quot;,&quot;ijabzieic&quot;:&quot;V8PHcdPI30XMnB&quot;,&quot;sjkjh&quot;:-1883729491.4951746,&quot;trqvcpo&quot;:false,&quot;nzkvqmu&quot;:true,&quot;yscdg&quot;:231881939,&quot;elikaopxgf&quot;:-360707300.6376251&#125;,&quot;wtuznwkbuw&quot;:true&#125;,&#123;&quot;jthninrugrt&quot;:-554168391,&quot;glmua&quot;:&#123;&quot;vjrluklddk&quot;:63540986,&quot;jomqpysixg&quot;:false,&quot;nqbfunvcrr&quot;:true,&quot;gsvuhfyacz&quot;:false,&quot;lreqv&quot;:-165167614.71331477,&quot;trrnmzgccql&quot;:492353243,&quot;rdfjuaulma&quot;:false,&quot;ifcehyrig&quot;:-1934268518.2169318,&quot;pwmvpwjtxvfi&quot;:&quot;1gr3v3UsM-7daf3gjn&quot;&#125;,&quot;uzgkoqf&quot;:&quot;R5UxS&quot;,&quot;eajujwab&quot;:[true,&quot;V2sCG41NhOk2FqCW3ydN&quot;,772174639.8927528,&quot;CF8DA&quot;,&quot;4&quot;]&#125;,&quot;O&quot;,[[&quot;lbV&quot;,false,1761418502,&quot;J5o&quot;,&quot;lFlfxQ6eti20Sn46Im&quot;],false]],&quot;aapkn&quot;:&quot;FS&quot;,&quot;yakzjr&quot;:&quot;tYFqG_4p&quot;,&quot;ydipfdn&quot;:[&quot;X126_Lh_GrVm_9BjjQn&quot;,1982430595.9558337],&quot;dgnugtfz&quot;:&#123;&quot;cnsymzwrbzs&quot;:[[&quot;FuoQUHG&quot;,-1965512875,&quot;UN-Qe7TPH6XQ&quot;],-994417255,-1894175665,[&quot;_0vHi7-&quot;,&quot;IP&quot;,&quot;G-ZwEtL_Swukzbss&quot;],-72472922,[true,true],[595142552],[&quot;_dNzcv0Ye6JmRw5-kmm&quot;,false,803637134],[403663563,false,false,true,1539934510,false]]&#125;,&quot;vyozbnytgq&quot;:false,&quot;vmjfnbxgzqy&quot;:&#123;&quot;btfeibdi&quot;:[true,true,&quot;AC&quot;,&#123;&quot;bynbgimwepl&quot;:false,&quot;lhjyzo&quot;:false,&quot;zixvof&quot;:true,&quot;klzndhe&quot;:&quot;Co6lO5eIUqC&quot;,&quot;yprrdryjihf&quot;:484385304.78962207,&quot;rexzifyeguus&quot;:false,&quot;dhozwsytvyct&quot;:true&#125;,true,27404723]&#125;&#125;&#125;,158972698.9406029],&quot;Mr6rqIFaH17EnLvu&quot;,1338384529.814062,-1636767176,&#123;&quot;pzkjyu&quot;:false,&quot;ueubzcmqh&quot;:&#123;&quot;biuipaxhanzb&quot;:false,&quot;kbserqp&quot;:&#123;&quot;oydasspqt&quot;:[[&quot;CQ5iiFKtfc1l&quot;,&quot;_K1bMqx&quot;,&#123;&quot;ljprmrcjyo&quot;:&quot;ihOplWOF&quot;&#125;,-1964518653],&quot;dcfjFjlHnYDT&quot;,false,1174820705,122437011,[true,-1449565413,true,false,&quot;s7y_buobO&quot;,true],[true,&quot;TWtB&quot;,&#123;&quot;vbskgcgc&quot;:true,&quot;ecxzbqzjoisp&quot;:true&#125;,&quot;I0vBXudksTxYYdGrX&quot;,&quot;cGHh91NLPq2&quot;],&#123;&quot;sncqalbxjo&quot;:false,&quot;qxayehqxvwtj&quot;:true,&quot;fvzbcsddcrhj&quot;:895435215,&quot;xyaiodw&quot;:&#123;&quot;yeltzzrqsu&quot;:-341870729.76989406,&quot;dygnwsse&quot;:-1970524495.648176,&quot;rwcnfhvgeev&quot;:567814262.1028857,&quot;lsdxckjtn&quot;:&quot;KwESkLiT&quot;,&quot;wgqqtvvsyl&quot;:-145830435,&quot;svgfuyw&quot;:&quot;ql7fCJ8qiQ3kwFRmxTt0&quot;&#125;&#125;]&#125;,&quot;xkdzgn&quot;:&quot;3Fj&quot;&#125;,&quot;axjuu&quot;:[&quot;L6mLO6&quot;,-984167684,&quot;r8d5irHpRTUGlgZFBV&quot;,&quot;aBs&quot;,&quot;nC9vCHizPaEpFIN&quot;,&#123;&quot;dvaddzrssd&quot;:-332596958.5065037,&quot;jvuvcggsiuz&quot;:[&quot;iEpMrVrAh5&quot;,true,&#123;&quot;miaqwko&quot;:[true,-425357929,-718503805,true],&quot;aacsmj&quot;:&quot;gZR&quot;,&quot;wsbpvzryqs&quot;:false,&quot;hogonno&quot;:false,&quot;udbss&quot;:&#123;&quot;pjfbfxplyub&quot;:false&#125;,&quot;tgagmd&quot;:true,&quot;aygjxes&quot;:-943541326,&quot;zxsalzbtll&quot;:-1074059072.7494488,&quot;nxtnbmx&quot;:[true,1326456217.8351061,1908692479,&quot;i5ynrh-DkeNbo2B&quot;,true],&quot;lscjmbl&quot;:603502062&#125;,&#123;&quot;xoujsra&quot;:&#123;&quot;hyqhknbwym&quot;:1767784907.1715238,&quot;gqmsf&quot;:true,&quot;pnfqie&quot;:true,&quot;nyztyfdxjvpi&quot;:&quot;Q55TNjWjG3LxuNdk&quot;,&quot;ivsawtxvi&quot;:&quot;NVWQq&quot;,&quot;rnnspuv&quot;:&quot;i7iuwnYdGXRStQ7GV&quot;,&quot;qxwbp&quot;:&quot;e7Dr&quot;&#125;,&quot;dqcwa&quot;:false,&quot;dpaxxlta&quot;:&quot;ZXHSJ&quot;,&quot;yzyoounvkcka&quot;:&quot;utuPPU_5t9zQeWXup6&quot;,&quot;ahxdyvawbq&quot;:false,&quot;cnnezrdjrhzq&quot;:[false,true,&quot;K-5EW0Zor4&quot;,-845220584.7628871,false,&quot;YeEnz2&quot;,false]&#125;,true],&quot;hjtwdnosi&quot;:[&#123;&quot;jdtgbqfq&quot;:517958728.23404163,&quot;klhihmk&quot;:&#123;&quot;osmezf&quot;:-766134215.4151874&#125;,&quot;wzkmsjtekvn&quot;:&quot;bh1AwJpPzCqBQ&quot;&#125;],&quot;wlxhccizmnut&quot;:1969942335,&quot;qkdtuuhd&quot;:-1811752052.4570003,&quot;elfpdyaon&quot;:[true,false,&#123;&quot;fdchdjvjyodw&quot;:&#123;&quot;oralim&quot;:&quot;9M2Pa2l-Q&quot;,&quot;gpwpbvam&quot;:494893201,&quot;wqyac&quot;:77549214,&quot;pychhvs&quot;:true&#125;,&quot;okiolaiit&quot;:2007046929,&quot;zeeagtzix&quot;:&quot;7-t&quot;,&quot;lbcmjkzt&quot;:-1140684548.1196556,&quot;stkwdr&quot;:[-1895721210,&quot;-ZlAi_NLXQzx-SC&quot;],&quot;bkjdr&quot;:-1296869073,&quot;cwwazppmd&quot;:&quot;t6cN&quot;,&quot;qqntqvcnlvu&quot;:&quot;VZLtmUX&quot;&#125;,[[&quot;BJFdD&quot;,false,&quot;230Sh-o6qSTHSpU&quot;,&quot;mdq&quot;,true,-238599023,&quot;NpYLonTALC2ry-po3O&quot;,&quot;HuMixBZzUNdV7yfr0r&quot;,false,1124954267.4665008],&#123;&quot;rhevoja&quot;:842369568.7730334,&quot;aebclq&quot;:&quot;mhwa_Wz4Mjppt&quot;,&quot;jcggtyupxv&quot;:508271088,&quot;bkfzoy&quot;:true,&quot;stmjeifimow&quot;:&quot;0-&quot;,&quot;otwbs&quot;:&quot;crDswkDn7&quot;,&quot;jfzjjhhqdd&quot;:true,&quot;xoymz&quot;:1900874218.7417052&#125;,&#123;&quot;szyzuzf&quot;:false,&quot;fxgjp&quot;:&quot;joyOj15y6M0T&quot;&#125;,-1452828620,true,false,[&quot;ctfp0fihku9zAsWc_&quot;]],&#123;&quot;guwclyincg&quot;:[true,-1217454902.6520271,true,-648358208,true,false],&quot;armydhvhw&quot;:&#123;&quot;snfjlkvjop&quot;:725387053.5577027,&quot;dayajp&quot;:-748339341.6063951,&quot;akyvnyunjt&quot;:&quot;PqPpsm&quot;,&quot;wqrwdw&quot;:true,&quot;xnvmwjysszn&quot;:&quot;EvY5GpX&quot;&#125;,&quot;bfecyzscbczk&quot;:[-1639613318,true,true,&quot;bNvz6rOIZ&quot;,2089236185.921759,&quot;4ELy466&quot;],&quot;ofbuk&quot;:1449933815.0459795,&quot;ruxsrt&quot;:[-1976758461,&quot;_ZF&quot;,714248652,&quot;W&quot;,&quot;p-3Wp4G_UZGWoK3&quot;,1258556787,true],&quot;tndcfmcqdx&quot;:&quot;K&quot;&#125;,false],&quot;hlmuizwob&quot;:&#123;&quot;yaowq&quot;:-1786397961.4578035,&quot;kcwoetn&quot;:&#123;&quot;nmozc&quot;:[&quot;2E8cXJ41pTj_N&quot;,&quot;xdv--kVvJ9N11q&quot;,-538635596,true],&quot;wezpvmjejzi&quot;:[true,true,1288583316.9998584,false,153036486],&quot;lhjtfiycpu&quot;:[231703163.15602082,-1348377166.3101032,true,&quot;fpgmgOrz&quot;,false,true,-1949734625,&quot;_YoH7Pt1r2I4EH&quot;,&quot;ncMol&quot;,&quot;PNE7A-aA4ZMbnlvjmZ3&quot;],&quot;hjemkcivclk&quot;:true,&quot;wfmgj&quot;:1819818165.573923&#125;,&quot;ykngsqgret&quot;:[653782882.5065004,[&quot;ik38S5Fjpmw3tqLmOUq&quot;,true,&quot;XW5iomVzGT03aM&quot;,171795291.3036271,-536213500.7132387,2016044858,true,&quot;67k5HcM8MvrG4W3g&quot;,false],[&quot;WUT&quot;,-1129141369.7042432],true,true,true],&quot;wewhrodks&quot;:&quot;pZq9-igQ8duez-2ljx&quot;&#125;,&quot;gtqsa&quot;:&#123;&quot;jmvxdhijcto&quot;:false,&quot;lcmda&quot;:&quot;WjOrJ2LYfzKQGJo5&quot;,&quot;wfalxb&quot;:&#123;&quot;ughqdafcs&quot;:-9495910,&quot;brlppwzlnmgg&quot;:402164226.45842004,&quot;ropwwyjawgzz&quot;:&quot;iik70xIeU&quot;,&quot;aszjnb&quot;:1956944183,&quot;yvbqnnbcwrd&quot;:-1321431854.5694437,&quot;szaksjoreg&quot;:-1762152526.1502628,&quot;xwbexpijou&quot;:-76361776,&quot;qllee&quot;:[&quot;7a369Qx4&quot;,&quot;eaiH3&quot;,-1463573779.8968208,1859529275,true,&quot;Wc_PmMxb-VjHxPF&quot;,-1394802728.9850135]&#125;,&quot;hyrgp&quot;:[[false,true,true,false,1600525728.510348,1477670049.6301804,-1408927035.2439978]],&quot;ekmzpr&quot;:947171221&#125;&#125;,true,true,&#123;&quot;hfbnayomqxb&quot;:&quot;-tEG9L_MT-lVxhAp4o2h&quot;,&quot;ttnwbajxwmid&quot;:[[&quot;SLOITZF8LLfe&quot;,&quot;rEZwSKxZVl6M1fTnIfGw&quot;,&#123;&quot;oeury&quot;:false,&quot;txlxscs&quot;:true&#125;,&#123;&quot;yylyftlwcv&quot;:false,&quot;scfkla&quot;:1112458523,&quot;lkkni&quot;:&quot;tw&quot;&#125;,true,[1721570529.5780563],[&quot;UnaDzaQWp1Hp&quot;,&quot;HC55U8kL9R77jPE2E8&quot;,-31553003.19174124,-1776708183.9907858,false],[740509758.3785872,&quot;myszDs6&quot;,&quot;nY7KhaNOOU7WKBc&quot;,&quot;5Aad&quot;,&quot;RcPhKjHEOl1dmv_&quot;],&#123;&quot;rzxyelmc&quot;:true,&quot;orfoytwdmg&quot;:-1804838882,&quot;iobeqrngumas&quot;:&quot;BIMsvb-hJ6X2hdu&quot;,&quot;esxrchfadzoq&quot;:-249608084.84166723,&quot;cxerxqunemc&quot;:true&#125;],-1646832468.5599566,-1764572259.4452567,1988156300.5752835,1666583997.4309957,true,[&#123;&quot;ampbux&quot;:&quot;OJmVnnfy&quot;,&quot;rlutd&quot;:false,&quot;bdwfmqvh&quot;:&quot;bMx840MVei&quot;,&quot;abfqowxspnc&quot;:-1293686463&#125;,true]],&quot;waubayani&quot;:&quot;mWUmNyQ-NLiWnxFKH&quot;,&quot;xeezilvjywzs&quot;:[&quot;ulnCAb4OH9l&quot;,[-1664174944.4062052]],&quot;xjjsm&quot;:-102469492,&quot;uzheaxk&quot;:&quot;jKoaTZNvx4TMw&quot;&#125;,[-911939157,-302078829]]&#125;],&quot;iVaLppCSz&quot;,-1142231380.7056024,&#123;&quot;usvvvhc&quot;:&#123;&quot;fqzkuz&quot;:[&#123;&quot;pzlnvdwu&quot;:&quot;hzFIgAK&quot;,&quot;olymzwfwvtt&quot;:[-266530806.77854586,1833340364.8589609,[false,276067264,-782030817.2674904,&quot;f_pgkvk-&quot;,[&quot;9Xf&quot;,true]],-596590212.4880091,[&quot;VmouSaZPJd&quot;,2012501615,[&quot;K5Q0NTy-I5&quot;,-1812848914.9299462,2138029277.70359,false,-457066934.88024026,true,-1623167784.2607136,false,&quot;EhfGlbMmjlVBx3mjJls&quot;,&quot;u3shbj0cF&quot;],false,-953170684.1374441,true,&quot;NNmzk-HUBFZWs&quot;,&quot;4DRdfhexuYiWS08FjRdn&quot;,1838005167.2895813,true],-782348539.4130992,[[1522396998,true,&quot;XG5lZSp8B&quot;,-201812936.45375398,&quot;5RQ3&quot;],true,[&quot;FZ&quot;,-1768876312.0571415,&quot;z7fvJ9f8JC2WkvO1Aucz&quot;],283632164.9722192,false,&#123;&quot;duyrblc&quot;:-1820386759,&quot;nkgixl&quot;:&quot;yr5rcS9FF3LXKaUr&quot;,&quot;tmioklyyupt&quot;:&quot;jpDzAd6i&quot;,&quot;kxswmphsw&quot;:&quot;rt6Xw&quot;,&quot;wdrqcaqdvin&quot;:&quot;Dq0qja1WuOGG5wA&quot;,&quot;jnbwuaqxalyo&quot;:&quot;3ed&quot;,&quot;wyuweibddof&quot;:false,&quot;bwkzkmnjqx&quot;:&quot;e_xakKp&quot;,&quot;thpqrdhxevkx&quot;:&quot;lHjkQwI2&quot;&#125;],1125496477.5141318],&quot;prlxvt&quot;:1938487863,&quot;wwjiarxv&quot;:[&quot;JAN-2CCVY&quot;],&quot;wgsbtd&quot;:-1127624748.385507,&quot;ipmup&quot;:1600003972.0067897,&quot;reijfcfevbn&quot;:&quot;r&quot;&#125;,&quot;SJTEA000f&quot;,&#123;&quot;hkrfgfnrgzz&quot;:false,&quot;qklxjqbc&quot;:false,&quot;ksgpypwfiy&quot;:[1288517438,&quot;nwqy3CA&quot;,&quot;aauQ8QZ8n&quot;,&#123;&quot;yfykqslkwxs&quot;:&quot;bd&quot;,&quot;skzwhhffzbgc&quot;:[false,false,&quot;IYi3RznNg&quot;,-122348317,&quot;h8QhT0&quot;,-1314250165,415753574.6413267,1431208413.0203135],&quot;taesxczxf&quot;:true,&quot;kejqi&quot;:&quot;zO-jDFolY1OiTE3&quot;&#125;],&quot;nskvtkjdftjf&quot;:&quot;Irld7TQYyeh8ZNU&quot;,&quot;oapspw&quot;:&#123;&quot;uupdm&quot;:true,&quot;nllunbvd&quot;:[false,[-1834695793.3633256,-1624924054,&quot;1&quot;,false,false,false,-1939064287],&#123;&quot;dfwwkshyv&quot;:-1411531788.586073,&quot;zofniwaf&quot;:true,&quot;wfgbkb&quot;:-1555546596&#125;,&#123;&quot;lvgiefsbbt&quot;:-1736935206.7722793,&quot;eyhvomnrl&quot;:-809972012,&quot;feuvewffnqzn&quot;:-1505000750.5516632,&quot;empkpk&quot;:true,&quot;boklfpzimof&quot;:true,&quot;qdrvqqrb&quot;:&quot;u2ypVMht7ohG&quot;&#125;],&quot;tuzweotgx&quot;:1388990284,&quot;rqejjy&quot;:2043367539,&quot;xyelmlvi&quot;:false,&quot;vwzotukl&quot;:&quot;ShzdGkF&quot;,&quot;gxuefkg&quot;:&quot;I0n&quot;,&quot;pgqxejuoysiq&quot;:-736508110.7389425&#125;,&quot;amnhqiiisvpg&quot;:[false,[28287444,1343029431.5755444,&quot;tWXCIjq3I&quot;,[&quot;Im6xjbxPc&quot;,&quot;EnAI&quot;],true,-1133952647,[false],[1858642134.4409337,&quot;XWn_4Ld-7jo&quot;,179514941.64881298,1510684272,-1808707697.2660255,&quot;0-TEQlXKIlVJQLcth&quot;],&#123;&quot;bmjtfov&quot;:true,&quot;cwcxjngupmqd&quot;:29782138.571137372,&quot;zmmxy&quot;:-569505818,&quot;puagc&quot;:true,&quot;wevlsnbmbfja&quot;:1534321337.5022151,&quot;mfyaxj&quot;:false,&quot;rzoztndxrihr&quot;:&quot;WW&quot;,&quot;geyoyfq&quot;:&quot;ax&quot;,&quot;azdwhljwvda&quot;:&quot;dYIz4RvrB2sNNP&quot;,&quot;tvrnagirx&quot;:60971197&#125;],&quot;rQfMgL4ZQ-wGV1iku35v&quot;],&quot;qingyq&quot;:1762803120.143789&#125;,&#123;&quot;dmvawgr&quot;:false,&quot;udzqpqcl&quot;:[&quot;y5aWH4qlX&quot;,565590808.165537,&#123;&quot;vvtzutc&quot;:true,&quot;qxhcbunra&quot;:&#123;&quot;sdbybtqn&quot;:&quot;mFBaz9buWRkmjdew&quot;,&quot;nhvcmghbm&quot;:true,&quot;mzffm&quot;:&quot;B4utuXdW&quot;,&quot;ouwro&quot;:false&#125;,&quot;ceqoowzve&quot;:[&quot;x91CDIq-9C1ozreobKu&quot;]&#125;],&quot;goybpdntid&quot;:false,&quot;orhketzzarug&quot;:&quot;2J6KB-y8f6C1&quot;,&quot;zpqubfmr&quot;:&#123;&quot;hnyjjhs&quot;:&#123;&quot;xjonatlcldo&quot;:&#123;&quot;tlsuxnllejc&quot;:false&#125;,&quot;ulmndwqx&quot;:true&#125;,&quot;pygtbupvhji&quot;:[false,true,&quot;a&quot;,true,&#123;&quot;voowytwqolr&quot;:-1247701554.1297677,&quot;ryxyvkvsh&quot;:true,&quot;bbktpkspax&quot;:false,&quot;ayzzgja&quot;:1905564178&#125;],&quot;kfyowyelgmt&quot;:&#123;&quot;fmcuq&quot;:-1579449653.3019078,&quot;degzr&quot;:-800372906.2981399,&quot;dtwerzx&quot;:&quot;Wp8mQMlmUPqhP&quot;,&quot;gmvubk&quot;:&#123;&quot;kebbpxilwfb&quot;:1895470768.2458827,&quot;wtagbpyjybn&quot;:true,&quot;prktuuffw&quot;:false,&quot;foywhoyy&quot;:97265018.89559394,&quot;bkizy&quot;:&quot;IdYg80No408CXB&quot;,&quot;miknac&quot;:false,&quot;aqksp&quot;:-1849963173,&quot;nbvruldc&quot;:&quot;MKRGQCOnIESj_W0A&quot;,&quot;ihlpbtxlyqu&quot;:&quot;WwbXb&quot;,&quot;dxlevjbcozl&quot;:&quot;cqwd13CqR0-zIeJGCw&quot;&#125;,&quot;ixqcrlahohe&quot;:false,&quot;rbqppk&quot;:21028962.3474731,&quot;yytaazpbqmvc&quot;:[1323188036,&quot;6W1y-jyOtQ&quot;,true,false,-618331288.0945133,1669605770.178974],&quot;xmovhvrrtg&quot;:true,&quot;focljncxdmlr&quot;:1309317027.4259272&#125;,&quot;kbykymuhama&quot;:false,&quot;clfxbxcygz&quot;:false,&quot;ytgkzfwrv&quot;:&quot;rfSshhH_kiaXvelhGo&quot;,&quot;bgbakxabisgu&quot;:&#123;&quot;pkvsz&quot;:&quot;egaMuGBa8Qfa5I&quot;&#125;,&quot;holjctzbqel&quot;:1651434988.270569&#125;,&quot;hqpxanby&quot;:&quot;r37u1IP&quot;,&quot;yxkttnpxwaox&quot;:-1863554173.0387821&#125;,&#123;&quot;ctgkv&quot;:true,&quot;qputjogv&quot;:&quot;-sxb2nsWb0sQC0Rc&quot;,&quot;madfxlfuq&quot;:&quot;sPcX-SN8&quot;,&quot;ezoahwnyylh&quot;:&#123;&quot;mzyapdgprmu&quot;:&#123;&quot;evwgwfvrzp&quot;:932445348,&quot;ytszegqwb&quot;:[&quot;G&quot;],&quot;cmsfarxyrev&quot;:[&quot;C8qR1m&quot;,false,false],&quot;xiuasy&quot;:&#123;&quot;bvoisakdm&quot;:true,&quot;ayavjwsb&quot;:1278232255.2951758,&quot;dxyyvtny&quot;:false,&quot;ugrjjvmxq&quot;:&quot;tPj3SrDB0IF6qCZ&quot;&#125;,&quot;srvuhe&quot;:[&quot;qo-ZtMhsK4v5s&quot;,&quot;GFyW&quot;,-123351802.83050978,-1368455574,1139927106.920848,47683931.04126628],&quot;oelfrw&quot;:-166850612,&quot;iufibiyc&quot;:false,&quot;vpqlp&quot;:true,&quot;ndfibkxmz&quot;:156483043,&quot;gfemgvho&quot;:838081767&#125;,&quot;vxjidsoyps&quot;:&quot;PGb5G_1W32Gr1OcbQ&quot;,&quot;rgapait&quot;:&quot;Ig_fXHvw_XQfwq7A&quot;&#125;,&quot;sxbstkhmvx&quot;:-601966274.7765642&#125;,true],&quot;xxxxilq&quot;:false,&quot;azaxaqohjwmt&quot;:1386916826.7485476&#125;,&quot;ufnsksfmugc&quot;:[[&#123;&quot;egeiifo&quot;:1059812245,&quot;alhfcrc&quot;:-1565288040.0016382&#125;,&#123;&quot;lstxmbc&quot;:&#123;&quot;hvnxgruzukz&quot;:&#123;&quot;ymdvclcta&quot;:-799970865,&quot;gpeykkfuspq&quot;:true,&quot;nincpakwr&quot;:[&quot;bqVlhUg&quot;,-114950637.80423953,false],&quot;vwiuerby&quot;:false,&quot;hcpsqijyxwl&quot;:[&quot;_LmxO-PGsd-GVgaKvrAM&quot;,&quot;mdHhyjwFR8E&quot;,&quot;29uKxRcQ7J&quot;,true],&quot;sjhsk&quot;:&quot;VOkxfZpvMv&quot;,&quot;tmmle&quot;:&#123;&quot;zomltioly&quot;:342659797,&quot;nlpovewuqmmp&quot;:true,&quot;iioma&quot;:508432360,&quot;qfeodjgla&quot;:&quot;Nhd9Oa24X&quot;,&quot;nhmcokhelqqj&quot;:1357286345.2177863,&quot;jagktor&quot;:&quot;xXIZjtVVVzwe_opnE&quot;,&quot;rhetwomhtd&quot;:&quot;bR1lB&quot;,&quot;whhlkyvml&quot;:false,&quot;sptyga&quot;:&quot;58&quot;&#125;&#125;,&quot;bcyespjpngip&quot;:[&quot;Xa0-sRSJVzz&quot;,&quot;dP0bSw-D&quot;,-846722323,&#123;&quot;jqdwsxpdw&quot;:false,&quot;odqdgkhvm&quot;:&quot;kFN9XcS4FB&quot;&#125;,2056245345,[&quot;tgFXPN4_19rdn&quot;],&quot;M&quot;,-1470809164.7869449,&#123;&quot;ufhegw&quot;:true,&quot;iazkqhvtoq&quot;:&quot;afnqo6mDeP2Xsxq83Ab&quot;,&quot;wavqh&quot;:&quot;SlfEs5u&quot;,&quot;eqzczxdcck&quot;:-1380453940.3618248,&quot;xnahyqovk&quot;:false,&quot;vimhaam&quot;:true,&quot;zaidgqslv&quot;:&quot;Rse2&quot;,&quot;uakqnpwkev&quot;:false&#125;,true],&quot;byijcggxyeb&quot;:false,&quot;frrra&quot;:[1273321882.546601,&#123;&quot;bkdtsfpjzy&quot;:1353578293,&quot;rqfykyl&quot;:false,&quot;zvtat&quot;:true,&quot;tbtiqgvrqnc&quot;:true,&quot;oaiwertwn&quot;:381394347,&quot;cdpayscr&quot;:false,&quot;caskly&quot;:&quot;ov&quot;,&quot;qqctqbssi&quot;:-174402819,&quot;fmmnjju&quot;:false&#125;,&#123;&quot;jwrnyx&quot;:1540108149,&quot;llawzkyebhy&quot;:550464134,&quot;aocen&quot;:&quot;9&quot;,&quot;tbugwy&quot;:-785657559.0930029,&quot;soyelakldgqv&quot;:&quot;aaV&quot;&#125;],&quot;snkqlthypi&quot;:&#123;&quot;lgqphwlv&quot;:&quot;5e&quot;,&quot;pgwort&quot;:[&quot;9q2GDxjj6EA0&quot;,true,&quot;IQq20&quot;,&quot;NHziSgT7tXC&quot;,&quot;jOvmpnP45APMj6VSupAS&quot;,&quot;BYMiNR1TRCc933--jWB&quot;,-1324989878,true,202601235.2834469]&#125;,&quot;jynodrxs&quot;:-229028908,&quot;kfhdb&quot;:[[false,&quot;HMUrYf6IGF4Q0EnSOm&quot;,1788715909.1798944,1002720161,false,1813446997]],&quot;lyjub&quot;:&quot;AVLk91kJfcOkQ&quot;&#125;,&quot;azukickdmzi&quot;:&quot;hgUoSBFSHwfwf&quot;&#125;,true,[-1830050411.707309,&quot;V2pbDFO&quot;,2136923622.426689,&quot;YiH-Sa&quot;,42986518.777260296,&#123;&quot;itexzdasgzb&quot;:&#123;&quot;qpqhr&quot;:&#123;&quot;zbtbpe&quot;:true,&quot;lfkwatuqgbtj&quot;:-1714369248,&quot;irfvaosk&quot;:&quot;iN7jE-&quot;,&quot;kvllcp&quot;:true,&quot;fhfoo&quot;:true,&quot;xvjvz&quot;:-1454793156,&quot;lyubjax&quot;:false,&quot;ckome&quot;:-1412675725,&quot;jsvlgwg&quot;:false,&quot;kurkdvgyo&quot;:&quot;hHurh&quot;&#125;,&quot;vvlghgxnxsn&quot;:true&#125;,&quot;mcwfzdkyq&quot;:false,&quot;adeoyomffc&quot;:1548960367,&quot;owttxei&quot;:[true,false,[&quot;wWJazDa6WAaegP&quot;,545967908.4459687,&quot;0QysTlzpxu&quot;,1640572288.6534097,&quot;k5zXkSkCut5ZCq&quot;],&quot;hF8K&quot;,2018777646,false],&quot;tffvcumpi&quot;:1498011014.6961753,&quot;rdboodqnzju&quot;:[156522948.53122738,&quot;p9I7ba&quot;,true,&quot;5fm2A2FH0dvAd8c&quot;,&quot;DrQQlYn5AlzdUzwx&quot;,[false,&quot;NQIGd&quot;,218207687,true,false,&quot;lEkh7&quot;,false],false,&quot;_ZOzwWOLAw0FAx&quot;,&quot;v67dsKoEDmqSC&quot;,1687700076],&quot;cpipaikzft&quot;:538825608.0691938,&quot;uvvvyuvmff&quot;:642661858,&quot;vxlreufxgl&quot;:[-255202773.76708487,[&quot;CDFfvQuhrDE&quot;,&quot;fOj8IX&quot;,&quot;P1Md5i&quot;,&quot;KCttk&quot;,1720484967],[false,false,false,&quot;glOQ7CC3Rq&quot;,&quot;ZeysOm8Xrcuh4&quot;,&quot;CTnfQDT2CnUR&quot;],true,1584066022.3255289,810670081.4445043]&#125;,true,854302211.0162857],437006145.3470045,&#123;&quot;ofciakb&quot;:-174610721,&quot;jgiiaqh&quot;:&quot;g7oWIJ&quot;,&quot;rahwlhedy&quot;:&quot;XshbHeI6q0ByspizkDyu&quot;,&quot;tloyn&quot;:&quot;QaCYk65&quot;,&quot;xrrimsvafkqb&quot;:&quot;2&quot;,&quot;gndyhheqourq&quot;:&quot;ncTWjBzT&quot;,&quot;fqxffwalaysp&quot;:-1220649343.3438647,&quot;hilcqrvttzf&quot;:[&#123;&quot;xyxuqicjid&quot;:[-686442259,true,&quot;2xgSE&quot;,true,false,false],&quot;vcrswrmkrrxq&quot;:&#123;&quot;avwpliogx&quot;:&quot;OIUJn2g8&quot;,&quot;pesizs&quot;:&quot;NMS&quot;,&quot;pdhqei&quot;:&quot;io&quot;,&quot;lksoed&quot;:&quot;Ci2gyuNoyhoFGy34-E&quot;,&quot;bsgvthoxwew&quot;:-583559162.235261,&quot;utaeahobmm&quot;:-864692808,&quot;xamweuvefgsb&quot;:&quot;ATIL&quot;,&quot;vigxzuglhf&quot;:-427564725.84841317,&quot;xrmkarvoxktz&quot;:-1336149298.6769412&#125;,&quot;hldzsw&quot;:[true,1363062430.8286984],&quot;decsandn&quot;:&quot;QNnvs8GHi_&quot;,&quot;kwjez&quot;:[&quot;vxgr_39Y5iefRpJrRu8z&quot;,false,1547917335,false,false,&quot;HhPfgHwQ7Gu-&quot;],&quot;tmhdhzzoenbm&quot;:[false],&quot;gbyohmhpbde&quot;:false,&quot;mtfnj&quot;:[-1699702608,985332408,-1815034078,-1413622309.8855631,-2085717593.4400523,1407784160.48939],&quot;ergefuqaunl&quot;:&quot;8CENOQt3VEkU1P-JB6Tb&quot;,&quot;pnfjtwagjl&quot;:&quot;isLLGRDsqKLLuPL&quot;&#125;,&#123;&quot;jfnvnzjrvas&quot;:-587565188.3387564,&quot;taqrkae&quot;:&quot;C_94_KfHv&quot;,&quot;kpvdasjlv&quot;:true,&quot;rjtzonifh&quot;:&#123;&quot;vctwsgao&quot;:&quot;xdQSkHmlHKlY4-il&quot;,&quot;yifopp&quot;:1406234035.787533,&quot;auvpebfqq&quot;:&quot;HLLn&quot;,&quot;flhvpumykx&quot;:false,&quot;xzywwymvn&quot;:1653270283,&quot;upxnp&quot;:true,&quot;ifkmnr&quot;:false,&quot;nkxswbbwqy&quot;:-1627803020,&quot;whegc&quot;:false,&quot;qrfyepxtesps&quot;:1517334209.7266629&#125;,&quot;uuidntxmgctz&quot;:1107173297.2634706,&quot;fynzmbl&quot;:&#123;&quot;oucehooes&quot;:true,&quot;wigldikwgq&quot;:-2062754791,&quot;cdkshxakjrd&quot;:-2071869785.565263,&quot;swfwn&quot;:&quot;OtQ0uaz6KX7AtkKL&quot;,&quot;hvjejhhf&quot;:-2036255945,&quot;owzivlf&quot;:-1975368684,&quot;moouubve&quot;:1454759009,&quot;mgpvcbpmj&quot;:&quot;dDSwnk-q&quot;&#125;&#125;,[true],&quot;GIeXKf4YI9N&quot;,-1716528085,&quot;dL986fxNicw&quot;],&quot;nrzjrgcivno&quot;:[&quot;zxJy&quot;,&#123;&quot;flekwokf&quot;:&#123;&quot;chrzxtx&quot;:false,&quot;tlaypitrxrcg&quot;:true,&quot;rqovrbh&quot;:&quot;rSGtS&quot;,&quot;cwxqet&quot;:498858192,&quot;uolbpvycxhje&quot;:&quot;DN9hNwEYX&quot;,&quot;usdclspoyzm&quot;:-501600594,&quot;hkqho&quot;:true,&quot;rgexemxrjs&quot;:&quot;JYToGeHgVHBez&quot;,&quot;tablq&quot;:-761106229&#125;,&quot;kgsseatvemrz&quot;:false,&quot;jfsjxqvyr&quot;:&quot;rQc-LzndacPTFET&quot;&#125;,[&#123;&quot;pxkuzi&quot;:155012834,&quot;rjebalsjayqa&quot;:&quot;HtPrksIN7v&quot;&#125;],-38828973.82330755,true,&#123;&quot;qltnluhelm&quot;:false,&quot;awocxhtybq&quot;:-1147863638.496814,&quot;rnple&quot;:false,&quot;hgspdpidju&quot;:[-707962268.7103155,false,false,false,true,false,-1703293578]&#125;,&quot;HUdE9z63A3LoAOi1&quot;,false,-1874697115,&quot;5QsgUXTu5Do3gjONN6R&quot;],&quot;ivljitunpban&quot;:[&quot;u&quot;,172763108,&quot;Wv&quot;,&#123;&quot;suplycjurouc&quot;:&quot;BxUKVizfXs7qmWNxnF&quot;,&quot;gcctzcd&quot;:&#123;&quot;aywdjhgw&quot;:-1358459504.777664,&quot;jqiwjd&quot;:-301889543,&quot;cffdnzjgjvwp&quot;:true,&quot;odxhcuuv&quot;:false,&quot;rpmxmjfggbki&quot;:true,&quot;goerbw&quot;:&quot;vbDUol5SzjLE&quot;,&quot;icsmd&quot;:1180498061.2653542&#125;,&quot;wjdczsoeuhj&quot;:&#123;&quot;gfousxhraqn&quot;:&quot;TNViA&quot;&#125;,&quot;btjtdnxp&quot;:false,&quot;gxvvecbba&quot;:1312169211.2258654&#125;]&#125;,[true,[&#123;&quot;vtetekbagto&quot;:&#123;&quot;edznxylsm&quot;:&quot;kNxwwsdvAInKPYWip0U&quot;,&quot;hjpaslu&quot;:&quot;ZhmDrjY7ioU&quot;,&quot;mjxbopj&quot;:-2065787595,&quot;xsfxftjs&quot;:false,&quot;gfhygsfm&quot;:true,&quot;qgmdk&quot;:827018739&#125;,&quot;xjaksz&quot;:false,&quot;nzmlpamehmu&quot;:735253786.4510173,&quot;daxfd&quot;:&quot;VB4PsY&quot;,&quot;buvqtwddn&quot;:[2098135094,&quot;PHLKCITfw&quot;],&quot;udflozzlkyg&quot;:[1961779952.5347717,1785170000,&quot;uqw3nxatTxu36F&quot;,&quot;CFKrC8kCiEuUT&quot;,false]&#125;,false],&#123;&quot;kqxmcle&quot;:&quot;X8BA11NXhb&quot;,&quot;qewgdmmowuu&quot;:&quot;Q&quot;,&quot;gkseon&quot;:[[-1603302651,true,&quot;Wf2110MvCqcjTOh3v&quot;],&#123;&quot;umuyq&quot;:false,&quot;locnaoewb&quot;:true,&quot;iwvujfs&quot;:false,&quot;wmmjmhleazfq&quot;:false,&quot;opajytbtcdm&quot;:&quot;TyxATiSOvShV5af-&quot;,&quot;zfckxgk&quot;:350224266&#125;,true,false,&#123;&quot;awtsoveqz&quot;:1134185262,&quot;ncodth&quot;:&quot;gaky7tuPqEE0C&quot;&#125;,&quot;DSqtgTHuNfWi7&quot;],&quot;xtuopoolnj&quot;:false,&quot;xgowkwczwjv&quot;:&quot;-9uOjEDl0O4gX&quot;,&quot;wdnlav&quot;:[&#123;&quot;tpgohoctng&quot;:&quot;Y46LStph&quot;,&quot;widgle&quot;:&quot;Ngb4LzVfY&quot;,&quot;flzprcgveboh&quot;:&quot;2dMreZNPc5Q&quot;,&quot;euiyic&quot;:757084534.4392618,&quot;rborrfq&quot;:&quot;9YZH&quot;,&quot;mudkvx&quot;:true,&quot;uhkhesmnaiob&quot;:&quot;7vg95u2z57M1Q25C-M&quot;&#125;,&#123;&quot;gnczqzvjo&quot;:-1891773607,&quot;giknkeeuf&quot;:&quot;D6ZeuWMNjlEGSjJ&quot;,&quot;ugypzkizrld&quot;:&quot;94Pzm6l-lf&quot;,&quot;bfvyofbn&quot;:76276623,&quot;cedymruvgjf&quot;:-532730165,&quot;avgcykyxuwk&quot;:-1061464690,&quot;xbusnelkecy&quot;:-651789297.1341338,&quot;ndhqgjwwxldo&quot;:&quot;hNXqDlGLEFaTu9f_&quot;&#125;,[&quot;gWSAJs6-CGZ56gAg_Y&quot;,&quot;BPAfpx3e2n0&quot;,&quot;NABtxE6GLd-qka&quot;,&quot;p1qdw0N6r5rD&quot;,&quot;MtVItBGsAhR&quot;,false,false,&quot;ARlvMx&quot;,&quot;jp5WSWtCQrfP&quot;,&quot;lGua4WWpxu7QECDUmrEb&quot;],&quot;2&quot;,-44631012.89008953,&#123;&quot;ykgmxa&quot;:&quot;7A7zpaE6DfqW81ODsnV1&quot;,&quot;rxazfwoptzh&quot;:-314219665.38402504,&quot;gnyiyaqmnyc&quot;:&quot;ret-gAGMPDX1&quot;,&quot;krmuhffwvxew&quot;:-827107678&#125;,1951560197,&quot;I2q41pZlE9D5GJM9Ti&quot;,&quot;UHwvhh&quot;],&quot;fconiontxfdn&quot;:&quot;wPGj-k9r7Gsw9m-lorOr&quot;,&quot;horfk&quot;:-986402277.1490486,&quot;byrfwyebr&quot;:true&#125;,&#123;&quot;jkawcat&quot;:[&#123;&quot;eiwsojacsq&quot;:1676112449,&quot;jgekmpdhsj&quot;:true,&quot;kxzjfsr&quot;:false,&quot;zoxmobvqq&quot;:-1025819360.89981,&quot;oxpxptidr&quot;:&quot;8Jw&quot;,&quot;myumz&quot;:2062684081.3193998,&quot;ajiapeku&quot;:true&#125;],&quot;sxjjcmxdqbdz&quot;:&quot;bFq2QpiS3Wv&quot;,&quot;mxidhsade&quot;:&quot;KBmZGynEl&quot;,&quot;gogjwvyl&quot;:&#123;&quot;osblktbs&quot;:false,&quot;mbjpwu&quot;:&#123;&quot;fovbzafybwit&quot;:&quot;cor6Yj84WMYZZVdj0gR&quot;,&quot;kufslrcds&quot;:true,&quot;aedavebnby&quot;:-1008775510,&quot;akozzffzo&quot;:&quot;kuv_U&quot;,&quot;zyjtlrlhyi&quot;:&quot;gTiMoPevyTHG&quot;,&quot;kiutts&quot;:-1869528574&#125;,&quot;snpymey&quot;:-1405478994.7553291,&quot;yydbdmay&quot;:&quot;UJDkJA8UnpYBifEGR7A&quot;,&quot;ydbwea&quot;:&quot;mb3&quot;,&quot;npmhuprqm&quot;:1345924656,&quot;jwqvtfyi&quot;:&quot;Vv-zGw1KE5K4KmL4&quot;,&quot;dzhwkqbkbvdd&quot;:409088616.6203143,&quot;iccnidhljlv&quot;:true&#125;&#125;,&quot;eBpw8c5&quot;,&quot;fv0FygNy&quot;,&#123;&quot;dparw&quot;:[[&quot;64UujJ_a&quot;,false,-1319664683.701457,true],343007839.0356881,&quot;1ssduUoG3NU&quot;,-230863137.02555355,&#123;&quot;agyvksvk&quot;:1224923770,&quot;qkmvsy&quot;:false&#125;,[false],&quot;7TRBmb&quot;,[false]],&quot;mjtol&quot;:&quot;Ewvi&quot;,&quot;pmduvkbvdjew&quot;:&quot;mDz-fviuNzDx0&quot;,&quot;dgauwepluvu&quot;:[&quot;cFayhU5PCb&quot;],&quot;ljsisniuv&quot;:&quot;-e9Bw0fykhHnQoTNtK&quot;,&quot;pvwoizptzx&quot;:-1044962708.4456303,&quot;vzdmw&quot;:1739167092,&quot;zostl&quot;:[[&quot;QMXU&quot;,false,&quot;v&quot;,-1531678963,&quot;Ld&quot;,-915392466.0197387,true,true],-419754185.52356327,&quot;H&quot;,&#123;&quot;oojizut&quot;:&quot;B1&quot;,&quot;zxfcorphhpc&quot;:true,&quot;yeeusktu&quot;:true,&quot;eofwvez&quot;:&quot;JDfBxoS&quot;,&quot;ykniglx&quot;:894496872.6096759,&quot;vfmudpukpts&quot;:52724179,&quot;tefrfckeznj&quot;:false,&quot;sphgz&quot;:-348481428.2368012,&quot;kdgletzzod&quot;:-192619065&#125;]&#125;],&quot;soLc3ycyACp4J_E&quot;,[true,[698327156.9576945,&quot;58-IwRp6vSMoGd&quot;,[&quot;lBQcZ5&quot;]],[&#123;&quot;vrimflr&quot;:&quot;fmqZnUDIcG6HtrwMYzh&quot;,&quot;fqeyl&quot;:[&quot;oslrVT4aPI&quot;,false,true,true],&quot;wjqgoc&quot;:false,&quot;bbxvpx&quot;:-1588328944,&quot;kcacsgkzbhsm&quot;:1823753277,&quot;dtnexmkn&quot;:&#123;&quot;mtlopmxnlljh&quot;:&quot;qevx7HX5o&quot;,&quot;vzippqhu&quot;:-83660442.98092143,&quot;ctockzclcchc&quot;:&quot;72L&quot;,&quot;fntbektlg&quot;:false,&quot;zzbwmvpkg&quot;:false,&quot;womcvvuq&quot;:-1374331395.6846483,&quot;biigdjgtvzw&quot;:false,&quot;yzsokcz&quot;:-1864378177.8145332&#125;,&quot;qnwdg&quot;:[true,&quot;BGA&quot;],&quot;iaphtsnw&quot;:&#123;&quot;nzmuozxm&quot;:true,&quot;bvrzv&quot;:-1951734142.2764938,&quot;jrgdwxvmhuz&quot;:&quot;uhTgCYksgDExQTZrn&quot;,&quot;otapzat&quot;:&quot;amDDWs2BNkNyqMvvsOQ&quot;&#125;,&quot;apbdjrqoqih&quot;:&#123;&quot;bihgijjmug&quot;:1578062139,&quot;hbahgngaqdgj&quot;:-463244010.35605156,&quot;xzbyvefdxagh&quot;:&quot;COEUoP&quot;&#125;&#125;,false,[true,[&quot;74kweLE&quot;,&quot;L4jwyZJenG&quot;,2078429203,false,&quot;jnbMtD9f0l05rPo9wKb&quot;,869401191.1674111,-764084235,&quot;lneU2WKax7TEpaEM&quot;,971814952.9628687]],true,-1565998836],true,true,[&#123;&quot;exoerrwjv&quot;:&#123;&quot;gmowcou&quot;:true,&quot;kecvbhxcpe&quot;:true,&quot;xrwmphhr&quot;:true,&quot;cumgpwughusb&quot;:2050389757.2037556,&quot;aazqnpi&quot;:&quot;8G9jVSuuoudZS&quot;,&quot;viuaicdqcs&quot;:true,&quot;njbeccdcoger&quot;:-108041845&#125;,&quot;wfhpwozki&quot;:[true,true,false,&quot;J9pThE&quot;,&quot;bj56bo33JtcAuVtFH-&quot;,&quot;tuTSxut5hG&quot;,true,false,true,true],&quot;wnmuxly&quot;:false,&quot;dnefxymgxusr&quot;:-1732480955,&quot;atzsq&quot;:&quot;sAV5u7AglE024AASW_W&quot;,&quot;qxkxwl&quot;:false,&quot;gedlckhckywi&quot;:[&quot;r4j9iixHwlytAQu9&quot;,&quot;F2j9MQ1kOE&quot;,&quot;0tBcbsKdKSTKMiL&quot;,false,&quot;zduEc_cuOqg&quot;,true,true,true,true],&quot;scwmxl&quot;:false,&quot;lohjxobrc&quot;:1387867700,&quot;lnzgcv&quot;:&quot;tvO-&quot;&#125;,&quot;gPuBaN0&quot;,&quot;Td&quot;,false,-1810221717,26261587.327259026],587226643.9908946,[true,[&#123;&quot;sstsyzjvjcc&quot;:true,&quot;iydpcko&quot;:-660241731,&quot;cuinwrkagfnf&quot;:-1511733569.0501897,&quot;miugqwhluq&quot;:-1153831005.8297157&#125;],[true],true,&#123;&quot;xwtgdypuuoip&quot;:&#123;&quot;jfdmjy&quot;:false,&quot;uxzmpo&quot;:1897582818.237855&#125;,&quot;kbtar&quot;:&quot;sfCPlz0Dw&quot;,&quot;cchfun&quot;:&quot;z4k&quot;,&quot;buviuffu&quot;:-1541101613.0841894,&quot;awmerqx&quot;:&#123;&quot;tmmscngs&quot;:-1457687961,&quot;hyzgfrzhkq&quot;:true,&quot;groauuimfff&quot;:true,&quot;bfknyfu&quot;:true,&quot;cuvamo&quot;:true,&quot;faknxnyyyo&quot;:&quot;KfjeiDi8x&quot;&#125;,&quot;dgxbdhvwz&quot;:false,&quot;tuxmoobswc&quot;:false,&quot;mqyye&quot;:-1420559132.8642693,&quot;cwepngen&quot;:&quot;vD2nC-CzhxOCrEe&quot;,&quot;fsfkaeygzakb&quot;:true&#125;,-135748470,&quot;6&quot;],900941300],[-1025637874.2588499,[[false,&#123;&quot;gklfiz&quot;:true,&quot;tjtyzgefhdd&quot;:-582853363.0086337,&quot;osfgdnauftk&quot;:&quot;Vl3EqlA7OKiAlIjw&quot;,&quot;bzidnf&quot;:true,&quot;wdpicjspsl&quot;:true,&quot;rkeddbrws&quot;:&quot;pMYedEiTgONmh&quot;,&quot;xerpbflz&quot;:758419376,&quot;gilbjkg&quot;:&quot;UyyvO&quot;&#125;,&#123;&quot;xoltj&quot;:&quot;o4gD1a80AUIP8ppL&quot;,&quot;cyhvvey&quot;:true,&quot;nfilawa&quot;:&quot;uoyzlCjrGOVh848s&quot;,&quot;kuzeng&quot;:&quot;NZtEzPtn5Lrt&quot;,&quot;mdplgzrqprbk&quot;:-1088587722,&quot;gishhkef&quot;:true,&quot;myphkklb&quot;:false,&quot;wiikvhyaeo&quot;:&quot;ON&quot;,&quot;brinalpoac&quot;:&quot;cUQcPCbVl40IEIhpoiq&quot;&#125;,&quot;m-89eKmeXXiAncvW&quot;,[-680112778.9736067,681158006.8874329]]],-1924960368.6434278,-1037694580]],true,true,-1708300594.5945342,true],&quot;xhenye&quot;:&#123;&quot;kemzofsdxy&quot;:[-1713931968,[-805035427.518543,-869517642,1087071941.8443158,&#123;&quot;wgpwldezn&quot;:false,&quot;wlxpboidk&quot;:1098127049.5216,&quot;ksbsgwowzwel&quot;:-60523137.21947116,&quot;sigyfdoize&quot;:-1639786919,&quot;stkxya&quot;:[&#123;&quot;tcbjdawezee&quot;:1503065519.4656055&#125;,212498625,&#123;&quot;omcernksme&quot;:false,&quot;mephnqtasows&quot;:-1877881674.7753944,&quot;yparxi&quot;:false,&quot;anvfifj&quot;:&quot;xDPd4N&quot;,&quot;tsbpyhtkt&quot;:&quot;YC4LfaxY62Ki8&quot;,&quot;ebvohotbw&quot;:&quot;vTE2YTprZ&quot;,&quot;dhfcmbhyg&quot;:false,&quot;lqkjefon&quot;:&quot;nKiFRhv2jrSonP&quot;,&quot;emkwdzynylwt&quot;:&quot;Nw7OSW&quot;,&quot;snephpktpam&quot;:&quot;Y8j_Z0&quot;&#125;,&quot;njufIeTs0jwWkhmsw&quot;,1526070883,&#123;&quot;reqebzgpz&quot;:-112549694,&quot;lyyoavlqsb&quot;:true,&quot;grigtdofeoez&quot;:-2103438349.1102376,&quot;lnxlrkl&quot;:&quot;jRMpG&quot;,&quot;enubd&quot;:&quot;s&quot;,&quot;zfeektqqyp&quot;:&quot;yJ06uHs&quot;,&quot;rycqya&quot;:2065122808.7950985&#125;,-43811785.0890918],&quot;gobhbw&quot;:[true,&quot;cj2FXZuCS0nEBHOLS&quot;,1161769059,950471239.4319127,[true,false,&quot;TGh-nycPTRZ22D-NQ_o4&quot;,1879746423,-1876361804.542124,-1254490223.1645222,false,925658823,&quot;HohOH5&quot;],951874358,[&quot;CoK54yZH1M&quot;,-2136020746.5936499,&quot;u1FpY9ocUf6mkX&quot;],false]&#125;,&#123;&quot;dfoclqw&quot;:&quot;NODCfR359C7M_&quot;,&quot;nsjko&quot;:&quot;v6uuOpD&quot;,&quot;lfeupzcqmpk&quot;:false,&quot;ypyzeid&quot;:&quot;zklVHAI1JkTrYBCSlMu&quot;,&quot;uvtppjgprezb&quot;:&quot;nvjJyMbGqua4fTcRWfaX&quot;,&quot;enpchum&quot;:true,&quot;jlvise&quot;:-1635524437.4004927,&quot;yzygqpc&quot;:[919260239.0778828,false,true,&quot;divak2ET&quot;,631651870.7437193,&quot;6c43tow5bgTZwalPi3&quot;,&#123;&quot;onzidfdhjvn&quot;:false,&quot;hoikkswnfo&quot;:false,&quot;gcjwd&quot;:true,&quot;dsjfmtbjfkf&quot;:true,&quot;wzorkob&quot;:&quot;NgMYbSVqgUkzF9JDnrGc&quot;,&quot;zgfrfx&quot;:&quot;lRSUTBYtkk&quot;,&quot;gxkvcgvjhrjy&quot;:true&#125;,&#123;&quot;mgrtkrixa&quot;:1371923484,&quot;nnvtjmx&quot;:&quot;YjulmwcbzFHNCjlEK&quot;,&quot;tqbrrnahao&quot;:true,&quot;ltqihfo&quot;:-1121423677.0131004,&quot;jyuohu&quot;:&quot;UmNpZAav-gZC9&quot;,&quot;wjycdsilfq&quot;:false&#125;,[false,false]],&quot;tmqrlqn&quot;:&quot;_irJ&quot;,&quot;ythdpzeyfzx&quot;:true&#125;,[&#123;&quot;awyrscv&quot;:1292780261.5250838,&quot;qdlqnvxa&quot;:[&quot;L&quot;,-353702928,192952383.1282911,&quot;hQ&quot;,false],&quot;varhial&quot;:&#123;&quot;xexbq&quot;:false,&quot;rwmadniztrgr&quot;:true,&quot;unadilf&quot;:&quot;UH7GtJNx_vmXxyUCzIk&quot;,&quot;xdkzfafcg&quot;:&quot;bKgInz8LfRnIiwgU1K8&quot;&#125;,&quot;hfboeiy&quot;:&quot;6CqK9frOn&quot;&#125;,&#123;&quot;zfnkvjt&quot;:[-1253032068,-728221895.5465573,false,2032637908.5663962,&quot;yyjjD_rA8CVE&quot;],&quot;rtcpgukulhb&quot;:1968728972.8089237&#125;,&quot;BT2VYUTpEb5Cjqnw&quot;,&quot;xLSFRK4I&quot;,false],[1515070620.1010866,false,&quot;A2iiSSi&quot;,[937788248.1172682,&#123;&quot;vnone&quot;:1000593445.688209,&quot;wkzrmmqhmxn&quot;:109353062.87504955,&quot;ljobzqcl&quot;:-1305573497.3978724,&quot;vbdvvgkvnbz&quot;:1681311307,&quot;jokojizfo&quot;:-624502743.2195749,&quot;nlgeakc&quot;:false,&quot;eafzbbc&quot;:-1600168674,&quot;daldy&quot;:true,&quot;nffxijzispp&quot;:-1340518226.6470952&#125;,true,&#123;&quot;vmxlik&quot;:-1099209302.919163,&quot;hzwmoypchkb&quot;:true,&quot;tgeup&quot;:true,&quot;ckriw&quot;:&quot;8ktRRoIRCJ-Zspy&quot;,&quot;tjofribrztg&quot;:1531989934,&quot;dpyobifthft&quot;:&quot;Yes4k&quot;,&quot;qqhrac&quot;:-1250147402.9694977,&quot;mnnvxiqx&quot;:354940954.2023201&#125;,[&quot;3Kk&quot;,true,&quot;OegGtq&quot;],&#123;&quot;dznuwqekx&quot;:true,&quot;pszamqn&quot;:true,&quot;rcdhqdm&quot;:false,&quot;deimsggq&quot;:-1359990668,&quot;fzdhcqlvkwz&quot;:false,&quot;coezuvymrwq&quot;:true,&quot;ndwhvjwdmpz&quot;:1133737449.8011916,&quot;jriqcqqfntzc&quot;:false&#125;,true],&#123;&quot;fslaxrik&quot;:false,&quot;lqlwk&quot;:true,&quot;orezefygfs&quot;:-384506863.7335491,&quot;pupujtozydhb&quot;:&#123;&quot;akmugk&quot;:1298074756.0830932,&quot;nuherbzi&quot;:620762501,&quot;ztztrjzflxzy&quot;:207627657.13165218&#125;,&quot;fkhaz&quot;:-843406251.23525&#125;,&quot;4imZzm7iFV1VHJCXg&quot;,&#123;&quot;etsfrmszqo&quot;:&quot;kliPKjln&quot;,&quot;ltrbd&quot;:&#123;&quot;ncvvtkh&quot;:-816505512.1692358,&quot;lgiwvwk&quot;:363142221.68780464,&quot;bhaizaze&quot;:-900522473.784486,&quot;fwlzzerdngk&quot;:&quot;hY&quot;,&quot;zlvcoery&quot;:false,&quot;beirwfg&quot;:-1425768084,&quot;knkmc&quot;:&quot;k6&quot;,&quot;tnabfypju&quot;:&quot;j_0I0a&quot;,&quot;nsntcxlceva&quot;:&quot;75coqfV&quot;&#125;,&quot;bkafiqd&quot;:&quot;yBKcIFotKhSp&quot;&#125;,&#123;&quot;sbtnn&quot;:592441966.4201996,&quot;vaarlun&quot;:false,&quot;odzfk&quot;:-1135987808.335956,&quot;qwrruiurzvkk&quot;:1742165528,&quot;inxjx&quot;:&quot;S2_thA_3-NNCY31gGT1T&quot;,&quot;nxrrxumkkr&quot;:false,&quot;kvrbgdlej&quot;:583298432,&quot;gkoaeizts&quot;:&quot;q3&quot;,&quot;toixqytpfs&quot;:&#123;&quot;lygaokqo&quot;:false&#125;,&quot;hcuozupeotwn&quot;:&quot;OxYpQGiuidTV-MArY_&quot;&#125;,true],true,951251792.4160668],true,false,&#123;&quot;lgpdzpgjpx&quot;:&quot;7wP3NVNKzy-MB25jeir&quot;,&quot;hdnflqsvmny&quot;:false,&quot;tnbwgwfs&quot;:&quot;1RGUKMbrEA6Ihghi&quot;,&quot;efwxvbpr&quot;:true,&quot;apcjsvc&quot;:&quot;tgnFEuP&quot;&#125;,[&quot;fibVHn0&quot;,-1355452961.8300054],-763636159.0354669,&quot;45&quot;,&#123;&quot;egleu&quot;:false&#125;]&#125;,&quot;wyflumxx&quot;:606853676.8559177,&quot;xfrfs&quot;:&#123;&quot;bpmmre&quot;:-699035788.1210531&#125;,&quot;astjsmkrgfl&quot;:true,&quot;vtdbsxzbrp&quot;:[&quot;1jr1jrHCCxX0k8u7v&quot;,[561744.5374090297,&#123;&quot;qocslunn&quot;:-1236546869.1413891,&quot;uajwiy&quot;:&#123;&quot;gbdfahkx&quot;:&quot;WoT6CAbAkcIW&quot;,&quot;cboasttcgo&quot;:&#123;&quot;qgmezcgvnn&quot;:&#123;&quot;akpfwxcg&quot;:&quot;Yp&quot;,&quot;hiaodfs&quot;:true,&quot;uihrnqe&quot;:&quot;fww0o0M_9FZOup&quot;,&quot;zpouvy&quot;:&quot;0eD&quot;,&quot;ghrzcndjz&quot;:-570933190.062901&#125;,&quot;njeqvwtsqwpp&quot;:&quot;PJWbPOqcZ-FytU&quot;,&quot;nzmogoyk&quot;:[true,true,false,&quot;9FkCYsQq9TrnH_dnFQ&quot;,&quot;Ficgqseqb_U&quot;,true,-1941578162,true,true,1506648943],&quot;wjbsmmgbl&quot;:&quot;VBVa6elwD&quot;,&quot;txityj&quot;:[false,-1925291825.7742538,&quot;k7MRGhftWwpnDN0&quot;,true,&quot;JJlSfDuz3UWrQoE&quot;,false,&quot;8xdxWhnbhmPN_KB3OWXF&quot;,-1269897173],&quot;xfewjrmanegv&quot;:1592995213.1564643,&quot;fvosshqzogej&quot;:185009600,&quot;pbwhd&quot;:[-1760380269.8625515,&quot;awu511SC9Md&quot;,&quot;Jt_E&quot;,true,&quot;mp_tGG-T9V&quot;,&quot;YkRm3Rx9zfUQHS0QH-&quot;,212218763,&quot;QLEYD0QJescPx9&quot;,-1273082687.541183]&#125;&#125;,&quot;nbqdwg&quot;:&#123;&quot;sexkplynokqd&quot;:&quot;niQlORKBhnnlFC&quot;,&quot;rclcgw&quot;:&#123;&quot;rdffsor&quot;:[&quot;N6X--z88Fnbe&quot;,&quot;_Ir_HVKHuk0Rt3S&quot;,&quot;PQEOnICemO7maPrhCojI&quot;,&quot;XJz&quot;],&quot;gmnrusskm&quot;:false,&quot;yssqtqw&quot;:[false,&quot;LqeoL4zcCFtJ&quot;,&quot;w6a&quot;,&quot;BrxFIwRASm-NJre&quot;],&quot;fekusikau&quot;:[&quot;l&quot;,false,&quot;HUtsC0vgdMouv4cYg9a&quot;,&quot;yXwZunKBou7y&quot;,&quot;BpN9Jyo_K-I8&quot;,&quot;gb1Ud72In&quot;,false,true,true],&quot;jecveapqju&quot;:&#123;&quot;jvscquwuv&quot;:-395093179.77329963,&quot;xqzqje&quot;:false,&quot;alvtrd&quot;:&quot;FOUKJj&quot;,&quot;jpjucwmkj&quot;:&quot;Ak74yG&quot;,&quot;tylxotikf&quot;:false,&quot;kqvmlgcygg&quot;:244130615.79503688,&quot;wcjbdzwa&quot;:500287767.6856092,&quot;kvzyms&quot;:&quot;jjt1Ke&quot;&#125;,&quot;kryqgjeoece&quot;:&quot;YVyZcPu&quot;,&quot;mpmxzopptusc&quot;:true,&quot;uyarzrmja&quot;:true&#125;,&quot;tukitmlig&quot;:[389513860],&quot;kjczl&quot;:1795259296.5039878,&quot;wybdsosyzcha&quot;:-1290623776.184505&#125;,&quot;tpjlykcz&quot;:false,&quot;ygjosauo&quot;:true,&quot;cumkci&quot;:&#123;&quot;dylgur&quot;:&quot;vFLo5yzkUM6UO&quot;,&quot;jaibsrqo&quot;:&quot;gux8fEqYsbxyDs&quot;,&quot;agfyveq&quot;:-1597233399,&quot;kcwihvc&quot;:[&#123;&quot;tfkioivxg&quot;:&quot;fpKwZ3982rwZ&quot;,&quot;ixzpspa&quot;:false,&quot;vzpfevtxupda&quot;:&quot;d3&quot;,&quot;keoceyx&quot;:&quot;VV246o0k1&quot;&#125;,false,false],&quot;bhnylkf&quot;:-791060771,&quot;ztumv&quot;:true,&quot;wsgjuxhmkq&quot;:[-1676766713,-1537104182.010321,false,&quot;W&quot;,false],&quot;luxuouaiafks&quot;:false,&quot;lumoeigwphr&quot;:&quot;18xmBvOSPeC8azShirG&quot;&#125;&#125;,[false,-802997708.7600138,[-2053605394,[[-1399814510.7030656,977135150.16729,192789963],false,true,-1150809483,870594874.543454,-349754105.96800435,&quot;uXDHWbTUZ6w3mef&quot;,&quot;b7&quot;],&quot;orfu_NuA3PULBFvt&quot;,&quot;rMQgHO7qp_iEQtYRhI&quot;,[true,&quot;VArbiT7&quot;,&#123;&quot;ugybni&quot;:&quot;tppWs4TDciQA&quot;&#125;,&#123;&quot;mbtwxuiw&quot;:2007589536.1571848,&quot;eyggegpd&quot;:&quot;AYUXBDRQwp7bLRi3dorR&quot;,&quot;ajqnjvonyzj&quot;:584606137,&quot;krqxfzymxdhi&quot;:false,&quot;rsewnnoeu&quot;:&quot;RNFJ&quot;,&quot;dvpynxqkhny&quot;:true,&quot;fqalezvvugs&quot;:&quot;4acA2cG0&quot;,&quot;nikiirsvj&quot;:true&#125;,&quot;1Mc&quot;],-1573848105.4230146,&quot;SKiwY-9YeY_hPRmWFWIT&quot;,false,[&quot;HNinq-l&quot;,[&quot;H&quot;,false,-441521083.9283443,&quot;Z_8ZCGG8lrV1&quot;,true,true,&quot;Q-e&quot;],-116020140.1204658,[false,&quot;3ZEu7c7zJKB&quot;,&quot;fKIq_dNpbcxxNy-sORG6&quot;,293709833.5096803,true,true,&quot;tqp-eB&quot;,false]],false],&quot;fAvqf0aMIECKiDSrk&quot;,&quot;EGQCCS&quot;,[1425411792.9755037,[[true,&quot;Fdhp&quot;],105232888,false,true,&#123;&quot;xqgbtiqmhey&quot;:-106846587&#125;,[true,1006096276,&quot;5WCyPiTJsXj&quot;,&quot;9GHK&quot;,&quot;6XNJL_xKyP0OyEbNVJF&quot;,true],29964889.205074985,&#123;&quot;eyfebw&quot;:1032894485.2535043,&quot;qtwexefmcxe&quot;:328388067,&quot;qjxmrqn&quot;:1410429136.1468182,&quot;gyqlgbgm&quot;:42956826.78513192,&quot;spvsoitnwsvt&quot;:-907252368.4503814,&quot;awqktjufcadd&quot;:true,&quot;byekartjnn&quot;:false,&quot;afzuxwogfevn&quot;:&quot;sH_tdB&quot;,&quot;wjigflls&quot;:true&#125;]],&#123;&quot;dciduftzpd&quot;:&#123;&quot;zybiggjjth&quot;:[&quot;-eW&quot;,-1749116727.1662536,-1805132480,true,&quot;mUG-Kz&quot;,592646268.447506],&quot;tzdjwzontahh&quot;:&#123;&quot;pfcwvgyfg&quot;:&quot;FRQU&quot;&#125;,&quot;ygzvbonzwtj&quot;:&#123;&quot;fskrfxpk&quot;:false&#125;,&quot;uqrrz&quot;:&quot;f5OnXaoFbhbCBJA&quot;,&quot;rodqmxzelk&quot;:[&quot;6eYX_&quot;,false,1599473240,true,false,false]&#125;,&quot;ozkrzb&quot;:[false,false,true,&quot;3lupCUGZAL2Re&quot;,-991088956,false,[false,&quot;0Ll6v86z&quot;,&quot;V&quot;,676772777,-1714910506.345465,-17895074.62039487,-1787194802,false,&quot;9KUleV_UtVK7X&quot;,false],&#123;&quot;blkymot&quot;:1561878291,&quot;dfsjexi&quot;:false,&quot;fjuwryhskukl&quot;:-2017954572.5434089,&quot;uhbjdyxmoq&quot;:&quot;HBzUOXH&quot;,&quot;qignwtxsgtx&quot;:&quot;i-kKQjuksT&quot;,&quot;juccofewjq&quot;:true,&quot;zndmvljdwu&quot;:-223870705.86433518,&quot;xkwkq&quot;:&quot;uH&quot;&#125;]&#125;,&#123;&quot;qlututwete&quot;:true,&quot;adhcbteqsfzz&quot;:true,&quot;veflfjbjnjy&quot;:&#123;&quot;htrpocyvqy&quot;:349697001,&quot;wrztntsfss&quot;:[true,&quot;CW2vaEa7&quot;,true,&quot;lq_&quot;,true,735024535],&quot;lqwyvb&quot;:false,&quot;itxzlrk&quot;:-347041377,&quot;lyvjzhag&quot;:true&#125;,&quot;znuyqb&quot;:&quot;GggEy&quot;&#125;,887667842,false],[&#123;&quot;bmlgtqc&quot;:[false,&quot;rqMMUo&quot;],&quot;euqgr&quot;:&#123;&quot;dymouqh&quot;:true,&quot;orfbvtq&quot;:&#123;&quot;iejmjdyrs&quot;:&quot;V85icpm_ijqUg&quot;,&quot;vbrvfuqjpcfm&quot;:true&#125;,&quot;cbimevfc&quot;:&#123;&quot;builaeezns&quot;:&quot;Df-FqGrIuenzif2yuY&quot;,&quot;emenwqmmhov&quot;:false,&quot;clvpjlh&quot;:1092852226,&quot;hvocpqlfrqsk&quot;:&quot;lbfwg&quot;,&quot;yxpgfpxrvruj&quot;:true,&quot;tetvli&quot;:-1680553264.5893738,&quot;jbqeqk&quot;:true&#125;&#125;,&quot;ctqrrbyaaqhr&quot;:true&#125;,[&#123;&quot;bimrwghswo&quot;:[false,-1164119898.5468001,false,true,&quot;wby-NKerV58i&quot;,&quot;Yom5xxJlUS6y&quot;],&quot;libtxdvwhj&quot;:-1980565219,&quot;rxkxzgemfkhz&quot;:false,&quot;vzpncd&quot;:453388184&#125;,&quot;fg4x7JY6TEYPwNyd&quot;,[&quot;SGMMXIDILo_FbbQwOx6j&quot;,&#123;&quot;kjuersyzccgx&quot;:true,&quot;kbjrbqpvhjq&quot;:&quot;x5lQpiEDR5wKZ&quot;,&quot;xvfuz&quot;:327749931.6296166,&quot;pdceqod&quot;:&quot;NJd&quot;&#125;],&#123;&quot;ybzaahpuqjh&quot;:&#123;&quot;rqehh&quot;:false,&quot;cpbzshh&quot;:474891438,&quot;xsttzxrlsvwi&quot;:&quot;tEQvPHpktpk78tcJNV&quot;&#125;,&quot;bmdmbwatgluo&quot;:&#123;&quot;tngdbtfwfjtr&quot;:true,&quot;husdsu&quot;:true&#125;,&quot;iisdly&quot;:true,&quot;lausvjta&quot;:-1051639134,&quot;ofltnwrxwvtu&quot;:false,&quot;mautqg&quot;:[true]&#125;,&#123;&quot;pfwvqeg&quot;:&quot;iCwbtXG1jJE&quot;,&quot;fxfezdbjhlpe&quot;:&#123;&quot;ovxtj&quot;:1080202809&#125;,&quot;zzrnxa&quot;:true,&quot;rcjwgxcqes&quot;:&#123;&quot;ehzuxhctq&quot;:&quot;1wnzwzgnZD&quot;,&quot;gpohoalgwj&quot;:1939205415&#125;,&quot;lhvslswxzwf&quot;:true,&quot;rqmne&quot;:&quot;7OR0gCLkAOxPb8zn&quot;,&quot;knklginsn&quot;:true,&quot;ilscwraz&quot;:&#123;&quot;bgcjkzdykmv&quot;:-2087115871.6244044,&quot;cdtmzlvlad&quot;:false,&quot;ibqikxxf&quot;:&quot;LB_&quot;,&quot;uenygcjpcc&quot;:&quot;-Q9&quot;,&quot;zsrzwnuz&quot;:&quot;CZ31U92hEH6D1ZvvKl&quot;&#125;,&quot;kavbxa&quot;:[-571391870,1359112810,&quot;0P6Fi5XxY6Gt&quot;,&quot;x0RFlz2_NfLL&quot;,true,&quot;hUcVjSk8&quot;,1481727538]&#125;,false],[-92991441.58020832]],&quot;oGeqskhAUrLi-K9GMly&quot;,-1008876839,&quot;d6sH0xEbHC6hBpA3P&quot;,&quot;hL28NZJpr&quot;,-846574898]],&quot;ewxjjyuo&quot;:[&#123;&quot;wlskfio&quot;:[false,true,[&quot;4&quot;,&quot;7qZYZKZxT&quot;,[&quot;bCVyvkYz_HK5&quot;,[302098255.8934899,1823035976,&quot;_Gf1-lyJA&quot;,&quot;D3X58Uiu&quot;],&#123;&quot;enmdwv&quot;:-2086951943.2325172&#125;,&quot;Mhi5mNoQNN-vk&quot;,&#123;&quot;ovoldmoq&quot;:&quot;ypNy2&quot;,&quot;vyttyofwdeu&quot;:&quot;iu13Jozou&quot;,&quot;kyrsackwkwcv&quot;:1702607487,&quot;baosyvlbwokk&quot;:827733957.3994164,&quot;pwwrfysifrf&quot;:&quot;9rZS&quot;,&quot;daxwsjv&quot;:330954118,&quot;tdqnt&quot;:&quot;WDHV_NY&quot;,&quot;sahsrmijujm&quot;:&quot;XCMv0QPB7hp&quot;&#125;,&#123;&quot;meymmbpch&quot;:&quot;qQ&quot;&#125;,&quot;UC0l&quot;,[&quot;mQ89vi&quot;,true,1807380904.4068377,true,&quot;LWT8otFgdN-2&quot;,true,true]],[[false,&quot;r_iaSOjDJizgWfKTVLv&quot;,&quot;7WgYK0ds3p_&quot;,&quot;sR0AzZ2nh&quot;,&quot;IfkootTtt66AYmx8&quot;,432874271.3492509,&quot;V2p2AkKLcQSoW&quot;,&quot;VqEXrh5PpdEXW&quot;,-250522174.4528205,1881293682],&quot;pL&quot;,[true,1597087752,-479340988.3343571,false],1362746135,true,-984937760,&quot;D9&quot;,1802679211.0451655,&quot;U&quot;],&#123;&quot;vfewicpzsd&quot;:&#123;&quot;lnptk&quot;:true,&quot;mphanqkvg&quot;:&quot;7rt3cs97e8FcZaNwv&quot;,&quot;myriihbc&quot;:true,&quot;jwdadczhu&quot;:&quot;k6YiieH5A2AfeMX&quot;,&quot;hhsyocbay&quot;:2088565662.8026524,&quot;ppocyjhnyfw&quot;:-1285977432.0531442,&quot;qxrzorvip&quot;:&quot;7KNiE&quot;&#125;,&quot;dleyysswc&quot;:&#123;&quot;lnkzk&quot;:false,&quot;wxuxwyjx&quot;:&quot;AuvXjDV1b71yVR4dq&quot;,&quot;nemwjgg&quot;:203990540.5535996,&quot;cwqpqxa&quot;:&quot;gOfc_6fgF&quot;,&quot;qregtsefat&quot;:true,&quot;vjklnndaw&quot;:-922256624.7759064,&quot;yesgdekxdkr&quot;:-1242756045,&quot;iyznnbg&quot;:816397031&#125;,&quot;dfprffw&quot;:&#123;&quot;otokfvj&quot;:true,&quot;wobsu&quot;:&quot;sImH&quot;,&quot;ptxxmrcjyp&quot;:-504203914.2462589&#125;,&quot;hropaxwuvg&quot;:&quot;Vl4KOyqYLmbLlF&quot;,&quot;hapxq&quot;:true,&quot;ycqqonwjjqe&quot;:false,&quot;nxpfremqescb&quot;:-979478208.0100743,&quot;ovcbynvqqzs&quot;:&quot;p2yMkTIozYAquwD0BXyz&quot;,&quot;obibivinxzi&quot;:-76109536.15975918,&quot;mhxfot&quot;:&#123;&quot;zpjur&quot;:true,&quot;qgfechzs&quot;:&quot;cFj3MFm9&quot;,&quot;numso&quot;:&quot;oT5J_cBc&quot;,&quot;vhonktbrouof&quot;:&quot;yml_N&quot;,&quot;zvaveqjsfg&quot;:-718891526,&quot;ujiwxt&quot;:&quot;PeDPk7QKYLsaB_oX&quot;,&quot;yuxpnqmksu&quot;:&quot;tAekGFlr4ZF_O&quot;,&quot;pqmgegatlpo&quot;:true,&quot;wqwbnjk&quot;:&quot;xssZU97dKX&quot;,&quot;dgkqcdv&quot;:-1802763662&#125;&#125;,&#123;&quot;rzwkqxpljy&quot;:&quot;r4LxKg0pkUXeVgd&quot;,&quot;clgmypzgz&quot;:[-194264292.15141857,&quot;rPvjgi&quot;,&quot;ggDs2j&quot;,true,true,true,false,&quot;ARc8Z&quot;,255432289.78754443],&quot;ygqpbazzh&quot;:&quot;3Vl34a&quot;,&quot;uybnutkchsqz&quot;:&quot;qDXXxx7NE6A_vj7&quot;,&quot;lgvto&quot;:&quot;L4edBdWMt&quot;,&quot;krurwyolxxmx&quot;:&quot;AG5jwr4kzbcLu&quot;,&quot;ajjhoro&quot;:&quot;P&quot;,&quot;rblwkrerpdlu&quot;:[false,false,-48073830,&quot;64LykBwj3KxV36lV&quot;,&quot;WjA&quot;,true,false,true,false],&quot;gmwtvemdj&quot;:&#123;&quot;ponkn&quot;:true,&quot;xryznoh&quot;:true,&quot;wiuwyypaoo&quot;:&quot;Z&quot;,&quot;knimef&quot;:&quot;xK&quot;&#125;&#125;,&quot;nHR&quot;,-402066793,[&#123;&quot;fqkalsaxm&quot;:1029874193.7218463,&quot;pxusjwwlpid&quot;:-408158064,&quot;eieiq&quot;:&quot;f6HYII&quot;,&quot;ynxnclsnmhg&quot;:-1799101665,&quot;gwjpdizskxi&quot;:&quot;s7Hfy9&quot;,&quot;qxurnvewvaeb&quot;:1614058216.6136463,&quot;eoccdktvyyoq&quot;:&quot;SkA4XMaUrqQ&quot;,&quot;bpeuarsexpr&quot;:1632296444.7840831,&quot;iuzzdbdstmv&quot;:-1290213224.113266&#125;,-235477017,-1355490881.169675,false],&#123;&quot;fliwevcm&quot;:&quot;5YU0&quot;,&quot;yaeqxg&quot;:[false],&quot;ncbhivtwqybs&quot;:true,&quot;nmfehzstbrq&quot;:347018696,&quot;zxtkgl&quot;:&quot;M&quot;,&quot;oxbbrsoiojq&quot;:[false,-1471193267],&quot;wkfgroymz&quot;:-1174030722,&quot;hdkqrzujjzcl&quot;:[-1566230641.9768677,-524062138.16113025,374913053.5746212,&quot;2JWXVC&quot;,&quot;eFrbzsdYyyxKIXPOVH54&quot;,665258485,904542319.709816,false,&quot;GgTN-hu_4dbJj-n3u&quot;,-982305335],&quot;myxwmmki&quot;:[true,true,1656980713.0403624],&quot;zmsxpqac&quot;:false&#125;],757917705.8162723,-1739166167,&quot;CtA1Ro&quot;,[-683679780,[true,false,false,-590813035],&#123;&quot;hifhjhidsrb&quot;:[true,false,-516065053,-339008091,true],&quot;kxvkurqrors&quot;:[&quot;hbqQuvWgNQZS2Fa2yj&quot;,true,&quot;6dQ9XtUHebZ4kwPAl-7w&quot;],&quot;htsmjiz&quot;:[-698199182.2113508,false,-1664814329,2069733558.4444075,-234710634,true,-2126970710.6003466],&quot;qltnsgwvb&quot;:621766196.008857,&quot;abcrfwsgc&quot;:&quot;9FhGT1orFI&quot;,&quot;byddsksb&quot;:&#123;&quot;ppegqosqm&quot;:&quot;8fmi&quot;,&quot;pqhvs&quot;:&quot;6x1ltJesWPuN&quot;,&quot;wsjvpcmrjq&quot;:true,&quot;daxgxroity&quot;:&quot;e_9jwxk4XUNL&quot;,&quot;xdydofs&quot;:&quot;OXYfXTn-mb&quot;,&quot;cpisa&quot;:&quot;mxNYG-g_fd&quot;,&quot;ksefvgagbgat&quot;:false&#125;,&quot;wyfxopkxv&quot;:false,&quot;lgzzqgsxu&quot;:-1678218765.086281&#125;],false],&quot;mcldtqgzhc&quot;:&#123;&quot;jujcds&quot;:&quot;wfEyQUp7kAeuL0J&quot;,&quot;qszahak&quot;:786216426,&quot;ytjazh&quot;:[[&#123;&quot;uopqxeaup&quot;:&quot;w&quot;,&quot;khyzbkfy&quot;:true,&quot;qutgyd&quot;:false,&quot;wdlbmfkwcfc&quot;:&quot;EQWiY_9YgFJOhb2&quot;,&quot;vvbmdc&quot;:&quot;WQjh&quot;,&quot;hhskku&quot;:false,&quot;pzueectvbiox&quot;:-441144534.4889692&#125;],&#123;&quot;piafs&quot;:[-1559226766,true],&quot;vgqueqvjzrzj&quot;:&quot;Fbv-qDgliLklax9&quot;,&quot;fejnumt&quot;:[&quot;Is2&quot;,&quot;-qQcA4MLNdMWrJUW1vs&quot;,-1137924841,false,1996164626,&quot;4gBrRzFq5z&quot;],&quot;yrphkqocw&quot;:&quot;YpRgL3-z5J79bVK&quot;,&quot;jchlcd&quot;:-1295730314,&quot;fuylitdjsbpp&quot;:[true]&#125;,true,[[true,true,&quot;n0z&quot;,1316135786,516124673.01366377,1150613976.6446474,false,-1168540718.826539,false,-1788242240.514571],[&quot;-3n-oYv4h&quot;,904275476,&quot;XD_uHM&quot;,&quot;Ic-&quot;,true,true,&quot;VxfdtS1ynpZC&quot;],-774382468.2206059,&quot;h_Akv&quot;,1894939886.4613366]],&quot;hdjml&quot;:[[-1906715167.7154028,&#123;&quot;exivmlldeh&quot;:&quot;Pca2PCoVWGy&quot;,&quot;vietfbkhww&quot;:&quot;jb_tksEAr-&quot;,&quot;kxvbyxtx&quot;:-748366235.5526559,&quot;eaggdsbhka&quot;:1259366349.96522,&quot;minol&quot;:false&#125;,&quot;8y&quot;],false]&#125;&#125;,&quot;D5b8aep2rHs_4&quot;,&quot;tuttnY2hP8CBhIR&quot;,&#123;&quot;uzxmdzxwwz&quot;:true,&quot;pyyrilpawpn&quot;:886193335,&quot;jfbfmuz&quot;:&quot;IAU6NF5W7E93o2_ZW&quot;,&quot;hygtvkfdz&quot;:&quot;49e&quot;,&quot;ocvvng&quot;:&#123;&quot;aqdjrp&quot;:1581318894.6392348,&quot;gdlgkskwsn&quot;:[[true,[&quot;ZsztPEP98me6k_N&quot;,&quot;C2cRo&quot;,964092523.9734194,&quot;0KJbTpm&quot;,1096984743.970191,true,-816526325.4639177,2111817927.3652468,true,&quot;PwYiFPI0jaL4e&quot;],&quot;4SB38X95Y&quot;,true,-757378637,140114379,false],&#123;&quot;hmenefwzhjbr&quot;:&quot;cXrZluwpNqkKM91EBaM&quot;,&quot;jnjdcw&quot;:&quot;gjwSSP&quot;,&quot;exzmqek&quot;:false&#125;,529739277.27264667],&quot;ujohexrcdqfv&quot;:&#123;&quot;urqpe&quot;:&#123;&quot;zqqmdwftzzq&quot;:[144356748,true,-62844341.87803153,false,-1492676543,97010809.25408071,true],&quot;btctsujjv&quot;:-849921904,&quot;unyqzdgzfkp&quot;:1064333977&#125;,&quot;vmzmeifi&quot;:&quot;yj4g&quot;,&quot;otyqujvhdxvl&quot;:&#123;&quot;joxcoh&quot;:&#123;&quot;erzwfbas&quot;:true,&quot;iwzvqlaubyt&quot;:false,&quot;xbigiit&quot;:-1106906916.8232164,&quot;emsddn&quot;:false,&quot;dbxkfjl&quot;:true,&quot;ijtlnuxfjwiw&quot;:723367848,&quot;ffiinqj&quot;:&quot;euxnlAR--BNLYK4UP&quot;,&quot;flcnp&quot;:&quot;OagU&quot;&#125;,&quot;biwxeez&quot;:&quot;7S8ASWD4DKbfStl&quot;,&quot;vocdts&quot;:[&quot;ZZYJ9joTaJ-nEo&quot;,&quot;w4I4w_O5JDA&quot;],&quot;rqpdoefh&quot;:false,&quot;bijnkvo&quot;:&quot;D-kWzO&quot;,&quot;crwwpytvetyx&quot;:&#123;&quot;oifzvrlvqv&quot;:&quot;Ww69GzTD3Au&quot;&#125;&#125;&#125;,&quot;dvaihcflbf&quot;:true,&quot;nbmcbsrl&quot;:55649510,&quot;yvcxd&quot;:&#123;&quot;pbtbmgzqknkg&quot;:[&#123;&quot;hsvpce&quot;:true,&quot;zuaico&quot;:false,&quot;jfmwzcx&quot;:true,&quot;ygdjtc&quot;:true,&quot;bcwklaujgh&quot;:&quot;h9juu-URKtV&quot;,&quot;epnmjflsw&quot;:1095034813.787303&#125;,&quot;V8Wv0zxHA&quot;,1991477397.2298384,&#123;&quot;actindo&quot;:-1386946732,&quot;dsnvxcbvaidg&quot;:-1322518166,&quot;qspwoqbgbkf&quot;:true,&quot;xgrfltt&quot;:true,&quot;hrmmrt&quot;:false,&quot;rocrirdytq&quot;:true,&quot;wlhkdmj&quot;:&quot;7CaT9wVudV&quot;,&quot;cmmll&quot;:-10348053,&quot;nnqrql&quot;:false,&quot;yzsyxyyn&quot;:&quot;HdCdqVVLgef1&quot;&#125;,&#123;&quot;qpigw&quot;:true,&quot;hjztccuuj&quot;:false,&quot;ghbvt&quot;:false,&quot;guphstikpu&quot;:-703630790.7987573,&quot;pcuur&quot;:false,&quot;dfufdqniyrln&quot;:false&#125;],&quot;nyyjphus&quot;:&#123;&quot;vtgtquuvuwvm&quot;:[false,false,false,false,true,&quot;B&quot;,&quot;U9IwTbzcy3Zp6RqEt&quot;,&quot;ydYKPeWa1JIB&quot;,false],&quot;mleucqkvoydy&quot;:&#123;&quot;cumdcmornviw&quot;:false,&quot;yqgrm&quot;:-1596228354.0448751,&quot;erhgaahsotc&quot;:-1101538965,&quot;gjbhzzddqfp&quot;:-853032076.6797427,&quot;hjjscd&quot;:false&#125;,&quot;xwajfngcka&quot;:false,&quot;frrnvrqji&quot;:&#123;&quot;bhpdajlem&quot;:627763190,&quot;eepzqlapcfl&quot;:&quot;MJvCbR&quot;,&quot;virba&quot;:&quot;RIMk5wD&quot;,&quot;pffoox&quot;:1641514859,&quot;qwsbvwjrk&quot;:true,&quot;ffbibogtwzv&quot;:&quot;IoZc2w4Epxh6N3y4He&quot;,&quot;bxcvv&quot;:&quot;5C86t83PTfnQlpaaV&quot;,&quot;zlvapztcg&quot;:932477427.4998753,&quot;wtjteo&quot;:true,&quot;apimss&quot;:1308708692&#125;,&quot;djfvg&quot;:false,&quot;tdcmuid&quot;:&#123;&quot;ktdqimljmq&quot;:-2134717210.4028487,&quot;ykryhohp&quot;:true,&quot;qyjxm&quot;:false,&quot;thufqdtvkf&quot;:-351874524.3639772,&quot;ezaajf&quot;:1952725419.4566972&#125;,&quot;pmwiun&quot;:true,&quot;urafxu&quot;:&#123;&quot;cppchinkwla&quot;:true,&quot;ypdfayqej&quot;:&quot;e&quot;&#125;,&quot;zpafysv&quot;:-1843351676.4220238,&quot;khwnisjic&quot;:[-1321500873,true,&quot;OdSUmeR&quot;,true,true,false,-1469078394.0145407,true,&quot;MxgA4rxEqKeo1S&quot;,&quot;FOd3_02txpAK4e6F83&quot;]&#125;,&quot;uofyt&quot;:&quot;AYXhcj_beQtNfVHRIz&quot;,&quot;fpajxq&quot;:&quot;5TCPSkFdAzZ&quot;,&quot;lqfbtrzvqmec&quot;:&quot;a7NgMhplqo852YhI&quot;,&quot;cjfyemggpcbh&quot;:[true,-1697479909,&quot;bDQYjxc&quot;,[false,&quot;GXe1HXDFHNyE6y&quot;,false,662478893.071877,896710804,true,false],-323751803,[&quot;UaRMKAi74o&quot;,&quot;pvXocIx0HgL7I&quot;,false,&quot;qC-&quot;,-84034391,false,false]],&quot;nkqas&quot;:&#123;&quot;vpfhut&quot;:&#123;&quot;vvimqbf&quot;:true,&quot;qwrvoo&quot;:true,&quot;lraaluyslp&quot;:&quot;TOa-MN5&quot;,&quot;ytexzrlnc&quot;:false,&quot;lxkoakr&quot;:false,&quot;sadoghsmopw&quot;:&quot;IvuO6LBdb&quot;&#125;,&quot;ozyyhoe&quot;:[&quot;9WT4y4PU&quot;,&quot;nuZ5nwVhbw_8HSJU4KS4&quot;,&quot;RsJMYHP&quot;],&quot;zjyymdftxkhn&quot;:1177104596.9635024,&quot;zcdrqr&quot;:[&quot;ZEDZTsUJsEzwl2_EYg&quot;,&quot;YHba2G&quot;,714998063.8911437,false,&quot;LXXk69&quot;,2072565414.68213,&quot;jdCv0dmPu-dj-RmRV&quot;,&quot;R4FssgbPL0XavpqyYx&quot;]&#125;,&quot;natbxbghrhs&quot;:[&#123;&quot;lsxdolpzvg&quot;:&quot;UBpes42EFW-G6Frt&quot;,&quot;jplnir&quot;:&quot;sA2rF4UEcuGhLfREL&quot;&#125;,&quot;DgDmNxgGmy&quot;,&#123;&quot;fxdow&quot;:true,&quot;mdkklxu&quot;:-833464483.6372155,&quot;pofdpnvs&quot;:true,&quot;uzoehhii&quot;:false&#125;,[&quot;OrfsMP-&quot;,-1932683014.0949554]],&quot;eojsep&quot;:&quot;_4r5YZKVLc_&quot;&#125;&#125;&#125;],&quot;ktmvgrxpsppv&quot;:false&#125;],&quot;AyCOf&quot;,1037567253.0805973,-1252882131.4680645,true,&#123;&quot;xaitrnxfvw&quot;:&#123;&quot;nwgjmr&quot;:&quot;pKVnueXWV&quot;,&quot;gdvpvjt&quot;:&quot;uPsA-iMYPH4rZOSC&quot;,&quot;mdlsov&quot;:[&quot;fnS_W-r-Ts&quot;,&quot;GH1JBoLKbS8UZ&quot;,true,74408454.32561278,&#123;&quot;vmaeogwofia&quot;:&#123;&quot;ipuzqxt&quot;:665408851.2694653,&quot;kzuzrpryce&quot;:-937327654,&quot;tkxqer&quot;:&#123;&quot;fyxqvguanpn&quot;:&quot;ba&quot;,&quot;cgfaldkqrkru&quot;:&quot;-UDJp65e&quot;,&quot;nauxavect&quot;:[&#123;&quot;sfiyhuxsumq&quot;:2008216037.4933994,&quot;tdemqbspwop&quot;:228013618.26449654,&quot;wcoqgwhss&quot;:false,&quot;cadwgw&quot;:&quot;jwR&quot;,&quot;vckdkr&quot;:true,&quot;sbibvslyeyp&quot;:&quot;y2mGH3&quot;&#125;,true],&quot;ztizbieqm&quot;:&quot;uP1ot-CXhrZrcDLEzno&quot;,&quot;duvsmv&quot;:false,&quot;exrzpl&quot;:1917425767,&quot;cboayo&quot;:&#123;&quot;kysneor&quot;:[&quot;0tyWNfGAKIPkm3O4&quot;,&quot;Vi0RmMEAqF&quot;,&quot;nO3y0az__9O2&quot;,false,false,true,-783708593.2980149,true,809154590.0862904],&quot;tkltoff&quot;:&#123;&quot;ymmizcfb&quot;:true,&quot;ugytqyclqdu&quot;:true,&quot;luaditwcrco&quot;:419106966,&quot;ugwbgbgiqxor&quot;:true,&quot;uvhbn&quot;:&quot;z6WQi&quot;,&quot;dwfwtk&quot;:372214359.85793847,&quot;pikwq&quot;:true&#125;,&quot;xktiwoai&quot;:true,&quot;ojcjccg&quot;:1925714307.607916,&quot;quvitvvwisb&quot;:true,&quot;xvwzmfzkzum&quot;:[true,true,130780451.96412788,598921339.3154116,false,1723692770.2819989,&quot;aBAua-5u-Tpg&quot;,&quot;0IXCiXjS9yGW0BG3m&quot;],&quot;aigupwnb&quot;:[true,false,true,-1882527666,&quot;i0X-xn0mWxz9u5-TriLO&quot;,&quot;0Aj41Tnsb&quot;],&quot;juckmwgwcb&quot;:&#123;&quot;idavqp&quot;:false,&quot;vcwarugu&quot;:-1469597156&#125;,&quot;xinpen&quot;:[&quot;tPyEk9c1syndc3&quot;,false,&quot;THB98AvSqzKcHEBn&quot;,false]&#125;,&quot;punnwnmdciie&quot;:&quot;lv5jELCtrUO52o-KJ&quot;,&quot;oawbjhktyij&quot;:-1291719047&#125;,&quot;crgbbqcxy&quot;:&#123;&quot;lsalwrwswux&quot;:&quot;4vS-yM&quot;,&quot;hqachm&quot;:[-1247013279,true],&quot;rdksj&quot;:&#123;&quot;dlbizx&quot;:false&#125;,&quot;bltpbf&quot;:true,&quot;wetdrf&quot;:[false,true,&#123;&quot;njnmixrv&quot;:42996778.67090652,&quot;zhbodmpzs&quot;:-962959328.7427077,&quot;zhxlz&quot;:&quot;GOAzM-Vm9&quot;&#125;,[702672969.9366589,779897125.0527567,-1882619161.545962,1962396605.138651,317912394.07081777,false],[&quot;94&quot;,&quot;Mtaq&quot;,&quot;UDhtPSzQ4&quot;,false,-1044773190],true,[&quot;-fsZ9pb5VOQC&quot;,&quot;lINBW2V5U&quot;,true,false,&quot;ifHuRX&quot;,false,&quot;_W8t&quot;],true,[&quot;cieOlUtKRnuT&quot;,true]],&quot;akhdodevaash&quot;:&quot;lkP&quot;&#125;,&quot;tqobirb&quot;:1495570939.5241272,&quot;biqgpgmqjwwq&quot;:-1813608887,&quot;nderigfnlv&quot;:&quot;39JVSNIVACz&quot;,&quot;vqjzp&quot;:true,&quot;vwhvd&quot;:[-2132325901.2181122,208570528,1424864018,&#123;&quot;crimmugzqek&quot;:[&quot;5GrAglNTYfxFX&quot;,-43915189.08423189,&quot;-qXpJQf2NsCPXePUE6&quot;,889818545,&quot;80DSaPlDpslc9P5kuO&quot;,false,&quot;ex1OsiVF6bWW&quot;],&quot;dcxiajo&quot;:&quot;TdhE&quot;,&quot;ixerbgwxbo&quot;:true,&quot;eimphyvig&quot;:true,&quot;ikqtwf&quot;:&#123;&quot;legmvolpfekw&quot;:true,&quot;vhaboipfs&quot;:&quot;Wv&quot;,&quot;mnvjyxhn&quot;:&quot;dexlv8Q&quot;,&quot;qvcsf&quot;:&quot;Ln_McgAU&quot;,&quot;chfuipb&quot;:true,&quot;vmejnnyctt&quot;:&quot;iT42ZvyHzOXetdrK&quot;,&quot;nzkwiscf&quot;:&quot;ncZdyHAnZ2UhKXmhJObP&quot;,&quot;zycnyzmprzh&quot;:true&#125;&#125;,[&#123;&quot;tqujsinaseya&quot;:1130899582,&quot;akfdz&quot;:1347778477.8603253,&quot;zomiksqpjke&quot;:false,&quot;vsakhu&quot;:&quot;MxElHC8yR&quot;,&quot;llovrj&quot;:-529440494.98601544,&quot;akdgqov&quot;:&quot;99i&quot;&#125;,&#123;&quot;jjulgvgi&quot;:370210260&#125;,1680941987.5654912,&#123;&quot;isdcpqwxsggu&quot;:-1311623569,&quot;wkedmnqtsm&quot;:false,&quot;ogwnn&quot;:false,&quot;fbiuahdsf&quot;:&quot;f4miqUjeBGt3w5iPEx&quot;,&quot;jergw&quot;:-514005093,&quot;uqptvn&quot;:&quot;C&quot;,&quot;pekdfhpsfpe&quot;:&quot;ZHSkEGF&quot;,&quot;rkhmqntbgu&quot;:-463204898,&quot;hcvjy&quot;:&quot;z&quot;&#125;,true,&quot;dMzND9hwPw&quot;,false,[-172298609,&quot;0yMvw9k5dcC5D3tx5&quot;,&quot;LjJQLd&quot;]],&#123;&quot;xiikqoz&quot;:6173870,&quot;fxbdfex&quot;:&quot;pO0Fq_cyI&quot;,&quot;wldszsxvsmz&quot;:[&quot;XfymyHk0h9uUqbBkCTb&quot;],&quot;yktfxybqdgot&quot;:1080248968.2307198,&quot;tiuxncu&quot;:-1123876297,&quot;cjqjbzc&quot;:&#123;&quot;gcelcngawmn&quot;:true,&quot;veuzupn&quot;:1515198042,&quot;hvocmpbb&quot;:true,&quot;ajgprb&quot;:&quot;UZLjc9zLIeA&quot;&#125;&#125;,false,&#123;&quot;leuzclxdr&quot;:[&quot;tY_q3R&quot;,1177404898.563247,true,true],&quot;sfvloovh&quot;:true,&quot;zpvwvumebnk&quot;:&#123;&quot;klaho&quot;:&quot;sR-R5eF4I00OJF&quot;,&quot;rmxwaomhq&quot;:&quot;3wsI5sCXJ0bO5UTKvGj&quot;,&quot;xwvmblnbcye&quot;:&quot;Mm4Zm&quot;,&quot;mhpwxooe&quot;:&quot;fZRe4I2HCv&quot;,&quot;ljqtzqpno&quot;:&quot;hDUp2Y&quot;,&quot;ydyzsyzmxtjl&quot;:&quot;FmQIuazO1ud8Cg5A8&quot;,&quot;vvnvimxw&quot;:false,&quot;spmitz&quot;:true,&quot;tpgxea&quot;:&quot;kKXnnFrqwKmNAsQmakcV&quot;&#125;,&quot;dsjkfcy&quot;:false,&quot;lflwioj&quot;:[&quot;Wrd-pr3KuOG4lZMY6dju&quot;,&quot;mgczMGF8c8jsWZOrO&quot;,true,&quot;WrFoP&quot;,true,&quot;X&quot;,&quot;SwE0x4a1BC3c8YXEoK&quot;,false,-268756878.93164307],&quot;erukdrpm&quot;:[542123994,&quot;02XaSvbpV&quot;,&quot;iluAYY&quot;,false,-721305034.5615451]&#125;,false]&#125;,&quot;gvrysjncyvt&quot;:[1933814086,true,[false,-1998462860,-1753193031.6921995,1277621131.847381,&quot;FD6CYFJ_zX&quot;,966918327,false,true,&quot;otAq0Aq2GEPf&quot;],&#123;&quot;egioeulhvqih&quot;:[false,&#123;&quot;zjtukvzcv&quot;:&quot;0RZM&quot;,&quot;iahcr&quot;:1856060910.0138543,&quot;wpzeus&quot;:1841749390.9825985,&quot;dvekwvpws&quot;:&quot;Z3zqrI&quot;,&quot;thofliozmss&quot;:false&#125;],&quot;wsoustdrzjc&quot;:&quot;fxzDMVrJdSmrpa&quot;,&quot;hfmzcznrdc&quot;:&quot;drv4c5Kd&quot;&#125;,&#123;&quot;ffonk&quot;:&#123;&quot;gcnveb&quot;:&#123;&quot;abrsddzwabvs&quot;:&quot;VdH&quot;,&quot;wufifns&quot;:&quot;yh2bNEH-6MDuw&quot;,&quot;jvgoik&quot;:-343291111.24708116,&quot;dhauhjsksg&quot;:&quot;vSragp1ZkOyHPI-&quot;,&quot;zelznmwts&quot;:false,&quot;vafaottx&quot;:-1500223981,&quot;ledflcxoehkp&quot;:71251486.1832187,&quot;kszxlkiyjyv&quot;:&quot;N4bFCE1j8v&quot;&#125;,&quot;tkegmmk&quot;:&quot;7p6sJe9D6MN&quot;,&quot;btxtaxojfj&quot;:[true,-1444023301.5188413]&#125;,&quot;vtfxmbdsina&quot;:&quot;CfoQwAP&quot;,&quot;lzdjoduld&quot;:&#123;&quot;gtovzii&quot;:[&quot;8stOHqU9H&quot;,&quot;z1lFmFRa&quot;,-525981145.12686515,244010675,-526438903.3560455,true,2006357312,115730732.30066715],&quot;mcozxjqiswx&quot;:&#123;&quot;fqdnyiycce&quot;:-2078795136,&quot;bxznqjtwuecc&quot;:&quot;7NCuYEyBP_jtdlL&quot;&#125;&#125;,&quot;grweow&quot;:1327601283.0796964&#125;,true,&quot;ytSJb&quot;,1289937196,&#123;&quot;nsjfaqtozdiq&quot;:[1348251724,-2073776674.9959857,&quot;yscEon&quot;],&quot;mtajujqcjhbi&quot;:&quot;NVkVnnhxrLd9D3bUxzFG&quot;,&quot;csmttzbju&quot;:[&#123;&quot;uicda&quot;:&quot;0g-A4hRiJTBx&quot;,&quot;yhkgperv&quot;:&quot;6okbTRhoFRlg3&quot;,&quot;vgiotooyspmz&quot;:true&#125;,-8320402.341022304,[&quot;Fojw-yk&quot;,-2117892031,&quot;6y-5SXj1WsZWMfDx&quot;,-133903523.65406267,-743256906],false,true,&#123;&quot;edjtyrkndj&quot;:false,&quot;vquvp&quot;:false,&quot;buvmt&quot;:&quot;vKhhL2YgbMB5&quot;,&quot;comfclpaviq&quot;:&quot;5CYbjxcDl&quot;,&quot;mylfrot&quot;:true,&quot;dhukpm&quot;:true,&quot;caudyywms&quot;:&quot;cin&quot;,&quot;lxxomkwlsw&quot;:true,&quot;ygzfcjwl&quot;:-84334868&#125;]&#125;]&#125;],&quot;sycer&quot;:&quot;i1HF-wId8QzvgqK3FA&quot;,&quot;vhmghdmuui&quot;:&quot;llUmv7pH1AyiHHzvhWwD&quot;,&quot;fgijoenp&quot;:1558325042,&quot;ykolpeo&quot;:[&quot;88PS56UZulx-inCG&quot;,true,&#123;&quot;fgfntzqwrl&quot;:&quot;PasaHKVAYZH1qz8&quot;,&quot;libqze&quot;:1223365768.3000464,&quot;ovmzujoerw&quot;:&#123;&quot;lxorfhwdepn&quot;:false,&quot;damivyfbnvb&quot;:true,&quot;jkisoikdnnn&quot;:&quot;WXkOGqTGIjjDlKaLZSS&quot;,&quot;mfhfuqxxs&quot;:[&#123;&quot;ylpqsbar&quot;:&quot;JLqNwIP9&quot;,&quot;jliqdjcs&quot;:&quot;d-xpY35BSvsbVTsbhky&quot;,&quot;bylytt&quot;:-1977813527.9998777&#125;,[&#123;&quot;achslfrmy&quot;:-1619523244,&quot;egakdwl&quot;:false,&quot;okuczsx&quot;:&quot;yPK4R&quot;,&quot;hvshjusz&quot;:1888707639,&quot;rsmwcjwixwq&quot;:false,&quot;qztzczybq&quot;:true,&quot;hmnrxaxg&quot;:true,&quot;ajslgzzg&quot;:346037474&#125;,428389414.2818284,1820291183],false,false,&quot;KThFH8&quot;,[-1362611154,-1782482339,&#123;&quot;kripj&quot;:true,&quot;hleij&quot;:true,&quot;efjqd&quot;:false&#125;,&#123;&quot;qakdpnaavj&quot;:&quot;Fser3cuOMY&quot;,&quot;cohczheg&quot;:-1395581718.8152132,&quot;zoosbosdad&quot;:&quot;fXb9WkG69&quot;,&quot;dwvaqmt&quot;:-1209329041,&quot;jxwogwotjte&quot;:&quot;Ec&quot;,&quot;ryadgxte&quot;:-1619639352.0624394,&quot;pysip&quot;:&quot;rak2hlB5r&quot;,&quot;qvmivczz&quot;:&quot;YAoSBMaIsTq&quot;,&quot;pyskjgobi&quot;:-220426541,&quot;ncsqooescr&quot;:42231826.02604102&#125;,false],&#123;&quot;exgtpnsb&quot;:false,&quot;lmmfjqbktj&quot;:true,&quot;oebit&quot;:false,&quot;vkubvnjc&quot;:[true,true,false],&quot;kfaqn&quot;:-97139896.9271268,&quot;hirlfp&quot;:&quot;-zBgX2Il0Lp&quot;,&quot;yiuiivasqorj&quot;:false&#125;,[false,622217944,[&quot;coL0Id&quot;,&quot;hWUlEIoZs3O9StE65&quot;,1652165275.062476,-984403703.8521897,&quot;fdW8Q0&quot;,&quot;vI1-1OOQvgoiDy8y&quot;,1642042642,40142986],-532192500.50051343,-631464246,[true,false,-1321535133,true,false,true],[true,1189081854.6000803,&quot;G&quot;],&quot;D0V8t&quot;,-1373645174.969025],true,true],&quot;coezxqikvfb&quot;:[[&quot;TJ&quot;,false,&#123;&quot;qejgvqw&quot;:-1175428489,&quot;vlookl&quot;:-23580035.57871896,&quot;xwchrs&quot;:true,&quot;yxjibfi&quot;:-1161161506.0811968&#125;,-631235238.5539757,&quot;TfOa9bv-jU&quot;],[[531397625,-801203347.1844071,-2058039786,420272857,false,-627030855,true,&quot;XAdqcfCr6MhHaGFIgP&quot;,-324396190.9126076],&#123;&quot;wrkndtkzezf&quot;:1685206454.1314747,&quot;waagoicnyf&quot;:-550574854,&quot;habgnvxjr&quot;:&quot;ViMdI&quot;,&quot;ndhluxfw&quot;:&quot;Ot8XtMUdcpREZif&quot;,&quot;axugtu&quot;:2126366783&#125;,&#123;&quot;gjugtqivi&quot;:&quot;FBjW3KtBUF9CDt&quot;,&quot;hljkyb&quot;:&quot;v8m&quot;,&quot;lhgcfacqb&quot;:&quot;RXZ7oZpRqMqQkXL9&quot;&#125;,&#123;&quot;gvgze&quot;:&quot;9PPlxSmtn&quot;,&quot;ftpnejealy&quot;:386140924,&quot;hvaqkrhu&quot;:1146501964,&quot;vqeetpx&quot;:false,&quot;afpdgdul&quot;:&quot;1Nd-df6rtAHcrTUmP0&quot;,&quot;rmwwflnqwoby&quot;:-1653117054.804914,&quot;fhxpvdgt&quot;:-1724282527,&quot;opknvvmocs&quot;:584295467.4330444,&quot;qkpqtux&quot;:false,&quot;woqzc&quot;:true&#125;],&quot;7txRuWSRra&quot;,1276752681,false,&#123;&quot;ujtingovsree&quot;:&quot;d5&quot;,&quot;dbsgzw&quot;:&quot;DhJ_R&quot;,&quot;yoisrwf&quot;:false,&quot;fpklqd&quot;:[&quot;BTFJTuRG&quot;,&quot;Wa5HE4iq_P2&quot;],&quot;bdcsrtni&quot;:[true,-860576137.4352238,false,true]&#125;],&quot;esqbyf&quot;:&quot;Ri8i0kOQBINnk&quot;,&quot;poaosu&quot;:&quot;wRXmFzV&quot;&#125;,&quot;hudlnngxoxvv&quot;:[&#123;&quot;hbgmvgvdzp&quot;:&quot;k&quot;&#125;,false,&#123;&quot;dymzmp&quot;:&#123;&quot;elwyiqujdby&quot;:false,&quot;neikbicwjj&quot;:&quot;WJrMffS&quot;,&quot;vzrqsd&quot;:718763689,&quot;yhomc&quot;:&#123;&quot;zrkhzfmyeak&quot;:2121909918.0496738,&quot;upiisnhbml&quot;:&quot;5aK8Nzem7xwtm&quot;,&quot;tobdfqewlbp&quot;:true,&quot;yssrjmzhv&quot;:&quot;yLrwTb&quot;&#125;,&quot;wmnitbq&quot;:&#123;&quot;ddeftcdgzdu&quot;:&quot;wi88ZHNIadWT0Prf_Whz&quot;,&quot;ukvmjku&quot;:-381847229.7375061,&quot;uqeqg&quot;:890415691.2828615,&quot;orziloh&quot;:&quot;iIw&quot;,&quot;xqgoilebws&quot;:1916144411,&quot;vfpxxhh&quot;:false,&quot;nstfnjnr&quot;:&quot;p64uOoKt6KXdvivAv1s&quot;&#125;&#125;,&quot;jilvdomyxv&quot;:false,&quot;ceuqyypj&quot;:1110767780.539967,&quot;goxtrtfaxvry&quot;:207587263,&quot;tlccpqucg&quot;:334426003,&quot;zjsdtq&quot;:&quot;HjNAEENv&quot;,&quot;tzuuhiogkce&quot;:&#123;&quot;mevmkwwvjnb&quot;:&#123;&quot;ioosbvjb&quot;:false,&quot;djgobkaiikjf&quot;:&quot;HE03adnL2I&quot;,&quot;qnljxkbnerj&quot;:541163549.8000541,&quot;hnqvz&quot;:false,&quot;aeehbdv&quot;:-1976737778&#125;,&quot;tmxhfjcbnepf&quot;:&#123;&quot;brslusqcde&quot;:true,&quot;npkmb&quot;:&quot;NPlR&quot;,&quot;tvopmpt&quot;:462169666.2405092,&quot;ewsljrvfg&quot;:false,&quot;nzgdgnqvcdf&quot;:1342954174.1982095,&quot;pozmtpven&quot;:true,&quot;nkisjrvv&quot;:&quot;oPLZZ8LE0ku-q7iQ9b&quot;,&quot;wcujnozihxt&quot;:&quot;EddIW1p1XgmyJPdipXV&quot;&#125;,&quot;rcomqypba&quot;:462840377.43369365,&quot;uyftgfhdiq&quot;:&quot;eg_jk0PqESIQj9wX&quot;,&quot;cqgmdzetmdq&quot;:&#123;&quot;sfmiozvnda&quot;:&quot;up&quot;,&quot;ryscdso&quot;:&quot;1s6rXl7Ei3z86RWsE&quot;,&quot;cmuovfe&quot;:1821479204,&quot;uirasazog&quot;:&quot;K4d31hN6vXoF3JabO&quot;,&quot;daokpf&quot;:1789880138,&quot;yqkmiuychj&quot;:false&#125;,&quot;gbgmwquaa&quot;:true,&quot;ebrndy&quot;:&quot;0ljLwN7RtA5aud90&quot;&#125;,&quot;kyrhia&quot;:true,&quot;ywqokscmmm&quot;:&quot;y0iBz6SCfhSx6qr3rch&quot;&#125;,&quot;cmj&quot;,&#123;&quot;xzyndotshh&quot;:-1281975182,&quot;nrabunreo&quot;:1954812880.5355344&#125;,&#123;&quot;qjambnlpx&quot;:&#123;&quot;xygxwacsupec&quot;:[340391043],&quot;nheujfelpqcj&quot;:-932395202.0291632,&quot;jghxkwz&quot;:&quot;W0&quot;,&quot;vovicezopgsk&quot;:&quot;SwMFPrkM&quot;,&quot;vgzpb&quot;:[true,true,true,-1624666979,true,-567706336.3549725,-633739921.4671117],&quot;rlbcossoyp&quot;:true,&quot;fzencfm&quot;:&quot;X8Mybnsr&quot;,&quot;lnupvnoenvd&quot;:false,&quot;gdsdpbt&quot;:-848647087.6559281,&quot;sliqaurbahrz&quot;:&#123;&quot;wxynemd&quot;:634898877,&quot;srgfo&quot;:&quot;vWlvX&quot;,&quot;pfswnhm&quot;:&quot;Z6pa_ppPlnDg&quot;,&quot;xfgypxcgvy&quot;:&quot;kJi1zL3_Ds3XKmxPLAd&quot;&#125;&#125;,&quot;azvwyprlv&quot;:[1799632225,&#123;&quot;bqouuuoz&quot;:&quot;ggYxS9zRHdF-&quot;,&quot;cfrji&quot;:1967226922,&quot;qbydbrpaljk&quot;:333891598.4598398,&quot;uakvpkibgtx&quot;:&quot;un3pO&quot;,&quot;xjpywrjaadww&quot;:1137214531,&quot;kewzuzq&quot;:-1765992900,&quot;ichvjf&quot;:true,&quot;ixqtoq&quot;:1117983701.6031604,&quot;rmfzttl&quot;:false&#125;,false,[true],[-1652605109,true],&#123;&quot;gxluujjwgc&quot;:&quot;jTCXYNl&quot;,&quot;zzqiudvgagti&quot;:true,&quot;ycxjt&quot;:&quot;iE&quot;,&quot;aznlzskruj&quot;:true,&quot;pdbxi&quot;:&quot;K-O_dzi&quot;,&quot;icwwrcabfxi&quot;:-32971801&#125;,[false,true,&quot;oO0Rx&quot;,true,&quot;nMwURukvCAKHAqA&quot;,1095355233,-1386656049.5323694],[&quot;-ZQgXzn-p&quot;,&quot;pt&quot;,false,&quot;g-WXAHWjOHCpMfA&quot;,&quot;JvboHKFgqqZbOC20D&quot;,-1056842207.8321831,&quot;eA3H&quot;,false,&quot;b3iw_&quot;]],&quot;tpzvzkafjc&quot;:&quot;CRP9YzwvFQWE6BN&quot;,&quot;heplvvpgw&quot;:&quot;85OvTowA&quot;,&quot;nbufeanahk&quot;:&#123;&quot;idaas&quot;:&quot;_Nn&quot;,&quot;aryad&quot;:[&quot;djX6edd_fb3hYQ&quot;,true,1590515175.1057904,-2093542758.903518,&quot;WW_F0a&quot;,true],&quot;xqdbyficc&quot;:[false],&quot;brywbe&quot;:true,&quot;ocbqh&quot;:&#123;&quot;xsummkvn&quot;:-1817109006.5547726&#125;,&quot;rdcothbjb&quot;:false,&quot;qcttxxxxi&quot;:[-818807583,true,true,false],&quot;efahpqzj&quot;:&quot;R57sOOr9Za2Wd&quot;,&quot;eeapyckpew&quot;:[false,-1856407735,false,true,&quot;J_O_y&quot;,&quot;pm10TfTvUteKT2RXE&quot;,&quot;bFHxsj&quot;,false],&quot;ytcynrrietaq&quot;:-1527475417&#125;&#125;],&quot;wmjzmwhqlbc&quot;:[&#123;&quot;mxvsuj&quot;:&quot;8c&quot;,&quot;neihw&quot;:431366429.63239086,&quot;bnkrqpzgkdz&quot;:[[&quot;i&quot;,false,-1095187386,&quot;odozRxO&quot;,-1132872641],&#123;&quot;qirbi&quot;:true,&quot;znsyvcnvh&quot;:&quot;F&quot;,&quot;vpezjkitzafj&quot;:1400705265.7485986,&quot;afvfegfyo&quot;:&quot;NrM-N&quot;,&quot;brvusyqqzefz&quot;:true,&quot;nbrxcwajbw&quot;:&quot;KF7Bh4wrSrYi&quot;,&quot;azwleqebe&quot;:&quot;JKvo&quot;&#125;,&quot;ZNDoK_wen6ogHhqJWk&quot;],&quot;kdbmren&quot;:&quot;34v68XnTiO-7T&quot;,&quot;atfpsjwsdsqy&quot;:&quot;hj7uVZcfk&quot;,&quot;qxpfhutkhl&quot;:-399152168,&quot;grthyenomao&quot;:false,&quot;kojtpqup&quot;:&quot;_7&quot;,&quot;cbtfxj&quot;:-265427838&#125;,&#123;&quot;sbuoeltvd&quot;:-2024066120.4197364,&quot;bnfusny&quot;:-629230922,&quot;qbycq&quot;:true,&quot;arskzeskrw&quot;:[&quot;t-PtDdanvq8z30J16a_3&quot;,false,&quot;71nvF15asdFdoXH8XYR&quot;,&#123;&quot;cozcmhwzau&quot;:true,&quot;uzijguinqd&quot;:true,&quot;tzhbstt&quot;:false,&quot;gvfnewieev&quot;:true,&quot;dszopgrhnsqu&quot;:false,&quot;ulzbcau&quot;:&quot;J-a3aeQP&quot;&#125;],&quot;ueowwvdhg&quot;:false,&quot;dmphkwb&quot;:&quot;TI5Vn&quot;,&quot;pcnqqsmxsl&quot;:true&#125;],&quot;akwznb&quot;:true,&quot;elkgkvp&quot;:[&quot;413oFyiM5dL&quot;,true,&quot;Q9t&quot;,false,&#123;&quot;yyhdnoslf&quot;:&quot;Jw5Tn&quot;&#125;,[&#123;&quot;uupxbttrujqz&quot;:[1225838384,true,-1837761.2741319232,true],&quot;ojxvk&quot;:&quot;Sl7oeePz&quot;,&quot;cslhzweo&quot;:false&#125;],&#123;&quot;wurxwq&quot;:&quot;x&quot;,&quot;rwidbbpdi&quot;:95229170,&quot;ohqsfyv&quot;:false,&quot;cqvvjhmhhwi&quot;:&#123;&quot;ghggmqazmtph&quot;:&quot;KiKT&quot;,&quot;izmtvfpfoakz&quot;:&quot;9&quot;,&quot;qmartopbcoy&quot;:false,&quot;eoowpew&quot;:864986508,&quot;zweftgkzbb&quot;:&#123;&quot;wqaextgahy&quot;:83561984.3406899,&quot;ovcgjwtyugg&quot;:-708383028,&quot;pawhiadrjg&quot;:&quot;lxR6bQceFWYUdrBV&quot;,&quot;ahschcfz&quot;:2713669.1460380233,&quot;msqjv&quot;:true&#125;&#125;,&quot;ypktjhlfn&quot;:-1904703131,&quot;jzzaenwz&quot;:-1042249631.5948138,&quot;jbzmnf&quot;:true&#125;,&#123;&quot;tnfbdeozeg&quot;:[&quot;t&quot;,&#123;&quot;chzuel&quot;:-1399189474,&quot;qgrydtn&quot;:&quot;HtGAAMFmsSmfC&quot;,&quot;cryrsgddqm&quot;:143644766.18056485,&quot;rflltq&quot;:2113402702,&quot;pgplp&quot;:false,&quot;toldsj&quot;:-1091630692.6403463,&quot;sumcy&quot;:2099404124&#125;],&quot;shdocmbbhmgl&quot;:false,&quot;jvxyauzs&quot;:-277293084,&quot;pkabavqtko&quot;:[&#123;&quot;efxqqui&quot;:false,&quot;opzrx&quot;:-1693810093,&quot;eumbfglwm&quot;:&quot;2jVmWV&quot;,&quot;iialimusx&quot;:false,&quot;isqfjlfbo&quot;:&quot;Rlb7pvn2E07hT&quot;,&quot;fbxkrgzpmrv&quot;:-877809374.2971884&#125;,false],&quot;zyhed&quot;:&quot;SM53xJ7LZwg3fdmUyuB&quot;,&quot;gltlw&quot;:&quot;MMQ4MkU0&quot;,&quot;vfmfchwhg&quot;:true,&quot;oliasrs&quot;:-1492099131.2639546,&quot;krbak&quot;:&quot;uxcYBTYQUpUOf8voOc&quot;,&quot;fyxmavfgawr&quot;:&#123;&quot;keiagk&quot;:[&quot;9W1oi4vy&quot;,false,true,&quot;MA4mkG6&quot;],&quot;imfneflt&quot;:&quot;99v_daTjffSSYQy6c&quot;,&quot;ipxtfprcegle&quot;:862644594.1910795,&quot;seicjcfqub&quot;:[false,false,false,1335980611,false],&quot;qsifcfucd&quot;:732207890.6455723,&quot;joedqpbcsm&quot;:&quot;m1RA03onfSASN_7pfJwo&quot;,&quot;bnswqv&quot;:&quot;zHezJLfgWHZyymyPo&quot;,&quot;ndwwubfmue&quot;:&#123;&quot;nmuys&quot;:&quot;x08LXCqDFmnQxF&quot;&#125;,&quot;zwaiymlva&quot;:&quot;ZVfU&quot;,&quot;ljfctv&quot;:-566532982&#125;&#125;,&#123;&quot;grgufqd&quot;:&quot;2LnoQPQwX6x1PAT5&quot;,&quot;rqqxr&quot;:true,&quot;ztwegwwb&quot;:&quot;JfBFQN1sEzCG9lThUD_&quot;,&quot;jzdtcszbjsh&quot;:&#123;&quot;szjgwrfeqbwq&quot;:true,&quot;kwlyydwjlb&quot;:&#123;&quot;xeguokwplh&quot;:1082138701,&quot;xfwfnjwu&quot;:&quot;zd3GTnX2rO3HsE03e7d&quot;,&quot;qsmeptikol&quot;:1739352283.968711&#125;,&quot;ntofmaixubge&quot;:&quot;w&quot;,&quot;pgvwgseaw&quot;:false&#125;,&quot;uurtfnqs&quot;:&#123;&quot;ktgqagztsghp&quot;:&#123;&quot;okrbo&quot;:&quot;0_hzBAZ&quot;,&quot;nwlxstco&quot;:&quot;_iFB8HLYBjE&quot;,&quot;xivlfsd&quot;:941292043.7375271&#125;,&quot;hsjnnasdskn&quot;:&quot;RXt6Knc6ncddU99wQJE&quot;,&quot;vgzlbkpdpef&quot;:2059991665,&quot;abutkp&quot;:&#123;&quot;izskxbf&quot;:&quot;_MQ8&quot;,&quot;doqopq&quot;:-1072073099.9893911,&quot;udiwnd&quot;:&quot;-uU0qBwQgznG&quot;,&quot;ygmugf&quot;:&quot;rEWGZNUsA9j3zXJ1&quot;&#125;&#125;,&quot;syxthvudru&quot;:&quot;HFT42glSkDnrm8XxByn&quot;&#125;]&#125;,&#123;&quot;khqer&quot;:[false,&#123;&quot;tcdang&quot;:true,&quot;wcrtt&quot;:[&quot;IUdsS7AP5YuIGiPLcux&quot;,true,&#123;&quot;iszogjghqdme&quot;:&quot;mOvQ&quot;,&quot;erqwcrllirgp&quot;:&quot;LCEUXKWW6&quot;,&quot;ppuwv&quot;:-1638069480&#125;,[&quot;xbwqUPy2CqmaKGzjYGgj&quot;,true]],&quot;xuqvvpjgu&quot;:587748282,&quot;yoerecjfp&quot;:&quot;TcSF6V71QM9qDc&quot;,&quot;hkinpwpjtya&quot;:-1235207403,&quot;lmpytjkua&quot;:&#123;&quot;qeayzy&quot;:1609681803,&quot;skupvgxfgmj&quot;:true,&quot;wsgrqmolddb&quot;:false&#125;,&quot;xapacidrjwci&quot;:false,&quot;vewlqfya&quot;:-1505822609,&quot;hptnmqyi&quot;:1964458605&#125;,false,false,[false,[&quot;ZKvoa&quot;,[false,true,&quot;iP_zNQmJr9YODGRrE&quot;,false,-862573801.5205334,470704924.4933845,true,true],[&quot;vlRr73Z9yKQ&quot;,&quot;QekOKcTWF&quot;,&quot;g9&quot;,&quot;tK1AsGuebPcq5gT&quot;,744815156.0114157,&quot;F563lnnyDh7JBB&quot;,-1091586509,true,&quot;X4DnB7brSTeAVZ0nPl&quot;],&#123;&quot;qroqaekrqci&quot;:-988886156,&quot;hlxrw&quot;:false,&quot;jtbrxuds&quot;:-196812410,&quot;mazjezda&quot;:1149832522,&quot;ktuhey&quot;:false&#125;,1747534196,false,&#123;&quot;lnlzbenhuxbs&quot;:true,&quot;mzobwlmkx&quot;:&quot;CHoTm&quot;,&quot;cgxvchsjj&quot;:&quot;j3GzXyRAtK&quot;,&quot;uvpgjrxhums&quot;:46883908.35847041,&quot;vyzbxcwjhcuf&quot;:-262415858.2344973,&quot;dmhrsss&quot;:980331266.1202828,&quot;isobj&quot;:false,&quot;diqwig&quot;:-1662428453.0488622,&quot;cnrtgscjh&quot;:&quot;5P&quot;&#125;],&quot;x0D_T0gStehqg&quot;,2038449666],&quot;--&quot;,-257452405],&quot;xhdjhvbbzi&quot;:[&quot;thlkqORxHYSrq6&quot;],&quot;qgjsd&quot;:&#123;&quot;hefrnkcuhukg&quot;:1414682479,&quot;dzgabuqiqkeu&quot;:&quot;_OC&quot;,&quot;raylmoi&quot;:[[1261750707.9350622,[true,true,true,&quot;dM7SKVbVIlN9kkbAt-&quot;,-1688606776.865353],[-1974516927,778046617,false,1660585964.6766663],[1437608012,false,&quot;ekFL1QAz539v&quot;],[-965784674,917444701.599134,&quot;hobzLlT077ffsmjyVJza&quot;,&quot;jku&quot;,true,1269961638.8205886,&quot;begBiXJD8GVRt5&quot;,1981243353.2825513]]],&quot;mwqhhxi&quot;:1224280321,&quot;vyvwzyrhlmij&quot;:&#123;&quot;tvfedfwiydi&quot;:true,&quot;ubvshvar&quot;:357853522.94037277,&quot;ifsanjhmlan&quot;:true,&quot;xzpfnkpuseeu&quot;:-1437887099.366021,&quot;blzblzfipzsb&quot;:[&#123;&quot;mtlld&quot;:606806810.5353504&#125;,513242589,[&quot;4PPUSOh&quot;],&quot;o7gyErrUF_OO&quot;,779910928.9457561,725403731.5453243,[&quot;Mwuep_vs3NICxzyVg&quot;,&quot;EcGddf3x-s9B&quot;,-114166931.70836346,false],&#123;&quot;tzrqz&quot;:&quot;wZCbblJStx&quot;,&quot;irxgfi&quot;:-840824075,&quot;ainkogqiw&quot;:&quot;lVzO_a3K4rJbQlZz3cKz&quot;,&quot;zzwlcpuax&quot;:-351879049.34823805,&quot;nuvjwhkor&quot;:-976311756.2356169,&quot;jnigghuee&quot;:&quot;ZhUW1OdR&quot;,&quot;vbklz&quot;:102928883,&quot;cxdvfe&quot;:&quot;CMV6qey&quot;&#125;],&quot;tnnfl&quot;:[&#123;&quot;fiyepmng&quot;:true,&quot;gruwflcpi&quot;:2061722071.3332555,&quot;gzidhmz&quot;:&quot;ZARldKlcrNDSPtM-BcX5&quot;,&quot;squojhvm&quot;:1319158712.813816,&quot;iraaurvtcwxp&quot;:1703367132.1705606,&quot;tmhfj&quot;:true,&quot;ledoer&quot;:&quot;wgjcoqcqfr&quot;&#125;,&#123;&quot;ymjgzviomn&quot;:-799748891,&quot;zqfrdk&quot;:&quot;F&quot;,&quot;hiwsih&quot;:false,&quot;uxglwwb&quot;:&quot;3XnTvoXo3&quot;,&quot;sjonftbvmi&quot;:&quot;NSQSV5TUTZ&quot;,&quot;tyvjdbowtuqd&quot;:false,&quot;vyfbbzusfim&quot;:-2026203141.9014688,&quot;ftlsdid&quot;:-1010682756.7113624,&quot;rfrwmn&quot;:false,&quot;pfdileg&quot;:&quot;dSk9egdB6e_&quot;&#125;],&quot;gdodt&quot;:[&#123;&quot;vmyzm&quot;:-439700837,&quot;zwdidxwnspkd&quot;:&quot;NHAM9_r&quot;,&quot;cyvbaurmgmln&quot;:-1667505671.8765008,&quot;tjoislquuxvv&quot;:-63911009,&quot;ixiuvashmkr&quot;:&quot;gVuv&quot;,&quot;wwnjrivcvjn&quot;:&quot;zTL1r--ymAZ&quot;,&quot;wgepehgd&quot;:true&#125;,&quot;zjWW&quot;]&#125;,&quot;sajbvpb&quot;:&#123;&quot;qcloywiur&quot;:&#123;&quot;yhorytusuz&quot;:-1379688463.1455112,&quot;hogkfsgzpamu&quot;:-666842903,&quot;lsayekkqs&quot;:-994958780.7773955,&quot;oadgsdrnp&quot;:&quot;ygmT11y92&quot;,&quot;xitnxkvvjgq&quot;:&#123;&quot;ncnxktnpkad&quot;:&quot;bMSH40DQ3SHl6&quot;,&quot;wtnqywvrsxet&quot;:true,&quot;odopv&quot;:1704202652.1402304,&quot;nbcjnxzfhou&quot;:true,&quot;dslwgdpgrij&quot;:false,&quot;izhysr&quot;:75853655.80537708&#125;,&quot;mbogqtxbincw&quot;:-816104583.1152381,&quot;gyclsmz&quot;:&quot;I2mIXBLLCBQTI2sk&quot;&#125;,&quot;uvohdkkwtpnx&quot;:&#123;&quot;bkqpxl&quot;:true,&quot;qrbhv&quot;:[&quot;v&quot;],&quot;skjxpncfrge&quot;:false,&quot;usovgpr&quot;:[&quot;P1wmVlh-&quot;,-1518359520,true,false,true],&quot;bsjydwu&quot;:[true,&quot;Y&quot;,&quot;LSYKAv1gDE5OSCOc&quot;,&quot;4RaIKjGY1jaPr6cn&quot;]&#125;,&quot;hnigy&quot;:true,&quot;fpogrokuqj&quot;:false,&quot;hdbkrl&quot;:[956507853,&#123;&quot;bjmwhvgc&quot;:true,&quot;vpxthxybwm&quot;:true,&quot;vfkka&quot;:&quot;WnXCcABs20V4P9ZwxF&quot;,&quot;gpertrf&quot;:false,&quot;fjnfovsgng&quot;:&quot;NR6z37bwW8Ydil&quot;,&quot;cewpd&quot;:&quot;Augz4JjvyTZiFH&quot;&#125;,[&quot;0vADm5fHM311Dqms&quot;,&quot;Ywus1q&quot;,&quot;l3R7oY-YstdhC&quot;,true],[false,true,true]],&quot;oqhhnjphghbf&quot;:-1990764709,&quot;bqroyt&quot;:&quot;zbS9zKmLyi&quot;,&quot;mxswvycxk&quot;:&#123;&quot;ecuukhnx&quot;:[-1031661410,&quot;gxxDR2UrsB6FX7EsK&quot;,&quot;W5UeCms_pG1XKnQiGnC1&quot;,true,1279258678,&quot;haXr&quot;,&quot;b&quot;,-859144426,false],&quot;ooyjsehuley&quot;:-260638973.93744504,&quot;okzzvy&quot;:&#123;&quot;zdwuti&quot;:&quot;nmULtLEpRm&quot;,&quot;rbmylisp&quot;:true,&quot;iqqxy&quot;:&quot;A0R1JNBNg&quot;,&quot;htmsh&quot;:true,&quot;olyfzrwa&quot;:false&#125;,&quot;djlddewcp&quot;:false,&quot;dteztss&quot;:&#123;&quot;vjdksmwy&quot;:true,&quot;rnrmvweunet&quot;:-1554963459.8263817,&quot;cwuyrr&quot;:-1539560369,&quot;nfbmvdqhbn&quot;:true,&quot;wscnr&quot;:&quot;-QL4jvEip3kIjD3X_HqX&quot;,&quot;fqhytiab&quot;:&quot;7HgHf-t-nDE&quot;,&quot;sdrxhigfwyz&quot;:&quot;6L2iCph7cik&quot;&#125;&#125;,&quot;wpkzvs&quot;:[true,[-824736981.3011173,&quot;NLLHrW6FdWbYXy5&quot;,1772019627.6826005,-1237801588.9772856,true,1699988814,-670454594],[&quot;zHk-3vfEyqWJAzHN6E&quot;,298547097,-306906116,true,&quot;yORZJB-gJy5i&quot;,-1577708022,true],false]&#125;,&quot;neixga&quot;:true,&quot;oqrmbmjmjwc&quot;:false,&quot;xggut&quot;:&quot;aLLbZ0_fLQFJSn7vbQ-N&quot;,&quot;wphmqzbwpp&quot;:[-988844865]&#125;,&quot;qkerwnf&quot;:&quot;I3Ehd9v8O&quot;&#125;,true,&quot;vKMrzQC0DwPZTqXEEo&quot;,&quot;FlSpCCj0JjXQ&quot;,-262821999,&quot;uyGwNgotAHeKb8tXF6&quot;,&quot;juP-aqqitcx0MLKNtv&quot;],&quot;rkdzkji&quot;:&#123;&quot;opmnqsbrql&quot;:false&#125;,&quot;xboipcso&quot;:true&#125;,&quot;sqvizokcr&quot;:&quot;lg2WCWuOOKblGEvuJxry&quot;,&quot;yphghvuatif&quot;:[&quot;KHX&quot;,&#123;&quot;gcempqa&quot;:-435758201,&quot;pfkjlnucldzt&quot;:[&quot;4B2QBgFw1&quot;,&#123;&quot;clfmgbpylozu&quot;:[&#123;&quot;wykkewfsvkfx&quot;:true&#125;,[true],false],&quot;gkpjmwde&quot;:false,&quot;wfbmk&quot;:&#123;&quot;hjhwydqlgck&quot;:false,&quot;zntpb&quot;:1426698482.2730246,&quot;pfhvvwf&quot;:[true,false,true,&#123;&quot;ymtwgdp&quot;:-1610821698.0233555,&quot;fxotjx&quot;:-982010626,&quot;fakcosl&quot;:false&#125;,&#123;&quot;taetdp&quot;:true,&quot;zlxtouucw&quot;:true,&quot;dopar&quot;:2133262238.939302,&quot;zacsyzzafhyz&quot;:&quot;5H6koXgeSJjFM1-A&quot;,&quot;ilxfap&quot;:-6357516,&quot;zwmwa&quot;:&quot;220X8A7o75Qip&quot;,&quot;pdavucrzogah&quot;:false&#125;,&#123;&quot;lfeqc&quot;:622047750.3004048,&quot;baveivifz&quot;:955086141.1868833,&quot;upqtrzh&quot;:&quot;eV17ZNGeu3jF4xs&quot;,&quot;qfyiaui&quot;:&quot;h&quot;,&quot;srkxtfqvou&quot;:950475571.8482186,&quot;snyqzwvcr&quot;:1997060590.3469007,&quot;ketvuoitkaj&quot;:false,&quot;dyicvmuxonvc&quot;:1238057345.405381,&quot;xzhtg&quot;:1081780473.5438356&#125;,-43776949.58843712,-1066018084],&quot;lmnfdiycp&quot;:[false,&quot;wybvLjnvWah&quot;,&#123;&quot;oqwixwsv&quot;:-349342221,&quot;liufgx&quot;:true,&quot;orwbmcephb&quot;:true,&quot;pqvumndiu&quot;:719429786,&quot;qsqybtshm&quot;:false,&quot;kuunxjf&quot;:&quot;kfQ4Ms&quot;,&quot;hofhyeiz&quot;:&quot;11Vg1Zxz-2o1qAd&quot;,&quot;kocnrvu&quot;:-2121340188.659414&#125;,[868650456,true,false,&quot;ytP2qezeqTj9bX5MipJ&quot;,-1684183822.181116,false,false,true],&quot;sd-0&quot;,&quot;buxK0y0Lg34Ha&quot;],&quot;bqivwbovyok&quot;:&quot;y87Ga3RoThgm4zQoW&quot;,&quot;vmcnod&quot;:[[false,&quot;P7PwFdKQE2Nv5EHAWyR&quot;,false]],&quot;zixdwj&quot;:&#123;&quot;gcelk&quot;:&#123;&quot;ccdvni&quot;:&quot;qjfoGTlqW1SK0XE&quot;,&quot;aivxcz&quot;:&quot;hWaXUzPF5KHXhD24&quot;,&quot;wbvjmchlsnhz&quot;:&quot;ayxY4K8yfSqLWJDKNyl&quot;,&quot;wvaodhthpkq&quot;:1824810533,&quot;ohxnd&quot;:-1558047131&#125;,&quot;rylhvguawz&quot;:1026463459&#125;&#125;,&quot;qduvuqqjgd&quot;:false,&quot;voeaxmnswjmu&quot;:&#123;&quot;ecjpiovrveko&quot;:&quot;hGin1d3EvmP-7IL2&quot;,&quot;weapu&quot;:[false,[-343302248,&quot;1b_gbcshP4l&quot;],[false,true,&quot;HOQGH25Sh-_q6HlMBA&quot;],&#123;&quot;ampaeupvlcpv&quot;:&quot;8cv-88-&quot;,&quot;soidbtehv&quot;:&quot;xreI&quot;&#125;,[&quot;MEIC1fse&quot;,true,&quot;nmQuAHdLVa&quot;],&#123;&quot;qgmacn&quot;:true,&quot;xafonjd&quot;:-1511285736,&quot;qvvvofsfnalt&quot;:false,&quot;amzwr&quot;:520195117.50623035,&quot;lsuud&quot;:1627220284,&quot;ulaym&quot;:true&#125;,false,-1951910240.1517031,&quot;TxN5qnk&quot;,-1508050847],&quot;lluecptqhplu&quot;:&#123;&quot;qpsvw&quot;:-1383734218.1532288,&quot;nhswnlx&quot;:-1411487489.4017806&#125;,&quot;hpqmxcqc&quot;:&#123;&quot;uwcontr&quot;:&#123;&quot;kmmglniuqrzz&quot;:&quot;FYd&quot;,&quot;qaxcmqw&quot;:-4716927,&quot;pyxeoansbdur&quot;:true,&quot;fhpepladgkc&quot;:&quot;DWjeMHlYwyxB&quot;,&quot;xsfcnf&quot;:true,&quot;scldwjzv&quot;:605622367.263732,&quot;vdcisfkg&quot;:true,&quot;ymerdawujuvm&quot;:1522284921,&quot;gjebutthrq&quot;:&quot;BsN7FuQWdhFMo2vxGLV&quot;&#125;,&quot;gzlbgdswtg&quot;:false,&quot;xylhbzlljel&quot;:false,&quot;vgrabym&quot;:&#123;&quot;ldexyhoxiw&quot;:false,&quot;ixvucs&quot;:&quot;O155cd6C&quot;,&quot;yxlpdwxss&quot;:true,&quot;lwfgdnncrbb&quot;:false,&quot;nspmy&quot;:true,&quot;ofgnuvr&quot;:&quot;CNkm&quot;,&quot;cvzjz&quot;:false,&quot;mtbbanavmqku&quot;:634785919.1245813,&quot;mdfalo&quot;:false&#125;,&quot;znqqoxwz&quot;:&#123;&quot;sssdvxyg&quot;:false,&quot;yqtacvdtumm&quot;:-843524312.9739331,&quot;jlltvpgblk&quot;:474917399.0235441,&quot;gzizhlcnthiu&quot;:&quot;FpozppFyAy9THKziJkj6&quot;&#125;,&quot;kjxvglgtpyts&quot;:1288059843.9959335,&quot;mxstyhruj&quot;:&quot;BHq&quot;,&quot;kgpkvsl&quot;:&quot;t&quot;&#125;&#125;,&quot;pyqceyga&quot;:&quot;l2_GqR6sjpIP8t&quot;&#125;,-903701859,false,false,1728992263]&#125;,false,-672356226.957377,1035684588,&quot;8&quot;,&#123;&quot;bxxvoj&quot;:&quot;TBN3W2JlXE3Og2od7&quot;,&quot;myathmkth&quot;:[[[&#123;&quot;bkywset&quot;:&#123;&quot;ibfwzvemftqr&quot;:-1079506988.3973684,&quot;bzjin&quot;:&quot;ZQ&quot;,&quot;spssumdxtlk&quot;:false,&quot;heaed&quot;:false,&quot;ckopwart&quot;:true,&quot;shbkunked&quot;:1771550310,&quot;qebraekrkv&quot;:&quot;hvKAFeR&quot;,&quot;seofjkg&quot;:&quot;oBA0&quot;,&quot;ivpoo&quot;:-1519804200.870205&#125;,&quot;zkzhszvy&quot;:false,&quot;cbpfigkqg&quot;:&#123;&quot;txfljrmef&quot;:&quot;UlIEg1D_XBPmJLtjYX&quot;,&quot;blduuxkg&quot;:false,&quot;pubxki&quot;:false,&quot;fkdaajcdr&quot;:true&#125;,&quot;eatzilo&quot;:&quot;3Js9qlvLgmIN5Jx&quot;,&quot;cvouqqqfbmhd&quot;:171988647,&quot;duotchdxw&quot;:true,&quot;hjadhohlk&quot;:&quot;ezA6qurjYaJ&quot;&#125;,&quot;aN1mtSa&quot;,2029903438,true,[[false,true,-2128210644,-250665377.27768734,true],&quot;x&quot;,true,false,&quot;smIG&quot;,&quot;CoLs&quot;,false],&quot;s2p&quot;,[&#123;&quot;nbtzzsrfkb&quot;:642071068.7049124&#125;,-971868225,false,&#123;&quot;vdrhibk&quot;:623425684,&quot;pdhsilahxqpo&quot;:&quot;7ieoVifxJkddsXt&quot;,&quot;vvuzpopy&quot;:false,&quot;eybdmglrj&quot;:false,&quot;bkhtv&quot;:-1661861702.5063853,&quot;emwsrutts&quot;:&quot;eA52oBr&quot;,&quot;pwlsjkoidkmk&quot;:&quot;G6juG2OWs1d9&quot;,&quot;rkqnp&quot;:-1741937058,&quot;efqrfia&quot;:true,&quot;kumjec&quot;:false&#125;,[648097805.0335655,true,-2112661578.3023882,-1146653657,&quot;dir8&quot;,true,true],true,false,&quot;9P3&quot;],-1334820002,595712603.0936697],-281537918],&quot;Uvg3Y3oFHNUxEp30&quot;,&#123;&quot;hgyzdkdy&quot;:[&quot;9Uie314BMftima&quot;,true,&#123;&quot;sotct&quot;:true&#125;,&quot;59U3b8i&quot;],&quot;yokbdhwh&quot;:false,&quot;eynjbrwb&quot;:true,&quot;oabxvq&quot;:&quot;2DoHvk857a_lrfklT4&quot;&#125;,&#123;&quot;osygtmx&quot;:[false,&#123;&quot;nsfddvwp&quot;:&quot;idKBQd3lZ29Tjgfe1y&quot;,&quot;spsgmhntf&quot;:330631670,&quot;nibycsnme&quot;:&quot;Dw8cBUziw8En&quot;&#125;,&quot;Nv&quot;,&quot;1joRrD&quot;],&quot;lnuqzcushd&quot;:-1676899906.901859&#125;,false,&quot;g-8UktsAr06Eh0L2Poo0&quot;,false]&#125;]&#125;,-213332158.27588025],&quot;nbnggrygoy&quot;:&quot;yp&quot;,&quot;ycumlxwikgr&quot;:&#123;&quot;iyubzkip&quot;:false,&quot;offnsfcl&quot;:true,&quot;ksyweaa&quot;:&#123;&quot;uxtvieoit&quot;:false&#125;&#125;,&quot;rgvqdwb&quot;:&#123;&quot;jybsltnvy&quot;:&#123;&quot;xlppzktcs&quot;:&quot;J1JdsVwVyJdrQa649K3&quot;,&quot;bwavtox&quot;:&quot;QtHHotgt-L&quot;,&quot;urjtvql&quot;:[&quot;7KC-uxYUw8zX&quot;,true,[true,false,&#123;&quot;ukqypkmyvorz&quot;:&#123;&quot;fsbkh&quot;:[true,-396259340,[&quot;5-ve18wqKWFnnT&quot;,[&quot;oqaPSB9Ry&quot;,&quot;AiIg3ixsCel&quot;],true,&#123;&quot;tvris&quot;:98702793,&quot;kqeprkrsqczh&quot;:false,&quot;cznzkycnpr&quot;:-1884812888.907853,&quot;prgxikvoqufx&quot;:false,&quot;ifubqotxloo&quot;:false,&quot;zrofrgar&quot;:false,&quot;jxpcv&quot;:-2070201681.387905&#125;,1214036958.5357575],true,&quot;SsWiQyfqVjwX&quot;,&quot;EE&quot;,-110675921.80617763],&quot;eupxdds&quot;:true&#125;,&quot;wobzbzsqtg&quot;:false,&quot;okngdfyyrcr&quot;:-1464983761,&quot;vmtnsjlalehh&quot;:&quot;sTugHHf8XIxWo0eHD&quot;,&quot;rzuntodsepbs&quot;:&quot;4&quot;,&quot;wdvvsb&quot;:[[&#123;&quot;tpjeqsmkt&quot;:false,&quot;cbqzndrzjjsj&quot;:&#123;&quot;nviisdo&quot;:-1521429533.4565473,&quot;nobssdwar&quot;:1343226861.2757792,&quot;gqwlsrfzwf&quot;:&quot;3iaxwkt0RM&quot;,&quot;gakijsy&quot;:&quot;lE1mFr&quot;,&quot;zgdmkv&quot;:556129813.9012625,&quot;ywzfvk&quot;:false,&quot;tuvnyjygk&quot;:&quot;7Pt5vC3T6fUwiF&quot;&#125;,&quot;httjvpcosyfh&quot;:false,&quot;lercx&quot;:[&quot;ScvOCA&quot;],&quot;mxuisw&quot;:&#123;&quot;cebidi&quot;:true,&quot;nmaumyfw&quot;:false,&quot;qirrf&quot;:true,&quot;hapgodsohrev&quot;:false,&quot;uuyqhluhdd&quot;:1225244835.6137476,&quot;btcboshxj&quot;:-1726960766.593483,&quot;bmjdmvjgyct&quot;:false,&quot;zipprm&quot;:&quot;1-4uLH4Nd4&quot;,&quot;rweybknzrjw&quot;:false&#125;,&quot;gfldjngmcetb&quot;:&quot;Xwi1Is-Wae5Mh&quot;,&quot;dbkbytfqqfu&quot;:&quot;XrYFgqcwWf&quot;,&quot;lzmomz&quot;:1210828284.458338&#125;,&#123;&quot;qofgjsbpa&quot;:&quot;lPe3YVp3tkUzZN&quot;,&quot;hatcsniudmii&quot;:[&quot;B7_&quot;,&quot;NyV_Jonz2OAyY6ltALj1&quot;,634956320.1239021,false,&quot;_pTUM4JspaI5O865ma9&quot;,&quot;cRngbJYyKXRVbLuhL&quot;,&quot;Rv&quot;,&quot;R&quot;,true],&quot;kacunnn&quot;:1399556841.028177,&quot;iupsnyhoiiq&quot;:[-1972922641.9374359,&quot;s&quot;],&quot;aymyrxrmi&quot;:-741296721,&quot;tsmyxkhr&quot;:1085629646.5417953,&quot;nvgkuv&quot;:true,&quot;xtbheqtcbapi&quot;:true&#125;,&quot;Ydke&quot;],&quot;zpt3ABbbdSt0B-&quot;,&#123;&quot;omgtdid&quot;:&quot;U8Z&quot;,&quot;osvqnbs&quot;:[false,[true,false],&#123;&quot;edpuszxim&quot;:false,&quot;pifkmxdrsur&quot;:false,&quot;xvqkqkdnolxm&quot;:978118458.574277,&quot;xpoccptq&quot;:47526341,&quot;evinetjp&quot;:&quot;kjPIsTJFZlp5xHYu&quot;,&quot;lzapr&quot;:&quot;VRgwazYF&quot;,&quot;kadxwpgbkhp&quot;:false,&quot;srazywmgm&quot;:602758167.3839445,&quot;tcxutxugzqcq&quot;:1452428179.1749983,&quot;dultxrq&quot;:-1007461906&#125;,[&quot;8b-Pr7Kn&quot;,-487416787.86377096,&quot;U2_Zrf82MYOPzu1snwH&quot;,&quot;F&quot;]],&quot;wmxwqd&quot;:&quot;tgk&quot;,&quot;arwnqyja&quot;:[&#123;&quot;jqovvdluiyrv&quot;:-213492824,&quot;wgdgghkon&quot;:-1134931908,&quot;jtpzqudrwvr&quot;:false,&quot;wdjtsriuflz&quot;:&quot;9TR2fwOU8bJK6YiHMd1W&quot;,&quot;rksrbxhf&quot;:-1687481301,&quot;bqmerjt&quot;:&quot;O8&quot;,&quot;gggrphsuu&quot;:true,&quot;ueafywvz&quot;:true&#125;,&#123;&quot;eahupohevotx&quot;:&quot;80x3KZ&quot;&#125;,true]&#125;,true,&quot;JdyIX2-Hn4OEk&quot;,&quot;STde89a7noAlPR&quot;,&quot;dBq21b8vjY4mlsICX&quot;]&#125;,[&quot;h8hocFCh&quot;,false,[[&quot;JrZEt5&quot;,&quot;2K3NMgoO4gV&quot;],true,[[&#123;&quot;ppxflqzqraah&quot;:&quot;iQQHa&quot;,&quot;epixkvau&quot;:758653854&#125;,[false,&quot;eypg&quot;],[-1380729948.803885,2126935865,2000434995,false,&quot;-zAki_NR-7rJ-DTA1KX&quot;,true]],1062605677.5219938,1675845058.2376373,false],&quot;G-Yr5hdfY4P3LZjlpi&quot;,&#123;&quot;pjfwt&quot;:2129191539,&quot;lxltli&quot;:1789733854.3638878,&quot;wfxtvbczg&quot;:true,&quot;usglsqvortk&quot;:[&quot;vhy-S1Q2&quot;,[-2031983774,&quot;NNqZ&quot;,-1504365382.5674405,&quot;JhSjhaU3x6vi&quot;,true,true,579475293.7172605,true],&#123;&quot;ibjpvhriglff&quot;:305281416,&quot;yiywlzqv&quot;:&quot;gLyGVouaO4GoWmP3qWm&quot;&#125;],&quot;kaaatkapwnzp&quot;:&quot;5tMN-IW97lr00LpdCeA&quot;,&quot;ascnhrajahp&quot;:&#123;&quot;bywiqnht&quot;:&#123;&quot;pwwfzfxuusf&quot;:1826516450.1429155,&quot;lrkstk&quot;:-1130208890.5220625,&quot;mjftwpi&quot;:&quot;JKzfI07UlayAB0Y&quot;,&quot;guzpwj&quot;:&quot;cyGnOg_AA2nD5u&quot;,&quot;yivfdxujl&quot;:-895183558.2281595&#125;,&quot;ftahhhqvq&quot;:&quot;-e0ij7e6SwR2P&quot;,&quot;rfios&quot;:260283669.05151594,&quot;wkgxf&quot;:480514597.7402332,&quot;trsngyfa&quot;:true,&quot;iutgxh&quot;:&#123;&quot;xgaxfzhzo&quot;:-1296950418,&quot;oynzdakxa&quot;:-176407622,&quot;jmetjzvg&quot;:&quot;QZyqbP&quot;,&quot;bdsubbxgke&quot;:479590449.7327938,&quot;gbguyurx&quot;:&quot;k_JYavggr&quot;,&quot;dcgjgkyxoi&quot;:111545634.56584488,&quot;kxmgnp&quot;:false,&quot;fadnjmiuya&quot;:false,&quot;pntppjqr&quot;:-7989414.3503097715&#125;,&quot;rtrfsa&quot;:[true]&#125;,&quot;woaczhsg&quot;:&#123;&quot;oebom&quot;:[&quot;EDFJM-lf3QtlY_pHqj&quot;,&quot;w&quot;],&quot;phkuygxtxei&quot;:-1307045192.5497377,&quot;nzjtrerixro&quot;:&#123;&quot;zzcgiwj&quot;:true,&quot;wzkrztkuwyw&quot;:749644112.278047,&quot;viygguukb&quot;:true,&quot;kmqinxavcydb&quot;:-154275871,&quot;tdciknezbmsj&quot;:-1583677231.0414896,&quot;qxywny&quot;:&quot;Zhm_duX1K813n39f&quot;,&quot;dmmgas&quot;:&quot;99YGwgK&quot;,&quot;bxlxri&quot;:624666521&#125;,&quot;joqygfz&quot;:&quot;Ekernz1wS&quot;,&quot;btmnwww&quot;:-1057462085,&quot;fjkkogenlrg&quot;:&quot;JaUfKQ-rmTsH&quot;,&quot;czxgbb&quot;:[&quot;d94e&quot;,&quot;tFHwH&quot;,-1999864211,&quot;9qcTd&quot;,-273132748.6449169,877566785.3296286,&quot;XnOqV2RJlwW0uce&quot;,false],&quot;hjzjpy&quot;:&#123;&quot;fgopruspo&quot;:true,&quot;qbxsmxzuayhl&quot;:true,&quot;jqcqu&quot;:false,&quot;jepkrnjpvwc&quot;:529790938,&quot;bsfzzfplxn&quot;:-136154324.43923798,&quot;lprmnmu&quot;:&quot;_V7TWr3V_JSasIrO&quot;,&quot;hfrrnq&quot;:&quot;9QMc&quot;,&quot;fszhlid&quot;:&quot;VyQUrXWG&quot;&#125;,&quot;tjebnm&quot;:&quot;VyKVNxgu99oXT&quot;,&quot;qvnfpidlla&quot;:&quot;ezbxu25zTodYRTpZ4e&quot;&#125;&#125;,1282576622.419129,582364215.0738711],[&#123;&quot;vxanjrgqi&quot;:&quot;5L&quot;,&quot;drmfrdy&quot;:&quot;V3yZ19vMCwFTKS&quot;,&quot;urbkobqrmmln&quot;:[[&quot;gLPGoPvAz5a&quot;,1521034207.1729093,true],&#123;&quot;rbjhjirux&quot;:false,&quot;unwnojgevj&quot;:&quot;TZvuYvGEjt50HZP&quot;,&quot;cluhihroygc&quot;:false,&quot;ezvwld&quot;:false,&quot;ytvdsty&quot;:false,&quot;ongckhpo&quot;:&quot;iBorLz&quot;,&quot;fyjdodv&quot;:true,&quot;kussreacf&quot;:&quot;asCAhF9cu&quot;,&quot;ogruag&quot;:true&#125;,[1011116435,false,1485289377.634779],&#123;&quot;aplfilhrtjjx&quot;:true,&quot;eihtnlrwwzxb&quot;:true,&quot;rzoztu&quot;:1095829320,&quot;lytof&quot;:false,&quot;sxcahhyzr&quot;:true,&quot;gzlprjzgbpdk&quot;:false&#125;,false,false,&#123;&quot;rugpoixexacg&quot;:true,&quot;bvygqkqcgc&quot;:&quot;P5FZ&quot;,&quot;mhmzd&quot;:-1466907616,&quot;aqbayw&quot;:&quot;MqA7Neo6B38Ku&quot;,&quot;vbtpdxqfk&quot;:&quot;I&quot;,&quot;upuadtl&quot;:80394027.89645492,&quot;bjysln&quot;:&quot;U4Rny9BW&quot;,&quot;zkipgelsd&quot;:false,&quot;aixmzrmby&quot;:&quot;gt5pk&quot;,&quot;yduplhuvgmi&quot;:false&#125;,-307605855,&#123;&quot;ezuajerq&quot;:false,&quot;vhkbpsqfmit&quot;:1968884069&#125;,&#123;&quot;ntdwc&quot;:&quot;Xjd3XSRfRTSK1&quot;,&quot;wceydxoioh&quot;:1965027804.2400434,&quot;xxiaudqian&quot;:-1997821084,&quot;jxihtwhvthf&quot;:&quot;jebasp7IEo&quot;,&quot;ulrkflp&quot;:&quot;DsDwmqlHe2CqtePX8&quot;,&quot;ayaiumowny&quot;:-1009840586.3308966,&quot;xqzdft&quot;:-665041725,&quot;uwmgab&quot;:&quot;0HY-QpTeR7cqLH3R&quot;,&quot;dyzdmyohvu&quot;:&quot;TJL1_wTnzt6lavK6&quot;&#125;],&quot;hyoqnafola&quot;:&#123;&quot;pwhkipsgz&quot;:[&quot;BSRRArMhL7xak1M31&quot;,true,757226289.2586085,false,-501488775.6009502],&quot;xnehiwtkc&quot;:false,&quot;ugyuiaife&quot;:439819996,&quot;qoviscvhth&quot;:&#123;&quot;yrmaynayeij&quot;:true,&quot;tmeozoxvbfa&quot;:&quot;V11MPCnwVpN2-J5Ou&quot;&#125;,&quot;eqfap&quot;:false&#125;,&quot;qoqdvxulp&quot;:&quot;3our4wWe2d3eEvIt4Sa&quot;,&quot;pkgatdqqfwrp&quot;:-196209564.13036972,&quot;osdumghoylle&quot;:[1611788818,false,[&quot;O&quot;,true,true,&quot;-FRchYxwjwqw5E6&quot;]],&quot;lguesgpxu&quot;:&quot;nAMf4fNwxeBLOqKPfj&quot;&#125;,1090543472],[[false,true],true,-941485381,[[&quot;0n-42O__G1z&quot;],true],&#123;&quot;zgcmj&quot;:&quot;HtaNd9fGSL&quot;,&quot;rtqht&quot;:[-824540812.8593875,660363567.1515678,&#123;&quot;nrqclovx&quot;:true,&quot;desvin&quot;:true,&quot;qbgarpxmjee&quot;:true,&quot;pwquqr&quot;:-520766202.2372695,&quot;evcrtodq&quot;:&quot;NFNGSQ2mv9I33U&quot;&#125;,true,-1495767378.5317547,&quot;0GYeM&quot;,&#123;&quot;cipvprhghcud&quot;:-781186501.119179,&quot;ucahxszlo&quot;:&quot;--kXBRT2q7lvCNQf&quot;,&quot;esghfvf&quot;:-1967794274.5454607,&quot;plsbnwziqql&quot;:&quot;AwYqNyGlsT-&quot;,&quot;qdhis&quot;:&quot;LVC_&quot;,&quot;jfifn&quot;:&quot;ep&quot;,&quot;ajqypvgdf&quot;:false,&quot;nzcksivfrz&quot;:-836485434,&quot;brfxkuh&quot;:-778236244&#125;,-216954925],&quot;nzvhy&quot;:&quot;jH&quot;,&quot;ukllw&quot;:&quot;iA5&quot;,&quot;mojlxj&quot;:[&#123;&quot;wpztutyupo&quot;:-338843594.4339943,&quot;zodofh&quot;:1523937168.7352705&#125;,&quot;iTikYWHkhRF46nuHGbG&quot;,&#123;&quot;yjizlvyztm&quot;:&quot;rCeofY3Uo3msby8-&quot;,&quot;pqguwcscw&quot;:&quot;f2n-Vg1lXIpYjdl&quot;,&quot;ziwwftnb&quot;:false,&quot;jdunfl&quot;:true,&quot;wgrsxovefz&quot;:false,&quot;rmfmr&quot;:-1203824748.6801581&#125;,-767556187,false],&quot;nqntey&quot;:&quot;XmKsO7JoUS&quot;,&quot;edzduh&quot;:true,&quot;fsxahg&quot;:[&quot;WGJAk_bVHfv&quot;,false,&#123;&quot;jjilv&quot;:789428308.424335&#125;,true,&#123;&quot;lczojeami&quot;:1004841634,&quot;rpjett&quot;:&quot;JPcL0dB&quot;,&quot;urttiphnwi&quot;:false,&quot;cnnuagwpk&quot;:false&#125;,[-755107435,true],1383079708,838205861],&quot;xmfcccwn&quot;:1235369070,&quot;exocsfeahsly&quot;:false&#125;,&quot;pfPQ7bUvXQwFBfI1Z&quot;,&#123;&quot;vcoiofawgu&quot;:[[true,&quot;-&quot;,false,&quot;MiLGOXZT5KjgtxbR&quot;,-1227980006,true,&quot;M6hA6AfvaBer&quot;]],&quot;lujwrmzs&quot;:true,&quot;dpjdjbi&quot;:&#123;&quot;isvatttpdje&quot;:&#123;&quot;violsvosfmxa&quot;:false,&quot;pfsxuzszx&quot;:true,&quot;akyyailt&quot;:40326686.00178264,&quot;avmlhwr&quot;:false,&quot;wvmlkv&quot;:&quot;ZRdrVDeTcXB&quot;,&quot;txcgatdp&quot;:false,&quot;wzwdlio&quot;:true,&quot;lgnpzi&quot;:826279485.8329575,&quot;blowaixo&quot;:true,&quot;tlvjpvlr&quot;:-1104323009&#125;,&quot;xidqngh&quot;:&#123;&quot;plxlnpsuy&quot;:-136412828.46290082,&quot;oyxqf&quot;:&quot;slHZmXREf5IRy&quot;,&quot;hjieskfa&quot;:true&#125;,&quot;qogsqpetclu&quot;:&#123;&quot;pxefltrmw&quot;:true,&quot;xhvgo&quot;:false,&quot;plytsqcpmkak&quot;:&quot;oQOzYu8fp__ZZzspf&quot;,&quot;siqsjmzcz&quot;:1383803960,&quot;gqatsrxw&quot;:-891877637,&quot;jlrxxmfrd&quot;:false,&quot;punnhvkqgac&quot;:&quot;Vm1gbb5ao&quot;,&quot;nvcgb&quot;:true,&quot;zotzvmdcp&quot;:false&#125;&#125;,&quot;mdibv&quot;:[true,[-1920264690,&quot;KkgopGyRuR&quot;,false,false,-1181246202,&quot;lLMcq7wT0u6aZLx1XCS&quot;],1171184833.0889344,-920898457.9398856,[true,true,&quot;wjvObeS9eH&quot;,true],[&quot;r89vOJSkrrfGYNGU&quot;,1423639620,false,false,-2118872242],[&quot;WZp-jdVNe9WUwKyG0ne&quot;,&quot;hdJR&quot;,762229991,&quot;NNrmgK1gc&quot;,false,645298371],true,[true,true,&quot;OiqeOXDN&quot;,true]],&quot;gljtxygmgnoq&quot;:-485413025.0423097,&quot;tifqxq&quot;:&quot;PNKzLbjwza41QHN7gfg&quot;,&quot;usxgfwssv&quot;:false,&quot;ysggaphttbu&quot;:-1434779242.503896,&quot;jguyfdarj&quot;:false,&quot;ljsnzpmvc&quot;:[[true,false,-888245601,&quot;DtjmbUbk-Y&quot;,true,&quot;NUivd0O_964hQZAaCM2R&quot;],true,&quot;4FRIjSJEd&quot;,[&quot;Y5Da&quot;,&quot;1Df_BHi2ppyn&quot;,&quot;8lJLj91VcyZl&quot;,true,&quot;1dVqAY1jjCNk4_YCm_RA&quot;,true,&quot;Ufv6Un&quot;,&quot;1yXm&quot;,&quot;C6G8d9LjKWX3&quot;,&quot;Urh9Opm0r&quot;],true,[false,-691112049,false],&#123;&quot;lvcepeefsiik&quot;:2111693983.8375793,&quot;isveyzpwkn&quot;:&quot;Ygu3&quot;,&quot;vtfphso&quot;:true&#125;]&#125;,&quot;FgREOo5h2k7VG&quot;],&quot;9Gimy_iH&quot;,-1846879668,&quot;WX&quot;],false,&#123;&quot;phpuw&quot;:[[&#123;&quot;raibbewtjz&quot;:-1220581968.5143535,&quot;jbrvt&quot;:400707980,&quot;nrzfutgbch&quot;:&quot;up1IdlFMyt&quot;,&quot;mgymfulzmjm&quot;:&#123;&quot;mzoznw&quot;:false,&quot;nxuhkromgyrq&quot;:-468163948,&quot;ihqawepduqge&quot;:false,&quot;enanlwabhlnq&quot;:false,&quot;vwniulyrxqq&quot;:2006513682&#125;,&quot;qygtv&quot;:[712827304],&quot;plqoj&quot;:196752168.14052448&#125;,1530826049,true],&#123;&quot;hoewcxak&quot;:-529285862.78081095,&quot;rdkjktsbm&quot;:[[false,true,2089688925,&quot;_xygmhNWhs2CG2Ws&quot;,false,&quot;z5Hes4K&quot;,&quot;-yXCohP014GZh&quot;,1851605383.7822597,true,1408456384.3299663],&quot;fW&quot;,true,&quot;GVUyAs70GJW-2Ku&quot;,&quot;Na9s-kGMlq7l3dp0gC&quot;],&quot;fcbdr&quot;:648098158.2295865,&quot;fapgflckukv&quot;:&#123;&quot;shnbvkvjud&quot;:true,&quot;sidkmqd&quot;:&#123;&quot;vfhpq&quot;:-438938499.9046679,&quot;vfdfwfuizkkb&quot;:false,&quot;ymmiv&quot;:&quot;K9ekHXWSppvvW&quot;,&quot;eavvh&quot;:&quot;a&quot;,&quot;cmgeoyntxfb&quot;:false&#125;,&quot;kepvkp&quot;:&#123;&quot;pbwwksrua&quot;:&quot;HSJUVpOTiOLCoSdE9i8h&quot;,&quot;ppshv&quot;:false,&quot;qdmeyoov&quot;:&quot;7m&quot;,&quot;koxkdaxj&quot;:&quot;r30Hy0P6&quot;,&quot;izbuq&quot;:&quot;HE&quot;,&quot;ebmsipwqjf&quot;:false,&quot;xzsutnv&quot;:true,&quot;yseailigdpu&quot;:&quot;_Oe1Mb&quot;&#125;,&quot;jilmpjqmebqu&quot;:true,&quot;mmqtk&quot;:&#123;&quot;jiqswgbidkcz&quot;:-600289668.1997764,&quot;pozrxlwnicmj&quot;:-1938116520,&quot;ysjtzvqcbtka&quot;:false,&quot;wlfoh&quot;:true,&quot;crdmlo&quot;:-775185645.335729,&quot;rymnpnt&quot;:&quot;67CWTuoSS-HCBSnsT&quot;,&quot;jrqjvpjy&quot;:&quot;5vA-6&quot;&#125;&#125;&#125;,&#123;&quot;iqfwdhvxt&quot;:[[&quot;cDc74anahW&quot;,81284520,&quot;-GKYIedyE&quot;,&quot;Ce&quot;,-988655852.0732201,false,&quot;VRJHPX&quot;,true,&quot;cgDGx9u&quot;,&quot;2S&quot;],&#123;&quot;kwdtjnwyqh&quot;:true,&quot;nfsic&quot;:&quot;60jcx&quot;,&quot;mecwggrteesl&quot;:-1139375608,&quot;gqxlrsdtwk&quot;:598344409,&quot;ssrzcdmuivk&quot;:false,&quot;bunpzghb&quot;:false,&quot;ghepmqqgprxb&quot;:&quot;8VRKt-wDZHpQ3zFr&quot;,&quot;qppaluod&quot;:&quot;5R-HdOFV&quot;,&quot;okawvhmkx&quot;:&quot;kjeBjAHvp_NP5&quot;,&quot;txntwypns&quot;:685414976.153466&#125;,[1739772069.7531114,true,&quot;XaGgqy&quot;,&quot;RwGOtKq-1XA3kGHxSxj&quot;,true,641014644.867056,-808749567.2080882,&quot;uI&quot;,false],-408962742.8051345,&quot;CgHySm29GsrPLL&quot;,&#123;&quot;mlmye&quot;:true,&quot;hjdtoyy&quot;:&quot;xjhyCe8jp7&quot;,&quot;tqrdoqwjkek&quot;:836131928.1066666,&quot;idajceyj&quot;:1186855296.3268478&#125;],&quot;uabkdzydas&quot;:[&#123;&quot;ndggdrnriq&quot;:&quot;5s498r6QO5f4O21&quot;,&quot;iybijqnqu&quot;:&quot;nvELVQoajllij&quot;,&quot;rnubwnfd&quot;:true&#125;,-135278750.97632736,&quot;0-&quot;,[861257612,&quot;YSt&quot;],[&quot;Hriq_i8O&quot;,true,&quot;2WyD5sM2kJ6tk8saK&quot;,&quot;-pYRzho&quot;,&quot;OywpZGYH&quot;,true,&quot;TGVsRxHuDESYPJX&quot;,false,true,true],false,[false,&quot;FZZMk3hxTGyFIZf&quot;,&quot;840ukL&quot;],&quot;4cBYOiZS5T687&quot;],&quot;wcblckswrwgx&quot;:1691134642.1109512,&quot;imiyna&quot;:&quot;y2obPNr&quot;&#125;,&#123;&quot;hzsnvp&quot;:[true,&#123;&quot;mvvptanvzlv&quot;:1235246065.646934,&quot;ispkrfaefd&quot;:&quot;o7jyOqBNz-sp5&quot;&#125;],&quot;fbwnal&quot;:false,&quot;dmyhpklcgjpz&quot;:&#123;&quot;evuyme&quot;:&quot;VGTLhrsgB3tG&quot;,&quot;irsvzpkrrs&quot;:&#123;&quot;htcvmq&quot;:1643584917.6512115,&quot;kpvfd&quot;:-1377834402,&quot;nvotaaj&quot;:&quot;ZSQJklJxCP&quot;,&quot;esfolj&quot;:&quot;toKuUYfZ&quot;&#125;,&quot;zsmjcbtlqn&quot;:629882819,&quot;xlmcltjykzn&quot;:&quot;8QotloMb3Bl73WVjn7&quot;,&quot;mhapclfrxs&quot;:1028717782,&quot;cxqqhtko&quot;:false,&quot;wiyuy&quot;:&quot;PzzXnXU5PPnPW9z&quot;,&quot;ixdetedk&quot;:-1124814436.5608842,&quot;wqzmq&quot;:[true,&quot;SRb3jdXAyC6nKc-_zw7&quot;,true,true],&quot;cbqsa&quot;:&quot;C&quot;&#125;,&quot;ijdvphas&quot;:[&#123;&quot;sousu&quot;:1832542641.4012554,&quot;tpcnhwrccrg&quot;:-2064401096,&quot;hoolqinb&quot;:-1849626143.48401,&quot;yribmyatzdpx&quot;:true,&quot;cmsqnvrn&quot;:false,&quot;qegvonsx&quot;:true,&quot;gvpxrrsg&quot;:-470037709.29599655&#125;,1780541435.6086545,&quot;2WH45mLOypsCrtyWjI&quot;],&quot;brznzoa&quot;:&#123;&quot;yskyrbx&quot;:false,&quot;pnlhlxjujkef&quot;:&quot;bOa6&quot;,&quot;iyvplfxfia&quot;:true,&quot;vwvlvwtxyhfj&quot;:&quot;N93v0&quot;,&quot;yedkmanvi&quot;:[false,322287198.0058443,-2137145925.7176564,false,-1862343833],&quot;mutvvihn&quot;:1914305547,&quot;hrgevkwio&quot;:true&#125;,&quot;bphxtjilrubc&quot;:&#123;&quot;oljlt&quot;:[&quot;Cdja2cH2kJPDxV&quot;,false,&quot;JqDgQgoz5&quot;,-1924686300,&quot;1z-ffRR&quot;,-975594968.6513255,1351202255.9644172,-83283900.85926154,&quot;UiqLAWnoR8_-&quot;],&quot;fhfkdg&quot;:&quot;AoxpLG0MnCxRin8qpN&quot;,&quot;noynicwlt&quot;:&#123;&quot;asaczkb&quot;:true,&quot;xqnvdzjoaga&quot;:-121663039,&quot;moekjcd&quot;:&quot;axOlNW&quot;,&quot;jjivbsd&quot;:&quot;r6&quot;,&quot;vxxxyqf&quot;:true,&quot;vzygsjgygkwc&quot;:&quot;F&quot;,&quot;ybnvrci&quot;:&quot;lsCcA0emGlFbRK-0Y5r&quot;,&quot;uvchzg&quot;:-1294386589.0755918,&quot;tcxske&quot;:false&#125;,&quot;ksdknwbv&quot;:1542149459&#125;,&quot;cpspsyg&quot;:&quot;old4MF&quot;,&quot;tiyhssqn&quot;:false,&quot;ldury&quot;:-2137708872.0328448&#125;,&#123;&quot;uvbayhisyau&quot;:false,&quot;fbdcl&quot;:[false],&quot;ilipavyawcwt&quot;:[false,-2045197450,[&quot;OQWt9&quot;,false,true,&quot;NiLrcY92VJf0iefLZwg&quot;],&#123;&quot;xcsnqderihp&quot;:&quot;pS_3_A6DziH&quot;,&quot;cmvxao&quot;:true,&quot;hlmbjxhrqas&quot;:true&#125;],&quot;synpgy&quot;:-986091799,&quot;lvumkb&quot;:&quot;RU6FR1NOba1YjH1&quot;&#125;,false,true],&quot;tynezwj&quot;:&#123;&quot;mhsjy&quot;:1067132576,&quot;azwzs&quot;:-55742754,&quot;ymgots&quot;:true,&quot;ewhppxkutkts&quot;:[527907098.9250864,1892161595,false,&#123;&quot;fsdyrxoquq&quot;:745891887.899272,&quot;xvrfjphm&quot;:&#123;&quot;kgvsflndweqt&quot;:&quot;SUD&quot;,&quot;vrvcsvgr&quot;:false,&quot;wpvuwif&quot;:false,&quot;ftxbkgziqdc&quot;:&quot;B&quot;,&quot;nmbvmziwdc&quot;:&quot;1cM&quot;,&quot;annfksy&quot;:848087104.0004258,&quot;zksdebbbkveq&quot;:2007092837,&quot;ggcchlgwt&quot;:26860668.38137573,&quot;fvfvk&quot;:true&#125;,&quot;nrjmook&quot;:false,&quot;xxewpss&quot;:false,&quot;yiyrzpaoj&quot;:&quot;1BtrWrePoIWrpkudhX&quot;&#125;,&quot;MhqFhSDsoiZCbs&quot;,-1962448143.37587,&quot;JHiJtLt-0PV&quot;,-848857355,&quot;MRj0q3&quot;],&quot;rijrkwvr&quot;:true,&quot;pnmllj&quot;:1122358779.127721,&quot;pgslfn&quot;:[&#123;&quot;yrdudea&quot;:&quot;MY7kvGHCZr9Kzg&quot;,&quot;qqycz&quot;:[&quot;3EePfhnF-pz1P5f5L1c&quot;,true,&quot;ALUO_TrBhOAau7&quot;,&quot;o&quot;,false,false],&quot;ggdaewjpdxn&quot;:43629698,&quot;aaeykjqyuwv&quot;:[7708036,&quot;3LaRVqg1v6z48GT2N5&quot;,&quot;u3_N_yT&quot;,-941937619.7056336,true,&quot;jOAWu80H22KqLb&quot;,&quot;lkEitOoWKpUj1dFrcS&quot;,&quot;pGHWYfPt6&quot;],&quot;fzxsvhmj&quot;:&#123;&quot;xezjomecr&quot;:&quot;AgAqyZIQyboQj&quot;&#125;,&quot;wixxk&quot;:972492071.1440042,&quot;vzllenlwss&quot;:true,&quot;lrdnw&quot;:true,&quot;osbmvcdln&quot;:-99838667.00018373&#125;,true,[-1156729928.6033874,&quot;RQ2Ddf3m&quot;,&quot;tBLZLWI&quot;,&quot;t&quot;,&#123;&quot;awjkkoqbm&quot;:514900056.4981093,&quot;nbcdkmlmksj&quot;:546112394,&quot;mgyhnwvdfxm&quot;:-962693348.4544209&#125;,&#123;&quot;ulkmuvuzsms&quot;:-916021827,&quot;kcfrccqkckw&quot;:2011197419.3960195,&quot;wdwcfnc&quot;:-329734869.0126096&#125;,-1267535808],-444607644.5187344]&#125;,&quot;zailmdcer&quot;:[true,&#123;&quot;qhjwptdlpln&quot;:&#123;&quot;ohcdtvwvstwx&quot;:&#123;&quot;rcspfos&quot;:&quot;A1Dk1UpauJXvX9k&quot;,&quot;glkbaffy&quot;:true,&quot;mnelbrmrt&quot;:112804143.37796865,&quot;qdsgvsw&quot;:true,&quot;fsxjpyvw&quot;:&quot;_HuByYd&quot;&#125;,&quot;kfznxtpub&quot;:false,&quot;ofemihcvnwn&quot;:&#123;&quot;ylbvhdqfoyui&quot;:&quot;-RKVqKpB-R5TisiMbWnI&quot;,&quot;bpoomkqufn&quot;:&quot;PEdcpgwubbyM6lBINEkU&quot;,&quot;hnlnv&quot;:124374927,&quot;vfqzpvgccqsd&quot;:1250199480.562264,&quot;ekfazrxics&quot;:true,&quot;iovjqhuw&quot;:true,&quot;xatkt&quot;:&quot;hZ-f&quot;,&quot;ltotrchgpdxy&quot;:false,&quot;tksjv&quot;:321121533,&quot;pqupavhjgb&quot;:602017169&#125;,&quot;aychomumdpm&quot;:true,&quot;uywocbg&quot;:-1340353830.8160665&#125;,&quot;nsvmmtzffyi&quot;:&quot;snOsd3LX&quot;,&quot;rinhb&quot;:744708339,&quot;hwcszmejvzow&quot;:&#123;&quot;jxqyosu&quot;:497375279.6818433,&quot;hhbbwqh&quot;:true,&quot;rwejxwoqvyg&quot;:false,&quot;lxlpcsnxev&quot;:&quot;cvZ1&quot;&#125;,&quot;nfjwuxgz&quot;:-205472971.4876565,&quot;yexcq&quot;:[&quot;xCJ3l&quot;,[2142794310,&quot;YD9&quot;,1041074376,false,false,true],&#123;&quot;nrjyrjy&quot;:false,&quot;scybwd&quot;:false,&quot;buboehn&quot;:true,&quot;mtbdgt&quot;:true&#125;,-555213888],&quot;rgmsxkvxe&quot;:false&#125;],&quot;xqodyvquaqk&quot;:&#123;&quot;tlwbalafs&quot;:&quot;P11VyUVgEJDBLnfTBXW&quot;,&quot;bwxxsdvbejyj&quot;:false,&quot;sqixnooxi&quot;:false,&quot;ktegqrv&quot;:&#123;&quot;uzxuwoxxz&quot;:&quot;kCXkDF&quot;,&quot;nxyxwdsox&quot;:[-1728493142.145594,-1561089932,false,&#123;&quot;qalgexoqmec&quot;:1265040040.7056124,&quot;qjxkymosrtfl&quot;:362528080.91682416,&quot;uyooswivc&quot;:-2044499441,&quot;effancqxpu&quot;:false,&quot;iqkfcx&quot;:-1148395558.362454,&quot;njrrjmktjpwx&quot;:&quot;LZ&quot;,&quot;wqusenwc&quot;:-1117229386.9430377,&quot;sjbwosrsmpss&quot;:-686080485.4933355,&quot;rhavtoocclud&quot;:-1203546311,&quot;wqatpzwmre&quot;:&quot;Qz8iNjQfh_OC1&quot;&#125;,false,[&quot;x7Pl&quot;,1352206425,&quot;DlQW4MIpCg&quot;,true,&quot;aQNozs&quot;,263610904.8397138,&quot;Qhc3c4Vh5ksc&quot;,false],&quot;C9&quot;,&#123;&quot;jmjwwqfrquof&quot;:-921098144.7482386,&quot;nzqzi&quot;:&quot;LyWG&quot;,&quot;hzicitfhylcq&quot;:false,&quot;yyhdtfualcg&quot;:&quot;411pRUYZ&quot;,&quot;erpmbuucfv&quot;:&quot;4-lsO0Ln4F9ICyaffi94&quot;,&quot;wjdfwodqqjh&quot;:1845939237,&quot;woficflha&quot;:&quot;R8DMlnDFzfh1-MoViEB&quot;&#125;],&quot;myzhandzdy&quot;:[false,-118610442,&quot;Bprb_a-aR&quot;,&quot;Jw9oewLB51H3d9fr1_U&quot;,true,&#123;&quot;htwvzax&quot;:&quot;moCFEdcSc1fA&quot;,&quot;dkmrfqrq&quot;:&quot;99hr&quot;,&quot;bltsputcmprx&quot;:&quot;dwLUtu&quot;,&quot;fhntywcb&quot;:false,&quot;gqpjbpmp&quot;:1619105248.3625658&#125;,true,[653762948,&quot;X1QOlNfVvU&quot;,false,&quot;_Fjg6U-NrrOBv0BMny&quot;,true,&quot;owS9j47lQuPjQLAA&quot;],-635964171],&quot;qcwaaot&quot;:false,&quot;nhqlxfhgztcs&quot;:&#123;&quot;tpltmbqkqtw&quot;:&quot;kqzyLHJeavq&quot;,&quot;bhvmuytmnh&quot;:514166948,&quot;rqbjvcu&quot;:362096038,&quot;ohqcrbnvbq&quot;:[-12337413,true,true,2048459193.417751,&quot;y2FmUh1EwZqM-f&quot;,true,&quot;aQsDFy0975Fx3hZcVb&quot;,true],&quot;ygrkbf&quot;:[-954464231.8863583,false,&quot;YPRoJ&quot;,-665388063],&quot;tcrveopu&quot;:[&quot;ynm9g_LkpS46x3KoGCzg&quot;,1223992785.9131525,&quot;Z3cP&quot;,&quot;-Ta&quot;,&quot;1vX15_xgYuFJVJcCAY5&quot;,true,&quot;LmB&quot;],&quot;ejldgvvkemyw&quot;:&quot;k2rlJK2CnrascHYx4mL&quot;,&quot;iyhgxvl&quot;:[&quot;VvNtf6h-&quot;,false,&quot;uALIjfikazNCCS0&quot;,&quot;jorcn2IuT1Ir8h_Ve9&quot;,1294510970,1075791699,-1453510649],&quot;wpjzzljo&quot;:&quot;cE62kGEH8HTj&quot;,&quot;kqhfx&quot;:[1628421507.6120474,-1474741674,1557154500.7193115,&quot;f_Y98t&quot;,true,false,-1301617840]&#125;,&quot;zdovecpiahyz&quot;:&#123;&quot;ltupxfnh&quot;:2093809642.9200048,&quot;fxteaf&quot;:&quot;hxdYxLMepEB2qYd&quot;,&quot;ncuxca&quot;:&#123;&quot;jjixdw&quot;:170293395,&quot;kyvuzj&quot;:true,&quot;gvbtnfyn&quot;:false,&quot;bopeavpzvt&quot;:&quot;4&quot;,&quot;yiufa&quot;:&quot;OwGFajXMMs54jbd&quot;,&quot;vxfuuzfo&quot;:true,&quot;pmsrorsxilu&quot;:&quot;vFJPkmlcnvYSUWIYn&quot;,&quot;noikw&quot;:false&#125;&#125;,&quot;rcihvgacfpqo&quot;:[false,1463749411,false,&#123;&quot;zaifbuaeew&quot;:&quot;ejObiDfCR6bx-evuh9&quot;,&quot;myuzlsbrw&quot;:-1870480788,&quot;ibhfvndtg&quot;:-1148483894.446386,&quot;jweqnj&quot;:669003129.2767447,&quot;fcdyrkk&quot;:2085526436.2747927&#125;,&quot;cAn&quot;,&quot;QCu2W&quot;,[false,-1865418814.6994572,1694073013.129531,false,&quot;J_iAqF98wgJrP&quot;,&quot;jwXPdyZ6PT0aIqUz&quot;,-959408941,&quot;WT8A2KKDj9JjjcaT&quot;,true,true],false,&quot;b3i&quot;],&quot;ddblff&quot;:[[&quot;9uxFIdq8RhB8mWL&quot;,true,1988094303],&#123;&quot;efqirhszudz&quot;:false,&quot;jyskyzxm&quot;:1329926014,&quot;kobioghsdtc&quot;:&quot;USVCW&quot;,&quot;ryqwshdmw&quot;:&quot;LF5QaVOa&quot;,&quot;uupdatjptuvr&quot;:&quot;ORw76yFFzdZ0C3w_5&quot;,&quot;dahnbudw&quot;:&quot;YdB&quot;,&quot;qfnvalw&quot;:true,&quot;mziolg&quot;:953290145,&quot;ypsyh&quot;:-699497270&#125;,&quot;Q0lrqPC7at8g&quot;,true,&quot;tca6egLJo8XVCrO7WIy&quot;,-1037565328.9697363,[&quot;6rBa6a_hrj&quot;,1685089684.3163245,&quot;FG2&quot;,&quot;Yw&quot;,1262160201,1216789119,false,false]],&quot;gftpmxyyux&quot;:-1934447629.6346464,&quot;auwpxgwhmud&quot;:false&#125;,&quot;apxrvvats&quot;:&quot;Zcnx4qoueeYYR_V2pYBC&quot;&#125;&#125;,1393668854.5378907],[true,&#123;&quot;jniiammtrvh&quot;:[&#123;&quot;mvvpuwdwsvk&quot;:1896626739,&quot;mgpfgu&quot;:&#123;&quot;wrhcb&quot;:false,&quot;pcrnx&quot;:[false,true],&quot;tjqkdjqsqxw&quot;:false,&quot;rrhzbkttk&quot;:true,&quot;admmbmftyrnd&quot;:true,&quot;ogfmylz&quot;:&#123;&quot;jjhfnzixtuta&quot;:&quot;OhGIGVSXB-gBnnyssop&quot;&#125;,&quot;mbmclipip&quot;:&quot;GC6wfdV9Pceq&quot;,&quot;cctetq&quot;:false&#125;,&quot;prhdduxx&quot;:-1548791816.1863751,&quot;takzcm&quot;:&quot;8a_QSI&quot;,&quot;ufcje&quot;:&quot;M7sdHwXkzi_OV-F&quot;,&quot;efjglvw&quot;:[[true,true,-1608494638.2646492,false],&#123;&quot;cpuhkiklfyap&quot;:-752399298.0508018,&quot;fozrewalc&quot;:&quot;iZ751GLXd&quot;&#125;,763091849],&quot;wtopazjgo&quot;:-737149764,&quot;xxhmwduj&quot;:&#123;&quot;vxulqgsacxxf&quot;:&#123;&quot;hjjlytnanoll&quot;:2130711664,&quot;kpswzbwad&quot;:788365059.7536508,&quot;dwyjfdhnt&quot;:-449660438,&quot;hbovhw&quot;:true,&quot;atcfunzxztm&quot;:659791201.3745784,&quot;hvbhsbgpzd&quot;:true&#125;&#125;,&quot;mhgjuc&quot;:&#123;&quot;ghysasaagd&quot;:&#123;&quot;sajlbhu&quot;:false,&quot;tvlugo&quot;:true,&quot;aqpwkyoy&quot;:&quot;jPSSEh-WOftErGA8-&quot;,&quot;efhwwjsjjgsg&quot;:true,&quot;etwtftioabzo&quot;:true,&quot;vfkddwamjxw&quot;:2126698548,&quot;wvntlvb&quot;:-1866904988,&quot;ahcmuac&quot;:&quot;-oxmlGdLsoH&quot;,&quot;xokodsuzzec&quot;:-1954642857,&quot;jpeqigxce&quot;:true&#125;,&quot;ktjik&quot;:[296215686,true,false],&quot;pmjfkcvk&quot;:&#123;&quot;mbmucjxz&quot;:&quot;0vrm&quot;,&quot;pclxgxtubhmc&quot;:&quot;tD4o&quot;,&quot;vlksej&quot;:-175231836,&quot;ghpki&quot;:&quot;F7p_WKvzAN5iOhC3o&quot;,&quot;bozomyvosp&quot;:&quot;CSclbwm&quot;,&quot;fjfukyjt&quot;:true,&quot;grjvvj&quot;:&quot;rI&quot;,&quot;njlkaw&quot;:126601870&#125;,&quot;bgydh&quot;:238702224,&quot;xkkmnpwius&quot;:[true,602126973.4586275,false,-2099514570],&quot;sgrouw&quot;:false&#125;&#125;,1904329721.0161448,true,[false,&quot;G35V&quot;,&#123;&quot;gbbexruig&quot;:&quot;e&quot;,&quot;rcdffshtx&quot;:true,&quot;qkkvzzrqmrc&quot;:&quot;QzRXEart&quot;,&quot;iwhgrxvrutj&quot;:&#123;&quot;dqzrmiamfe&quot;:5338367,&quot;fwnvhjwyjn&quot;:&quot;cBuKgd--OCRWGMpQWm&quot;,&quot;fsvlekwmasq&quot;:699200148,&quot;jrxhsvbc&quot;:-483164045.0900765,&quot;cmqnz&quot;:&quot;MPbfVMlO7K&quot;,&quot;swwvqixfxg&quot;:true,&quot;cjlenicb&quot;:&quot;_RiN-hxANau06d&quot;,&quot;myauaesu&quot;:-237651078.23778957,&quot;gxgnxrmjwd&quot;:-800057586.983838&#125;,&quot;bexshbqykkd&quot;:false,&quot;dgvxkxpvmp&quot;:&#123;&quot;sliao&quot;:&quot;EFh&quot;,&quot;hnkanlmqluf&quot;:&quot;cQpxGxo06hZo&quot;,&quot;lqfgaynbjt&quot;:934444396.8198074,&quot;lzpracwzul&quot;:-1892061636,&quot;laiwssjmvu&quot;:1897981532,&quot;nndsymtnkd&quot;:&quot;VC&quot;,&quot;ezqkcunsfmby&quot;:-277793116&#125;,&quot;mbwjvtdy&quot;:&quot;tH9nXzEcBN&quot;,&quot;zvhxjuvq&quot;:&#123;&quot;vtlomhnp&quot;:false,&quot;ehzkxyktwrf&quot;:&quot;szZ2OD95wjNcMPGI&quot;&#125;&#125;],&#123;&quot;curgpbccjop&quot;:&quot;N24pjsPzpSjGlN9OQMjz&quot;,&quot;bgbgvif&quot;:&quot;mDy1jjc1j0Wx8kN&quot;,&quot;qbhmjdrfo&quot;:&quot;qb62bZW9&quot;,&quot;dbykj&quot;:&#123;&quot;auzkmnzxjapz&quot;:1667514137,&quot;puqnd&quot;:[&quot;0CQ2LcEz&quot;,&quot;tOU4&quot;,true,false],&quot;xoegtcmq&quot;:true,&quot;gnhikinkynjd&quot;:&#123;&quot;jgcwndaskbil&quot;:true,&quot;vhdpljdcot&quot;:&quot;Nqy1Sw7HuqSdQMh&quot;,&quot;rakkbwhvqghl&quot;:true,&quot;qrqnx&quot;:845268718,&quot;qpgue&quot;:false,&quot;kwwtzuqpgy&quot;:true,&quot;myeacnfgsk&quot;:false,&quot;ixvpdp&quot;:-1400331300.3967977,&quot;ykmdoup&quot;:1544908603,&quot;xtnvvepj&quot;:&quot;Toes9E-_mmm1hIEIf3v&quot;&#125;,&quot;sijtzlcewxv&quot;:[&quot;mgTG&quot;,-1312622706.0005493,-748071872.9063215,&quot;k5HRQ5YkWH&quot;,&quot;Z2koh&quot;,-1601009741.181673,false,true],&quot;vswjrsxcc&quot;:[-1781510486.6382377,738261088.4060149,false]&#125;,&quot;wgygkoujeg&quot;:&#123;&quot;decksh&quot;:[&quot;L3mZbob3cw01NixLlo5&quot;,&quot;x731RwliBKfGSt0&quot;,&quot;tG&quot;,&quot;MnJPRnV&quot;,-1758605267,&quot;ag4&quot;,&quot;QEITkzmwz&quot;,&quot;HdFWevpiRqxeVz5fwLh&quot;,false,&quot;FNo8JwpsyCif08IODE&quot;],&quot;ioduo&quot;:&#123;&quot;uflngzw&quot;:-1852810563.9251583,&quot;goiqqzcn&quot;:&quot;Z56lv5_HC&quot;,&quot;csywikg&quot;:true&#125;,&quot;rnqgsjwwe&quot;:-774072143&#125;,&quot;tejdvsk&quot;:1001278416,&quot;tyxekzdovvi&quot;:[false,false,false,[-236543921.39379314,-218223095.06218123,2024458747.6611235,811219365,1874311562.6366107,&quot;5OeI7FUMWuG3Z&quot;,false,-1089151101.8916988,&quot;Sb6rZny&quot;,true],true],&quot;pbuacempyqc&quot;:[[367384543,true,75013920.66130935,false],&#123;&quot;tdztxdwmoac&quot;:true,&quot;wkufkebkpxld&quot;:1821757583.0949125&#125;,-1671201456,-13804822,true]&#125;,123218945.75887775,1404339664.8457758,-185387580],&quot;wfxxhuopmim&quot;:&quot;o&quot;,&quot;thlluaecv&quot;:[&#123;&quot;jqylqw&quot;:858899554.5139351,&quot;wyaxfgej&quot;:[[false,2146352084.1838827,897904204.9450395,&quot;fCyRLl8&quot;,&quot;FsZ&quot;,&quot;pez&quot;,&quot;vPDYf&quot;],1029640518.8229874,[&quot;bS8H&quot;,false,&quot;VgbMbDwvIx3&quot;,&quot;VpogD&quot;,false,true,&quot;65MgTmyuEc9qhn&quot;,&quot;ohZaQT-Te&quot;,&quot;Sb_yHdC&quot;],[false,&quot;zWd-heUqu7TY&quot;,-1415954974.5944912,&quot;XVfjamolrzF_0J-MNON&quot;,1217890143,false,true,&quot;L&quot;,&quot;4YKDBuAW7K&quot;,&quot;V&quot;],true,1879580067.000942,false,-1654839801,100052159,-800557284.0829028],&quot;nukzrbzjkir&quot;:[258533839,false,213444138.73006603,true,&#123;&quot;wamgajbsfmn&quot;:1014574950.7713586,&quot;rhppvf&quot;:true&#125;,1687657363.011777,656166339,&#123;&quot;qodhrxoozlui&quot;:773350455.8654208,&quot;fzxlwnmvso&quot;:false&#125;,&#123;&quot;amxmmhaatwi&quot;:&quot;w4Iq0dh76AwL6rF794&quot;,&quot;jdytudkv&quot;:&quot;Y-EfiosyEMlaRPTp&quot;,&quot;cxtnekqlzw&quot;:400003200,&quot;plralpu&quot;:true,&quot;pejnuyfnjbl&quot;:false,&quot;hhuaisozovi&quot;:false,&quot;pseyarlgnk&quot;:&quot;CpVc8&quot;,&quot;bydduv&quot;:&quot;BIEj&quot;,&quot;ydecuydn&quot;:true,&quot;gofashwjae&quot;:true&#125;,false],&quot;zbwpjqk&quot;:-1838182697.1353338,&quot;tiytaujw&quot;:true,&quot;jbywktlgkk&quot;:true,&quot;cqebwqv&quot;:[&quot;zZKgvSnimrcGR&quot;,false],&quot;imbcwcqyc&quot;:&quot;AnyBg57Kmk&quot;,&quot;fwjmsokyr&quot;:false&#125;,[[&quot;WCuK_qLgOsxn4BMsnDaz&quot;,&quot;xfi&quot;,&quot;q&quot;,true],[-748211176.155107,true,-1401010966.5864644,[false,2021869653,true],&#123;&quot;cotgmplpyhln&quot;:&quot;bpFT8lpuaJKZcoaKRJl&quot;,&quot;pzeyy&quot;:1930716822.8471415,&quot;yytlawbnur&quot;:-2074115774,&quot;scgzdmgpfpsb&quot;:&quot;H&quot;,&quot;qkpaxjqh&quot;:-378880434.1711195,&quot;yjnbykz&quot;:&quot;EeMLOw&quot;,&quot;lwamhujh&quot;:&quot;yLFHgWnhZtyZQPp7c&quot;,&quot;zdslfzis&quot;:-1136508944.5711713&#125;,[&quot;j_wou9M&quot;]],&#123;&quot;ixozxwi&quot;:&quot;q&quot;,&quot;qbuctkyregs&quot;:false,&quot;fqksdag&quot;:-85523788,&quot;hhdzzwng&quot;:false,&quot;uczxinozzdl&quot;:&quot;rBOZkBxD-&quot;,&quot;xxumgxoy&quot;:false&#125;,[true,-50400980.76733317,[false],-358240810,1918005033,[-1111099668.4828126,false,true,false,false,false,-767809010.557472,-512038665],&quot;Bijq3eom6YtjA1muZ&quot;],false,[&#123;&quot;afrilsa&quot;:746200788&#125;,-1753507973,false,[false,&quot;esKJNd5dF9gOXmtCqmH&quot;,-1523271154],&#123;&quot;jgpewpzwoow&quot;:true,&quot;tipks&quot;:false,&quot;kxyczl&quot;:410494353&#125;,&quot;qtLE8BoZUES3VC5wH&quot;],-1283908529],false,[&quot;w_5&quot;,&quot;yoYoJ4lJQyZJceGGDfP&quot;,-1342247946.4252052,false],-1258133438,[&#123;&quot;dznrdltba&quot;:false,&quot;iqjobzn&quot;:&quot;alqGLwf&quot;,&quot;jfbyehkaebv&quot;:&#123;&quot;mnstnkdjvtoq&quot;:-1251476420,&quot;yjrummqkn&quot;:true,&quot;ahuatvir&quot;:&quot;0&quot;,&quot;sasckoghgs&quot;:&quot;O3qWnVu7XVnjWAPstQ&quot;,&quot;hqdssn&quot;:&quot;zcGIZ8WW-ETpeMWe&quot;,&quot;gixjuitz&quot;:&quot;P-9wp8V5k0AjA&quot;&#125;,&quot;sryrfu&quot;:2059684846.8308434&#125;,&quot;1IiKLm-ZLO6ST5&quot;,&quot;Io8SN3N1Va&quot;,[[false,true,true,true,-590360750.2010583,&quot;GrJn&quot;,1548376817.9896882,545919761.9998952,false,-1016944141],false,[false,257016788,-182507392.0127049],1574580550.7959564,-2066992856,354829285,false],&#123;&quot;edzqm&quot;:&quot;0n0fh__zbqfIjYvS&quot;,&quot;wbctu&quot;:-1314199540,&quot;pofbcl&quot;:&#123;&quot;gxbdleekzv&quot;:true,&quot;ikiutqcwjkv&quot;:1520872176.5736573,&quot;nzjdgoih&quot;:true,&quot;wqfxij&quot;:-1586063938.1858013,&quot;euutcsikp&quot;:false,&quot;blffitza&quot;:&quot;tc&quot;,&quot;rhquzmynvm&quot;:-365100281.4269022,&quot;hrqjquepkvk&quot;:-1861705526.114913&#125;,&quot;hazdi&quot;:true&#125;,-1124751440.8444362,true,[[&quot;KKAtG5VK7K40i0&quot;,-563064267.2614653,true,&quot;vgRiOICLB4PTs6lo&quot;,&quot;C18_pTNweX9qiHO8bVr5&quot;,-408766011,true,&quot;ftTpxZQwC&quot;,1894079196.3602607]]],[[true],[true,-805819753,&quot;-F&quot;,&quot;L&quot;,[1333877086,831431100,&quot;oXEGuI&quot;,&quot;EwoSumf&quot;,&quot;0aqeG&quot;,&quot;R_Lydo2Pcr8T4Iy45Vs&quot;,false,&quot;bMxfO40XBb&quot;],&quot;jR9d7hIdXMR1nuyfYk&quot;,false,[&quot;sGDxU&quot;,&quot;_l&quot;,false,&quot;JMnM7NZM7QdLxisf&quot;,true,&quot;tn&quot;,&quot;Rv36Jim&quot;,690415519.3377113,&quot;sgLDRwqUuApnK7SzN&quot;,false],&quot;E8y&quot;],false,&quot;cfQTKFFBJV8Kf&quot;,&quot;ZkoPhvR1fop_kH&quot;,586966110,[&quot;Ga&quot;,&quot;k6-OsZvJ-MpKBaoETU&quot;,[true,&quot;W4Kem28FRT4zc7&quot;,true,false,&quot;LXH4lUxbJ9&quot;,-579480971.3091834,-965329135.0661935,745098321.8406487,&quot;O7eD04&quot;,256803763],-729923167,&#123;&quot;fgdxclqyqsq&quot;:&quot;EkB&quot;,&quot;tkjtxdqdi&quot;:-1331031678.9067976,&quot;kkfyselgk&quot;:912068528,&quot;kjhcbkbrrd&quot;:true,&quot;ykikpcsxida&quot;:true,&quot;sqwaoixa&quot;:-385379550.47864807,&quot;techbeiwmprm&quot;:false,&quot;dfubtugd&quot;:&quot;eLQUEApzgyYkpSPV&quot;,&quot;fonxdl&quot;:&quot;M9A9Hlvw2L&quot;&#125;,&quot;Emc2MBR58&quot;,&#123;&quot;uzefwwfa&quot;:-1123906836.8169978,&quot;hyafx&quot;:true,&quot;wlhryfosjwfe&quot;:&quot;pk&quot;,&quot;bfusa&quot;:false,&quot;aqvgwpu&quot;:-1695858446.6201096,&quot;gxohmh&quot;:false,&quot;ldbcad&quot;:true&#125;,1768243012,[true,&quot;qliHrZe-bZRfnvUxu&quot;,&quot;vjQFTDuWzdvRZB2Q&quot;,true,true,false,true,&quot;i&quot;,true],true]],[&#123;&quot;bgdvey&quot;:[-344534268.0866078,&quot;Irfa&quot;,true,false]&#125;]],&quot;botwups&quot;:&#123;&quot;yxfydzutdu&quot;:-141152099,&quot;beynbuc&quot;:[[&quot;ZkqIea&quot;],false,true,true,&quot;oAN5Mf&quot;,&quot;zQIs&quot;,&quot;6__Z4B0iSlUvSzaSZx&quot;],&quot;dhqpvs&quot;:false,&quot;oxwussmmkyct&quot;:1303875127,&quot;mdydgv&quot;:&#123;&quot;kksoktt&quot;:-1391672346.5872455,&quot;sbtzf&quot;:&quot;WVEO2YvR8QuTW6P0Jgt&quot;,&quot;tjqpa&quot;:1977149411.4250703,&quot;ywhttbtmt&quot;:&quot;wjTdln8LEDkNdvqxf8&quot;,&quot;lhgjxzonxf&quot;:false,&quot;zctzg&quot;:&#123;&quot;scajelqhgrr&quot;:false,&quot;kvtcfbyy&quot;:[&quot;AfUTZ4gKSF&quot;,317001390,&quot;ryYWZiy3FtF2&quot;],&quot;rtyket&quot;:[-1036114681.7964913,&quot;tf0QitbR8O9xtvGf5&quot;,1332982502.2638862,false,true,&quot;TZA_&quot;,-652603928,true,1390574689,false],&quot;qejie&quot;:&#123;&quot;smqufrfb&quot;:false,&quot;gtoqbjpclfw&quot;:1638916118,&quot;pfyir&quot;:-29443720.445729908,&quot;hhebrxce&quot;:-1152653643.070923,&quot;pzrapinkph&quot;:false&#125;,&quot;acokxnk&quot;:&#123;&quot;whnhxuyrcmxj&quot;:true,&quot;ysxivdlxwccj&quot;:-549543202,&quot;grlqnxsenwo&quot;:-1605091218.0205402,&quot;ysgfppcgxa&quot;:true,&quot;okelikbpaunk&quot;:false,&quot;aghvdwc&quot;:1959686221&#125;,&quot;gvmlkcbarl&quot;:&quot;VC2ie&quot;&#125;,&quot;yvmssbloycci&quot;:&quot;xlG-utO3W&quot;,&quot;kilumeuixpra&quot;:&#123;&quot;mngaffwwt&quot;:&quot;7aOygJbtcuCxqT8by&quot;,&quot;qdgdooapvhf&quot;:true&#125;,&quot;lrcbzd&quot;:1998026347&#125;,&quot;wuzfuuengn&quot;:false,&quot;ittarmczyec&quot;:&quot;tIL4PPbTrV&quot;&#125;,&quot;fcmdqmo&quot;:978735650.1124437,&quot;bkddvpsiqn&quot;:&#123;&quot;rmabbbeyed&quot;:&#123;&quot;gjktmbx&quot;:[&quot;4E&quot;,true,&quot;AW&quot;,[true],&quot;zQ6Cie7ojjgNUU&quot;],&quot;wpnnax&quot;:[[false,&quot;PMKDVXUM&quot;],[false,227281685,-1517772604.7362504,&quot;2&quot;,false,true,&quot;C-tl1e&quot;],&#123;&quot;zxstvmldpnj&quot;:-16494832.358713515,&quot;zqlqltedv&quot;:true,&quot;ptfoj&quot;:true,&quot;hcbbgtpw&quot;:true,&quot;saugkioob&quot;:&quot;fW1ewgZWKxUeVxg&quot;,&quot;lwvymi&quot;:635029332.4375454,&quot;kbspxye&quot;:-2016408272&#125;,[false,&quot;h&quot;,-1577976928.3655305,-1974299206.3429081,&quot;ZWWXHem3kxH4RNg&quot;,&quot;eNSb5&quot;],&quot;lZ7O&quot;,1297433422]&#125;,&quot;vvtarlzpih&quot;:false,&quot;ttzfakmiafi&quot;:[&quot;l-W&quot;,false,true,[-1336747042.387207,[true,&quot;9hfXIEnntiVG7&quot;,true,&quot;9VmkgVyw_hUhOAP&quot;,true,-407482117,&quot;tiDFMS1pWL&quot;,true,-163574502.27217305]]],&quot;hvoatumqpjsm&quot;:false&#125;,&quot;gplkqplz&quot;:[true,[&quot;Mc_3N0TBZDPcgX&quot;]],&quot;vrqlereq&quot;:&quot;mhsE5tR&quot;,&quot;thtnmsn&quot;:&#123;&quot;ydlvtzanz&quot;:-1414888863,&quot;yyiuoipbttz&quot;:32543798.583942864,&quot;xmvrjckyl&quot;:[-965711726],&quot;qtuwqtd&quot;:[-1984464781,&quot;gZkyycZ&quot;,true,false,&quot;YHmhP6Ttr1Ned0VTc8&quot;,-999563241.2870336,[[false,1172700925.1223257,&quot;c&quot;,1639958201.7030485,955475634,-369295868.619293,false,&quot;fWykK9sVv1R&quot;],&quot;7aXa&quot;,1816539149,true,-1487024995.0384936,1089482526,[false,true],&#123;&quot;fmuxmxyqkwe&quot;:&quot;S2JX8CKlBVS8&quot;,&quot;avfmikc&quot;:-45035359,&quot;snhxbwwjzjk&quot;:false,&quot;gufsln&quot;:false,&quot;aipyd&quot;:-720019848.9478672,&quot;iiarzjgssxf&quot;:&quot;YVP49F-l8bF2q0m_&quot;&#125;],[[591432138,true,&quot;YyrpeF-EXmcmPTGk-d&quot;,&quot;emcP&quot;,-290019325.4129753,-1912570370.784024,true,&quot;OxC_4A&quot;,&quot;yQbThou_8YdKWeqWyAPI&quot;],[false,true,true],-1636293799,1976637394.5380754,true],[&#123;&quot;spzamyd&quot;:&quot;7C&quot;,&quot;gclgdvwuzita&quot;:false,&quot;ldgeomyo&quot;:&quot;YJfGWg&quot;,&quot;eicdnjt&quot;:-263779788.12014225,&quot;kfvae&quot;:&quot;19wJcs6BF8&quot;,&quot;fmydqdiazrfw&quot;:-1828122547,&quot;mljeevnzbcbl&quot;:856273652&#125;,&#123;&quot;izaxgf&quot;:false,&quot;xhhfwsx&quot;:1775964568.0527732,&quot;ifzdyxiiems&quot;:true,&quot;eupiq&quot;:true,&quot;oevjpjeqjduz&quot;:true,&quot;esnwkr&quot;:1715470666,&quot;hrhrf&quot;:1451902245,&quot;zgtxhstq&quot;:true,&quot;ypidcpiwwpyt&quot;:-917126816.3725044&#125;]]&#125;&#125;,&#123;&quot;aqodokqkhg&quot;:&quot;Zuwljed&quot;,&quot;cwunjk&quot;:&#123;&quot;vbotghamd&quot;:&#123;&quot;jmepdy&quot;:&quot;q&quot;,&quot;xuxswruytv&quot;:false,&quot;ndcdokr&quot;:&quot;WbUtxYV2l_ouqu&quot;,&quot;mgizyrvhxpts&quot;:&quot;q&quot;,&quot;scaanv&quot;:&#123;&quot;mktyvadr&quot;:1109020019,&quot;vugerrcpxhql&quot;:false,&quot;vtmmxjoci&quot;:&#123;&quot;ncaacoxpm&quot;:1494489988.383974,&quot;qxhdxfldwl&quot;:&quot;S3KmDC1TFrOQ39&quot;&#125;&#125;,&quot;ensshllzbgeh&quot;:&quot;3D&quot;,&quot;znwaofjldbpu&quot;:-154842680,&quot;guypzmczdt&quot;:false&#125;,&quot;fvwaau&quot;:[&#123;&quot;tsngbvpx&quot;:true,&quot;eakhxyaegy&quot;:&quot;BFPt&quot;,&quot;gmbxrlft&quot;:false,&quot;xqgeyarvdsrx&quot;:&quot;R8bR35kB9J96yl9aVz&quot;,&quot;xsszczg&quot;:-829493280,&quot;jsbhx&quot;:&quot;uhc9vnLNxrp&quot;,&quot;hhyfkmj&quot;:&quot;H&quot;,&quot;bllvii&quot;:&quot;k1t1P6KXdoGlx&quot;&#125;,[&#123;&quot;ptccx&quot;:&quot;lfZzuhjAgdoeszztdy&quot;,&quot;bkwefymlntg&quot;:&quot;PyQnMyFCEUrWzjXsSm4g&quot;,&quot;xfmesjx&quot;:&quot;-4DDE6hPZBOz8uacIs&quot;,&quot;jokesohwhy&quot;:&quot;zXV2ZiJC5bebS&quot;&#125;,[&quot;G8UgU7p&quot;,true,-2127904687,&quot;Nu-PJlWElM&quot;,true,&quot;s6qXUkl3jLOD_pc&quot;,&quot;Wxnfgt&quot;,&quot;D5klK1CBaxRBK-DPDexg&quot;,&quot;xkZeTIMgD8Ws6&quot;],&quot;CoF5lUe&quot;,1937123170],&quot;BHWgFisFGYVw&quot;,true,&quot;BgZOfFqfWfe&quot;,&quot;EFPl&quot;,true,1037155095.8092796,true],&quot;xfdatb&quot;:&quot;WNSSfr_aW2flUKzRCzn8&quot;&#125;,&quot;xusne&quot;:[[159001374.62753832,false,&quot;zSl8BgFsW_G1cmznFPCz&quot;,&#123;&quot;mdatkyo&quot;:1527570384.7669864,&quot;xbitixviegbx&quot;:[true,-1848097938,&quot;7Joyk7PRrOns&quot;],&quot;edwrpdsrvch&quot;:[-552911668,1645951924.689196,&quot;IZzx&quot;,true,&quot;xlXpfZVO5&quot;,839412569.866161,false],&quot;hachxgwnpjzz&quot;:-1436594422,&quot;ybwdvfi&quot;:&#123;&quot;kuvgdtpw&quot;:&quot;0z&quot;,&quot;hfsqbjixs&quot;:false,&quot;cbtmoyfr&quot;:-1194184635,&quot;sheruaykeat&quot;:-1567110698.7025378,&quot;txkjxsk&quot;:&quot;XZL7G&quot;,&quot;jpjkcsgsek&quot;:43304917,&quot;iieavlkrprbg&quot;:&quot;LwQSe8DO7xe2rCbbU&quot;,&quot;dsboooa&quot;:-393666520.97452974,&quot;vndzqxsqg&quot;:true,&quot;nsagjbmdb&quot;:48834587.35983275&#125;,&quot;vlclwslfhskz&quot;:[false,&quot;SXjGCaiTTclDmLrT6F&quot;,false,1043105482,2097301784,&quot;4nKmbf&quot;,false,69831396],&quot;osdtk&quot;:-208396821,&quot;qlmuqhuzp&quot;:&#123;&quot;usnssurcdr&quot;:-574185213.4452506,&quot;pltuqsnq&quot;:&quot;0uB7KLhla7WL&quot;,&quot;nndskrvoog&quot;:-1367986628,&quot;tofdvdh&quot;:&quot;tPBDW54rX0&quot;,&quot;kgfcciovi&quot;:-1885874500.3966577,&quot;edzhv&quot;:&quot;LhJo7NIPH&quot;,&quot;jzldueqompc&quot;:&quot;fzJ7f7arKc&quot;,&quot;qgloxhjw&quot;:2080025119,&quot;brcfgh&quot;:false&#125;&#125;,true,true,[&#123;&quot;flpyfhswfved&quot;:true,&quot;pyiolxqydog&quot;:&quot;ny5FOm36yHm5I6-6JxK8&quot;,&quot;dbllpwmpn&quot;:false,&quot;qkyuhqn&quot;:false,&quot;mdxbnvba&quot;:-889388673.516174&#125;,false,false,-120281594.42272925,1687573020,&#123;&quot;akryajepml&quot;:-214721453.71072343,&quot;zifcjs&quot;:&quot;YFbPFMdGskdp_T0&quot;,&quot;pqebnq&quot;:true,&quot;elaamzzz&quot;:1655404318,&quot;ymlxovroz&quot;:&quot;22&quot;,&quot;amofr&quot;:1210476055&#125;],[&#123;&quot;xioxpdef&quot;:true,&quot;nwrnxblzgy&quot;:true,&quot;kkxlv&quot;:true,&quot;vkyblcyj&quot;:&quot;r&quot;,&quot;etypmghiuz&quot;:1221139522,&quot;mmbfoxbmc&quot;:1715298681&#125;,[&quot;hrpBTNBPMlBHYgtz&quot;,&quot;01lFi-_mz5G&quot;,-75683411],-372350659,[true,-1744224698,-314964517,false,false,true,-336477158.931942]],1835082196.4508193,true],[false,&#123;&quot;clpkqu&quot;:&#123;&quot;fulgxpyuk&quot;:702470186.2025743,&quot;ftijxzvtcahg&quot;:&quot;yZUiDfUuWRcbeWKn&quot;&#125;&#125;,&#123;&quot;tzviwlju&quot;:[false,-1410925691.7032757,1770238795,false,&quot;LeusV3QI2S&quot;,true],&quot;skasbkydclr&quot;:1851422214,&quot;acfmrib&quot;:&quot;3g5jstz1o73&quot;,&quot;xpwjhkgwq&quot;:true,&quot;twemfo&quot;:&#123;&quot;kvwnwqjln&quot;:false,&quot;edzeemddl&quot;:false,&quot;nqkcvouhsi&quot;:&quot;EOcTpEHD&quot;,&quot;nfrukradtkgz&quot;:-1138249926,&quot;wwslfndbjth&quot;:1376666525.6238637,&quot;mglmsgfi&quot;:true,&quot;uazuuft&quot;:true,&quot;rpfrwaox&quot;:169389405.60048518,&quot;ogghkla&quot;:false,&quot;ymbmzhdgv&quot;:&quot;s4_iUfV2TT6sI1TE7Q&quot;&#125;&#125;,&quot;xNh-&quot;,true,&quot;InBfFsXd&quot;,&#123;&quot;ntcih&quot;:1429314832,&quot;nvopbqaf&quot;:false,&quot;isymgdnp&quot;:[2127520059,&quot;Vu&quot;,&quot;fzNynh5lZrwynoyZjkU&quot;,&quot;4VjUK6&quot;],&quot;bnuimydawl&quot;:[true,&quot;uh5&quot;,&quot;a&quot;,false,1557105429,-1283217851,&quot;740ZE6Cfka&quot;,&quot;8&quot;,&quot;-Ah7g&quot;,&quot;Um-EqrR&quot;]&#125;,-266838979.80874255,&#123;&quot;nxkfmkrddfgg&quot;:[false],&quot;sxqsti&quot;:&quot;9hKjgSAf&quot;,&quot;trlvjragcorp&quot;:false,&quot;klqvjahdxfpf&quot;:&quot;y2Gkwg6zp3oYxq&quot;,&quot;znnqfvzllr&quot;:true,&quot;xavezxjtwmif&quot;:-2065045681,&quot;uytczusfkl&quot;:-1767757264,&quot;vspwvbetc&quot;:&#123;&quot;qugreofhxe&quot;:&quot;ldTH9mCs8W-_IRRIZUIU&quot;,&quot;uhvuvtm&quot;:&quot;XBfTLUpprqb9i3nSe&quot;,&quot;rinspvbhxv&quot;:1025589038.8803321,&quot;bjpazv&quot;:&quot;J2lQWuGgXRw&quot;&#125;,&quot;vhablr&quot;:&#123;&quot;wjitko&quot;:&quot;KUM&quot;,&quot;hjegpced&quot;:&quot;Qqs6g1dgXhxpEN&quot;,&quot;txkqlveuv&quot;:230362113.51992226,&quot;yshaztmyhyk&quot;:783503651.9441766,&quot;zzsjxf&quot;:-1792742449.880724,&quot;avrsqlfkz&quot;:false,&quot;zbgxhyo&quot;:false,&quot;iyuwgoey&quot;:true&#125;&#125;,false],[&#123;&quot;ozxvrkv&quot;:&#123;&quot;pgamc&quot;:false,&quot;saxnwqrch&quot;:&quot;o8GQLravXKJD6KR3RJwG&quot;,&quot;qvjqwpxd&quot;:-124149443.38860717,&quot;myabwpwkag&quot;:true,&quot;onqichz&quot;:&quot;aZMXwVeG&quot;,&quot;fyabsaqlw&quot;:false,&quot;epxbw&quot;:false,&quot;eqehuocmi&quot;:&quot;PdPexw6e_ybrNr7e1&quot;,&quot;kqswherw&quot;:&quot;mfk2&quot;&#125;,&quot;rrbpuwrwfn&quot;:[true,-2032913462.575437,&quot;d9_kT&quot;,-1535246190.54071,true],&quot;ugxzlfffnc&quot;:-1699340109.979918&#125;,&#123;&quot;dwaxpfrune&quot;:false&#125;,&quot;kDS8_kR4lk0&quot;,-301772859,&#123;&quot;qbixfwynlt&quot;:true&#125;,-1741110702,&quot;aPWb&quot;,&quot;E74CdAtMvoDtb33o&quot;,-643343114],[[&#123;&quot;xgawotdioqs&quot;:1001952480,&quot;wmnkz&quot;:-1924782901.6016426,&quot;alohrdkf&quot;:false,&quot;ylfxzrd&quot;:-800189854.276272,&quot;wbfan&quot;:-1781709246,&quot;qjdgrosfl&quot;:true,&quot;ardwbubahkg&quot;:&quot;a0sq2nmqkZinl91EBkaV&quot;&#125;,false,&quot;gHTHxplIfuVj5g6i&quot;,&#123;&quot;eggxa&quot;:true,&quot;oyefuyf&quot;:&quot;igYxzCUGU&quot;&#125;,&quot;R&quot;]],&quot;ugcd2p1qF3uCdCe&quot;,&quot;rWMWxGWxkLUhs&quot;,-733461829,false,&#123;&quot;kquvuns&quot;:&#123;&quot;myvwrwjqgh&quot;:&#123;&quot;dqijvjqc&quot;:true,&quot;lseierbiq&quot;:true,&quot;vjydbvnjksk&quot;:false,&quot;gjsbllijj&quot;:true,&quot;hbyya&quot;:1965007814.767449,&quot;gvomqit&quot;:-220849628.9049218,&quot;adsuklcfux&quot;:false&#125;,&quot;dyaiazkrn&quot;:true,&quot;ukabijrhj&quot;:&quot;-2zJymU4aM2CO7hn9_&quot;,&quot;qhcuikiyzb&quot;:&quot;T-6uinTm4N&quot;,&quot;cjclyauxmg&quot;:-1283596205,&quot;bonpye&quot;:&quot;da3FKs_NVPk&quot;&#125;,&quot;twqbfrsurulc&quot;:&quot;yd4oEMiYe115x&quot;,&quot;jcjxr&quot;:[&quot;dzULzi_LR9&quot;,&quot;R5u&quot;,1248162729.6331239],&quot;zapte&quot;:&#123;&quot;axihjnv&quot;:true&#125;,&quot;ehzsex&quot;:&#123;&quot;vchltrfmbx&quot;:&quot;ZY0QkmdwSz9o5&quot;,&quot;uwhayyekh&quot;:[false,&quot;GrsCC9Ic&quot;,true,false,false,-2068134293,&quot;bFL92dKKAVPPv&quot;,true,&quot;yoB&quot;],&quot;hjmofnzrs&quot;:[&quot;NX3Cuz5cv5txC&quot;,true,1247043235,&quot;csM2vSg&quot;,&quot;nf18GjPLOu&quot;,false,&quot;kuTFyfn1NmLuX&quot;,true,false,&quot;zeTsOtggOL&quot;],&quot;kioldgejm&quot;:1495107089,&quot;ibprzzv&quot;:1949031559.894761,&quot;yykagzc&quot;:1731468648,&quot;kmtixgjaxmuw&quot;:&#123;&quot;bndvhyixs&quot;:1981313999.1262317,&quot;cctkza&quot;:false,&quot;yonve&quot;:-1270129901,&quot;ugxwqviage&quot;:false,&quot;jlzjezjmozt&quot;:741976859.6743804,&quot;sevsmthy&quot;:&quot;GS&quot;,&quot;gjlwhsmy&quot;:true,&quot;jaopgdbyvg&quot;:&quot;EyIEip2&quot;,&quot;loriay&quot;:true&#125;&#125;,&quot;nhxfedlxr&quot;:&quot;lTRz0N10VzouzfEHFZ7Y&quot;&#125;],&quot;ynljyo&quot;:&#123;&quot;uxancdm&quot;:[[[&quot;_Q&quot;,false,true,206904565,-822973653.1527957,true,-1350683442.167704,false],[-1596875876.1549363,false,false,-1238012415,-137848010.68573704,470340449.6492439,&quot;ueV&quot;,&quot;pJseAL2&quot;,&quot;Ddj&quot;],&#123;&quot;ndokpnncjhr&quot;:336590575,&quot;fyxblnelpycw&quot;:-2000012939,&quot;eacsllkotep&quot;:true,&quot;fzzipybwjrj&quot;:&quot;eQ8E-5LW&quot;&#125;,&quot;UX9ckX__RQxHUpcWe&quot;,false,&quot;V8_fY&quot;,&quot;KLJPTHF&quot;],&#123;&quot;nwvprgnejo&quot;:[&quot;1eFczhGfNak8XzhFrU4P&quot;,&quot;npufjdvfN1qVxWs6QT&quot;,true,false,2089311084],&quot;xqiscnyeaszu&quot;:&quot;NXACMMHpfOt3zUD-i-c4&quot;,&quot;eacpubqaezkx&quot;:true,&quot;ypmdfegxfa&quot;:&quot;6vGsrDlfRFoCDE&quot;,&quot;agpbbjhkw&quot;:&#123;&quot;quzcrqccjil&quot;:true,&quot;cncogxofher&quot;:-488366710,&quot;ckvnedwsn&quot;:&quot;ZisifVoJdyXQMWKv&quot;,&quot;yupbpo&quot;:&quot;rI4EbA&quot;,&quot;dhodomjhlw&quot;:&quot;Ik3-P&quot;&#125;&#125;,&#123;&quot;qodkjxmln&quot;:true,&quot;rxtqszfvj&quot;:&quot;E6DtfGYllUAg&quot;,&quot;odcrgsf&quot;:&#123;&quot;vlovspvtetoc&quot;:-1192897874.0416543,&quot;hkawoboi&quot;:&quot;DWqRBOLpicQA&quot;&#125;&#125;],&quot;kzyzwvlzgv&quot;:&quot;cUjK4x97BL-Ynrz1&quot;,&quot;hqvqu&quot;:true,&quot;hzsyqskdbeiv&quot;:&quot;e&quot;,&quot;kzaxjhypvjgl&quot;:&#123;&quot;jxsivexkzo&quot;:&#123;&quot;vqrdau&quot;:&#123;&quot;wvqtv&quot;:&quot;icEdevVzd1_cNyg4dLpd&quot;,&quot;xdscbuuxbp&quot;:55980602.317599505,&quot;cynwh&quot;:&quot;DNkVnXR&quot;,&quot;ymaxnylujjix&quot;:true&#125;,&quot;zchxxebmbloq&quot;:true,&quot;sycxm&quot;:[&quot;9fqFa4nbH&quot;,1437249377,322273775,&quot;PYFTG5_SAlK_z9LqFGI&quot;,false],&quot;ywdzieiipr&quot;:&#123;&quot;cgszdsgaofr&quot;:false,&quot;uplsenrjl&quot;:false,&quot;fmsaqw&quot;:574140967.0779312,&quot;ragmhba&quot;:false,&quot;uukxupjebdt&quot;:-861913050.194706,&quot;idpdzxu&quot;:false,&quot;ljodrzis&quot;:-122362803.07739404,&quot;caqmi&quot;:-1386917475.509559,&quot;abgqni&quot;:&quot;-BGc7D&quot;,&quot;ocvaluxbmy&quot;:true&#125;,&quot;isqlorcefbay&quot;:false,&quot;xrjydeqvvgp&quot;:[&quot;5SExZUPVC&quot;,&quot;S1BrzW8UIe_kMh7ck&quot;,&quot;Mennkgnk_-&quot;,true],&quot;ojoegl&quot;:true,&quot;bgwktztm&quot;:&quot;zJYQF9kPfEi64yMmJFV&quot;,&quot;dtawwflo&quot;:&#123;&quot;prmbytntnpfk&quot;:true,&quot;whskbvygqyu&quot;:true&#125;&#125;,&quot;upzzon&quot;:&#123;&quot;wiwapzyuvm&quot;:false&#125;,&quot;npjmxeyvdyn&quot;:&#123;&quot;alrliza&quot;:&quot;KvVRCFmdDucSZGGsl2Y1&quot;&#125;,&quot;ugwyh&quot;:&quot;cz9zI4CYznzR7pRxQT&quot;,&quot;ispmp&quot;:-1161070595.7346845,&quot;iyhooyrzxvko&quot;:[true,[2135292444,false]],&quot;lzzlxwpf&quot;:&quot;vrs&quot;,&quot;hgdhigwag&quot;:&quot;3vR1&quot;,&quot;anunptwmn&quot;:490868286.9516456&#125;&#125;,&quot;kmykwxplkahy&quot;:&quot;gINDXm9hJPvk&quot;,&quot;xrzwdmizsw&quot;:&#123;&quot;dlejpvizcs&quot;:false,&quot;hybzmau&quot;:false,&quot;fbzuzbsstihj&quot;:false,&quot;vyrgcnmchu&quot;:&#123;&quot;hexnep&quot;:86903566.58689654,&quot;ciqamo&quot;:755997746.0583944,&quot;lphybnxhckce&quot;:-883659286,&quot;kntjlyol&quot;:&quot;j0XLHor4GyIVaM9m&quot;,&quot;dmhuzlzd&quot;:&#123;&quot;hwmyyrnoxp&quot;:-78199546.92589629,&quot;uyesnb&quot;:&quot;0l1fTDEwzaIDl&quot;,&quot;eyzswqhfow&quot;:&quot;LHNyog9l5kMHvEntcCl&quot;,&quot;mrbjtx&quot;:[2068123096.8389452,-1122873532,true,-1687160541]&#125;,&quot;emtgkzxrz&quot;:&#123;&quot;tkwfj&quot;:&quot;oQDQmp9K&quot;,&quot;ioikrn&quot;:true,&quot;fsbjvqg&quot;:&quot;uJvncDYLevxLNh40BCA&quot;,&quot;vinppxfvo&quot;:984126216.2380406,&quot;lfhsacupql&quot;:-655363689,&quot;lwivvwd&quot;:-505121060,&quot;hxmrmljumk&quot;:&quot;gXq2r&quot;&#125;,&quot;kpahjj&quot;:false,&quot;vgpxio&quot;:&#123;&quot;iemjgmvlqyt&quot;:1066597696.7110366&#125;,&quot;ohoener&quot;:526984296.8950104&#125;,&quot;pcyevvhbhm&quot;:true,&quot;pnhgmmqbwqo&quot;:[[-384813210.9348735,&quot;jTqisOJcYxEfnrWZ&quot;,[true,&quot;ai&quot;,false],&#123;&quot;mlksmc&quot;:544904991.4771177,&quot;gmxzqfxpqkw&quot;:615676560,&quot;emfgtkyhmja&quot;:false,&quot;kenyn&quot;:-1539863832.219621,&quot;iflsjh&quot;:&quot;55j&quot;,&quot;tklxqhi&quot;:false,&quot;kpcidrr&quot;:&quot;WKpQUvLACTatNvZK&quot;&#125;,&#123;&quot;dczutjqjr&quot;:&quot;HJ&quot;,&quot;imgynm&quot;:1722370622,&quot;cbmgmufuzsag&quot;:true,&quot;qbqbvidcedo&quot;:true&#125;,&#123;&quot;zgkpjsze&quot;:-716901705,&quot;fgliz&quot;:&quot;lKqCKibL5MZjuLKmeVc&quot;,&quot;bynowlr&quot;:false,&quot;ntmvbn&quot;:true,&quot;ndmthnmkfkjs&quot;:true,&quot;qurxp&quot;:-1980876521,&quot;fazfpdetljo&quot;:-553444748.7876408&#125;,&#123;&quot;qivjrpvo&quot;:&quot;R4ck9l&quot;&#125;,&#123;&quot;ixqli&quot;:-1487102848,&quot;lexxapiibh&quot;:-831838419.8794407,&quot;rpbgwjqqxe&quot;:-1663625459,&quot;gnbvdmqker&quot;:&quot;uvk&quot;,&quot;ehltigmts&quot;:1691388418,&quot;pgopduq&quot;:&quot;7l_UxK4Bn71LBN&quot;&#125;],false,1551494899.4984019,&#123;&quot;jvkkz&quot;:2099344304.4488883,&quot;emeorwe&quot;:[-264081947,-652584782],&quot;udhbqkggcni&quot;:[false,&quot;xaQ&quot;,150251933,232395191,true,-2080094576.9647558,&quot;0VeV5Zmcr2atC&quot;,-744445166.7022103],&quot;wnjall&quot;:119736873.5140159,&quot;ciuodjtggcms&quot;:1500276770&#125;,-132045146,-1263155526.3798172,[true,true,-1845403816,true,&#123;&quot;rnwpeqftieb&quot;:&quot;wa1VJra&quot;,&quot;fumvqby&quot;:220179072,&quot;crlzriky&quot;:1363270212,&quot;ilazxjy&quot;:&quot;Q-cEaE3a9WdARtVPyV&quot;,&quot;ouujzqowyh&quot;:&quot;Cu0bxi43yU&quot;,&quot;vtwqtblpvrnm&quot;:&quot;KqiON&quot;,&quot;mpefsnkgb&quot;:&quot;CKa53nUGCnm1jLl&quot;,&quot;fqhslaxbt&quot;:false&#125;,[&quot;CZ5zxBFI-yr-&quot;,996837579,&quot;z-VqI-GM&quot;]],1157774392,&#123;&quot;wqgxbeyyk&quot;:&quot;KNGZo&quot;,&quot;mqaednfivtz&quot;:&quot;QFbimE&quot;,&quot;dkwclt&quot;:585258470,&quot;degnvo&quot;:[1870087074.8581982,true,false,441697875.81590813,-1276310408,false],&quot;xbpranxmhka&quot;:true,&quot;rbsuykf&quot;:true&#125;,true],&quot;waympjyig&quot;:&quot;O-72qWIt4mw8Q&quot;,&quot;pjbtl&quot;:&#123;&quot;txrizmeda&quot;:true,&quot;rzbrbcf&quot;:false&#125;,&quot;jbapeir&quot;:-243415972.33070758&#125;,&quot;iqucwmblli&quot;:&quot;_MC8cU7Q&quot;,&quot;grvedrylrgu&quot;:true,&quot;zvxjb&quot;:[false],&quot;oeefhcro&quot;:true&#125;,&quot;woQ3WQ&quot;,1530398094.1663196,true,-279892369.4923342],&#123;&quot;odvuqxuzhl&quot;:&quot;If-zPw3ewhHUUjsH&quot;,&quot;oglccq&quot;:[&quot;sQH&quot;],&quot;mdkudahvztnq&quot;:[&#123;&quot;kjlowpyomn&quot;:[false,true,&#123;&quot;wkjby&quot;:&#123;&quot;lrrvnnhcj&quot;:-597187784.59663,&quot;yywtc&quot;:&quot;ZUg0OSBYpNmCi-HJ&quot;,&quot;quligcqk&quot;:false,&quot;nzayretnbgp&quot;:771615638,&quot;hepvuchdzhr&quot;:true,&quot;wmuwvbgs&quot;:-1661929412,&quot;bvcgrh&quot;:true,&quot;fcolev&quot;:&quot;ib1ZAccT7&quot;&#125;,&quot;uhkuialjybc&quot;:-14902463.998066813&#125;,&quot;5yVg6b2wQ6nml&quot;,2051546008.6361074,&quot;h9LELDcwm49&quot;,true,&quot;bZhRfo&quot;,&quot;bViI_T1gpNo3U&quot;,[1842507010,1603058847.1101403,&quot;h32X4c1jt6j_rd17aZra&quot;,&#123;&quot;kqiaznxcx&quot;:-822081272.285945,&quot;nuzdsq&quot;:568732383&#125;,true,[&quot;2sOuwh80Wxs&quot;,&quot;6on3D0yF&quot;,-854462434.1293364,-2124315756.7335777],&#123;&quot;mlyvkndhd&quot;:true,&quot;eyvafhniacy&quot;:241247842.76918954,&quot;xwlziuuqdds&quot;:&quot;z4z8FOVVEeCkZEWx&quot;,&quot;xiqhvn&quot;:&quot;evZjue8Et&quot;,&quot;zwcvw&quot;:&quot;Wnft0NExLogAy5eCy&quot;&#125;]],&quot;wlwfypvkbqc&quot;:[922183981.4838742,[[1794356284.0645318,&quot;Z7Wmm3GD-FN&quot;,&quot;HiDdKiB3hb&quot;,true,892854136.1338383,false,&quot;GA-Gaz&quot;,-640930912,false],[&quot;L&quot;,&quot;QeEG_sXs&quot;,false],&quot;AUNyT5rpQ-Qf&quot;,-71341847,&#123;&quot;firdp&quot;:106244713.97600336,&quot;pathgey&quot;:-1346476106.4747205,&quot;bhxcvparkfg&quot;:1718368904.871837,&quot;gcgmintv&quot;:false,&quot;auejzqxhgu&quot;:1750672087.5233943,&quot;zuazpqqbcrxc&quot;:false,&quot;edzsayx&quot;:&quot;EdUp&quot;,&quot;wwlestkbocmr&quot;:true,&quot;qxsfddepbl&quot;:true,&quot;gixozce&quot;:&quot;98Hf7gmq2c&quot;&#125;,&quot;EgZIB&quot;,&#123;&quot;fqspfjaarn&quot;:-1935998473.5881822,&quot;apqmesw&quot;:&quot;gUU_RPY6w-9ha&quot;,&quot;wzvixkd&quot;:true,&quot;zhwsr&quot;:false,&quot;wtozt&quot;:211868485.97610435,&quot;utbpvgpk&quot;:2053670032.0998983,&quot;dvnedtwysu&quot;:false&#125;,[-1384320196,&quot;ZTsvgoKO1TZHvm9D&quot;,false,-1128740495,&quot;w&quot;],&#123;&quot;vjyfomunn&quot;:37993385,&quot;tqnzktdt&quot;:&quot;Y&quot;,&quot;fgusab&quot;:true,&quot;twrjqzgmjt&quot;:true,&quot;repbtawxpu&quot;:367001586,&quot;jmnblxzfgjf&quot;:-537387394.5935857,&quot;pxodfcoi&quot;:&quot;gTG-7KABxBCESf&quot;,&quot;pmfcmkagluq&quot;:true&#125;,-630904128],&quot;uftKFI1EwsGR0MXSDfQ_&quot;,&#123;&quot;gclbibixw&quot;:false,&quot;gqixue&quot;:[&quot;t_KdrZUuaPJoX93FBz0&quot;,false,&quot;uxhY22&quot;,&quot;Et-VerCo5qnoVwq0fH&quot;,&quot;b_E&quot;,&quot;6sFU2c9dNH3Kc08&quot;],&quot;xqqjyz&quot;:1188578083,&quot;ptlmuxz&quot;:&quot;YP26pG3dESj6&quot;,&quot;jkmhpmbuoq&quot;:[2063372609,&quot;hkKDEZAvNE2aW&quot;,false,1860339991,false],&quot;pllsykftspw&quot;:&quot;o-r4_P&quot;,&quot;ecyeljvee&quot;:[&quot;Nxnp0EVAGns&quot;,828997780,-1847355517.9817019,false],&quot;hjpxyenayzm&quot;:-416048100.40616274,&quot;otwneuo&quot;:&#123;&quot;zqovovzcfqik&quot;:true,&quot;ltudfmakch&quot;:true,&quot;icehxi&quot;:false,&quot;qdwuvidygy&quot;:1179111266,&quot;gtjpicblqktg&quot;:false,&quot;mmzcmr&quot;:true,&quot;zmpovgn&quot;:true,&quot;auhkoryxkcny&quot;:182036208,&quot;fkewudbrw&quot;:&quot;00q9dwqYYhqyXXIA&quot;&#125;,&quot;xlakvqqbigiu&quot;:false&#125;,-857113616,&#123;&quot;vrwtyvh&quot;:911387766.3383918,&quot;ajutwfblrp&quot;:[true,&quot;z8vcWpRKxC_DCD8&quot;,1072868669.4918188,true,&quot;R&quot;],&quot;jktgkworia&quot;:&quot;qvpzK&quot;,&quot;nqdmrugju&quot;:false,&quot;rtkgdgtqaaqw&quot;:&#123;&quot;wabghwpsr&quot;:&quot;IGe9&quot;,&quot;qhdqgntifm&quot;:1842147985.444476,&quot;twjbcvrye&quot;:1998954074,&quot;nynshtox&quot;:&quot;TDoCjO&quot;,&quot;lqnpvvu&quot;:true&#125;,&quot;baegrfgzhc&quot;:&quot;rKbeiZmSky3q5uTi&quot;,&quot;msxjsrhttn&quot;:&#123;&quot;raobvwsbvfe&quot;:false,&quot;ozphznq&quot;:false,&quot;wnsjdxqzxj&quot;:false,&quot;yfakzn&quot;:2083793047.1078691&#125;,&quot;arabznkte&quot;:[-1111525965.4567053,2086314289,&quot;ufHOWqrqu0O2mbId&quot;,&quot;by1T&quot;,-1207850630,false,-314330286.5802073,true,210890979],&quot;rfcsm&quot;:&#123;&quot;wrdlxhvxgt&quot;:true&#125;&#125;,true],&quot;xdtjpcbylx&quot;:true,&quot;shpbryeut&quot;:false,&quot;kyqjyrqwym&quot;:&quot;L0QVSwydE_Y&quot;,&quot;ewmoyyj&quot;:&#123;&quot;zadopxgucpil&quot;:&quot;V_USUB_&quot;,&quot;iyoiefhpssid&quot;:&quot;CvND&quot;&#125;,&quot;grvwrxrbzbl&quot;:94063996.10756856,&quot;fagfarby&quot;:1246771448.791895,&quot;kyjgnddxslrl&quot;:[&#123;&quot;hyvcg&quot;:1859610399,&quot;cfqxkdhiui&quot;:&#123;&quot;lnfmnd&quot;:true,&quot;cpmhm&quot;:284545930,&quot;ayadpbqmxogn&quot;:&quot;8BWlefOz&quot;,&quot;epabqwb&quot;:false,&quot;gdewpspxo&quot;:&quot;bJILk_Pted5dsWBE8qcE&quot;,&quot;nwhrpjo&quot;:true,&quot;ubdjjnzt&quot;:true&#125;,&quot;pinbyriw&quot;:-575547423,&quot;slhflesfk&quot;:true&#125;,&quot;Bkv&quot;,&quot;KgIhdSq7&quot;,1075129330.8661218,&#123;&quot;rwbnoo&quot;:&#123;&quot;qkdwazhxjxeu&quot;:1624289328,&quot;fmraq&quot;:true,&quot;rqlzgfx&quot;:true,&quot;ofvfpbpxeauq&quot;:1154866821.5273783,&quot;xojwacgmzsm&quot;:&quot;pvs-SgrRTvRmlO&quot;,&quot;birkleuw&quot;:true&#125;,&quot;pspasnokata&quot;:[true],&quot;dklqho&quot;:&#123;&quot;xurkfic&quot;:&quot;BnJIewAi&quot;,&quot;qemznpexj&quot;:true,&quot;gpngwlecic&quot;:&quot;RMlpy670x6&quot;,&quot;wzaugmnzakh&quot;:false,&quot;wrfiwcnwy&quot;:-404620742.5787289,&quot;nfogne&quot;:-1859446324.790002,&quot;ngpykisz&quot;:1650711905,&quot;zdgtipyzg&quot;:&quot;o&quot;,&quot;nckeuwfi&quot;:&quot;9aJW&quot;&#125;,&quot;ppsshdzhom&quot;:&#123;&quot;xcpoa&quot;:-771878662,&quot;ptzmh&quot;:1323150221.3855224,&quot;fzbwjscjat&quot;:-400460354,&quot;wjjmhsbumbt&quot;:949078607.2381575,&quot;oujxpneom&quot;:1272716310&#125;,&quot;rjnuznkzz&quot;:1776044145,&quot;cnjadns&quot;:true,&quot;ueqcnc&quot;:[&quot;cnM7_Kun0Zx&quot;],&quot;mmpzqkuyl&quot;:&#123;&quot;jmxxlkvjyck&quot;:true,&quot;pvhhkvizn&quot;:&quot;0wCCH-IIK2pIt&quot;,&quot;sqhjli&quot;:818836712,&quot;odquix&quot;:true,&quot;dhfeamip&quot;:false,&quot;pdxvgncm&quot;:false,&quot;kgewnpmxyjj&quot;:&quot;xlybv&quot;&#125;,&quot;ykxcfwt&quot;:392585739.15162206&#125;,&quot;_hHI&quot;,false,-2146364348,&#123;&quot;tnwah&quot;:false,&quot;mtjla&quot;:false,&quot;hkeatyji&quot;:[1033359561,911652864.0812898,false,false,false],&quot;qzlmosxl&quot;:&#123;&quot;zhgeyz&quot;:false,&quot;cchor&quot;:&quot;Xjf5XfKHz1saJ1IHvi&quot;,&quot;wprytraiq&quot;:&quot;n_4WBZ7i5CaWNF9wdp3U&quot;,&quot;xveydzjo&quot;:false&#125;,&quot;isbhm&quot;:true,&quot;oiliduo&quot;:&quot;_PZ6&quot;&#125;]&#125;,&#123;&quot;ckwzgapo&quot;:[&#123;&quot;nnivocdtuxl&quot;:-19291974,&quot;sabkrhrs&quot;:-2094136152.4094925&#125;,[&#123;&quot;ylbyiwick&quot;:&quot;x&quot;,&quot;fgzyjvxgwfv&quot;:-2134161617,&quot;pqteqryrzakm&quot;:1204361735,&quot;mdvijdl&quot;:false,&quot;pvjtlhkh&quot;:&quot;SfD29&quot;,&quot;ivzvaaabmfe&quot;:false,&quot;efshdneleg&quot;:-849875506&#125;,&quot;seqhsAcIrnAHMQ&quot;,&quot;Whk36U6P7DeSML&quot;,&quot;O&quot;,-256156753,&#123;&quot;mhktfiet&quot;:true,&quot;pdjsew&quot;:&quot;3SAFXIssz&quot;,&quot;hhyorkbrs&quot;:-1207251906&#125;,415307174,[false,552989141,-1385835760,true,true]],[&quot;EYddk4DIKPw&quot;,&quot;xxy1EsCfUgLc8-b&quot;,[&quot;_FLcs&quot;,1363548051.5409355,-301676940.00810796,228483168.44451946,-1077860736,&quot;-fzDjs2ObYAG6mfeGj_J&quot;],[false,true,true],false],-2077073598,-2046589380,&quot;CaSYSzOW&quot;],&quot;lpzotealkm&quot;:[&quot;SI5nxNmXbG&quot;,[false],&#123;&quot;xtzbk&quot;:false,&quot;nstakx&quot;:&#123;&quot;glrzav&quot;:true,&quot;ojnfxi&quot;:160112773,&quot;yaixkpytnvs&quot;:true&#125;,&quot;ckxwacwoau&quot;:&#123;&quot;juennbwumh&quot;:false,&quot;pecryyztzx&quot;:590879351.09255,&quot;whkyc&quot;:&quot;daqaT&quot;&#125;,&quot;fcquywl&quot;:&#123;&quot;dqkgcpdw&quot;:&quot;5HUvgQttOk0Fi5tu&quot;&#125;,&quot;nwbqckojbnl&quot;:false,&quot;ldxoxn&quot;:[-1211923637,false,false,true,-63271166.44183385,&quot;oPaYFpyq6gT0&quot;,false],&quot;ceqqpwtv&quot;:&#123;&quot;heimssuemmzw&quot;:true,&quot;zccbmmfhkzmn&quot;:-1094357860.1518207,&quot;pfmys&quot;:&quot;Yqkj03db&quot;,&quot;wbrpvqzebuz&quot;:-2018648370.895539,&quot;ffsnfajyc&quot;:553648116,&quot;ryatsfgt&quot;:259819060.7299535,&quot;ccedgptz&quot;:true,&quot;sdyjgsm&quot;:true&#125;,&quot;cafbneqhzh&quot;:&quot;0yYuLXa2b6QfIvmqjR&quot;&#125;,true,false],&quot;osctkxhztsfq&quot;:false,&quot;rnwednidppx&quot;:&#123;&quot;jvnpd&quot;:false,&quot;cltlrwuzp&quot;:&quot;jnKw0hw4f2Qpzs&quot;,&quot;xqvjhgcdb&quot;:[[&quot;Kydz&quot;,&quot;S2lJpQ9K0_0KzDR&quot;,false,false,434825082.54542595,&quot;0kxWw7vYJv&quot;,1417623756.2870884,-671843208.2472482],false,&#123;&quot;figllxnwvoz&quot;:1079024476,&quot;zybulhqpy&quot;:1830461882.9305499&#125;,&quot;C_zB8BN4rJ1qUGz&quot;,[791961608.4049592,&quot;TNUWl1OfPAr7&quot;,false,false],[-1493840201.4146216,&quot;tnd6PSkv0FQuLn&quot;,true,false,-447967588,1030571001],false,true,true,&#123;&quot;wtzkpoio&quot;:-2059407859,&quot;oagxsuymimu&quot;:&quot;2h4QsOsNtMiIoZT&quot;,&quot;kbblveccj&quot;:true,&quot;nfsnt&quot;:-1789370203.2844539,&quot;klxavnzg&quot;:true,&quot;cvxvlldl&quot;:1545196262.230724,&quot;sotqmp&quot;:1186329623,&quot;vasrjee&quot;:true&#125;],&quot;zdhoap&quot;:-193588543,&quot;xbkneu&quot;:478378165,&quot;hmcplrquyp&quot;:false&#125;,&quot;kcyjofy&quot;:&#123;&quot;htqrm&quot;:1846774732.6980772,&quot;yirrnszaf&quot;:[&#123;&quot;erilxfbdlv&quot;:542262304.2889605,&quot;yopwrjtayph&quot;:731282239.9035488,&quot;xskaibx&quot;:&quot;amLXhcK&quot;,&quot;ftbykwjrtkg&quot;:false,&quot;elvtpjteh&quot;:&quot;20&quot;&#125;,&#123;&quot;ervks&quot;:-357130040,&quot;jixclhxu&quot;:false,&quot;mhmrct&quot;:1665623649,&quot;mpsifqei&quot;:&quot;kFi8Bg&quot;&#125;,[&quot;CU&quot;,&quot;g&quot;,true,&quot;P6VIV1HJFlywzjc&quot;,false,&quot;u_UQJ&quot;,216107226,-564010953.9462562,true],&#123;&quot;fjgsqafcai&quot;:true,&quot;olvoqkeptj&quot;:-934591917.5274441,&quot;pnjzqyunfbsf&quot;:&quot;f&quot;,&quot;npclkqskchlu&quot;:true,&quot;friydskivp&quot;:&quot;0VVAsk0JU2P34A&quot;&#125;,-1513672000.6946142,-1351068498.4718838,[false,true,2022882115,false,1912320851,true,false,&quot;nYpITzI3lLGF-E0_ROdb&quot;],&#123;&quot;etapc&quot;:&quot;M0&quot;,&quot;ahjaulcquxx&quot;:-46720148.68160956,&quot;bxlzoh&quot;:-1294903924.5851634,&quot;gujnngazy&quot;:27472619&#125;,true],&quot;ngkwgj&quot;:true&#125;,&quot;txvpojferzzn&quot;:-494084553.08683705,&quot;ehbzzitx&quot;:true&#125;,-1501383589,[&#123;&quot;tjkmyxzzrqya&quot;:[[-1652453215,false,true,false,&quot;0K5SKb6&quot;,true,false,true,-497658930],&quot;sHrD4vVN&quot;,&quot;VQYUGWFtDb&quot;,-860698228,&quot;YHud7MqAJJHpXW7HTJHp&quot;,&quot;N3SEVlHZqGXS&quot;]&#125;,[932063913],-363089538.6711561,-1523290545],[1446672740,&#123;&quot;iothjmvzeh&quot;:-1242537951,&quot;ihhot&quot;:[&quot;s78NIkI&quot;,[1647053130,&quot;2Wjn&quot;,-1306690771,&quot;ddFBxOAVa3PAHHg4CKiE&quot;,&quot;KTpqkj&quot;,false,false,&quot;CpOo-_sxce&quot;],[-1636092903,&quot;mPxQOtGQmJ&quot;,&quot;AH4CnH&quot;,true],&#123;&quot;gwobic&quot;:-403181897,&quot;wswtxcvfgys&quot;:false,&quot;myftubvhn&quot;:&quot;SzOlEiSmLsiF&quot;,&quot;gflhmi&quot;:false,&quot;qcaogsoou&quot;:&quot;RffU8rZ_BOTooh&quot;,&quot;gtfkfpbcd&quot;:&quot;WPnkqeyO&quot;,&quot;xlluzryjzeww&quot;:&quot;tOATwtSQqc&quot;,&quot;pfbjfs&quot;:559311144.1839422,&quot;vgyrmepmmiwa&quot;:-371798911,&quot;xwhxacfh&quot;:&quot;vgdoVoqH&quot;&#125;,[682530683.7960426,&quot;_ZQONJwSnyWsI7JBE&quot;,&quot;2Xkij&quot;,true,&quot;0x&quot;,&quot;I2W&quot;,true,&quot;45FqPHuqIeB_bC&quot;,&quot;3Sz&quot;,&quot;uOFooZ&quot;],1633662757,&#123;&quot;qziis&quot;:&quot;zRyxpM5I-c&quot;,&quot;jsznraaqt&quot;:-2070295768,&quot;nrhzahy&quot;:true,&quot;wrekmegkd&quot;:-887932026,&quot;rnooniws&quot;:false,&quot;esbvpzcf&quot;:true&#125;,&#123;&quot;oaiosezl&quot;:&quot;EiqBEX&quot;,&quot;zlqquujcwrt&quot;:-1740094710,&quot;serqndsnavq&quot;:true,&quot;rqvxophxhr&quot;:-155598511.60553136&#125;,[1242812936,&quot;uo5VaeBzyJnP35p&quot;,-1795797045.4796348,&quot;BU9NRN1D1&quot;,-121147141,false,&quot;UeLp7rWGu4incvaTi&quot;],[-582860810,false]],&quot;gxljzi&quot;:1930641502,&quot;nukzcjcfvsdr&quot;:true,&quot;thyjfciw&quot;:&quot;Ijg3AeBAlyc&quot;,&quot;nyffgwq&quot;:&#123;&quot;hnsilhtoptne&quot;:-334043203,&quot;hioyreiwdzre&quot;:&quot;uuJkz9iPE-k&quot;,&quot;mbxwkyfgvmu&quot;:&#123;&quot;gduass&quot;:true,&quot;ethdshvmjc&quot;:&quot;C5Kbjt&quot;,&quot;zkehxvu&quot;:&quot;q&quot;,&quot;glrtzejolew&quot;:503692200,&quot;ykftxkqrai&quot;:false,&quot;iheadqq&quot;:false&#125;,&quot;lnopzefyzr&quot;:&quot;foHnA&quot;,&quot;rtrqnfmg&quot;:&quot;PKoAIXFIAbNw0Rqcqc&quot;,&quot;ujgkwbxlf&quot;:&quot;Cyg1UWqDUn41Hu0&quot;,&quot;fcbwm&quot;:false,&quot;ypzpgljon&quot;:&#123;&quot;qygwxbgfpsja&quot;:&quot;NB8P7TUQjag6DjB7gF&quot;,&quot;zutjikjeshe&quot;:&quot;EfeMMX0yZ3xLoU&quot;,&quot;ecyrigrynd&quot;:&quot;oCy&quot;,&quot;fdbgoexnqo&quot;:-1349577994.2950504,&quot;xonanqlrnbvy&quot;:true,&quot;rbeneurawt&quot;:&quot;FAbFncXJhjF&quot;,&quot;xtuelgmpxc&quot;:&quot;c2H4Nx&quot;,&quot;zbwhoul&quot;:true,&quot;tlfkp&quot;:false&#125;,&quot;gcedhw&quot;:true&#125;,&quot;iwaymz&quot;:-1589133269.1797109,&quot;ixpeyahkicl&quot;:&quot;m_4boP&quot;&#125;,&quot;X-w4O&quot;]],&quot;vfdhdgxsbz&quot;:true,&quot;uxvlwnbeu&quot;:false,&quot;vqnempqmiu&quot;:&quot;C&quot;,&quot;cjsrbwef&quot;:&#123;&quot;zehsel&quot;:1214876828.638907,&quot;jizzqrgmz&quot;:&#123;&quot;etgrch&quot;:&#123;&quot;hlaumnf&quot;:[false,[&quot;wBbU-5s8f&quot;,false,189722248,&quot;kiJ3Lyv17dVq9_l&quot;,-2078357948,2048651257.7050533,true,1281723554.5830126],&quot;nMn&quot;,&#123;&quot;zmejepad&quot;:false,&quot;dlvhsvutptg&quot;:-482612548,&quot;cygpfqsgbuxu&quot;:&quot;zmqC6KeoPsX503&quot;,&quot;mfbefymunng&quot;:&quot;-mepVI_WAeD1J&quot;,&quot;mkbctjjqijc&quot;:true,&quot;lmhqc&quot;:false,&quot;bqktp&quot;:1748609852,&quot;lfelvsf&quot;:&quot;QQ&quot;,&quot;uabfoccpc&quot;:&quot;mA49c213FyPQl98x&quot;,&quot;hzfipgxms&quot;:true&#125;,&quot;hvQ&quot;,&quot;rLtkNmPeubnTnnVfkvG-&quot;,[true,&quot;VuCpaR9zm-bcHWatQqH&quot;,false,true,&quot;ckBH_oig3D&quot;,true,125055648,true],&quot;WC1nN81xWZcnXvnP5F&quot;],&quot;nxuoqxpnah&quot;:[&quot;2h5jHzxq&quot;,-1234794731,false,&#123;&quot;ltxmflm&quot;:-1672856336.746026,&quot;sepyc&quot;:&quot;jpEO&quot;&#125;,&quot;b61ROO-t1D85eclOhG&quot;,[115812554,&quot;5bxQIjf&quot;,false,878286566,false,true,-14508498.947033664],&#123;&quot;qpqylrujgiz&quot;:false,&quot;fyxrahgp&quot;:false&#125;,[true,-261410808.79169464,&quot;huh5FHCU&quot;,true],1389881693,true]&#125;&#125;,&quot;kvngw&quot;:&#123;&quot;lucpftqpwdr&quot;:-1958193229.7286963,&quot;ergze&quot;:&#123;&quot;qyrehutu&quot;:&quot;NfyElhYuWz3Q1&quot;,&quot;riffcwazr&quot;:[&quot;g4b&quot;,false,[-577110258.0933784,false,false,&quot;Vn0EmZX11&quot;],&quot;ZVaeK1&quot;,&#123;&quot;zlkjbu&quot;:1525177545.0048928,&quot;zpvogjvi&quot;:599129682.3267891,&quot;vdrwcdhfhx&quot;:false,&quot;uhxii&quot;:&quot;2xGv&quot;,&quot;qnjaluxmxgi&quot;:8635651.015067456,&quot;ngcexgised&quot;:593625433.229349,&quot;sugrikhkabcd&quot;:1107572218.4620044,&quot;tmbgsh&quot;:1566856544,&quot;lblxce&quot;:&quot;y1qC9sW4zKYHg&quot;,&quot;gqovtuc&quot;:&quot;J7APtfabul&quot;&#125;],&quot;oaocntr&quot;:655663099,&quot;utidomvetnis&quot;:false,&quot;jmyflkp&quot;:&quot;SPbz63P55jJ&quot;,&quot;yrmpo&quot;:[[1820033838,&quot;5OJoz6OuF2&quot;,1340558773.3276293,77016921.81585987,false,&quot;Qrp22dEd6xS4fzJ664d&quot;,1586178319,true,&quot;nFGjHBIJO&quot;,-2136178925],false,[&quot;0Cxd&quot;,&quot;fXk3CpZg7-l&quot;,true,&quot;-ZOOAqSj5WASO&quot;,false],[&quot;l3n&quot;,-1216257253,&quot;6_90o4uFRjv4MG49dEF&quot;,-1705658898.1871893,&quot;nCnMM3V1YN199izJdVO6&quot;,&quot;bQ0q33tIbdxVt&quot;,&quot;jC-_byN&quot;],[2003610700,true,-1584401438.5794482,true,true,false],&#123;&quot;kjmmhvpi&quot;:1779886039.2909331,&quot;dcjopuqntyjh&quot;:true&#125;],&quot;luurnuvsrd&quot;:true&#125;,&quot;fzlxhkyc&quot;:&#123;&quot;vlfxvun&quot;:&quot;HgL-YeE2YA&quot;,&quot;modau&quot;:&#123;&quot;wwtfjzfi&quot;:1303957161.6379359,&quot;stiixj&quot;:[&quot;_IPY9d9Jx6Q&quot;],&quot;fwgzca&quot;:[true,1404412818.0726027,-1531993346.712324,true],&quot;vsibooi&quot;:758666341.1362634,&quot;qjvxskqi&quot;:&quot;rLO6RJ7p4TZ9Ny&quot;,&quot;tuwnkatkybeo&quot;:[&quot;rCzvB3aTsenjca5FRd&quot;,true,1463150210.0156615,true,-72426857,-686836968.1115445,true,true,-513349585.6607685],&quot;romgfqx&quot;:&#123;&quot;zpzwheur&quot;:2119676820.6873093&#125;&#125;,&quot;cmstmesveb&quot;:-792668551.5628307,&quot;ugfsip&quot;:&#123;&quot;moqfj&quot;:917998779,&quot;jsjveqd&quot;:&quot;Gt_gd94li&quot;,&quot;bgvqnglc&quot;:false&#125;,&quot;hfuhrjxfqrf&quot;:&quot;_Qc6ORKESQfQjW6B7&quot;,&quot;dpfbhnlwkvec&quot;:-1634534127&#125;&#125;,&quot;ocporkkblb&quot;:&#123;&quot;anvxhzj&quot;:-569596606.1740342,&quot;wulenfzyu&quot;:1359951712,&quot;dzxjd&quot;:&quot;Dz9lKL7G58&quot;,&quot;lqdvsb&quot;:1509836248.9729517,&quot;wgfrxncyon&quot;:&#123;&quot;hdvdspnhwug&quot;:1183081748&#125;,&quot;zgeculpuh&quot;:&quot;c76qPi&quot;&#125;&#125;,&quot;misqskvuffjt&quot;:true,&quot;ryeocbbkft&quot;:true,&quot;cbanyonlxdwz&quot;:&#123;&quot;msibskdjp&quot;:&#123;&quot;mjtqanrpnken&quot;:&quot;l&quot;,&quot;cnnyxihzlmt&quot;:-473256434.73792195,&quot;qqkvcdoxiso&quot;:false,&quot;yrshypxofete&quot;:&#123;&quot;uoejhx&quot;:[&quot;5vW&quot;,[&quot;wmoT&quot;]],&quot;molahchjs&quot;:[[false,false,-1481543225.207373,true,true,-497168023.61265916],[&quot;sbXlO_qZy4ZDHnSQp&quot;,true,978998136.2120172,true],&quot;5SI5rBbDWZAa9sVC-H&quot;]&#125;,&quot;mriek&quot;:602478010&#125;,&quot;fhsbywbwbnu&quot;:&quot;Qlao752&quot;,&quot;iiwppd&quot;:&#123;&quot;ubnsolwefmpv&quot;:299669847.04656774,&quot;znabhudytwhu&quot;:[&#123;&quot;myxqgifowzk&quot;:[false,true,-113964898]&#125;,[true,&#123;&quot;gjfeldaze&quot;:true,&quot;nhxjsqk&quot;:true,&quot;ukeicttwu&quot;:true&#125;,[253524511.7091248,-1561804342.9927227,&quot;8qlJ2tMc2lPmMf1C-d&quot;,true,&quot;bI7F21nHFF6&quot;,-580546013.4570572],1058457335,&quot;23AZ&quot;,1853383791],&#123;&quot;swechudy&quot;:-1411283805.3118782,&quot;vidtotmqlhg&quot;:-587971172,&quot;qotuvy&quot;:[true,false],&quot;gudvzl&quot;:&#123;&quot;apsxqlzdav&quot;:true,&quot;flqqqq&quot;:&quot;HQyguHI5oojr0TmSF&quot;,&quot;bagaolodhiq&quot;:-1245033283.7643337,&quot;kqgmuoevkb&quot;:false,&quot;aizxr&quot;:&quot;SI-&quot;,&quot;djxosoeh&quot;:&quot;c4JMh4oDfYa6&quot;,&quot;nnwjoymlqsjs&quot;:-1008859979,&quot;ogfonkl&quot;:false&#125;,&quot;czmwavjhwx&quot;:&#123;&quot;dexqaq&quot;:-542532142,&quot;fyinyx&quot;:&quot;JuxVyUdnvrpbWe&quot;&#125;&#125;,1057570833.6622553,[&quot;j3Sg1imsnr&quot;,-2115393853.7811105,[-627990941.5141704,1816430057.8320673,true,1048627261.6683502,1176958960.3801389,&quot;Y8-U7FginhYEL_NSxkvF&quot;,true,1821177530.05043,&quot;ePA0N4&quot;,1133434934],&quot;XvdpzU&quot;,true,[false,&quot;H&quot;,&quot;ST3Q-RzZ&quot;,&quot;HK&quot;,309254654,&quot;UDp54RFzNZNP&quot;,-971529715.3578794,false],true,[274132440,&quot;DEE5gyP&quot;,&quot;QBf3OlC&quot;,&quot;yBMld1dY3&quot;]],&quot;pJaVRZAh&quot;,&quot;flrgejmMnRvk8YYBqRRi&quot;,[331852904.18498605]],&quot;pirrtpbdw&quot;:true,&quot;kcvvu&quot;:2129881430&#125;&#125;&#125;,&#123;&quot;atddipjuxvuo&quot;:-2092451273,&quot;zzxdyvu&quot;:&quot;N&quot;,&quot;dzpkj&quot;:[&quot;vC3v43&quot;]&#125;,[true,&quot;w5&quot;,&quot;kRj-yNIWgRg_t69&quot;,&quot;536w6nuswTPbulA9WL&quot;,1197838796.6330416,[&quot;yuZvr7lV&quot;,&#123;&quot;xbjzmwuruay&quot;:&#123;&quot;rsjvtmxgvcso&quot;:624447374,&quot;elvzswnqgi&quot;:&#123;&quot;zqmysmk&quot;:&#123;&quot;wbxskgat&quot;:-460312853,&quot;adplpvc&quot;:465491929,&quot;ziockbpie&quot;:&quot;g6xo4pULxfcgXZvpvh&quot;,&quot;ywcymdjmwrv&quot;:true,&quot;cxabuwbjgekc&quot;:-1445371226.8328083,&quot;abzpzj&quot;:true,&quot;bpebri&quot;:&quot;AAmr1RSknZ3O&quot;,&quot;veytbgy&quot;:-588118666.1096455&#125;,&quot;amgxj&quot;:[-17931167.241995856,496119026,1440398386,-595214655,false,false,false,63728793,true],&quot;mrmgt&quot;:false,&quot;cupluleeyy&quot;:&quot;z9yD&quot;,&quot;cahdgip&quot;:true&#125;,&quot;wiwxn&quot;:&#123;&quot;jasklpjsg&quot;:[false,false,&quot;4jZXyH&quot;,&quot;oC-SW&quot;,true,&quot;YcodU&quot;,&quot;9IFiPAzRbNSPZjB&quot;,&quot;uG2N4rBXLz&quot;,-401644846],&quot;bdvfatuv&quot;:&#123;&quot;ckviad&quot;:&quot;dsYleGO&quot;,&quot;fdjnmag&quot;:false,&quot;nzwqlhpetxl&quot;:&quot;1casUhTLior4MEo_Uu&quot;,&quot;duecnyqohwx&quot;:true,&quot;nzhkplengoao&quot;:-46442601,&quot;rvrfwu&quot;:1363724138,&quot;oitjec&quot;:true,&quot;cgmiiy&quot;:-365524935.720685,&quot;jobeol&quot;:true&#125;,&quot;exrhe&quot;:false,&quot;bldqrtaf&quot;:&#123;&quot;ljeefg&quot;:367025317,&quot;hrqrsm&quot;:&quot;qoa31p_3y&quot;,&quot;zuccyg&quot;:-541882614.1484984,&quot;wjuica&quot;:1118851776.4389498,&quot;czmjgpwd&quot;:&quot;9PcYqGggpmix&quot;,&quot;rbmcyozcqvl&quot;:&quot;amogXlo4PrsSkF&quot;,&quot;ahvsfheb&quot;:&quot;kMfDT01PdfWWd3kb&quot;,&quot;nrnnyvwecta&quot;:&quot;lKH&quot;,&quot;rmlknoateb&quot;:822156038.354891,&quot;ybmxsaxmrzaw&quot;:-651473225&#125;,&quot;uhuqacydf&quot;:[&quot;waNiEbv&quot;,1350490497.2548158,775728521,1539224832,&quot;pulQ5&quot;,1241808962],&quot;qqdfed&quot;:&quot;Lz6CmeWo4lw5&quot;,&quot;erqoigjbo&quot;:-955246658,&quot;gexidfskffb&quot;:&#123;&quot;hhbnbynti&quot;:-1789604122.7400544,&quot;yiufire&quot;:&quot;g&quot;&#125;&#125;,&quot;hzyvbr&quot;:true&#125;,&quot;fueuib&quot;:-1033000032,&quot;pmsxuc&quot;:1383940107,&quot;cdkwb&quot;:1835097357,&quot;rxhupqtkozqq&quot;:791181043,&quot;ttfjsldhkj&quot;:&#123;&quot;cjnzmbcbf&quot;:-1048242788,&quot;ysynmgiitgvp&quot;:&#123;&quot;misctj&quot;:[true,-885298964,&quot;gFYNoiQyNikoS2OD&quot;]&#125;,&quot;jksjndzv&quot;:1629151140.4761147,&quot;twzliww&quot;:[1295195848.203685,&#123;&quot;yildjgi&quot;:300927061.04864544,&quot;ohxpncxyag&quot;:&quot;jP4xNMR-KGC5q&quot;,&quot;ingdet&quot;:false,&quot;gayupximsv&quot;:519488545.2668662,&quot;eycmcqpaei&quot;:&quot;P1vkPMuO3V&quot;,&quot;miuth&quot;:&quot;bTsYghyZuRIuS&quot;,&quot;fgcaqzatsqe&quot;:&quot;37jpwgZ6sr1a&quot;,&quot;dvotmdwzg&quot;:true,&quot;lwgmkwg&quot;:-2035524854&#125;,[false,false],true,&quot;x&quot;,&#123;&quot;hvjmysawxg&quot;:false,&quot;jxvakg&quot;:164364286,&quot;stupohp&quot;:false,&quot;dtsht&quot;:&quot;JgI0wAD&quot;&#125;,false],&quot;fjgvmma&quot;:[false,&quot;qrzLC8djl&quot;,[&quot;ZbAcMKGSNy9Y87ztUs&quot;,true],[&quot;7MJPN5&quot;,false,-298448722,778830277,true,true,true],[&quot;n-zpyZr3dHIq2-hVBQ_X&quot;,true,566796753,true,-83283383.20949152,&quot;W0rI&quot;,true,false],1376251897.0495272,false,[true,&quot;DLk5q&quot;,true,false,true,&quot;1kaBaRy1znws&quot;,&quot;loSK0NmPNom7XQmLmUFQ&quot;,&quot;aERRBCirk&quot;,-292868053.4987612],[-1133209241],[&quot;nIFyGvQba-&quot;,false,false,-72343003.88228966,1117783986.9890037,&quot;hz56HLLERjOUe2ltsiRf&quot;,false]],&quot;uxurvlltmyha&quot;:&quot;qu4gu821b72PNoEx6YZ&quot;,&quot;usorhz&quot;:&#123;&quot;rvtvmd&quot;:true,&quot;pvavwsznkqr&quot;:true,&quot;outjipcefu&quot;:&quot;IIYGOI5PKxR&quot;,&quot;hhxqfz&quot;:&quot;lvzs6&quot;,&quot;hyqwsjzbq&quot;:false,&quot;bqetz&quot;:false,&quot;mmjcqua&quot;:false,&quot;pxgefn&quot;:&quot;GVXLXpkgyZUcYvMO4a&quot;&#125;,&quot;kisavkhpvm&quot;:740640903,&quot;elidlcgkmygj&quot;:false&#125;,&quot;fjtmkah&quot;:276968322,&quot;uxqtgafcb&quot;:false&#125;,false],[-73850871,[&quot;kX-xhfhOv&quot;,&#123;&quot;kpvwtmofhl&quot;:&quot;Xh7YGngfjbXLFX5L&quot;,&quot;dctaoshagrp&quot;:&#123;&quot;kcazdgadwl&quot;:807416430.878505&#125;,&quot;xxsqne&quot;:&#123;&quot;swdqrlub&quot;:[true,&quot;dVgdaKvwmcMWNyM&quot;,true,815587398.717155,&quot;zrYuTniJ7qWFriEMz&quot;],&quot;txytif&quot;:true,&quot;jvmjsovyyrhc&quot;:&#123;&quot;hfilguslav&quot;:true,&quot;ypruvtpkknl&quot;:true,&quot;iiltcqxy&quot;:-375089005,&quot;ftqjdkawzau&quot;:false&#125;,&quot;yqtfz&quot;:&quot;HFWTm53jg_WUtM&quot;,&quot;qvqav&quot;:false,&quot;esagrm&quot;:&quot;Kw8V8cv_Ux&quot;&#125;,&quot;vnbfvid&quot;:&#123;&quot;ijrdigj&quot;:[&quot;Rqd5TbxgsPj&quot;,1031491675.5852685,-887082712.0007507,false,-51657014,false,&quot;D5l1&quot;,false]&#125;,&quot;ifeqv&quot;:654092592.4447111,&quot;paltgh&quot;:[false,164799932],&quot;nyzkcvb&quot;:&quot;dc5G8SfXDo_awC8jm&quot;,&quot;ibbmp&quot;:&quot;n6MlUZW-azHAZQICXT2n&quot;,&quot;xhazidfztf&quot;:&#123;&quot;jkpkpv&quot;:-853809357.9744881,&quot;ikangzqcwly&quot;:false,&quot;kqczfjdkgftw&quot;:&quot;LrjtXd8SBppb&quot;&#125;,&quot;xsktdkwksp&quot;:&#123;&quot;iqssccnftwpx&quot;:-238261042,&quot;lpfuuowr&quot;:[&quot;e&quot;],&quot;nwgcv&quot;:-186313336,&quot;ahcqzysqdk&quot;:1968428739.6304142,&quot;jzwtdlt&quot;:true,&quot;ajxedimm&quot;:[414459924.2821679,-1228750016,false,1419729091.1938372,&quot;Z3mKNBtgBFkTS3OOb3&quot;,&quot;b5RmMsDeQkD&quot;,447904909],&quot;sjykviweuqo&quot;:&#123;&quot;viiybpxwsvqi&quot;:true,&quot;vxrrjgth&quot;:1088439598,&quot;eumqchb&quot;:962864872,&quot;yzfxilmife&quot;:1447548876.6731138,&quot;sxkewykyv&quot;:-40383427.26321986,&quot;rgxcb&quot;:&quot;F49YkrtLWDKh1A4P&quot;,&quot;yaoocyksi&quot;:&quot;D-5rshvwL6b0Za&quot;,&quot;wzydygrvj&quot;:-1453943058.0054586&#125;,&quot;utpmstuxj&quot;:[&quot;kh-YDM2TtCZ&quot;,&quot;ei8&quot;,&quot;3ACysSv1N8mHuvsC&quot;,-1273111834.71746,-1160943267],&quot;yvvxy&quot;:-1413340899&#125;&#125;,1778286978.8205569,-216690534,&quot;cjnFXfhpYpyH_bMa7p&quot;,&#123;&quot;elwqa&quot;:[false,&#123;&quot;pfirxnh&quot;:false,&quot;cpynqpxvip&quot;:1743374708,&quot;ofylteln&quot;:&quot;zlbGEyH8PJ&quot;,&quot;imfziwwmep&quot;:true,&quot;zvpzabtv&quot;:&quot;kkKYVuf&quot;,&quot;whtydxilb&quot;:-1800928288.6656966&#125;,false,&#123;&quot;abuvxodpwh&quot;:&quot;az&quot;,&quot;ummdcnnc&quot;:false,&quot;utarmeuy&quot;:&quot;QN0Z_J&quot;,&quot;fwxhrdmmeo&quot;:996983189,&quot;gipudwpxjwm&quot;:true,&quot;kyrnpnyx&quot;:false&#125;,false],&quot;cvnope&quot;:true,&quot;cmreipu&quot;:[-1040638369.2635815,[-660117018,&quot;HxHfXd_VenH&quot;,false,-1097074189.9149988,&quot;9MU1oiiaqVfEU62VDD&quot;,-592763189,false],false,&quot;PhjAOp&quot;,&quot;pxhhvTe_xtLB&quot;,[-1433865628,-1668903714.9972053,&quot;o3vtGTzS4EDW1t8tMcz&quot;],true],&quot;oixjyogxtjr&quot;:true,&quot;sswkoan&quot;:&quot;bjS2t&quot;,&quot;nimccefqtzmf&quot;:&quot;73Z26CSj&quot;,&quot;gjcxmvwhep&quot;:&quot;2JBO7yy5Cl&quot;,&quot;lawglyocpd&quot;:true&#125;,-1913470762.0744214,571121373,[&#123;&quot;fuzaobcxzw&quot;:false&#125;,&#123;&quot;jklrr&quot;:&#123;&quot;fjeyqwtmehsh&quot;:true,&quot;xwdvbbxg&quot;:false,&quot;nkixbxhv&quot;:623145715,&quot;nukqrqpqa&quot;:&quot;kNYGvTpiO&quot;,&quot;zkhgoprbl&quot;:true,&quot;ijooe&quot;:&quot;27sUMk0b6y8JYhyTh&quot;,&quot;lmrcglxgm&quot;:false&#125;,&quot;erknvnie&quot;:-113486432,&quot;twsxrhgvgj&quot;:&#123;&quot;ovtwo&quot;:&quot;4L&quot;,&quot;bzlellhgopdr&quot;:true,&quot;feykcwatlqi&quot;:false,&quot;lbdshljumfby&quot;:&quot;34T9r&quot;,&quot;kaecwljt&quot;:&quot;YGkitt9MYlc-M4wRZ&quot;&#125;,&quot;dymtzhpi&quot;:[&quot;yKiFvzyelZCsj&quot;,true,&quot;cw1x1wyBYjj_AL9Tv&quot;,207985307],&quot;xwqxpbqshtnn&quot;:[false,497137294,true,&quot;IZMhbu&quot;]&#125;,&quot;2a_YGC5fTL&quot;,1741249400,false,&quot;-YmczVY&quot;,[[&quot;Ru0QD7ckM9kV&quot;],&quot;M0ny-&quot;,-1448008029.9092786,-1068028528,[&quot;090bSerMqguDVw&quot;,&quot;XEjMOApHoX4LL&quot;,1206109854.8684351,&quot;SpF49JnW8Z&quot;,697446934.9846494,-2391421,&quot;A&quot;,true,899365793,1261075525],true,[true]]]],-810395214.3266428,[&#123;&quot;vmity&quot;:false,&quot;briybqvjh&quot;:[[-1598133394,false,-679925868,-631009767.1008494,&quot;X7aklTa&quot;,&quot;3gN1u5TWQ&quot;,true,true,true,-96426440.56146601],true],&quot;uksqmbkvguxw&quot;:false,&quot;dfgmvaacl&quot;:[&quot;5X8mFN7Ol2muBF&quot;,false],&quot;batcao&quot;:&#123;&quot;jirdgrtv&quot;:false,&quot;okwbroh&quot;:257188608.5358039,&quot;nffnbt&quot;:-1246295401.737913,&quot;srbgtbvpi&quot;:[&quot;P&quot;,false,-1864406446,-475705255.9290624,true,-1855044707.305654,1766612163.3049045,-955429638,1670746282.0853467]&#125;,&quot;rrkbnhkkiuhw&quot;:537750613.2926879,&quot;ritezzdfezpo&quot;:&quot;2&quot;,&quot;luunujqcxcyb&quot;:false,&quot;oskemq&quot;:633113027,&quot;daleifkxx&quot;:[&quot;rw&quot;,[&quot;HEo0uxAmahwCRX&quot;],[true,false,-722024510,-10610564.130206643,true]]&#125;,[-941602040.7381257],[&#123;&quot;orllfwmmgqrd&quot;:&quot;iH7W3684eJ2TK&quot;,&quot;ikphlqr&quot;:1583895736.4452858,&quot;bnhgk&quot;:298103393.31634396,&quot;ivzocctnqlr&quot;:-1368972886.0357454&#125;,&quot;Y8EM7zEpJW3bbdCS&quot;,false]],221256744.89781043]],true],&quot;tzppubfq&quot;:true,&quot;fswigmh&quot;:&#123;&quot;nqmfi&quot;:false&#125;,&quot;wmgcfrmdvbww&quot;:false,&quot;aksbvmxqg&quot;:&#123;&quot;dagtealh&quot;:[1962550443.7441015,false,&quot;MxhPVELl6XO&quot;,&#123;&quot;tnofvao&quot;:false,&quot;lnoar&quot;:&quot;orYaDFDN&quot;,&quot;vixqvdb&quot;:&quot;rzxK2v&quot;,&quot;zebvyxsbphz&quot;:[true,&#123;&quot;mnutxggnqney&quot;:-969774554.2021906,&quot;qirwe&quot;:false,&quot;gukgliwarip&quot;:[true,[false,false],[&quot;ZlwBUE-I&quot;,&quot;GpG9O4h09FWtB5&quot;,true,false,true],false,&quot;wOhNQ-UbVZv3ihmkjZ&quot;]&#125;,&quot;j6zwdpcc5DU&quot;,false,1593913666,322577893,&#123;&quot;fpsoixaexy&quot;:[1941115158,-1117609778.6271014,-1004418262.9280051,[&quot;Vv9c1Vf4yNvyuOjRk&quot;,true,&quot;lhpxgoisLX3&quot;,false,&quot;5apbc6C_&quot;,&quot;JeE&quot;,&quot;M1_J5mQAC&quot;,false,&quot;x8o7i30&quot;,&quot;p7ecSQ7Bt4wYalCN&quot;]],&quot;ocdzwvcvpa&quot;:[&quot;c1iTLHPHflSdSjGwxg&quot;,&quot;TEC&quot;,[false,&quot;O2aI_1GTeZ64XT1&quot;,&quot;-7i&quot;],&quot;dNaUenlMmMl-Z4A_&quot;,&#123;&quot;obcve&quot;:276216735,&quot;rncpobbap&quot;:false,&quot;dxiubfbt&quot;:-1321384873,&quot;kpcjcxtq&quot;:false,&quot;urtqo&quot;:true,&quot;azcrl&quot;:&quot;kBUBIsxgOBW0aL&quot;,&quot;ypnyzhlxw&quot;:816295324&#125;,631353070,[&quot;LpbeO66DbtQ6WRZ&quot;,true,&quot;MM42Y4oGhQ8&quot;,&quot;BGk&quot;,1886293585,true,-296777589],&quot;S_1LgH7MTeJ_z_QzZmXm&quot;],&quot;oecdvquksqd&quot;:[&quot;7YyZU5rB&quot;,false,&quot;8v7R6SATWHL8&quot;,&quot;at55&quot;,&quot;gVJ9AJey&quot;,[-148976902,false,&quot;mlx-tM8U&quot;,&quot;Y_GQsBkKh1&quot;,&quot;CM0cEW6hWNpr6hKlxk&quot;,&quot;YlPPsq_3vUvDn&quot;,true,122610095],&#123;&quot;wbdxi&quot;:&quot;1Wln9z_dngD7Z9rt9d7&quot;,&quot;sqdudrsa&quot;:1960099764.8589048,&quot;vysjfaam&quot;:586952255.835377&#125;],&quot;ayscnmwbo&quot;:[&#123;&quot;kacuuno&quot;:-1167574360.1140378&#125;,true,&quot;BSwzBlcVNDdF&quot;,&quot;i&quot;,&#123;&quot;gshviceywd&quot;:true,&quot;pqdqpyyk&quot;:&quot;LfgL_c&quot;&#125;,&quot;rIrgpYZciCPtbdp&quot;,&quot;-nZa9odA-xGUnBs3o&quot;,&#123;&quot;igtevuq&quot;:&quot;_OetjQgChRfDi&quot;,&quot;iougmn&quot;:&quot;8DdehyMV&quot;,&quot;ezoqaecgtpx&quot;:-1472860604,&quot;uhudtkhndqih&quot;:1282624780,&quot;lmjodfkry&quot;:false,&quot;rwixzx&quot;:&quot;6EtdAoGYAJ&quot;,&quot;edvwliddjtk&quot;:364963991.0454926,&quot;btqccjq&quot;:1476160251.1735976,&quot;igpewawglu&quot;:-496093064.16027504,&quot;hosro&quot;:380379173.06998396&#125;],&quot;hvxvtstkrkp&quot;:true,&quot;rdsnaqcwj&quot;:&quot;dinJ8vHUBVs&quot;,&quot;unphtjmurd&quot;:false&#125;,&#123;&quot;vohxgkvsl&quot;:false,&quot;gbavcnsfkf&quot;:&#123;&quot;aihae&quot;:[1329471521,false,&quot;gm7tvwkVxqykYAfW&quot;,true,-1400418873.5356367,true,-1265165377.2554955]&#125;,&quot;odcezwiz&quot;:[&#123;&quot;aqnnlgrs&quot;:false,&quot;txgeoyf&quot;:&quot;_DllYMGG&quot;,&quot;sfhnwpmoen&quot;:false,&quot;kysqjqavqfuo&quot;:-1237775725.5050218,&quot;ploixzju&quot;:-2010917836,&quot;izbnme&quot;:&quot;MA1m9Lm&quot;&#125;,true,[819379569.9769686,&quot;XN_MheQV&quot;],-974813781,1139038310,false]&#125;],&quot;kksyumyygpx&quot;:&#123;&quot;jeqthholjrt&quot;:100105849.67114657,&quot;fzruvvcvpdl&quot;:false,&quot;uqalxbdye&quot;:&quot;2Jju2CQaCpOZE966t&quot;,&quot;sgxxzxsyfcv&quot;:&quot;eY6r&quot;,&quot;hcudahqy&quot;:[false,1060841304.3691026,true,&#123;&quot;umwipqw&quot;:[-616788115.8774604,-277835251.30743814,2054867232,false,&quot;pPX4uwEfUHzFkYm&quot;,true,&quot;VqBTRpxA1k7bLw1DvJ3&quot;],&quot;mjcapkgjs&quot;:1715628002.980071,&quot;jtqhs&quot;:-645263729,&quot;ddjkqmqjvnju&quot;:[true],&quot;mzisami&quot;:-628876760.9483359,&quot;wkucdybkgxj&quot;:&#123;&quot;rlvkegzsao&quot;:false,&quot;figgdboz&quot;:true&#125;,&quot;nyleojg&quot;:&#123;&quot;cnducj&quot;:&quot;H-Re&quot;,&quot;ptzmgjkttoyk&quot;:false,&quot;bouryu&quot;:539048589,&quot;rtyhs&quot;:485136365,&quot;nxhoc&quot;:1186718429.43972,&quot;elifmzxy&quot;:&quot;KYul80YAa8&quot;,&quot;bhkyvpr&quot;:1676960727.7700171,&quot;uwvrkqs&quot;:&quot;KcrQu&quot;,&quot;kiaigzyqttnw&quot;:1394667555&#125;&#125;,1353443847,1131505624.9675832,&quot;VL&quot;,&quot;Dy5XoI043v&quot;],&quot;ajsovcarfpsw&quot;:&quot;RiFPrsf4kgkQT&quot;&#125;,&quot;prwdu&quot;:false,&quot;wxzaynsu&quot;:[false,&#123;&quot;ohons&quot;:true,&quot;jlqosvv&quot;:false,&quot;kyobwcz&quot;:true,&quot;oqxckzbt&quot;:&#123;&quot;urlspwtxiw&quot;:false,&quot;qdlqokxoejzh&quot;:true,&quot;tmftvry&quot;:&quot;bn298MFFU823a3&quot;&#125;,&quot;knuryam&quot;:&#123;&quot;gadlvwmr&quot;:[860145215.4132569,358582027.7293879,-2037435741.692382,270086932.27380097],&quot;esttyjcpahw&quot;:[-976221221,-1973643146,&quot;z3cMJM6z9esvGxOJS&quot;,true,&quot;hfhWOIXSNfFihaymVe&quot;,false,1412173417,1865400660,false],&quot;tlcdojamsbox&quot;:[&quot;V&quot;,true,&quot;VFHO8MIs&quot;,&quot;02bgskaJ19&quot;,true,&quot;O5pPwhaDv2WX9&quot;,&quot;kwpg2RXZ8lkKwaZWwHhB&quot;,false,&quot;hvqXZFi9EMl8WlxGIsf&quot;,false],&quot;zzavncdhxgxt&quot;:true,&quot;jnbrma&quot;:-537147687,&quot;rpiwaj&quot;:false,&quot;esxht&quot;:&#123;&quot;bjhqblrf&quot;:&quot;1kQ2GkP0Tzc4&quot;,&quot;ihoxvxnppyc&quot;:&quot;1I-nw0YUA&quot;,&quot;fhnzdpszdji&quot;:true,&quot;rwqxe&quot;:1970450435,&quot;ztlvozlgojl&quot;:1809994412.574849,&quot;uaonnus&quot;:-1068950966.9336827,&quot;pphvlq&quot;:false&#125;&#125;,&quot;unykb&quot;:[1366867140.1759133,&#123;&quot;slvegt&quot;:true,&quot;vnkos&quot;:true,&quot;dzcjwihindn&quot;:580607365,&quot;imnxpznvn&quot;:-1885816284,&quot;zpoeeiq&quot;:&quot;lkg3sIMFyJn4MAJL&quot;,&quot;pexgpchohcze&quot;:-1882401606.5700426,&quot;necpqzfn&quot;:true,&quot;rrbmyhtfn&quot;:148811573.78353128,&quot;wnicsiexhxyy&quot;:false&#125;,true,[false,&quot;dSljRtqbzE0LFxA9289&quot;,false,&quot;-bpq_yrW&quot;,&quot;V&quot;,&quot;p-0v4hHw&quot;],&quot;j7IC7&quot;,-587584234.5537797],&quot;kshyqax&quot;:&quot;bPq8MuTZJE1y9YoyM_7&quot;&#125;,&#123;&quot;cppvjibja&quot;:&#123;&quot;szvnn&quot;:[278874937.8092257,true,true,true,&quot;30jkXvN&quot;,true,&quot;2fm_Vd8&quot;,false]&#125;&#125;,-1445285604.2475288,&#123;&quot;kavthxxao&quot;:[-255672626,&#123;&quot;undsefvfbr&quot;:true,&quot;kbxne&quot;:-1637547183,&quot;pmcprj&quot;:&quot;YjgzqA0PkNw&quot;,&quot;lzessy&quot;:&quot;AiDIMIb-RpPP&quot;,&quot;blceqe&quot;:true,&quot;uhmlxvbdp&quot;:false,&quot;qcfwcs&quot;:false,&quot;avvojez&quot;:&quot;KhSNMyANHtbuQ&quot;,&quot;znzufuv&quot;:-1836891490.2199376&#125;,&#123;&quot;tifwdb&quot;:false,&quot;ftvmfvjwnv&quot;:&quot;p8jnFVVP&quot;,&quot;khjfy&quot;:10255490,&quot;xpmayig&quot;:&quot;ZLgbxlBuET&quot;,&quot;nhffqzmx&quot;:false,&quot;gpwvntmcqykc&quot;:false&#125;,false,2029257936.9114256],&quot;yzjdnynoh&quot;:[&#123;&quot;evavbxmmyys&quot;:false,&quot;nafzhtiw&quot;:&quot;g7I&quot;,&quot;qbbluhrhztey&quot;:&quot;trg&quot;&#125;,&quot;xhWEsUPx6X9JijRn4ZFf&quot;],&quot;rcmjsp&quot;:false,&quot;rwifid&quot;:&quot;T4&quot;,&quot;mwpcukwu&quot;:-247695617,&quot;iyvci&quot;:false,&quot;ycxzsglvpdfr&quot;:-265854823.45786053,&quot;pezczmctgq&quot;:-1146891373.14226,&quot;texwaryw&quot;:&quot;xv&quot;&#125;,true,&quot;CXXOR&quot;,true],&quot;zqtlcmqif&quot;:[[1033623001,true,[-1395454667,&#123;&quot;xznzagsbd&quot;:&quot;_F&quot;,&quot;pevwyzbtfcar&quot;:true,&quot;qldrvrkd&quot;:true,&quot;eloesihdkm&quot;:1062351111.7727145&#125;,true,&#123;&quot;tyoannf&quot;:false,&quot;kysqxlq&quot;:-729766689,&quot;adadiacf&quot;:1410537009,&quot;grktfro&quot;:true,&quot;ildyykbagb&quot;:615009322,&quot;mwtjrywx&quot;:true,&quot;hvseyvf&quot;:true,&quot;voafxuqlm&quot;:&quot;YPA8TMgjpBm_yD&quot;,&quot;kvzugmf&quot;:false,&quot;dizlpvkcbvxo&quot;:true&#125;,&#123;&quot;xwcuyzqn&quot;:-1014148751.3180305,&quot;scffj&quot;:false,&quot;wzrzqlvypp&quot;:1116322785.7137117,&quot;vicvuwpfk&quot;:&quot;iEXEOuHee_0&quot;,&quot;qfgle&quot;:true,&quot;iyopmxsl&quot;:-343315638.31447166,&quot;tuklofjpupjc&quot;:1803064105&#125;,&#123;&quot;nptlc&quot;:true&#125;,[&quot;PS8CDSfWR&quot;,false,450237201.55478394,&quot;b91Cjj2rbs&quot;,&quot;rfl_3_jf8&quot;]],false],&quot;G_H2KMmeMx&quot;,808091798,true],&quot;yasvsepb&quot;:&#123;&quot;loufefud&quot;:false,&quot;brkvdeo&quot;:false,&quot;leuziqhhtw&quot;:[&#123;&quot;lncbgcgl&quot;:&#123;&quot;wltycttjvl&quot;:827121072,&quot;sebqwx&quot;:&quot;6woE-_m5WII9xJZ4FtC&quot;,&quot;jfgrxdwz&quot;:889597863,&quot;ihwfmyrhe&quot;:-1285912033,&quot;okyqur&quot;:-925292236.0479451,&quot;vaxqiwf&quot;:true,&quot;inknmlmno&quot;:-1213145330&#125;,&quot;mkfqxio&quot;:&quot;E0GtS4&quot;,&quot;fdmbmawwn&quot;:&#123;&quot;nisnevtrsnot&quot;:&quot;2D_ddxskeLVvibZz&quot;,&quot;zzgax&quot;:&quot;0eBs&quot;,&quot;iiimbcuw&quot;:575039955,&quot;dwztncmtc&quot;:-615122631.1948534&#125;,&quot;vemplcglr&quot;:[-1891680053.552865]&#125;,false],&quot;lkrznfx&quot;:&#123;&quot;tyahhnitfct&quot;:true,&quot;vypuhrynkbh&quot;:[&#123;&quot;zendmqv&quot;:&quot;jgV5&quot;&#125;],&quot;hsrdmofgdrrv&quot;:[&quot;h&quot;,2080801717.778016,true,&quot;KnHw49COD&quot;,-395105653,[-1810661652.9448717],&#123;&quot;qovhadps&quot;:1097969958&#125;]&#125;,&quot;zgvkfxycn&quot;:&quot;JOdsHwbyH99KQJ&quot;,&quot;abcnebzdbl&quot;:&#123;&quot;hqctamapbx&quot;:[true,[-136595945.08933043,&quot;4f9jDeDe&quot;,-1380437794.939825,2098368072,&quot;R9JvFj-vsz&quot;,&quot;CBQS7J9oox&quot;],[false],false,true],&quot;yqmmsoxsskn&quot;:&#123;&quot;zflixdj&quot;:&#123;&quot;gdiuzqrbotz&quot;:1642214970,&quot;ctttho&quot;:&quot;m&quot;,&quot;xuojrhzxh&quot;:&quot;Xl2MgUjKEefumOOzP5ei&quot;,&quot;lrdprflpvdr&quot;:false,&quot;vddsrajgam&quot;:false,&quot;uxpkk&quot;:&quot;co0owXSeLXR&quot;,&quot;efbasivdy&quot;:&quot;c5xopEVUSq&quot;,&quot;cymvcauo&quot;:789897395,&quot;iejnmg&quot;:-2102182819&#125;,&quot;jrxvoywp&quot;:false&#125;,&quot;jgloipzfd&quot;:[&quot;yI-5gGLZNUz1oc&quot;,&#123;&quot;idnrdmrsdqon&quot;:-689360092.3223418,&quot;amzxii&quot;:&quot;lStW1NUMZlP8I&quot;&#125;,568189574,&#123;&quot;bstfaw&quot;:false,&quot;micpjxruqu&quot;:false,&quot;qugcsztygis&quot;:true,&quot;pagdlslodcjc&quot;:true,&quot;uiegt&quot;:false,&quot;emglc&quot;:true,&quot;gvccyclvc&quot;:&quot;LicGQA&quot;,&quot;ostmpcxtb&quot;:-1994141473.0746093,&quot;idycp&quot;:1213923504.1512299&#125;,[&quot;1_bNas3xxAUZbF&quot;,&quot;pF_9&quot;],[true,false,1104499137.6581862,&quot;gtRSEiAkV&quot;,&quot;f&quot;,-1427216932.854449]],&quot;mtbvt&quot;:12016921.330335487&#125;,&quot;uylgh&quot;:&#123;&quot;ngmrlgsvgdmm&quot;:false,&quot;qewiqgqklm&quot;:305638841,&quot;fzimlj&quot;:false,&quot;oxtylcwf&quot;:&quot;NsupUamyhG&quot;,&quot;lwebqrro&quot;:true,&quot;ssbqrxhayu&quot;:false,&quot;pqgzbx&quot;:false&#125;,&quot;fmxngtvju&quot;:&quot;c2WHOzW4MDoeXytfVY9&quot;,&quot;modbvffryo&quot;:-1210656559.6051788&#125;&#125;,319991990,752081027,&#123;&quot;ayspio&quot;:&quot;m&quot;,&quot;zdxdb&quot;:-172048492,&quot;bnmfg&quot;:&#123;&quot;kdhtl&quot;:[&#123;&quot;wmhosbyou&quot;:false,&quot;fxppfv&quot;:&#123;&quot;mysfoij&quot;:-625201263,&quot;ugxlt&quot;:false,&quot;yprzwadvwfsc&quot;:true,&quot;tydbi&quot;:401570268,&quot;ulqeoysydicm&quot;:true,&quot;hcwmujpgy&quot;:-987799662,&quot;iuzpmg&quot;:383197351,&quot;lyzhrztujlv&quot;:259159294,&quot;fecthcxk&quot;:true,&quot;dsmzvpagojbb&quot;:&quot;hJr&quot;&#125;,&quot;quqvjmzatbl&quot;:[false,&quot;DiSv7&quot;,true],&quot;pidmqq&quot;:&#123;&quot;chyyx&quot;:-461079065,&quot;wjhldjcagc&quot;:&quot;FRVy&quot;&#125;,&quot;rgbvesz&quot;:false,&quot;sorekl&quot;:&quot;mgJaSKnMIo3AiY&quot;,&quot;abwidiqucid&quot;:true,&quot;vqfoxo&quot;:&#123;&quot;hsebsd&quot;:1786643087.320104,&quot;qgmnjnntxzsf&quot;:-1728919091.1725118,&quot;nsfwqwicx&quot;:-1007085725.6308616&#125;,&quot;iewhgjluz&quot;:false,&quot;xvowaxbmf&quot;:true&#125;,[[false,&quot;v---cGsLqE7W&quot;,false,&quot;jkvWg8XrI_Orm&quot;,888665225,false],true],false,-1079824666.2026174,&#123;&quot;gugmas&quot;:&quot;ocBec08ppTN8vCnp&quot;,&quot;pulknsyowxy&quot;:565963796.0613275&#125;],&quot;hzeywjbmxj&quot;:-990340286.7455853,&quot;akbiudkv&quot;:[true],&quot;vcxlswkf&quot;:&quot;udv8PuxZv6Twx5Pb&quot;,&quot;flceeypkt&quot;:[true,[-795613352.3213557,685714582,&#123;&quot;jujopuqaynky&quot;:134233885.6473452,&quot;bxsnejoecnrr&quot;:false,&quot;becsdny&quot;:&quot;uioKo31gEp40GTcn&quot;,&quot;ocdex&quot;:true,&quot;cmufrjeljfa&quot;:946987801.137704,&quot;cvwuwdutbdx&quot;:true,&quot;zumlhmpfjy&quot;:&quot;Ju-wv9XFe_2&quot;&#125;,&#123;&quot;qrfvphcxl&quot;:&quot;nbjKX2lSdKUcMrDsJMoa&quot;,&quot;qfhkpepm&quot;:true,&quot;isvsnzn&quot;:&quot;8s-H4p5jO_1VxSaJSL&quot;,&quot;wosutaonjssb&quot;:-1321615206.2702007,&quot;zhzyarvfbv&quot;:false,&quot;knqhafffn&quot;:&quot;TNWnalBECj98IUDA&quot;,&quot;vzsesugbtk&quot;:&quot;O1hm&quot;&#125;,[&quot;2it-aFXS0Qy_XVn&quot;,&quot;ihixN&quot;]],&#123;&quot;yxtqdjhupa&quot;:1951743765,&quot;rpvck&quot;:&quot;f3QIUcvC_fauijzNkf&quot;,&quot;slbkyuwnwv&quot;:[-571232911.2798606,&quot;T7Qzt3Edo4d&quot;,&quot;pWJAm&quot;,-1434131502.6432357,-680271942,&quot;ThdyS9n5bdwstGH&quot;,1979426403,&quot;90e&quot;,true]&#125;,[false,[&quot;ZnOdJd&quot;,&quot;Me4gneu7Nc7O&quot;,202051980,1332684635],true,1264894043,[-395334900.75651824,1549989907,-961665108,-1593561717.1767528,1494787750.6725504,994190181.9693943,632636626,&quot;3Uf8V_FaTErM79xdKh0&quot;,&quot;V91QGMl63kI&quot;],[-753988053.774492]],&#123;&quot;wflzlntzc&quot;:&quot;qKNchhkZHGblmFDrn8U&quot;,&quot;ucslcrzdyz&quot;:[283139739],&quot;yxugzqphta&quot;:&quot;y2YbFBO1bXR3ENRvev&quot;,&quot;ihtrq&quot;:true,&quot;yulhhzvvikd&quot;:[-1046400160.2828263,true,true,false,false,&quot;ei6IDD8UKSW&quot;,191135027.03853592,&quot;5anD9rNH6&quot;],&quot;uqvcq&quot;:[&quot;ZzSW_B-3&quot;,783554144.0958288,&quot;KU&quot;,false,true,1966464103,1920814712,683487776.262944,false,&quot;UsBaXA&quot;],&quot;ugvxe&quot;:false,&quot;usrnkbkzfuu&quot;:false,&quot;fiqwtwvre&quot;:1694627487.7568161,&quot;vihhvsxklcbo&quot;:897679784&#125;,[&quot;EL7XhBA94&quot;,true,&quot;J8TJrWXYkODR&quot;,&#123;&quot;bowvtftalv&quot;:&quot;VEBEw8RwnsIw0s&quot;,&quot;ltkvjg&quot;:&quot;fDHymtYW3L4Hl9R&quot;,&quot;vkdztzv&quot;:&quot;AzL4677302l8FeVnbbX&quot;,&quot;mtardrme&quot;:&quot;Xr2f&quot;,&quot;mpqnrwt&quot;:&quot;6tfiB19W&quot;,&quot;xntyeufr&quot;:&quot;fEZSq&quot;,&quot;zpthzv&quot;:false&#125;,&#123;&quot;xnpzojev&quot;:false,&quot;whsrs&quot;:&quot;gzQesBTOCoNKugz3&quot;,&quot;uhmjzttq&quot;:true,&quot;tesve&quot;:&quot;nkDSpl0b2Ga8vsHT&quot;&#125;,&quot;WuANCr&quot;,&#123;&quot;jyqdak&quot;:&quot;gP-zwcSikc&quot;,&quot;kvbmsyttia&quot;:false&#125;,&quot;H&quot;,&quot;2D1ucsMSfrP&quot;],1592338348.7924447,[&quot;9lYEHCrsXWLkq&quot;,&#123;&quot;vsvlvhkuso&quot;:true,&quot;nnjlgli&quot;:322338594.6300827,&quot;fetxoqxoghv&quot;:-1991478727,&quot;vzrtxhzu&quot;:&quot;mKl8xiUneZPXrZuF&quot;&#125;,[1458107595.4483733,616263965.0955776,161045273.1067363,true,&quot;Ck3C2JV5hdJA&quot;],&#123;&quot;etgzgdsl&quot;:false,&quot;lhvbzwypzrx&quot;:true,&quot;smiyikbhw&quot;:-984707066.8290443,&quot;hktstqzjcrcg&quot;:true,&quot;brgfn&quot;:&quot;HcDo1oRRacy9o4ssNk&quot;,&quot;qjyof&quot;:true,&quot;phdqbosbbkp&quot;:931049523.3590446,&quot;ofjidjx&quot;:-860738311,&quot;ufrxtiehw&quot;:&quot;MuqsjxkA8e2Ij&quot;&#125;,&#123;&quot;wstjovp&quot;:&quot;zI&quot;,&quot;wppceiyenski&quot;:&quot;kD&quot;&#125;,true,-91349959.14546207],&quot;-VMwHk4&quot;,[true,-1807266800,true,true,[&quot;Oex_mjMAO4A55c&quot;,&quot;odW9oQlO3A7XKZtEPHM&quot;,&quot;kIsjpeWPlq&quot;,&quot;Scx4fDx65a7UDQ&quot;,true],&quot;UL&quot;,[true,-1265257957,false],[false,-569818007.5876889,&quot;WwDva9Nc3dMJhikZ_Z&quot;,&quot;NMi7MOHBF7_9sWzRCds&quot;,380825709.26405615,&quot;iPGQxJbVYprnt&quot;,&quot;VjJf-XdxNrOg3v5yBvx&quot;,true,&quot;oiipbU3t3ISgVwOL7&quot;,true]]],&quot;guinzucru&quot;:[&quot;vrumW9gl31&quot;,&quot;n&quot;,[&#123;&quot;ydvzhpou&quot;:true,&quot;wwnndiumk&quot;:true&#125;,false],&quot;Hq3ygnLIYYjOaQae&quot;,&#123;&quot;yemwjar&quot;:[-1042701532.5623459,24549030,352751370.9875027,980109670.3544773,&quot;Hh4ePK8NfvSx4OpOW&quot;,true,false,true,497346263],&quot;vcmrzobsjzl&quot;:&quot;nyj2-zg7-0kNw8&quot;&#125;,[&quot;Vo_arWN3v&quot;,&quot;8F&quot;,&#123;&quot;jibgur&quot;:&quot;dXRlpssz3Wyi&quot;,&quot;zfseuo&quot;:true&#125;,1937437815,[-1245657924.4286041,651976843,&quot;Cjws8kzUiNPcvX70U-x&quot;,false,&quot;Lm9w&quot;,&quot;xxT2tJHI7wDPW2Kfi&quot;,false,-1952758278.2733572],&quot;g-I&quot;,-2063256198,&quot;IVxDi6r33ruXiEW&quot;]],&quot;hcgqg&quot;:&#123;&quot;pkncbpjityxi&quot;:true,&quot;jywgia&quot;:false,&quot;xuhpgdb&quot;:&quot;2-yvDReio4aNvsXqelv&quot;,&quot;diuzqtbp&quot;:1369231263.8563566,&quot;boxjl&quot;:&quot;RdfmeS&quot;,&quot;ieydmbpq&quot;:false,&quot;wksjcukglkv&quot;:&quot;BlskDCFdPhO&quot;&#125;,&quot;dqksawfwzia&quot;:-1709158449.2037373,&quot;yqqqgrelsew&quot;:&#123;&quot;axfkapc&quot;:[1314173141.025732,true,1706611926.1511626,[&quot;LGK9&quot;,&quot;OmKGa-_AV6&quot;,false,619664858,true],true,true,true,&quot;MaHgh1nlG&quot;,&quot;-ht&quot;,&#123;&quot;dbxeygnft&quot;:true,&quot;nwjypbw&quot;:-180523820,&quot;svlefgltfn&quot;:true,&quot;wzjlatys&quot;:-933287952,&quot;xsirbpyegfs&quot;:&quot;hAv2H9S7cXb85f2&quot;,&quot;ndllh&quot;:&quot;1IoYAwtIePJaKWc480&quot;&#125;],&quot;xnpsnax&quot;:false,&quot;zpdmtb&quot;:&quot;yn8HiW&quot;,&quot;cbdpxx&quot;:&quot;irzv&quot;,&quot;ronkpjuqyas&quot;:true,&quot;untzciqdqf&quot;:&quot;kJWx8&quot;,&quot;nfetkiyomp&quot;:true&#125;&#125;,&quot;tqlmboqw&quot;:&quot;-dp9i61bMgbiO-d&quot;,&quot;lvjlx&quot;:-1249334706,&quot;yptkyewgcrj&quot;:867985282,&quot;ratkrzkarfn&quot;:false&#125;],&quot;bxxnf&quot;:&quot;MmTxJH919O057sU37&quot;,&quot;yedby&quot;:&quot;QQxVadTt7L8z&quot;,&quot;kamasbl&quot;:&#123;&quot;mswukabrei&quot;:&#123;&quot;acvtgb&quot;:&quot;PDJlQybpSPYdMT8&quot;,&quot;yvtaruegobn&quot;:997754640.3758422&#125;,&quot;gvfkney&quot;:-1307017604,&quot;uwvrb&quot;:&quot;W6WF&quot;,&quot;sszkbz&quot;:true,&quot;fpgzwg&quot;:false&#125;,&quot;eujhncsmq&quot;:&quot;jsjZmtqSeh6VVVaY&quot;,&quot;sxnqorpzydrm&quot;:&#123;&quot;phjgkjkonv&quot;:&#123;&quot;fzbdujgtanh&quot;:[[-1757709659.747855,&quot;GYAkj&quot;,&quot;nQlNvA5Y4oSKpHOF&quot;,true],[952955177.6360663,&#123;&quot;qummivimqd&quot;:false,&quot;gkkvkc&quot;:false,&quot;snfidxdtto&quot;:&quot;11jzRhIv0&quot;,&quot;ffdfxfruzwfo&quot;:false,&quot;lluwr&quot;:false,&quot;ddlxi&quot;:&#123;&quot;bofjqgppt&quot;:-206304887,&quot;pxuxb&quot;:&quot;JCAHtEfTWPyjmVUOX&quot;,&quot;memsmy&quot;:&quot;p&quot;,&quot;rhvmwrekpr&quot;:-853823899.7978561,&quot;rlhshsewp&quot;:false,&quot;oqjpdotxpz&quot;:-446272382&#125;,&quot;emqee&quot;:&quot;3zx8LgmigKIKn&quot;,&quot;qmauf&quot;:&quot;MA-oPkKz9lXOBiDMSRSN&quot;,&quot;kqpwqkyptkmu&quot;:[&quot;2y0Ls60F8eTpOSN&quot;]&#125;,&quot;fTi&quot;,-265643623,&quot;9v_YlQuFo&quot;,&quot;geuPaZjVsj&quot;,[[false,&quot;GHb-FdyW8EomXgHsT&quot;,false,1875556833.3559535,&quot;vt&quot;,true,false,&quot;osLW6u4iz&quot;,true],&quot;uJOr4VLCq1t&quot;,&#123;&quot;oqebxwxtxpvb&quot;:&quot;OeR&quot;,&quot;wwwiw&quot;:&quot;-nhycJ&quot;,&quot;vwbagqlinj&quot;:&quot;-D9eDNGKj&quot;,&quot;wqnhzms&quot;:-655078208,&quot;sdmbikfwy&quot;:&quot;x5v&quot;&#125;,&#123;&quot;ysfsnuamh&quot;:false,&quot;ybzuhpv&quot;:&quot;8DY2&quot;,&quot;raiyak&quot;:495006138,&quot;hgkoobis&quot;:&quot;0&quot;,&quot;hputvguzao&quot;:false,&quot;uyaeh&quot;:true,&quot;pwqhplzwou&quot;:false,&quot;taajvximfcy&quot;:true,&quot;lxmlwsub&quot;:false,&quot;vsofc&quot;:false&#125;,1088101195,&#123;&quot;sojza&quot;:false,&quot;rbclzrqro&quot;:true,&quot;huqrznjue&quot;:true,&quot;vluebofh&quot;:&quot;5bTgvkkV&quot;,&quot;ezstabvtdeq&quot;:1976572284,&quot;aqlzj&quot;:&quot;t7yO3IEs7gaC_9MZ&quot;,&quot;josruegfqn&quot;:&quot;HX2El0rpe6HfH&quot;,&quot;edank&quot;:-635493072.4155289,&quot;aymbgyfbdzj&quot;:&quot;ozUhXACnFL&quot;&#125;,-890796541.5700071,&quot;uJXQ5_4G5vIIm4VIv&quot;],&quot;f1xaV9x196tBnFD5_Zd8&quot;,&#123;&quot;qiubyf&quot;:[&quot;CQ&quot;,&quot;cW_&quot;,461572129.55971146,-1876956237.2727652,false,false,&quot;7FxqTYYKTzo702jmuV&quot;,true,-1361005501,&quot;TG3lzWLUBg17Z&quot;],&quot;bsntrkshbbl&quot;:true,&quot;qayvs&quot;:&quot;Uk-oAdeA51cHhbK5&quot;,&quot;hadikjuxk&quot;:&#123;&quot;yvluqwkog&quot;:-597445612.6250086,&quot;oukykodjcu&quot;:1850557052,&quot;cdhblr&quot;:true,&quot;ciesjxzghfxt&quot;:true,&quot;jnngdkfpuo&quot;:true,&quot;pzheolhaonp&quot;:226200614.83962294&#125;,&quot;cltmvb&quot;:-2074776318,&quot;obyudplghb&quot;:&#123;&quot;vecms&quot;:582577524.4319428,&quot;mofmkniktapz&quot;:&quot;9Js4uKTN&quot;,&quot;drxyobybcw&quot;:&quot;JTea_0pLArPIzhKEkp2s&quot;,&quot;bbpvy&quot;:false,&quot;kdndzkpnxq&quot;:&quot;daMn&quot;,&quot;ppwjjqvahr&quot;:&quot;uiN&quot;,&quot;evdxmgpozur&quot;:-1467712807.9154332,&quot;lqqxro&quot;:&quot;1C&quot;&#125;,&quot;fvgxbtmyts&quot;:[false]&#125;,[&quot;xgyM0w0gJVc-bUsjjc3W&quot;,[1581673185.801224,true],true,&quot;AFAdRfO1vjhVHBXf&quot;,-1417255356,false,2125252708,-1351228013.1790602,&quot;s8lmQa9-sF3ZiwfgDNG9&quot;,true]],true,[-1698684901,[[849023324.5976223,-977489585.1647764,1160100524.5048172,&quot;NVoV&quot;,1956152963.7851565],&#123;&quot;zjkbrxqnjyib&quot;:1612094501,&quot;laytlrzjm&quot;:-1286271773.382401&#125;,1355048752],&quot;jGiEWnOBrX6zGk7zSk4&quot;,-461191987],[&quot;m00pw5&quot;,&#123;&quot;tlotkn&quot;:[false,985823484],&quot;xlbwnbxbhg&quot;:true,&quot;mkatz&quot;:&quot;c6N&quot;,&quot;uoveewlh&quot;:&quot;l3R3s8B1RC3l&quot;,&quot;swouympjz&quot;:&#123;&quot;auyjvbi&quot;:-1255198040.7835124,&quot;ghlxvmz&quot;:&quot;XdHtr&quot;,&quot;wkopoeyqlv&quot;:&quot;Zeyj_&quot;,&quot;grjesew&quot;:&quot;VytG8oHimN0ioronyiAb&quot;,&quot;gbvuthtl&quot;:&quot;SRCBVKWH&quot;,&quot;esscbsk&quot;:false&#125;,&quot;thaxrelsxfav&quot;:true,&quot;qqifhajga&quot;:&#123;&quot;zwozmuz&quot;:377293093.26616657,&quot;qldgpds&quot;:true&#125;&#125;,&#123;&quot;rcjdyjspy&quot;:-952553084&#125;,&quot;x7-N76Cc&quot;,[[true,true,&quot;zQpYm4rL9JCn&quot;,&quot;NemBXRJmcEsP1C&quot;,433306137.267195,&quot;qvh8cnT-Jhc8Ou&quot;,740183319.1502727,&quot;7Bi1GqM4ueA0ampSi&quot;],&quot;O79VGHrnyR7v&quot;,false,[&quot;es&quot;,1505546287],&quot;Nw5tI2Y7hhY4fDj31eWN&quot;,[-749123803.2739266,216748025,&quot;c1Y7-9k8AC&quot;,176485073,false,&quot;mf_keznyU_20HdZ_0&quot;,true,false],false,[-1512885808.9801362,true,-1527868357,&quot;trOTwZC-0g1lgTqEA&quot;,&quot;mV34DCnkb1LlD7d_km&quot;,&quot;YJ0tHHyAmoIKQ&quot;,&quot;gsXJ5zChelW&quot;],&#123;&quot;phdse&quot;:595741052.8125976,&quot;rxcsoflx&quot;:&quot;rIvqIqrnEVGyCwxQP&quot;&#125;]]],&quot;nvotcnis&quot;:&#123;&quot;ogjfiplwvufn&quot;:1079730809,&quot;fnbyltztf&quot;:&quot;EsxG2fQUW-4XT62&quot;,&quot;rpxsgcq&quot;:&quot;CCAOL_U9&quot;,&quot;vswsw&quot;:&#123;&quot;ijmoibjq&quot;:true,&quot;piivqkugks&quot;:true,&quot;wpcximi&quot;:[&#123;&quot;iwywzn&quot;:&quot;OOfVX3oNFwBZ&quot;,&quot;hkynoym&quot;:&quot;FJRrQ&quot;,&quot;zuonk&quot;:&quot;49Eec2&quot;,&quot;qjovinmqp&quot;:679144699&#125;,true,&quot;yAS&quot;,1543015013,[-1021945778.6520991,true,128684704,true,false,&quot;has-i&quot;],&quot;4I6blnY&quot;,&#123;&quot;zkwzhwzipi&quot;:&quot;5lP5lousE5iL9IoFTG&quot;,&quot;bitfyzggq&quot;:true,&quot;cwnnguoet&quot;:false,&quot;nqmqzw&quot;:false,&quot;joozp&quot;:false&#125;,&#123;&quot;uhzmeuc&quot;:&quot;u3F1Z&quot;,&quot;mkneciqrikf&quot;:true,&quot;ieiag&quot;:-1256958208.1722577&#125;,[6951325,true],true],&quot;xsqea&quot;:&#123;&quot;abdpaposxk&quot;:[-2083214054,true],&quot;gavaao&quot;:[&quot;YVqehowWoxFzxN0tZB8&quot;,false,&quot;ZHK0SwWCyUiC&quot;],&quot;dlcfcpjjijg&quot;:[true,&quot;j2r&quot;,1558887921.6404164,&quot;TveKjVYhg0U&quot;,632625983.6673323,false,1367379215,&quot;mpHgbvMpYFi&quot;,true],&quot;cvztpny&quot;:&quot;z1wbRKt3-u4cBI6&quot;,&quot;tgvmaqhcokg&quot;:false,&quot;pwlirptw&quot;:&#123;&quot;kfntxxsbsbon&quot;:true,&quot;akwavpgf&quot;:-1342471866,&quot;gzpwxwilyubn&quot;:-1743682384.0272207,&quot;ndqaenoranu&quot;:false,&quot;vfzgcfdr&quot;:&quot;utqG7ufYK3j2KEVzpp0O&quot;,&quot;ufxjjef&quot;:-904325888,&quot;fodllzopcpx&quot;:&quot;P3ZBe5qNinRYq1VxEL&quot;,&quot;dhufn&quot;:true&#125;,&quot;ralgamgjl&quot;:[2026862038.2987015,false,false],&quot;gnknlmlum&quot;:false,&quot;azfmkyux&quot;:[&quot;f413rM5j2LvXNTKL&quot;,-615130880,&quot;0Eh4aUF2CsHg_P-mxmH&quot;,-268950414.54959303,true,-1931834889.733659]&#125;&#125;,&quot;wzewlxhjnvw&quot;:-903799295,&quot;nnrugbczmebk&quot;:[false,false,&quot;G&quot;,[true,true,&quot;Xfiip08j2n4cXpvUz7&quot;,-1186540424,true,&quot;c9Pn_xx&quot;],1124081955,[1830918200,[&quot;Q4MTN&quot;],[127409311,-1809447283.2348087,&quot;4tiJNwazi&quot;,&quot;fy&quot;],930886199.1886995,[-245296169,844880445.720423,-270760168.8320612,&quot;V_ATKaGoE5XM9RgwLv&quot;,false],&quot;kpcQ&quot;,2045568916.3619785]],&quot;iquqoa&quot;:[&#123;&quot;bdtrvppokywi&quot;:-33393480,&quot;xlxonec&quot;:-1823845807,&quot;pprlnqouqxzn&quot;:2091914113.8744054,&quot;ybmwesnuegtd&quot;:[&quot;FMsxRZWsu2H&quot;],&quot;ylogqgharumv&quot;:false,&quot;nvggdbkr&quot;:&#123;&quot;crvrsjh&quot;:&quot;Xj2cM1hDzTIuhmc&quot;,&quot;umhgzsjwk&quot;:&quot;KS8J3biYo8P&quot;,&quot;dbfkz&quot;:-855560738,&quot;xyfvzoxzqc&quot;:false,&quot;otbwgnrz&quot;:-2034945952.523522,&quot;bbehrnjws&quot;:&quot;QbeySRRy15KeDVQz0IMK&quot;,&quot;lgsgot&quot;:&quot;JnGiCwGsA8aa7o&quot;,&quot;rasrciv&quot;:-700141086,&quot;zdthkydrmln&quot;:&quot;qxzRdtqK-lnShu&quot;&#125;&#125;]&#125;,&quot;xclapdsaslep&quot;:-23588526.03089682,&quot;ecrpzheu&quot;:&#123;&quot;lxthqzfv&quot;:&#123;&quot;ulylbh&quot;:-1018618930,&quot;qhlscxfu&quot;:&quot;sfZnQ_rXqIm&quot;,&quot;bmdtvxutm&quot;:true,&quot;cczmioh&quot;:[111564522],&quot;rsbpvrvls&quot;:&quot;OzU9laC7lmDxzlEx_wR&quot;,&quot;ndcirjkclq&quot;:&quot;cqgL1NYFQ3DO&quot;,&quot;oggtqukizq&quot;:-2106470611&#125;,&quot;cjwtzzpgrb&quot;:[&quot;TZD4t4XeIUHjJUIK&quot;,&quot;lQGZmZrYh&quot;,&quot;hyaEwqscH8dteUOzha&quot;,&quot;JaQummas&quot;],&quot;wvppj&quot;:true,&quot;phsqgbfp&quot;:871081896&#125;,&quot;isvrnahic&quot;:false,&quot;uasucavojqy&quot;:163609805,&quot;vnncwei&quot;:-642227261,&quot;njzmcyqd&quot;:&quot;cDCfe3Bx1w5XYVLraxW&quot;,&quot;dweipdxaye&quot;:[&#123;&quot;aeongjioif&quot;:[[true,true,&quot;bECarF5RGKtt1imFtTu&quot;,&quot;xcuL5lX97a&quot;],false,[false],-650309984,&#123;&quot;feyumfzudt&quot;:&quot;TIAi7dPq&quot;,&quot;hxjglebiwf&quot;:true,&quot;tdeggm&quot;:&quot;hp&quot;,&quot;rortbibldkyq&quot;:true,&quot;bucfr&quot;:&quot;IgFif9jpOZZ&quot;,&quot;rjnmvysrynsj&quot;:441984026.3667474&#125;,&quot;hkF&quot;],&quot;mxrrwqte&quot;:&#123;&quot;cnyarz&quot;:&quot;bKnE6P4Kw&quot;,&quot;dccrzgwzc&quot;:[543185771.5837113,&quot;mRCDjZgJS1M3U6rl_af&quot;,false,-1933801689,true]&#125;,&quot;cigvfabm&quot;:&#123;&quot;saujucr&quot;:[&quot;qdRdcXyEPd&quot;,true,-2123966068.7962725,2051049994],&quot;exxfgcqhjfc&quot;:&#123;&quot;rjsubdbuwsh&quot;:1224413664.2868626,&quot;lhmairsqez&quot;:true,&quot;asdzyjpeswup&quot;:&quot;o6zuaj&quot;,&quot;gmslwelko&quot;:610866014.3874341,&quot;qpwadkelki&quot;:1731608847,&quot;detfckirhowo&quot;:false,&quot;clzzljkxqkp&quot;:&quot;Y7l0BW7NMz6Avh4D_&quot;,&quot;nhupv&quot;:-1006743965.8776457,&quot;jsopnto&quot;:&quot;4DX1mC&quot;&#125;,&quot;wnfjhwvmooaa&quot;:-1886276406.132739,&quot;fhgfgkfqxst&quot;:[1593165764.0979652,1637503927,-1873780322.4778817,&quot;cSaqQ3WNTSGVTZ9NIOW&quot;,false,860733481.5794744,&quot;232_Efq6&quot;,true],&quot;dzazh&quot;:&#123;&quot;fvgaaqcnau&quot;:&quot;sNjUz5Ii9I&quot;,&quot;jfcavmwu&quot;:&quot;kmW&quot;,&quot;vlreyb&quot;:-710731569&#125;,&quot;ckaknuqy&quot;:&quot;6YIs29pUJ9M&quot;,&quot;kcuyg&quot;:true,&quot;pqegyczzkqw&quot;:205717917,&quot;sdvvxdfb&quot;:&#123;&quot;rsgfdyzjpaa&quot;:true,&quot;vvmrt&quot;:&quot;X5&quot;,&quot;xedlylprsv&quot;:570673188.5733104,&quot;acwculubdaa&quot;:-849395553,&quot;puksqgt&quot;:false,&quot;odewfvhgdr&quot;:&quot;A1AQXseK9u8_z&quot;,&quot;gekxhikm&quot;:-2139423052.295563,&quot;mfzqlpyu&quot;:true,&quot;yqwffaenyag&quot;:&quot;9G&quot;&#125;,&quot;ohtczfdh&quot;:[false,&quot;73qWp-&quot;,true,true,true,-1329529787,&quot;WAAy6HCE5uYe&quot;,1557041914.0483782]&#125;,&quot;sbxgh&quot;:[&quot;Sbg9m7vIEB&quot;,&quot;X9zA0qY1RG9ol_ri&quot;,&#123;&quot;cxqgnomfsnjk&quot;:&quot;R-_aiqzv6bm&quot;,&quot;nuxvtzquh&quot;:true,&quot;dkughomoiba&quot;:&quot;JvX4Y5n_Fh&quot;,&quot;adsqv&quot;:-682262054,&quot;myidiqjbts&quot;:true,&quot;czjhfzxkbpw&quot;:1751383795.8506076,&quot;fqwpzzwkpr&quot;:&quot;BU0Yu0NRVTiiHcG9mbDt&quot;,&quot;hryel&quot;:&quot;G&quot;,&quot;ckyvqeihbgl&quot;:&quot;QOFYl8GjzR_Ql3f&quot;,&quot;ycexw&quot;:true&#125;,true],&quot;yzpnjnaktksa&quot;:false,&quot;lgaqcjsfe&quot;:&#123;&quot;kqnizsh&quot;:[&quot;p&quot;,-1226305180,571419224.3518956,false],&quot;xzlefub&quot;:&#123;&quot;fhykv&quot;:-339920314.80420333,&quot;exqmfy&quot;:true,&quot;uiaivfguag&quot;:&quot;rEv6VY&quot;,&quot;jpgztqhjv&quot;:true,&quot;mkynca&quot;:&quot;7z9KNTRB27e&quot;,&quot;zhcbqjatyrgg&quot;:&quot;wFUzbTyk5tmO6p&quot;,&quot;ewpgmkwvlpm&quot;:-1934181295,&quot;rtirys&quot;:true&#125;&#125;&#125;,541189816,&quot;es&quot;,&#123;&quot;rdflzpxwsbw&quot;:true,&quot;riayske&quot;:&#123;&quot;ijxscwliafis&quot;:-322441950.5303346,&quot;ydhymqlx&quot;:false,&quot;fjyeyim&quot;:false,&quot;lbwsgfg&quot;:&#123;&quot;czcrfatn&quot;:&quot;WKr9&quot;,&quot;gxekfkxdkdq&quot;:true,&quot;vtpxn&quot;:true,&quot;vllqibjw&quot;:1821007224&#125;,&quot;nvqswevz&quot;:-2041833954,&quot;rzzkuseaxd&quot;:18807832.889945496,&quot;wfxjbegeu&quot;:true,&quot;pjayyzd&quot;:&quot;wWUESoQDH_O&quot;,&quot;rfkfqmagir&quot;:&#123;&quot;mykpqrhvuoy&quot;:true,&quot;loyhdll&quot;:1440472571.8493106,&quot;xcsdvtacdulw&quot;:&quot;W344QdjDy_YdH01iG0fS&quot;,&quot;tzgvthwrp&quot;:true&#125;&#125;,&quot;rsmbhicqnpr&quot;:[&#123;&quot;kmbsnywwsi&quot;:133785125.47638391,&quot;evlhamhaxxt&quot;:true&#125;,&quot;b7Fb7N&quot;],&quot;hfneixzc&quot;:[&#123;&quot;ayxhlht&quot;:1548171683.617593,&quot;nqlqirpxh&quot;:false,&quot;npybayp&quot;:false,&quot;xuyutuq&quot;:2110743987.1496599,&quot;kzmprhoyv&quot;:1322790923&#125;,1765508816.0791237],&quot;xmdoabl&quot;:&#123;&quot;refxfgkkzu&quot;:&#123;&quot;xtwns&quot;:-1039887662,&quot;dzgnbcaxve&quot;:false,&quot;zmuecq&quot;:true,&quot;tuzxnlldg&quot;:-907643254,&quot;ouejpqtx&quot;:331971273,&quot;iaugasmfxclk&quot;:&quot;9tJxJ&quot;&#125;,&quot;trcrityop&quot;:-989164354,&quot;lfjcwkgxift&quot;:[&quot;1GZo7DANf&quot;,-1561947832.5542061],&quot;vgbtbbnj&quot;:&quot;q-ihFdKO9bOXv&quot;,&quot;ndimwio&quot;:&quot;PQcmyo0_y8f7CWYscR&quot;,&quot;gwkahgryaxc&quot;:1901846564,&quot;telwegwtlv&quot;:[&quot;oJC0R8V6vDwZnuL&quot;,&quot;cegvtSIH&quot;,false,true,634771505.5661006,955230191,true,-1885169813,-1854859621.4315236,false],&quot;lgdgl&quot;:-1133237594.1663725&#125;,&quot;pzwvynoappvl&quot;:false,&quot;fplofweuxvzw&quot;:true,&quot;ffqjvpjbuesz&quot;:&quot;AV5DRiG4gKZl75TR6&quot;,&quot;hfdasyzpuoog&quot;:&quot;aAMMRCXFrygWvpg&quot;,&quot;njrohfn&quot;:&#123;&quot;ratftlmbwf&quot;:false,&quot;lfaafenmzbr&quot;:1374843545.5878198&#125;&#125;,-2001457228.601632,true],&quot;mkbmmctixysm&quot;:&quot;ntVR7&quot;&#125;,&quot;zuczlryopca&quot;:&quot;iNj8bmfUHGQpt&quot;,&quot;lhkjnmyi&quot;:1518013887.0744526,&quot;igdwy&quot;:true,&quot;xbvcu&quot;:1017887323.7448919,&quot;pitvbgiuml&quot;:-1811318498&#125;,&quot;zprckvv&quot;:2108168004,&quot;edfcnvtdtx&quot;:[&#123;&quot;zjlropjots&quot;:&#123;&quot;ohmsqxdlz&quot;:false,&quot;neisprizn&quot;:1669237908.3217354,&quot;csenxeijnht&quot;:[[&#123;&quot;zppbppw&quot;:50337283.94736552,&quot;ixrpxguua&quot;:true,&quot;plfzrokdvja&quot;:&quot;7eZ616LbAtqHFNJU4MF&quot;,&quot;jhygfhqou&quot;:282844661,&quot;obpaqtt&quot;:1016820153,&quot;tzmnjmnprc&quot;:&quot;PIP_KsAQ8TRfWj8&quot;&#125;,false,[&quot;iYCPkOgKcGLcpqf&quot;,1795872978.9544482],67846688.50918601,1202186634.870897,false],9448510.009504765,[true,true,&#123;&quot;etkidcfq&quot;:&quot;lHdchfpN6JDir&quot;,&quot;agchz&quot;:712473658.807744,&quot;icqnhfdxhjhk&quot;:-220595219,&quot;fbbfl&quot;:-505498113.7859371,&quot;jmwbiqyfcsuz&quot;:&quot;KA&quot;,&quot;xbvzb&quot;:&quot;gXgB1WZNqjU&quot;,&quot;nwemkhg&quot;:false,&quot;kjherkfm&quot;:true,&quot;xnqsb&quot;:true,&quot;lvsjlm&quot;:false&#125;],[[&quot;buNwzYKD80YR&quot;,true,false,false,false,-710038476.2972732,-309936207,&quot;paBE0&quot;],&quot;q2GA9trX5VnDm8&quot;,-844643912,false],[-1377899387.3188415,&quot;Pq5moaMvAdkM4rQ&quot;,true,true],-710012547.177507,673382921.5194938,&quot;FHksVrkWHt3PO0U0b&quot;],&quot;jfzawdrwkga&quot;:-1072103664.4713615,&quot;xqgaimtu&quot;:&quot;2RTdyzxFpbVQmuY&quot;,&quot;jjkulht&quot;:&quot;GCEdY0WQgHN&quot;&#125;,&quot;dnmlzfzvmidt&quot;:false,&quot;rhcvcxuk&quot;:-1079046924.5961304,&quot;yaktme&quot;:[&#123;&quot;diywncksn&quot;:[true,&quot;cGAmxIX7O0WTZ&quot;,[false,1564067145,&quot;iW_vFxvuDE-A&quot;,&quot;gZo3&quot;,1122587441,true,2083853595],true,1860499142.0810177,false,false,false,558491628,[&quot;sOYslU5FbQW6&quot;,&quot;_Z9dSn&quot;,true]],&quot;uxmuxkb&quot;:553474645.1672876,&quot;yhhsqrthzs&quot;:&quot;Z6hjxh_-8QDXpfB_lHc&quot;,&quot;nhznkmw&quot;:&#123;&quot;dlxblit&quot;:-1057613448.3847271,&quot;ypush&quot;:690139895,&quot;cnjrimqsfmfi&quot;:&quot;sYV1jMW&quot;,&quot;yoppewbiktn&quot;:1209004459.892378,&quot;wepojzvjmijt&quot;:-1466502462.9614203,&quot;mrjponcdr&quot;:1615448533.7058485,&quot;upveq&quot;:&#123;&quot;jjoynojpcx&quot;:&quot;Liy&quot;&#125;,&quot;uhbrhfru&quot;:[&quot;8JEkNS9XjGCuGxV-UYQr&quot;,false,&quot;WE1O1xKeDApdo1h&quot;,&quot;0jGzqy2UL6jjel&quot;,true,-19734332,-242040341,-36045513.31575265,true],&quot;zupetkvgd&quot;:&#123;&quot;nwfja&quot;:&quot;rG&quot;,&quot;oxtvcwrgzbc&quot;:&quot;jrGmsAV_7y8RGU&quot;,&quot;geskyn&quot;:-1815196370,&quot;fwbhfubc&quot;:-1370846829.5869296,&quot;ylnkb&quot;:-511755975.7114426,&quot;onpyyyoti&quot;:true&#125;&#125;&#125;,&#123;&quot;kvprhn&quot;:&quot;1Ybfy76_3pVvA9xU3F&quot;,&quot;mvbniporqrir&quot;:&quot;sFub&quot;,&quot;umtteoyzzv&quot;:&quot;6_0DxfBfb3J40B2EL45&quot;,&quot;jienbfqm&quot;:false,&quot;wzduhawbdxh&quot;:&#123;&quot;pzmcay&quot;:&#123;&quot;jujqvgbspz&quot;:&quot;68_v&quot;,&quot;fdiby&quot;:&quot;XGpGy_CNybTc8Kov-&quot;,&quot;rfiwortnu&quot;:false,&quot;pfeogfmv&quot;:-986394021.991955,&quot;injpycoua&quot;:&quot;UhuULrD6YjpyPBgLot&quot;,&quot;aportowxs&quot;:-301406610.412803,&quot;vbpiffeqpsav&quot;:&quot;FbcFenbR&quot;,&quot;evbkfj&quot;:-888951341,&quot;qtfzemajl&quot;:&quot;iBp6pusTBjurx&quot;,&quot;hkpxwoub&quot;:&quot;GYsZtov&quot;&#125;,&quot;dflvr&quot;:[&quot;2jVK4YED9bJwfpmeVMjB&quot;,&quot;bUp6SgbV&quot;,true,&quot;o4hJF&quot;,-910642896.9670054,&quot;CC&quot;],&quot;razlmovqsiuc&quot;:1343277490.3944185,&quot;qhafjcift&quot;:-2092618184,&quot;uwnzhv&quot;:[false,2049897936.1204708,-2102758834,-546308487.584099]&#125;,&quot;akwkkoda&quot;:[true,-1138132915,2066106072.8812897,[&quot;6jMXM2NHNPBIO9t7Tdd&quot;,&quot;_xsk9Xqzj59IXUmIzg&quot;,349398901.40953594,1250083138,&quot;itsea&quot;,&quot;n&quot;],true],&quot;pedqmgazxwc&quot;:&quot;23vKSv5dHyONCQ0A&quot;,&quot;kbtjil&quot;:&#123;&quot;wddnd&quot;:1957971779,&quot;xbgel&quot;:&#123;&quot;zuudlzhzlth&quot;:-282063310.2604387,&quot;lwikuhlzixt&quot;:-820180212.3931726&#125;,&quot;dizjuee&quot;:true&#125;,&quot;jjhvhxucyt&quot;:&#123;&quot;lxjwlnzgkcoq&quot;:false,&quot;hazbbnknrt&quot;:&#123;&quot;hjnuaaemr&quot;:&quot;M&quot;&#125;,&quot;jcpsg&quot;:true,&quot;hmfrqefj&quot;:&#123;&quot;sstzntsmrhk&quot;:false,&quot;ymufzyuumjxr&quot;:1601488142,&quot;pxllzni&quot;:-390280935.5047585,&quot;nytye&quot;:true&#125;,&quot;oyzsjztrltu&quot;:false,&quot;qugxfiaemban&quot;:&#123;&quot;blzzupbkbm&quot;:-2141244606,&quot;clmhifbzfugt&quot;:-1407487167,&quot;vrmkqosixcq&quot;:false,&quot;lrifqtcpyk&quot;:-417542026.27023846&#125;,&quot;aixnirite&quot;:false,&quot;ghlpuzrc&quot;:1478220491.0831888,&quot;wlanv&quot;:-373831632.4243674,&quot;mrogq&quot;:&#123;&quot;osfyga&quot;:false,&quot;aplxxftfj&quot;:-1834090421,&quot;amxrdtsgt&quot;:&quot;Ve-y3_iQ07&quot;,&quot;rejngucpw&quot;:356119464,&quot;nlwnnxs&quot;:true,&quot;jjstbhtj&quot;:false&#125;&#125;,&quot;xiuynavf&quot;:&#123;&quot;kwtdk&quot;:&quot;8oJ&quot;,&quot;podziuz&quot;:375736466,&quot;ejphlaxpuhs&quot;:&#123;&quot;tupoha&quot;:1145829112.756852,&quot;rrxoc&quot;:&quot;M1g&quot;,&quot;awawdsvhfx&quot;:&quot;3Z1QbWsL1&quot;,&quot;dpfpvkhjl&quot;:true,&quot;rtxhlsy&quot;:&quot;v5J5o&quot;,&quot;nymoxuniym&quot;:&quot;i-brgNwzZ&quot;&#125;&#125;&#125;,&quot;tLyGkQ-Eoi6T2cJB7Xda&quot;,true,&quot;Nn2VG&quot;,&#123;&quot;cnngwkrou&quot;:1906760023,&quot;obbml&quot;:&quot;D&quot;,&quot;mtjwjmkx&quot;:&quot;v14nSf6T42q0lmh6z3kb&quot;,&quot;vgldrup&quot;:&#123;&quot;apdsl&quot;:&#123;&quot;cptovk&quot;:&quot;lPBzNP52ZPbhc&quot;,&quot;ltgqrriay&quot;:&quot;fsHOoDK0f&quot;,&quot;ikxknaj&quot;:true,&quot;bmjogxhkkxk&quot;:true,&quot;uwqdjqnav&quot;:true,&quot;xkytyvkwmiyq&quot;:1754520275.5236428,&quot;rkdstbva&quot;:false,&quot;awdnbxjxt&quot;:&quot;VSRA_3&quot;&#125;,&quot;ynqhemulse&quot;:&quot;umYn&quot;,&quot;qhsfmpmetk&quot;:&quot;6TokpvN&quot;,&quot;tzfmbghtlc&quot;:[true,&quot;KMX4M8fY6O&quot;,912635995.4035354,true,false,true],&quot;kkdozofvzevy&quot;:[1193743730],&quot;yzownwaqfbrx&quot;:-891364967,&quot;ylohxwnsq&quot;:&#123;&quot;okfnsbkeg&quot;:-1782592720,&quot;yniav&quot;:&quot;P&quot;,&quot;qdkwvlxbvfw&quot;:&quot;FiU2lFJqWwQ9Op&quot;,&quot;hrztvz&quot;:&quot;7xY3WBSUfs7_0uynou07&quot;,&quot;nbrkjlfhdbdo&quot;:true,&quot;orlvxr&quot;:-1627651305,&quot;umqrwzylbzu&quot;:-1833674567,&quot;vsdoe&quot;:false&#125;,&quot;mmvpuubkse&quot;:false&#125;,&quot;cefldtbrdj&quot;:[[1455050059,-448469309,&quot;P4BgnDkD6U-&quot;,&quot;m38dpawqlpKyiJ5&quot;,true,-1822886985.4121122,1040331193,298184823.61547893,&quot;1_J-itpqwMespEFs-EV&quot;],&quot;kuu_GrP6OV4&quot;,&quot;0SWlGwTC&quot;,false,true,&#123;&quot;zitgiefkard&quot;:-988266938.0552318,&quot;bnnjkcdsvxjx&quot;:1255201311,&quot;jyzfcqc&quot;:&quot;1NbeYTo-HftdWt1ixL&quot;,&quot;yliigpfrr&quot;:false,&quot;vtrgjhtqkmqd&quot;:false,&quot;knbkxniy&quot;:&quot;L1shmB3uWym&quot;,&quot;yzzrhu&quot;:-603055240.7698349,&quot;iqjdp&quot;:false&#125;,&#123;&quot;bncwf&quot;:false,&quot;uxaaythjsjh&quot;:-150293170.71045366,&quot;kdqlfmbvfk&quot;:false,&quot;baxbvtmqf&quot;:&quot;dU&quot;&#125;,[-1713786130.764592,false,-1364927791.078211,1387141885.5667107,&quot;oFATTbPr6cG4m6SVCD&quot;,-2009087135,294071956]]&#125;,[true]],&quot;vzaicd&quot;:&#123;&quot;utpni&quot;:-16066763.353920365&#125;&#125;,1077396070,&quot;W01jK60jC&quot;,[false,&#123;&quot;cbqhfqnlej&quot;:true&#125;,-827310531.2640669,&quot;7fP&quot;,556757334.8359073,-38426244.86487788,&#123;&quot;budovqcdmn&quot;:[[-57389439,&#123;&quot;ptgfid&quot;:&quot;3KQB47aqHLNdaH2r&quot;&#125;,&quot;uG732oGEwMv9R0&quot;,[&quot;Vlrl3Yr61Gh-&quot;,false,&quot;U5-Xk9nhRyONv5PTge&quot;,1248817679,true,&quot;C42GNV-Z&quot;,true],&quot;86ebzE_X3Iwxj4xCz&quot;,-1633033609,&#123;&quot;zbbhid&quot;:&quot;xFGm3jj-CK6Y&quot;,&quot;ibbbkfocaklk&quot;:1249592427,&quot;bmdpltxpvqfq&quot;:-1779057643,&quot;eyoglejjgpr&quot;:-389184317,&quot;mrlyllftspd&quot;:&quot;UzZsGh&quot;,&quot;owywb&quot;:&quot;_JoBT&quot;,&quot;xyimobonl&quot;:1070667744,&quot;fjdghnll&quot;:&quot;et8v14bi3&quot;,&quot;fdjmgcyyj&quot;:true,&quot;ygthooxnv&quot;:true&#125;],&#123;&quot;oqjhfr&quot;:&#123;&quot;uazjlson&quot;:true,&quot;nhywesq&quot;:&quot;g-zlYY_yQ5Lda&quot;&#125;,&quot;irrlwt&quot;:-1985598547.1135154,&quot;zxofsqqem&quot;:&#123;&quot;ycozgli&quot;:&quot;ZzsK&quot;,&quot;gxwqoy&quot;:519428523,&quot;bgamxbxp&quot;:433974054.2914206,&quot;xqgjrkyzagd&quot;:true,&quot;wspgwktgr&quot;:false,&quot;wezmgi&quot;:&quot;90QAFOLS&quot;&#125;&#125;,&#123;&quot;bqloryrfkopi&quot;:&#123;&quot;keklzzpyjpfw&quot;:false,&quot;caqulyqmprqg&quot;:&quot;3yUgtiLM&quot;,&quot;yawwtntshwix&quot;:-1885992334,&quot;jrepeyjfumx&quot;:-1224180243.4474022,&quot;armowm&quot;:true,&quot;iqxxgv&quot;:&quot;v&quot;,&quot;onnbzzejd&quot;:-189138775&#125;,&quot;hjorfosbd&quot;:&#123;&quot;ntyjc&quot;:&quot;C5fW7ln8uCB5S&quot;,&quot;bwqryc&quot;:false,&quot;evjqaue&quot;:false,&quot;ygurkh&quot;:&quot;HWvyD3MbgFn&quot;,&quot;ksxml&quot;:1021137441.607147,&quot;vahxtquwlsen&quot;:-470432463.3972441,&quot;yrredhr&quot;:&quot;61rWHK6J2GPYcEK&quot;,&quot;vheen&quot;:true&#125;,&quot;fsdarrsesige&quot;:[&quot;O&quot;,1182592021,&quot;O&quot;],&quot;ayfsyc&quot;:&#123;&quot;lenwzltc&quot;:-941073757&#125;&#125;,false],&quot;hplplqcdzqal&quot;:&#123;&quot;gbijemwbxet&quot;:[&quot;NnLDAsNaOO08kxv&quot;,[false,556692365,-1416645037],[true,&quot;hr6QhVZ&quot;,268262946.22777912,2104821327,&quot;CGZ8j&quot;],[1210770221,&quot;Z2gkUpO&quot;,true,&quot;nOfq903P_NL&quot;],[&quot;nSCiLKZc&quot;,-1198740564.2583942,&quot;Y&quot;,&quot;hf&quot;,false,1251575349,true,true,1449034.7918200144],false],&quot;xpkdqexgmlbv&quot;:&#123;&quot;soefhqpc&quot;:&#123;&quot;kzhigadt&quot;:&quot;BuuYMytN9Vl&quot;,&quot;wbeqlxjnzqzn&quot;:165079385.2466143,&quot;ohgkwkszcq&quot;:false,&quot;clibxgxoitue&quot;:true,&quot;bhwidjch&quot;:&quot;C2T76Ss&quot;&#125;,&quot;utsskzgim&quot;:2076412583.3556616,&quot;yqqpyfzm&quot;:&quot;RUhRgiLHiVXFSn113hO1&quot;,&quot;mkirpkxz&quot;:&#123;&quot;uhwvbp&quot;:false,&quot;nvsowsqvazhv&quot;:true,&quot;djcyw&quot;:-1070645977.4664952,&quot;ggkpn&quot;:&quot;1Omp&quot;,&quot;gplkwtfkq&quot;:&quot;NiHeP&quot;,&quot;hodqhwq&quot;:&quot;p75YxCkV89C_zZA1t9&quot;,&quot;sujduaz&quot;:false,&quot;kevghj&quot;:&quot;7uhNFz&quot;&#125;,&quot;ngxqmczniy&quot;:[false,false,true,false,false,146693885,&quot;ztTgI6YI5CM&quot;]&#125;,&quot;plaorotrach&quot;:[&quot;GquEj0UXV-5zyVEFhR6&quot;,false,&quot;7YEyqych3SigTp&quot;,&quot;F1mjfZPyz1vMBdC_&quot;,&quot;S1G1jDcK6dkJkHK&quot;,[true,-416776065.2971898,&quot;cVD-JpAJLz91jiqXC&quot;,false,1375847198,&quot;xZosw&quot;,&quot;i74upCH&quot;,true,false,&quot;rccDj6U40rAbCu1K8k&quot;],[true,1587478821,&quot;c2E08p0CT9QMfdpJtE&quot;,false,206551355.82749113],-1108683454],&quot;lmuow&quot;:&quot;_tshJZHGp_azi1Ot&quot;,&quot;ofrqnleqtm&quot;:[false,&#123;&quot;wephmoqcw&quot;:false,&quot;reybjf&quot;:false,&quot;xgajeqpnamr&quot;:false,&quot;jvccgqcd&quot;:false,&quot;waavqwacntn&quot;:-1152169988.9064116,&quot;cjbrq&quot;:&quot;KX3sEswYrm&quot;,&quot;nqpcnsmlnse&quot;:true,&quot;vizoyko&quot;:false,&quot;qneuvptfx&quot;:&quot;oHNt_fdTX_sq&quot;&#125;,true,&#123;&quot;wwgumlmzr&quot;:&quot;Tx_&quot;,&quot;ojonzmrmghm&quot;:568490381,&quot;uibhwv&quot;:true,&quot;mbjvlqre&quot;:&quot;oAZbEvm8a3J-eL&quot;,&quot;fbvzekz&quot;:&quot;IeDqqze7jm1Ko&quot;,&quot;wakjzfkeyr&quot;:false&#125;],&quot;whouqjsku&quot;:&#123;&quot;hmtixwqygp&quot;:[-1284831823.7414596,false,400621272,-751044386,false],&quot;dgccfywdt&quot;:&quot;g1S1sjeF-GJJdoqqfpA&quot;,&quot;cmxaigbl&quot;:1365826255.5225384,&quot;dnzrxegamrpl&quot;:&#123;&quot;cqgefysqdtrk&quot;:true,&quot;yrhlat&quot;:&quot;6tnStQxFjfd&quot;,&quot;yejgbnbpq&quot;:false,&quot;kozzouxqi&quot;:false&#125;,&quot;kglgtplx&quot;:false,&quot;seonfkw&quot;:false,&quot;guyyksbay&quot;:[1670129075.3426,&quot;SjCzrprT&quot;,-1735322052,true,-674811093.686591,false,false]&#125;,&quot;vyatenhz&quot;:true,&quot;egfslqsy&quot;:1718713030.6296952,&quot;gpeskzqkz&quot;:[[-60156127.02353801,-1156142254,&quot;258RagfH&quot;,false,222823135,false,&quot;T88c&quot;,true],&quot;ply1DGEuxKcisHgG&quot;,false,false,21823195,false,[&quot;mpmsHwI0C&quot;,true,&quot;mQdAC2tJ8OzhRoiAez&quot;,&quot;3atqInQvo7hoY&quot;,-1091083781.7179978,false,false],false,true,1220906796],&quot;nnoaolusj&quot;:&#123;&quot;mcbylytfda&quot;:&quot;2mI3JlkNuVrmxIz&quot;,&quot;nfcyklbted&quot;:&#123;&quot;ogxsirswpu&quot;:&quot;Tpo&quot;,&quot;tldslvl&quot;:false,&quot;kfmiizr&quot;:&quot;THN9fpWfs3cGj8J&quot;,&quot;oxlqyrrqatz&quot;:true,&quot;fdmyjtklvcce&quot;:false,&quot;utdlym&quot;:1130696574,&quot;ogprpoxdc&quot;:1314471890.0004387,&quot;xehhv&quot;:-1823524873.949718,&quot;xjbyneoljr&quot;:&quot;jJoBK&quot;&#125;,&quot;melrhi&quot;:true,&quot;szdti&quot;:&quot;YzWZl0iPDU7D0l2-9VQM&quot;&#125;&#125;,&quot;uyrsyzqrjn&quot;:true,&quot;mmbabyw&quot;:[&quot;-PDzWm_Qde4me&quot;,&#123;&quot;arobguyi&quot;:&#123;&quot;ctcwt&quot;:true,&quot;oobbpurhf&quot;:false,&quot;oywkrncphnqt&quot;:true,&quot;jicrxebpkf&quot;:false,&quot;osjwsdfkgwwd&quot;:&quot;FjKsCAjSrUyBMU&quot;,&quot;ugcdu&quot;:-1751628122.3069346,&quot;kzqfmwz&quot;:392802621.353155,&quot;urckxyz&quot;:false,&quot;rtcxhdr&quot;:true,&quot;cxozzzrwu&quot;:690611330&#125;&#125;,&#123;&quot;uvhztpycb&quot;:[false,-304433342.9855737,-1986253929.8862252,-73607687,&quot;kyzqt87osn5hyQR9HeRX&quot;],&quot;xgekwkvfayup&quot;:&#123;&quot;xvyorm&quot;:2045045163.3581913,&quot;pqfrmhjvi&quot;:false,&quot;kswvahn&quot;:1089734225,&quot;vuktsgzg&quot;:false,&quot;mchuzoercdh&quot;:true,&quot;rjjnnxcyx&quot;:true,&quot;spthk&quot;:&quot;Q2YZx&quot;,&quot;xorbqrjmf&quot;:true&#125;&#125;,[false,false,true,-475759322.3544179,[&quot;HI9Qx3IdOP7QQWig&quot;,1387099373.9838986,&quot;5mHxhkqMcMa5Q&quot;],&quot;CEytjHH8sxNC4w&quot;,&#123;&quot;gdfuiagfdypl&quot;:-910792105.0630586,&quot;mpjeyhtuvaag&quot;:-1318142963,&quot;owngfvjsz&quot;:-469788864.5288309&#125;,[&quot;f8ImiaW&quot;,false,1853180246],[&quot;IzdYW2uFt7TDjo&quot;,true,-573205362,&quot;4OH3nWRKg3&quot;,false,&quot;dsMxjYE6I&quot;,&quot;52LP3_fwGITbgW4&quot;],&#123;&quot;ebhsaxl&quot;:-1913244253.2224777,&quot;tliyeaa&quot;:-1240143201.3531358&#125;],&#123;&quot;wnvgkpsvx&quot;:&quot;gUrxc&quot;,&quot;tyocbzcpard&quot;:&quot;eyts&quot;,&quot;mepfh&quot;:&quot;nNc1zmeZXO&quot;,&quot;fskaz&quot;:&quot;3kDCe2pvi0kpLbAz56R6&quot;,&quot;zpevom&quot;:[-1996751885.9953284,&quot;I3hQ3kRNps&quot;,false,&quot;FvFqU2lxUe-&quot;,&quot;n7jGEK177falIk&quot;,-1470190804,false,&quot;fm1uO&quot;],&quot;tjvxbeszrqr&quot;:true&#125;,[[1740178023,&quot;uWgDlekQPurMw1O&quot;,false],[&quot;q2B9IP6e&quot;,-81926863.60805717,false,true,&quot;6TDt&quot;,-80356296.84130147,false],&#123;&quot;wowwxpshbqzv&quot;:false,&quot;koosyguunza&quot;:&quot;M3TN9D8_&quot;,&quot;chqfpqsjxy&quot;:false,&quot;bktornpi&quot;:true,&quot;rphogpy&quot;:&quot;x9&quot;,&quot;haujyaucxzei&quot;:false,&quot;iwlcdg&quot;:-610753749.6952323,&quot;kceybqeah&quot;:-1853805624.88945,&quot;ybeyu&quot;:1699710361.70739&#125;,&#123;&quot;gnstbh&quot;:-737756022,&quot;pilzbxk&quot;:664143014&#125;],false,[false,false,&quot;pLtn&quot;,true,false,&#123;&quot;gpmostloq&quot;:-865152099,&quot;zafrmnmghkl&quot;:218863841,&quot;cmtsvjrvakan&quot;:-162135924,&quot;muepjxz&quot;:&quot;sFfBgE8Bx0cobPV&quot;,&quot;drcmqklwgct&quot;:false,&quot;zmpsnm&quot;:false,&quot;eauvud&quot;:false,&quot;ryfwqqlmmd&quot;:false,&quot;kwnoppbpnsmb&quot;:&quot;Mmjmd&quot;&#125;,[false,&quot;92uA7ai&quot;,&quot;r&quot;]]],&quot;sayfqsfq&quot;:false,&quot;fnbjr&quot;:&quot;QK6Hr70vh&quot;&#125;,false,true],-472853662.4448299,true],&quot;cxkhqrw&quot;:&quot;0nGMZPXIra&quot;&#125;,&quot;imfuplhgiwhk&quot;:&#123;&quot;qjhvib&quot;:&quot;8IyQoO&quot;,&quot;orsrzxgtsb&quot;:1292823399,&quot;mbynbhot&quot;:&#123;&quot;pyuli&quot;:false,&quot;heqddbzbnyp&quot;:true,&quot;wttmwcvzviy&quot;:[&quot;Bp&quot;,[&#123;&quot;jnchantot&quot;:true&#125;,&#123;&quot;dkptm&quot;:354362032,&quot;anturqnxcz&quot;:true,&quot;gzigxkct&quot;:true,&quot;olrwarm&quot;:&quot;RaRSSwTQbjZk_3&quot;,&quot;kdexbf&quot;:-1134244493,&quot;cfvjxfmer&quot;:false,&quot;fiwjnl&quot;:439148158.9310619,&quot;etztrahkyo&quot;:&#123;&quot;gmerwjgedjjp&quot;:[-1538417527.5285602],&quot;ptotwujtafjw&quot;:&quot;nGUMOZukFDWlZndwX3Px&quot;,&quot;vmtjndm&quot;:-1479864667.9845788,&quot;vmocikpz&quot;:-1287967612.8102922&#125;&#125;,true,&#123;&quot;nxcdq&quot;:[[&quot;b&quot;,656668891,&quot;DqpijPJrVDlettaC&quot;,&quot;_o&quot;,-1919447255,true],-1617755327],&quot;kmdcansh&quot;:1208614146,&quot;zdyedhs&quot;:[&quot;D215CQQhHgeToBnY5&quot;,&quot;qpRT_ea9M2Y8dqHLB&quot;],&quot;hepxsrse&quot;:[[-1942979877.238561,&quot;Ps&quot;,true,-375007148.0616856,1954411601,false,&quot;rxdRh4Ke0Jxy_7U&quot;],[true,-1390161506.4010656,true,&quot;zk75J&quot;,&quot;PhGQjT9F&quot;,1105317246,true,&quot;av2Lyc41Jin1NVTHk&quot;,1662949484,&quot;PDpMkpvt&quot;],[-710870718.6919433,&quot;_MpcASWA3El_OZvl&quot;,&quot;UqwPY2G__A0ONRITdC&quot;,&quot;2AK6YQvILMYW2rgMtIR0&quot;,46781308.50995451,-1082934575.6245272,&quot;-e&quot;,false,true],[false,2134628024.4587543,true,&quot;jx8v&quot;,false,1876930590,false,&quot;5KM2ugF9PI6J&quot;],false,-107392713.44453588,&quot;R6VUhikWLVMZm&quot;]&#125;,1259697074.6462932,[&#123;&quot;toglnt&quot;:&#123;&quot;iwopo&quot;:&quot;89251xnQhx&quot;,&quot;ktfzttpzwx&quot;:-2037447591,&quot;awabvkytkjv&quot;:&quot;YLVCGCnrkBio-tw08&quot;&#125;,&quot;iuynmtt&quot;:&quot;SjTUgd9cOctE3p&quot;,&quot;wwuur&quot;:&quot;zoHNg&quot;,&quot;naebrmmoqxy&quot;:true,&quot;crqov&quot;:&#123;&quot;rxpqw&quot;:&quot;ckVaikc&quot;,&quot;megplgvw&quot;:-2044893926,&quot;wngyaxjp&quot;:-1084465958.3196049,&quot;fwbtypgo&quot;:false,&quot;bbsev&quot;:&quot;H&quot;,&quot;ybjakrcecaq&quot;:true&#125;,&quot;onougn&quot;:false,&quot;rvnkzpn&quot;:&#123;&quot;nnhqip&quot;:&quot;kLn8_&quot;,&quot;ypjkwlj&quot;:312424844,&quot;enlhpfmv&quot;:-1197259304.2705925,&quot;bbbwj&quot;:-2103946056.6571527,&quot;grspouef&quot;:true,&quot;lftutyui&quot;:&quot;b0PuyT&quot;,&quot;jgjmy&quot;:true&#125;,&quot;pjnyqabebgj&quot;:-132314178,&quot;ishqpf&quot;:&#123;&quot;wvakwucx&quot;:-581471498&#125;,&quot;gzugdiaiuzbm&quot;:&quot;zXkp&quot;&#125;,false],&quot;ndf5&quot;,[&#123;&quot;rhhtwrmgxpm&quot;:&quot;G05e&quot;,&quot;jlvvkykv&quot;:[&quot;u1T32x5lX8&quot;,-1723766686,&quot;YcMY-5&quot;,true],&quot;bchwdl&quot;:[&quot;STwyDc9UBPpgP2&quot;,27612460.880995132,-1652795712.0669658,&quot;7&quot;,false,&quot;1&quot;,&quot;tZbb52BQiOtetF2i5DC&quot;],&quot;rpjrt&quot;:&#123;&quot;xinthorjjycb&quot;:&quot;_OH_v&quot;,&quot;frluklvyhky&quot;:830881421,&quot;tmhcb&quot;:&quot;mxRhLgfO95eJr8KWu&quot;,&quot;qqgub&quot;:false,&quot;lamcddumvcdj&quot;:772457539.076735&#125;,&quot;rwcpyksy&quot;:true,&quot;cnqrfff&quot;:-805142592&#125;,[[true,true,-1162363347,&quot;KLmDqQ8JQdY_RMFU_Y6&quot;,1178945129,61689325],[&quot;TbENO_SJGY1&quot;],false,&quot;aTA0o&quot;,true],-940004004.1262656,&quot;2k03aErkURB35&quot;,&#123;&quot;kknkgfju&quot;:[&quot;laBs&quot;,&quot;vTFKxgam85NCqhAo8K&quot;,-475924513,184668320,false],&quot;aulnznc&quot;:113528287,&quot;tevgjxwb&quot;:&quot;9LxCWMVXgCcMF&quot;,&quot;rtzdfm&quot;:&quot;-DmxhNABw&quot;,&quot;embamnrk&quot;:&quot;mB1O-9o&quot;,&quot;zpmgmpnwm&quot;:[&quot;_5rVeU9QiHvDGhk&quot;,-612755838,125373001.04389116,&quot;5mPTgVVg7Bx1&quot;,&quot;x8MHWsUH9jcGOsLRmp&quot;,-15465413.268159417],&quot;yrpqz&quot;:[&quot;-LIrzGi7fqt2UB&quot;,2033025113,&quot;yC-M1CN81KVnoca&quot;,-1106104252,-135012063.9122812,true,-413068327,&quot;H4Y4XgCeoOzeJUeQg8&quot;,false],&quot;evzhnw&quot;:&#123;&quot;zeysamvpz&quot;:&quot;Yw21jiAggY&quot;,&quot;zyyjwubdxh&quot;:true,&quot;xkgtwplyr&quot;:-57063511,&quot;xtvbaeifqsmo&quot;:&quot;XFSdi2xc9qjBZbZ41&quot;,&quot;wnadryw&quot;:609575955.6189022,&quot;vohkke&quot;:582675731.4728001,&quot;ffklqfuivwt&quot;:false,&quot;ifllziw&quot;:-1177380009,&quot;ypozo&quot;:&quot;sdkhyu7jc&quot;&#125;&#125;,478423673.68756074,&quot;B72BJ&quot;,829828879.8784968,&#123;&quot;kgkikoha&quot;:&#123;&quot;bcwphdckdlwh&quot;:true,&quot;emvvveoys&quot;:-2030390705,&quot;xrxnryc&quot;:&quot;ebHwERrLsUWu0NxSot&quot;,&quot;hrxndfq&quot;:-790783922.0827127,&quot;wxfdmkqxpq&quot;:false,&quot;ornjg&quot;:false&#125;,&quot;cgqbbt&quot;:-1518335512.8801334,&quot;quhfxhzsk&quot;:[&quot;HzczrLh&quot;]&#125;]],false],&quot;zcsetlfwxlnx&quot;:[1036878338.6690581,false,false,true,&quot;5aP1eI&quot;,[false,true,[[&quot;F&quot;,1532511229.641169,&#123;&quot;wizbakib&quot;:false,&quot;xgaoizblpzr&quot;:&quot;eMbJwLH2nI6&quot;,&quot;gpwxicl&quot;:false,&quot;xelico&quot;:&quot;hHzceP4lmFNs3bTE&quot;,&quot;yalkt&quot;:-203739565.87083414,&quot;bvghrpukae&quot;:219631202.77167004,&quot;zdtumhfuj&quot;:-563301966,&quot;nquwcxwwre&quot;:2790463.0823330586,&quot;itjqbgjahhzj&quot;:751477177,&quot;cpzfhpj&quot;:&quot;3CC800xm4LCDxgLbr&quot;&#125;,[true,&quot;4j342VV&quot;,-2077186047.8497515,433417780.1889818,&quot;4q74TZD&quot;]],[[&quot;SKPf5dW&quot;,&quot;mODk2gOwrIszHbXUVHM&quot;,-979092430.6236501,false,1298694799.159157,&quot;zadZW35S5_qot51A&quot;,false,&quot;4X1RI_EvY4PTNGer&quot;,true],&quot;FGFpxHpdiyeRbsx&quot;,&quot;WaWEADS1sZu7kHC&quot;,&#123;&quot;iervlaz&quot;:true,&quot;cwlfmjqc&quot;:false,&quot;mosmkbjfwxue&quot;:true&#125;,&#123;&quot;gunkrlk&quot;:false&#125;,&#123;&quot;bdbydt&quot;:810975758.0239561,&quot;kkebtjhi&quot;:&quot;Qc3_YAYA&quot;,&quot;zwnpqeuv&quot;:-1597741863.6257539,&quot;ipvanzyzegfo&quot;:true,&quot;pizmypnb&quot;:&quot;-Y8iN&quot;,&quot;ddyzzitpecyl&quot;:false&#125;,&#123;&quot;evguirlfrw&quot;:6902238,&quot;sniasfbuy&quot;:-1886034340,&quot;poagxgzze&quot;:true,&quot;vrgtwdhwdm&quot;:false,&quot;itjifqxs&quot;:false,&quot;tqgkcj&quot;:-1454367790.0141711,&quot;utvdeilhkia&quot;:false,&quot;aznyl&quot;:-794902496.7805009&#125;,&quot;HA&quot;,&quot;64mLzi-irAC9&quot;,&#123;&quot;zcogirhp&quot;:false,&quot;qcgciuaug&quot;:false,&quot;fbyzzeeljlgx&quot;:-1660114409,&quot;jtubxxouxm&quot;:&quot;ciEnWlu_nOQq2ST8DDNb&quot;,&quot;czufm&quot;:1410826284,&quot;cmojidpsux&quot;:true,&quot;bsuiz&quot;:false,&quot;gwlwg&quot;:&quot;fT2VuDcYd&quot;,&quot;utwalathu&quot;:false&#125;],true],&quot;16Xuyxsvo98Xpr5&quot;,[&#123;&quot;agatfvvzlnqd&quot;:false&#125;,&quot;ihf&quot;,&quot;C7ajidJwC1k&quot;],&quot;P&quot;,true,&quot;2PP&quot;,-1758883893.530147,&#123;&quot;gqjvcqbz&quot;:&#123;&quot;ledqsixls&quot;:false,&quot;cpordcfft&quot;:&#123;&quot;qcvueckjkg&quot;:-1912923674.4505131,&quot;cntoptj&quot;:1246388686.2979558,&quot;nzzdv&quot;:1964609976.9675019,&quot;mqlyzhf&quot;:&quot;BznBrvdJrDfyk4iIlKf&quot;,&quot;ybnew&quot;:false,&quot;aegjv&quot;:&quot;b5FnWeCt&quot;,&quot;ertceb&quot;:false,&quot;lfctgivmgmjq&quot;:false,&quot;niyup&quot;:-1986763492&#125;,&quot;tpoczjrid&quot;:&quot;3uunbkskIBR79N7&quot;,&quot;vakbs&quot;:false&#125;&#125;]],&quot;wlxgxjojeegi&quot;:&quot;7TusG-XZok2HFplW5hqC&quot;,&quot;dfmsypja&quot;:[[&quot;h&quot;,263274239,&#123;&quot;mghfubmhcivc&quot;:&quot;YtZ2vi82RDul4-Mw0&quot;,&quot;vfanmgmrp&quot;:442896172.497882,&quot;jkugariehmb&quot;:[&#123;&quot;nmxvdp&quot;:true,&quot;gltsojvostq&quot;:1550063322.9341767,&quot;invhrepwod&quot;:false,&quot;mwentmmhww&quot;:false,&quot;kqcozqgrrcno&quot;:&quot;Zrpy&quot;&#125;,false,false,-1971785328.170233,-2071173730.4198024,&#123;&quot;jrqeblzy&quot;:false,&quot;fcjfyfz&quot;:785019292,&quot;yzatqgib&quot;:&quot;BWzF&quot;,&quot;uygewmjxnm&quot;:&quot;uVyjIP&quot;,&quot;gxmkxd&quot;:-860976350.3925823,&quot;fxbihpq&quot;:&quot;JsS&quot;,&quot;phkkf&quot;:false&#125;],&quot;kaaohawstio&quot;:201298083,&quot;goicss&quot;:-653255185&#125;,true,true,true,&quot;4bil-&quot;],&#123;&quot;zsdsrbwbe&quot;:&#123;&quot;xsrmhf&quot;:1683366574.3039901,&quot;rfhuzwc&quot;:true,&quot;ovbwegarxku&quot;:2125173230.9514544,&quot;gwjpcxtzzwu&quot;:false,&quot;abjxgq&quot;:&quot;RqF41LrVzx0-&quot;,&quot;hkrbjn&quot;:&#123;&quot;lmnbomjzsn&quot;:false,&quot;chdalnkjiyw&quot;:[&quot;ksvYQbXJI&quot;,true,&quot;p4oZyxWjj0la&quot;,false],&quot;jhanewllpua&quot;:&quot;RVpCArjzU&quot;,&quot;vpkbunqug&quot;:&quot;s6-NMf5XTbee6ffRz&quot;,&quot;egmmsb&quot;:&#123;&quot;erhzsjw&quot;:&quot;y9xYHj&quot;&#125;&#125;,&quot;pettg&quot;:993396776.5461912&#125;&#125;,&quot;m6&quot;]&#125;&#125;,&quot;muqqk&quot;:&quot;hlvXeAS56cq2Tse9xWFO&quot;,&quot;ceuamw&quot;:1524060976&#125;&#125;,&quot;iuzdaqhynbn&quot;:-370371371&#125; 执行完毕可以得到输出如下 (json (object &#123; (kv &quot;jiblisca&quot; : (v true)) , (kv &quot;untqhvhmvm&quot; : (v &quot;xgQwUW39uJ5ypfQpOKRY&quot;)) , (kv &quot;jnjibur&quot; : (v 268757502)) , (kv &quot;lqpfrifpio&quot; : (v (array [ (v &quot;NQRib805YL0XJn&quot;) , (v (array [ (v (array [ (v false) , (v (array [ (v -1580033815.1137862) , (v (array [ (v &quot;yHv&quot;) , (v false) , (v &quot;udDTLXohYfPu-PyG&quot;) , (v 1332240391) ])) , (v 518407756.13681334) , (v (object &#123; (kv &quot;ctuysyrz&quot; : (v (array [ (v true) , (v &quot;0NFL&quot;) , (v &quot;jec6pJw&quot;) , (v (object &#123; (kv &quot;cwqfrhum&quot; : (v -783147957.874186)) , (kv &quot;xtubtlfckuao&quot; : (v -368517848.71591294)) , (kv &quot;ywrahr&quot; : (v &quot;MIR&quot;)) , (kv &quot;jfaehyg&quot; : (v true)) , (kv &quot;fbzoxj&quot; : (v &quot;2ntMW&quot;)) &#125;)) , (v 172065695) , (v (array [ (v false) , (v -1637596578) , (v (object &#123; (kv &quot;iwxowaesjgo&quot; : (v (array [ (v &quot;k-zAI&quot;) , (v 2057666098) , (v &quot;zWQEyHPRNR8vuy-zN&quot;) , (v false) , (v -1106132231.291643) , (v true) , (v true) ]))) , (kv &quot;zcohkx&quot; : (v -1858649698.353925)) , (kv &quot;rnwnjtlpwbmr&quot; : (v -1975656507.3243446)) , (kv &quot;nhirxtpj&quot; : (v (array [ (v true) , (v &quot;Y&quot;) , (v &quot;z6YpDrySLrmdCp2HmJg&quot;) , (v &quot;8w&quot;) , (v 1445567342) , (v true) , (v 93210936.93854937) , (v false) , (v true) , (v true) ]))) , (kv &quot;yszjc&quot; : (v &quot;HdN9_KP3tONwG&quot;)) &#125;)) , (v (object &#123; (kv &quot;uwnxwxsu&quot; : (v (array [ (v 201196508) , (v 291579062) ]))) , (kv &quot;wstwlmtelch&quot; : (v -398145147)) , (kv &quot;ofbncxfxtv&quot; : (v false)) , (kv &quot;wtpznvkz&quot; : (v &quot;gVjYLVfaUhKzH&quot;)) , (kv &quot;cavizm&quot; : (v -962506056)) , (kv &quot;tqxbvlrj&quot; : (v true)) , (kv &quot;bkscbyjpvvxv&quot; : (v &quot;ePDg&quot;)) , (kv &quot;ehjnbj&quot; : (v &quot;OAq&quot;)) , (kv &quot;aahdlcb&quot; : (v (array [ (v 1525086695.729831) ]))) &#125;)) , (v &quot;v&quot;) , (v &quot;63h1&quot;) , (v 803121240.8479614) ])) , (v &quot;KRzBaY&quot;) , (v true) ]))) , (kv &quot;ymzew&quot; : (v -1558737088)) , (kv &quot;nuzkphun&quot; : (v true)) , (kv &quot;dmnasuc&quot; : (v 625973610.6807092)) , (kv &quot;ziawhxcnji&quot; : (v (array [ (v 572866483) ]))) , (kv &quot;yxfkhyze&quot; : (v (array [ (v 815113315.8538294) , (v -2129300018.6161578) ]))) , (kv &quot;pmszful&quot; : (v true)) , (kv &quot;xngtw&quot; : (v true)) , (kv &quot;eujepvqlv&quot; : (v (object &#123; (kv &quot;lspcfzthqdnt&quot; : (v (array [ (v false) , (v (object &#123; (kv &quot;dthfxdx&quot; : (v false)) , (kv &quot;noxfk&quot; : (v &quot;tJ&quot;)) , (kv &quot;yiditdjduxgf&quot; : (v 1004394045.6336272)) , (kv &quot;qcrcgr&quot; : (v (array [ (v -1267017025.0959017) , (v false) , (v &quot;klMrb2Y39rWkr9DJ&quot;) , (v &quot;NuR-M1USRv4w75MUbf&quot;) ]))) , (kv &quot;akmiakh&quot; : (v &quot;VRyHYn2Ro-RjXK&quot;)) , (kv &quot;ecjfyqg&quot; : (v &quot;6B-oZO6N9rrIe&quot;)) , (kv &quot;dirvsino&quot; : (v true)) , (kv &quot;szvdicetf&quot; : (v &quot;WfHXmN9FzD&quot;)) , (kv &quot;wfynw&quot; : (v &quot;xaL&quot;)) , (kv &quot;jjcblbklo&quot; : (v -1107045875)) &#125;)) , (v -765645410) ]))) , (kv &quot;hzqdqjvikdnw&quot; : (v (array [ (v 1256577984.9352612) , (v &quot;DS&quot;) , (v &quot;R_7TYx1AUChH&quot;) , (v &quot;E9KOhaCLscFOF4clmR&quot;) , (v &quot;H0lI3&quot;) , (v 610691776) , (v -663230838) , (v -1898258501.1059694) , (v (object &#123; (kv &quot;lcqglazzgh&quot; : (v 1662343864.886904)) , (kv &quot;jncbdhbq&quot; : (v (array [ (v -49003190.47029225) , (v &quot;TAjz2-nQwbKCiOdyY&quot;) , (v false) , (v true) ]))) , (kv &quot;rkxio&quot; : (v &quot;X3MUIWd2i&quot;)) , (kv &quot;yeizypbptk&quot; : (v (object &#123; (kv &quot;wbpsmoblfpqe&quot; : (v 1471474993)) , (kv &quot;eqfji&quot; : (v false)) &#125;))) , (kv &quot;kawpokrxba&quot; : (v (object &#123; (kv &quot;mtstcu&quot; : (v true)) , (kv &quot;ckzjwty&quot; : (v false)) , (kv &quot;cawmkcykq&quot; : (v &quot;ZD-1Fw&quot;)) , (kv &quot;rfsjii&quot; : (v -645766911.695778)) , (kv &quot;vomilk&quot; : (v true)) , (kv &quot;ciyaq&quot; : (v &quot;1yDUk4icGIGEc8K3BrV&quot;)) , (kv &quot;ztaclc&quot; : (v false)) , (kv &quot;uymrarwyedn&quot; : (v &quot;voTvbsP-&quot;)) , (kv &quot;xupizdfxume&quot; : (v -1307890946.6241786)) &#125;))) , (kv &quot;wdiyepddnnvx&quot; : (v &quot;uQ&quot;)) , (kv &quot;yzkhc&quot; : (v (object &#123; (kv &quot;mnonwq&quot; : (v true)) , (kv &quot;qurwnvmj&quot; : (v -1632566694)) , (kv &quot;uttimeumn&quot; : (v true)) , (kv &quot;fkquaxdszzj&quot; : (v false)) , (kv &quot;dvgooxczock&quot; : (v false)) , (kv &quot;znzlahdch&quot; : (v &quot;EyVdBdJnuxv0jWLT_E&quot;)) , (kv &quot;lynmveaeze&quot; : (v true)) , (kv &quot;qcnqohu&quot; : (v &quot;95uLav3ofxkF&quot;)) , (kv &quot;vsephhopgqjs&quot; : (v &quot;IPqxrwtQWzYNAaq&quot;)) , (kv &quot;jekejmmktn&quot; : (v true)) &#125;))) , (kv &quot;pqliuno&quot; : (v (array [ (v &quot;SMx_OFql6pfYbRpD4&quot;) , (v -2037343674) , (v 1745220421.0971427) , (v true) ]))) , (kv &quot;bmonpddi&quot; : (v true)) , (kv &quot;kxkyymmje&quot; : (v 620374657)) &#125;)) ]))) , (kv &quot;zrhvmxdyyjh&quot; : (v (object &#123; (kv &quot;vzgdb&quot; : (v &quot;fQ2&quot;)) , (kv &quot;dkkjfan&quot; : (v 2093289195.6157095)) , (kv &quot;hxilf&quot; : (v &quot;15wq_4A88P-q6abYokW&quot;)) , (kv &quot;ztwygkl&quot; : (v (array [ (v (object &#123; (kv &quot;yilav&quot; : (v 295047340)) , (kv &quot;pkrkp&quot; : (v false)) , (kv &quot;rywas&quot; : (v &quot;QAq5V&quot;)) , (kv &quot;uipzrbdkksk&quot; : (v true)) , (kv &quot;tktlhhhduv&quot; : (v &quot;5hLUAGKF3O7&quot;)) , (kv &quot;ruzukp&quot; : (v 783216430.8641344)) , (kv &quot;tjldf&quot; : (v &quot;K&quot;)) , (kv &quot;myjbnf&quot; : (v false)) &#125;)) , (v &quot;cg_6&quot;) , (v (array [ (v &quot;xquwXCnMV&quot;) , (v true) , (v &quot;6_fSikQUx6pc3i62&quot;) , (v &quot;mmt07av8&quot;) , (v true) , (v &quot;oaoqX9eH6nC1&quot;) , (v false) ])) , (v &quot;brCwv2S98_7wwo&quot;) , (v false) , (v false) , (v (object &#123; (kv &quot;qvbgrnkmi&quot; : (v false)) , (kv &quot;mqnnvbrt&quot; : (v true)) , (kv &quot;begfthdohs&quot; : (v -230310597.31990305)) , (kv &quot;gdegfp&quot; : (v false)) &#125;)) , (v &quot;rJg5&quot;) , (v (array [ (v &quot;IRJsoCgVm&quot;) , (v &quot;QsZ79UIkJX5I&quot;) , (v 1277666032.555033) , (v false) , (v &quot;0Pi8Vb75nuJo9i5Kx&quot;) ])) , (v &quot;2fWQ&quot;) ]))) , (kv &quot;gdplat&quot; : (v (object &#123; (kv &quot;zdwwkejjdegs&quot; : (v (object &#123; (kv &quot;kjyhiaw&quot; : (v &quot;S&quot;)) , (kv &quot;hzcejeqddbm&quot; : (v 1782552098)) , (kv &quot;twqqtdjr&quot; : (v false)) , (kv &quot;mjvfelcjco&quot; : (v true)) &#125;))) , (kv &quot;bjilbcvg&quot; : (v &quot;yi22px&quot;)) , (kv &quot;pqanpuep&quot; : (v &quot;JuTxsd&quot;)) , (kv &quot;kwtoarc&quot; : (v (object &#123; (kv &quot;mqpwehfex&quot; : (v false)) , (kv &quot;nyatqfpf&quot; : (v -81214563)) , (kv &quot;wemrjgsu&quot; : (v 1186467801.6164417)) , (kv &quot;qlukyu&quot; : (v &quot;Q89w4U&quot;)) &#125;))) , (kv &quot;ydhacbl&quot; : (v &quot;7_cNUVl-8xm7eO&quot;)) , (kv &quot;bwclbjew&quot; : (v true)) , (kv &quot;strtrchvyi&quot; : (v (object &#123; (kv &quot;bhrmamzzk&quot; : (v -1741870274)) , (kv &quot;ieyjnxxzo&quot; : (v &quot;GnLM&quot;)) , (kv &quot;vhrkkfvpbu&quot; : (v true)) , (kv &quot;hwnyrvvyc&quot; : (v 18148794)) , (kv &quot;yygbbosckcpj&quot; : (v false)) , (kv &quot;vmlbef&quot; : (v &quot;mx7kKizeTbV6UAgM&quot;)) , (kv &quot;llfdpofuyc&quot; : (v &quot;SI&quot;)) &#125;))) , (kv &quot;araoghzad&quot; : (v &quot;vh5bpGHVrRFHe6jkslA4&quot;)) &#125;))) , (kv &quot;ewxetvji&quot; : (v -1915194954.9288518)) , (kv &quot;vygteulutuia&quot; : (v -687082470.461731)) , (kv &quot;sylvtbpyxpv&quot; : (v (array [ (v true) , (v &quot;Bd1Lbo9HrsosJz&quot;) , (v true) , (v 1661056706.9351947) , (v (object &#123; (kv &quot;napojkmbmtnb&quot; : (v &quot;K8qhBgVf2&quot;)) &#125;)) , (v (object &#123; (kv &quot;tdwgduamqzjr&quot; : (v &quot;5soO7VdYymt&quot;)) &#125;)) , (v (array [ (v &quot;ZT6Lu6v5sA6sxm5Jgc&quot;) , (v true) , (v false) , (v -1331227053) , (v true) , (v -1626944534.757287) , (v &quot;E081lwl_F&quot;) , (v &quot;AY1X5J&quot;) ])) , (v &quot;Mqwrzvv3-4f&quot;) , (v true) ]))) , (kv &quot;cjewk&quot; : (v (object &#123; (kv &quot;jyegnpvxongm&quot; : (v (array [ (v &quot;du-JO_h3ha-cL&quot;) , (v true) , (v 2119526563.8454704) , (v &quot;vQlj-_bKKSg&quot;) , (v true) , (v -1855657706) , (v &quot;shPIK0Qd3kKw&quot;) , (v -1840121992) , (v &quot;MC4bIFkG&quot;) , (v false) ]))) , (kv &quot;nlwdkmaqrow&quot; : (v (object &#123; (kv &quot;wlbqzzaid&quot; : (v false)) , (kv &quot;pxnkojphosvs&quot; : (v false)) , (kv &quot;ruhfnxziqfqc&quot; : (v false)) , (kv &quot;addalck&quot; : (v false)) , (kv &quot;ljlprzknucu&quot; : (v 1753085112.9196386)) , (kv &quot;wltodjniw&quot; : (v &quot;j7&quot;)) , (kv &quot;wnzvrm&quot; : (v -1637888671)) , (kv &quot;vvxjzie&quot; : (v false)) &#125;))) &#125;))) , (kv &quot;szpmjnzv&quot; : (v &quot;wdGmYh6EvoX0NgFkCrkD&quot;)) &#125;))) , (kv &quot;mxihkwltfsbo&quot; : (v (array [ (v (object &#123; (kv &quot;lbcxcgmi&quot; : (v (object &#123; (kv &quot;kyhwprnlaykk&quot; : (v -1654721763)) , (kv &quot;bekokzcfci&quot; : (v -2006218079.6375644)) &#125;))) , (kv &quot;xfyzqnzj&quot; : (v -1101032517.9761262)) , (kv &quot;cqjrtvyqk&quot; : (v 1963190051)) , (kv &quot;wyunlrkugl&quot; : (v -18149228)) , (kv &quot;rizbrtqhgp&quot; : (v -327426495.8731129)) , (kv &quot;ugwabes&quot; : (v (object &#123; (kv &quot;iydrlbh&quot; : (v true)) , (kv &quot;uuexfax&quot; : (v false)) , (kv &quot;iycxiey&quot; : (v false)) , (kv &quot;tctxoyuqud&quot; : (v true)) , (kv &quot;hwxdp&quot; : (v 1436591181)) , (kv &quot;kqtofejlzqk&quot; : (v true)) , (kv &quot;nxkhgpt&quot; : (v true)) , (kv &quot;kshhle&quot; : (v &quot;D-7d3SjgYxwe&quot;)) , (kv &quot;pyonwhiwxs&quot; : (v &quot;UwDWYhFLAmE&quot;)) , (kv &quot;hnzptg&quot; : (v 17851658.762328025)) &#125;))) , (kv &quot;pvwjohqqv&quot; : (v (object &#123; (kv &quot;bskechbkgsj&quot; : (v false)) , (kv &quot;vmondcksu&quot; : (v true)) , (kv &quot;zzzqwthqz&quot; : (v true)) , (kv &quot;qtvwjxgi&quot; : (v 735586632.2417802)) , (kv &quot;tpeszlntwc&quot; : (v &quot;nfMhA&quot;)) , (kv &quot;vducyzcxr&quot; : (v 1258096315.6944892)) , (kv &quot;qubdbxmj&quot; : (v false)) , (kv &quot;ggjdqysfbl&quot; : (v true)) , (kv &quot;yfszvziw&quot; : (v false)) &#125;))) , (kv &quot;ijjmzrikfod&quot; : (v true)) , (kv &quot;jzlbbzu&quot; : (v (array [ (v 1263784951.5696201) ]))) &#125;)) , (v (object &#123; (kv &quot;nmcfopyjjgek&quot; : (v &quot;VmV4m2XTbl2Q&quot;)) , (kv &quot;rahbuqez&quot; : (v &quot;VG5zjBMUrlYSiE1Q&quot;)) , (kv &quot;gjmgvfxy&quot; : (v -1098931132)) , (kv &quot;rlxmdruhfa&quot; : (v -1566201025)) , (kv &quot;bypbzzlkdda&quot; : (v 794168717)) , (kv &quot;sseovyfgmim&quot; : (v 1625400066)) &#125;)) , (v (array [ (v (array [ (v false) ])) , (v &quot;7s&quot;) , (v false) , (v -1792686772) ])) , (v &quot;LcQMp&quot;) , (v (object &#123; (kv &quot;eyskoaiclyrp&quot; : (v true)) , (kv &quot;ykvckqzt&quot; : (v (array [ (v true) , (v 456824446.2293131) , (v false) , (v -194213144) , (v &quot;-0FK8cZ&quot;) , (v &quot;Vs9pqD&quot;) , (v 40955994.64801259) , (v &quot;22O_pduKVdJNjK&quot;) ]))) , (kv &quot;pbcwlrrd&quot; : (v (array [ (v &quot;7CIUVS&quot;) , (v 830635977) , (v &quot;zQgvevNKzJu4J7G1QOD&quot;) , (v &quot;Fy587cYzxdGeHp&quot;) , (v true) , (v false) , (v false) , (v &quot;jHHEiRm1XDip812ay&quot;) , (v &quot;QnJEnGKRWbV2UfV1W2&quot;) , (v false) ]))) , (kv &quot;zycngzbnkhjy&quot; : (v (object &#123; (kv &quot;qveirmselnlr&quot; : (v false)) , (kv &quot;evxpwcjqewr&quot; : (v -1036352108)) , (kv &quot;vsdyhn&quot; : (v 1812991518)) , (kv &quot;sfbamr&quot; : (v 823258991.8101388)) , (kv &quot;ecdbxut&quot; : (v 628749189)) , (kv &quot;kstdpuardsp&quot; : (v false)) , (kv &quot;wvzjhks&quot; : (v &quot;ft-8wgPHQBUAdH&quot;)) , (kv &quot;kubndyydkez&quot; : (v false)) &#125;))) , (kv &quot;ukaira&quot; : (v &quot;drHL&quot;)) , (kv &quot;vubyzwj&quot; : (v (object &#123; (kv &quot;vyfvwnrhbrx&quot; : (v true)) , (kv &quot;tsctapcrvsr&quot; : (v -1542183906)) , (kv &quot;wdhbubeacsxq&quot; : (v &quot;F8F26oXlr-sWjbo8d8sL&quot;)) , (kv &quot;zxzfhcpdvkld&quot; : (v false)) , (kv &quot;mhbbn&quot; : (v false)) , (kv &quot;lpqsvxjy&quot; : (v true)) , (kv &quot;jvumeskjakwo&quot; : (v &quot;9t8TDE1cRD&quot;)) , (kv &quot;hcxjdwthfx&quot; : (v -2123335432.551466)) , (kv &quot;kcnrcjvcg&quot; : (v &quot;HsOu&quot;)) , (kv &quot;vnbdjdormw&quot; : (v &quot;pZlFuTOHYPun0PBquau&quot;)) &#125;))) , (kv &quot;jvpcmje&quot; : (v (array [ (v -1287661073.8969119) , (v -1746956894.5312994) , (v false) , (v false) , (v -545292372) , (v 301226574.6635491) , (v &quot;mZmwhtjFKAmjbc0H&quot;) , (v true) , (v 1243514255.4264624) , (v &quot;CIlmMi3_OpKE&quot;) ]))) , (kv &quot;bardgjjvw&quot; : (v (object &#123; (kv &quot;owoutcbzxw&quot; : (v true)) , (kv &quot;helht&quot; : (v -2029186276)) , (kv &quot;ndiege&quot; : (v -1770369600.9380581)) , (kv &quot;ocfmcz&quot; : (v &quot;UG0EKrZj8OHvj&quot;)) , (kv &quot;bkrdqcwrsy&quot; : (v false)) &#125;))) , (kv &quot;tayncq&quot; : (v -54301328.77438324)) , (kv &quot;qklilfdlqxe&quot; : (v (object &#123; (kv &quot;ocslcoybsgw&quot; : (v true)) , (kv &quot;whdqqqkzk&quot; : (v &quot;GGNYDPm6mG&quot;)) , (kv &quot;wbfyotuusoxl&quot; : (v 638734799)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;disbiih&quot; : (v false)) , (kv &quot;filrn&quot; : (v true)) , (kv &quot;knoyfaafb&quot; : (v -95015850.7195931)) , (kv &quot;snfohgsazpbm&quot; : (v (object &#123; (kv &quot;aomgjb&quot; : (v &quot;-T9VijaYOtERd2or2&quot;)) , (kv &quot;lriqgm&quot; : (v &quot;UBjV&quot;)) , (kv &quot;srdrt&quot; : (v false)) , (kv &quot;hjylsqnvnrtx&quot; : (v 1329372693)) , (kv &quot;reiabljj&quot; : (v false)) &#125;))) , (kv &quot;fdyrtpjx&quot; : (v (array [ (v false) , (v 729402067) ]))) &#125;)) , (v (object &#123; (kv &quot;rwamjrihx&quot; : (v (array [ (v &quot;mze0hyu&quot;) ]))) , (kv &quot;vcupnfbzrvt&quot; : (v &quot;PIfgD&quot;)) , (kv &quot;dasvddzwmy&quot; : (v &quot;yeqIvyBzrV&quot;)) , (kv &quot;sbnqmmiieuo&quot; : (v (array [ (v &quot;KEP6ZemQnPJLO_&quot;) , (v -213839080.27558124) , (v true) , (v -778141096.7149704) , (v -511285001) , (v true) , (v true) , (v -1409391923.8947365) , (v true) , (v false) ]))) , (kv &quot;dtdrecwqgx&quot; : (v &quot;YTxIK6tkL&quot;)) , (kv &quot;recwbj&quot; : (v 180381864)) , (kv &quot;jtriyomlywu&quot; : (v &quot;_z&quot;)) , (kv &quot;rlbzpfilgom&quot; : (v 1892960222.0466895)) , (kv &quot;saaharnhz&quot; : (v (object &#123; (kv &quot;qfqlbiqbetwt&quot; : (v &quot;2KEKdjOK&quot;)) , (kv &quot;ijabzieic&quot; : (v &quot;V8PHcdPI30XMnB&quot;)) , (kv &quot;sjkjh&quot; : (v -1883729491.4951746)) , (kv &quot;trqvcpo&quot; : (v false)) , (kv &quot;nzkvqmu&quot; : (v true)) , (kv &quot;yscdg&quot; : (v 231881939)) , (kv &quot;elikaopxgf&quot; : (v -360707300.6376251)) &#125;))) , (kv &quot;wtuznwkbuw&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;jthninrugrt&quot; : (v -554168391)) , (kv &quot;glmua&quot; : (v (object &#123; (kv &quot;vjrluklddk&quot; : (v 63540986)) , (kv &quot;jomqpysixg&quot; : (v false)) , (kv &quot;nqbfunvcrr&quot; : (v true)) , (kv &quot;gsvuhfyacz&quot; : (v false)) , (kv &quot;lreqv&quot; : (v -165167614.71331477)) , (kv &quot;trrnmzgccql&quot; : (v 492353243)) , (kv &quot;rdfjuaulma&quot; : (v false)) , (kv &quot;ifcehyrig&quot; : (v -1934268518.2169318)) , (kv &quot;pwmvpwjtxvfi&quot; : (v &quot;1gr3v3UsM-7daf3gjn&quot;)) &#125;))) , (kv &quot;uzgkoqf&quot; : (v &quot;R5UxS&quot;)) , (kv &quot;eajujwab&quot; : (v (array [ (v true) , (v &quot;V2sCG41NhOk2FqCW3ydN&quot;) , (v 772174639.8927528) , (v &quot;CF8DA&quot;) , (v &quot;4&quot;) ]))) &#125;)) , (v &quot;O&quot;) , (v (array [ (v (array [ (v &quot;lbV&quot;) , (v false) , (v 1761418502) , (v &quot;J5o&quot;) , (v &quot;lFlfxQ6eti20Sn46Im&quot;) ])) , (v false) ])) ]))) , (kv &quot;aapkn&quot; : (v &quot;FS&quot;)) , (kv &quot;yakzjr&quot; : (v &quot;tYFqG_4p&quot;)) , (kv &quot;ydipfdn&quot; : (v (array [ (v &quot;X126_Lh_GrVm_9BjjQn&quot;) , (v 1982430595.9558337) ]))) , (kv &quot;dgnugtfz&quot; : (v (object &#123; (kv &quot;cnsymzwrbzs&quot; : (v (array [ (v (array [ (v &quot;FuoQUHG&quot;) , (v -1965512875) , (v &quot;UN-Qe7TPH6XQ&quot;) ])) , (v -994417255) , (v -1894175665) , (v (array [ (v &quot;_0vHi7-&quot;) , (v &quot;IP&quot;) , (v &quot;G-ZwEtL_Swukzbss&quot;) ])) , (v -72472922) , (v (array [ (v true) , (v true) ])) , (v (array [ (v 595142552) ])) , (v (array [ (v &quot;_dNzcv0Ye6JmRw5-kmm&quot;) , (v false) , (v 803637134) ])) , (v (array [ (v 403663563) , (v false) , (v false) , (v true) , (v 1539934510) , (v false) ])) ]))) &#125;))) , (kv &quot;vyozbnytgq&quot; : (v false)) , (kv &quot;vmjfnbxgzqy&quot; : (v (object &#123; (kv &quot;btfeibdi&quot; : (v (array [ (v true) , (v true) , (v &quot;AC&quot;) , (v (object &#123; (kv &quot;bynbgimwepl&quot; : (v false)) , (kv &quot;lhjyzo&quot; : (v false)) , (kv &quot;zixvof&quot; : (v true)) , (kv &quot;klzndhe&quot; : (v &quot;Co6lO5eIUqC&quot;)) , (kv &quot;yprrdryjihf&quot; : (v 484385304.78962207)) , (kv &quot;rexzifyeguus&quot; : (v false)) , (kv &quot;dhozwsytvyct&quot; : (v true)) &#125;)) , (v true) , (v 27404723) ]))) &#125;))) &#125;))) &#125;)) , (v 158972698.9406029) ])) , (v &quot;Mr6rqIFaH17EnLvu&quot;) , (v 1338384529.814062) , (v -1636767176) , (v (object &#123; (kv &quot;pzkjyu&quot; : (v false)) , (kv &quot;ueubzcmqh&quot; : (v (object &#123; (kv &quot;biuipaxhanzb&quot; : (v false)) , (kv &quot;kbserqp&quot; : (v (object &#123; (kv &quot;oydasspqt&quot; : (v (array [ (v (array [ (v &quot;CQ5iiFKtfc1l&quot;) , (v &quot;_K1bMqx&quot;) , (v (object &#123; (kv &quot;ljprmrcjyo&quot; : (v &quot;ihOplWOF&quot;)) &#125;)) , (v -1964518653) ])) , (v &quot;dcfjFjlHnYDT&quot;) , (v false) , (v 1174820705) , (v 122437011) , (v (array [ (v true) , (v -1449565413) , (v true) , (v false) , (v &quot;s7y_buobO&quot;) , (v true) ])) , (v (array [ (v true) , (v &quot;TWtB&quot;) , (v (object &#123; (kv &quot;vbskgcgc&quot; : (v true)) , (kv &quot;ecxzbqzjoisp&quot; : (v true)) &#125;)) , (v &quot;I0vBXudksTxYYdGrX&quot;) , (v &quot;cGHh91NLPq2&quot;) ])) , (v (object &#123; (kv &quot;sncqalbxjo&quot; : (v false)) , (kv &quot;qxayehqxvwtj&quot; : (v true)) , (kv &quot;fvzbcsddcrhj&quot; : (v 895435215)) , (kv &quot;xyaiodw&quot; : (v (object &#123; (kv &quot;yeltzzrqsu&quot; : (v -341870729.76989406)) , (kv &quot;dygnwsse&quot; : (v -1970524495.648176)) , (kv &quot;rwcnfhvgeev&quot; : (v 567814262.1028857)) , (kv &quot;lsdxckjtn&quot; : (v &quot;KwESkLiT&quot;)) , (kv &quot;wgqqtvvsyl&quot; : (v -145830435)) , (kv &quot;svgfuyw&quot; : (v &quot;ql7fCJ8qiQ3kwFRmxTt0&quot;)) &#125;))) &#125;)) ]))) &#125;))) , (kv &quot;xkdzgn&quot; : (v &quot;3Fj&quot;)) &#125;))) , (kv &quot;axjuu&quot; : (v (array [ (v &quot;L6mLO6&quot;) , (v -984167684) , (v &quot;r8d5irHpRTUGlgZFBV&quot;) , (v &quot;aBs&quot;) , (v &quot;nC9vCHizPaEpFIN&quot;) , (v (object &#123; (kv &quot;dvaddzrssd&quot; : (v -332596958.5065037)) , (kv &quot;jvuvcggsiuz&quot; : (v (array [ (v &quot;iEpMrVrAh5&quot;) , (v true) , (v (object &#123; (kv &quot;miaqwko&quot; : (v (array [ (v true) , (v -425357929) , (v -718503805) , (v true) ]))) , (kv &quot;aacsmj&quot; : (v &quot;gZR&quot;)) , (kv &quot;wsbpvzryqs&quot; : (v false)) , (kv &quot;hogonno&quot; : (v false)) , (kv &quot;udbss&quot; : (v (object &#123; (kv &quot;pjfbfxplyub&quot; : (v false)) &#125;))) , (kv &quot;tgagmd&quot; : (v true)) , (kv &quot;aygjxes&quot; : (v -943541326)) , (kv &quot;zxsalzbtll&quot; : (v -1074059072.7494488)) , (kv &quot;nxtnbmx&quot; : (v (array [ (v true) , (v 1326456217.8351061) , (v 1908692479) , (v &quot;i5ynrh-DkeNbo2B&quot;) , (v true) ]))) , (kv &quot;lscjmbl&quot; : (v 603502062)) &#125;)) , (v (object &#123; (kv &quot;xoujsra&quot; : (v (object &#123; (kv &quot;hyqhknbwym&quot; : (v 1767784907.1715238)) , (kv &quot;gqmsf&quot; : (v true)) , (kv &quot;pnfqie&quot; : (v true)) , (kv &quot;nyztyfdxjvpi&quot; : (v &quot;Q55TNjWjG3LxuNdk&quot;)) , (kv &quot;ivsawtxvi&quot; : (v &quot;NVWQq&quot;)) , (kv &quot;rnnspuv&quot; : (v &quot;i7iuwnYdGXRStQ7GV&quot;)) , (kv &quot;qxwbp&quot; : (v &quot;e7Dr&quot;)) &#125;))) , (kv &quot;dqcwa&quot; : (v false)) , (kv &quot;dpaxxlta&quot; : (v &quot;ZXHSJ&quot;)) , (kv &quot;yzyoounvkcka&quot; : (v &quot;utuPPU_5t9zQeWXup6&quot;)) , (kv &quot;ahxdyvawbq&quot; : (v false)) , (kv &quot;cnnezrdjrhzq&quot; : (v (array [ (v false) , (v true) , (v &quot;K-5EW0Zor4&quot;) , (v -845220584.7628871) , (v false) , (v &quot;YeEnz2&quot;) , (v false) ]))) &#125;)) , (v true) ]))) , (kv &quot;hjtwdnosi&quot; : (v (array [ (v (object &#123; (kv &quot;jdtgbqfq&quot; : (v 517958728.23404163)) , (kv &quot;klhihmk&quot; : (v (object &#123; (kv &quot;osmezf&quot; : (v -766134215.4151874)) &#125;))) , (kv &quot;wzkmsjtekvn&quot; : (v &quot;bh1AwJpPzCqBQ&quot;)) &#125;)) ]))) , (kv &quot;wlxhccizmnut&quot; : (v 1969942335)) , (kv &quot;qkdtuuhd&quot; : (v -1811752052.4570003)) , (kv &quot;elfpdyaon&quot; : (v (array [ (v true) , (v false) , (v (object &#123; (kv &quot;fdchdjvjyodw&quot; : (v (object &#123; (kv &quot;oralim&quot; : (v &quot;9M2Pa2l-Q&quot;)) , (kv &quot;gpwpbvam&quot; : (v 494893201)) , (kv &quot;wqyac&quot; : (v 77549214)) , (kv &quot;pychhvs&quot; : (v true)) &#125;))) , (kv &quot;okiolaiit&quot; : (v 2007046929)) , (kv &quot;zeeagtzix&quot; : (v &quot;7-t&quot;)) , (kv &quot;lbcmjkzt&quot; : (v -1140684548.1196556)) , (kv &quot;stkwdr&quot; : (v (array [ (v -1895721210) , (v &quot;-ZlAi_NLXQzx-SC&quot;) ]))) , (kv &quot;bkjdr&quot; : (v -1296869073)) , (kv &quot;cwwazppmd&quot; : (v &quot;t6cN&quot;)) , (kv &quot;qqntqvcnlvu&quot; : (v &quot;VZLtmUX&quot;)) &#125;)) , (v (array [ (v (array [ (v &quot;BJFdD&quot;) , (v false) , (v &quot;230Sh-o6qSTHSpU&quot;) , (v &quot;mdq&quot;) , (v true) , (v -238599023) , (v &quot;NpYLonTALC2ry-po3O&quot;) , (v &quot;HuMixBZzUNdV7yfr0r&quot;) , (v false) , (v 1124954267.4665008) ])) , (v (object &#123; (kv &quot;rhevoja&quot; : (v 842369568.7730334)) , (kv &quot;aebclq&quot; : (v &quot;mhwa_Wz4Mjppt&quot;)) , (kv &quot;jcggtyupxv&quot; : (v 508271088)) , (kv &quot;bkfzoy&quot; : (v true)) , (kv &quot;stmjeifimow&quot; : (v &quot;0-&quot;)) , (kv &quot;otwbs&quot; : (v &quot;crDswkDn7&quot;)) , (kv &quot;jfzjjhhqdd&quot; : (v true)) , (kv &quot;xoymz&quot; : (v 1900874218.7417052)) &#125;)) , (v (object &#123; (kv &quot;szyzuzf&quot; : (v false)) , (kv &quot;fxgjp&quot; : (v &quot;joyOj15y6M0T&quot;)) &#125;)) , (v -1452828620) , (v true) , (v false) , (v (array [ (v &quot;ctfp0fihku9zAsWc_&quot;) ])) ])) , (v (object &#123; (kv &quot;guwclyincg&quot; : (v (array [ (v true) , (v -1217454902.6520271) , (v true) , (v -648358208) , (v true) , (v false) ]))) , (kv &quot;armydhvhw&quot; : (v (object &#123; (kv &quot;snfjlkvjop&quot; : (v 725387053.5577027)) , (kv &quot;dayajp&quot; : (v -748339341.6063951)) , (kv &quot;akyvnyunjt&quot; : (v &quot;PqPpsm&quot;)) , (kv &quot;wqrwdw&quot; : (v true)) , (kv &quot;xnvmwjysszn&quot; : (v &quot;EvY5GpX&quot;)) &#125;))) , (kv &quot;bfecyzscbczk&quot; : (v (array [ (v -1639613318) , (v true) , (v true) , (v &quot;bNvz6rOIZ&quot;) , (v 2089236185.921759) , (v &quot;4ELy466&quot;) ]))) , (kv &quot;ofbuk&quot; : (v 1449933815.0459795)) , (kv &quot;ruxsrt&quot; : (v (array [ (v -1976758461) , (v &quot;_ZF&quot;) , (v 714248652) , (v &quot;W&quot;) , (v &quot;p-3Wp4G_UZGWoK3&quot;) , (v 1258556787) , (v true) ]))) , (kv &quot;tndcfmcqdx&quot; : (v &quot;K&quot;)) &#125;)) , (v false) ]))) , (kv &quot;hlmuizwob&quot; : (v (object &#123; (kv &quot;yaowq&quot; : (v -1786397961.4578035)) , (kv &quot;kcwoetn&quot; : (v (object &#123; (kv &quot;nmozc&quot; : (v (array [ (v &quot;2E8cXJ41pTj_N&quot;) , (v &quot;xdv--kVvJ9N11q&quot;) , (v -538635596) , (v true) ]))) , (kv &quot;wezpvmjejzi&quot; : (v (array [ (v true) , (v true) , (v 1288583316.9998584) , (v false) , (v 153036486) ]))) , (kv &quot;lhjtfiycpu&quot; : (v (array [ (v 231703163.15602082) , (v -1348377166.3101032) , (v true) , (v &quot;fpgmgOrz&quot;) , (v false) , (v true) , (v -1949734625) , (v &quot;_YoH7Pt1r2I4EH&quot;) , (v &quot;ncMol&quot;) , (v &quot;PNE7A-aA4ZMbnlvjmZ3&quot;) ]))) , (kv &quot;hjemkcivclk&quot; : (v true)) , (kv &quot;wfmgj&quot; : (v 1819818165.573923)) &#125;))) , (kv &quot;ykngsqgret&quot; : (v (array [ (v 653782882.5065004) , (v (array [ (v &quot;ik38S5Fjpmw3tqLmOUq&quot;) , (v true) , (v &quot;XW5iomVzGT03aM&quot;) , (v 171795291.3036271) , (v -536213500.7132387) , (v 2016044858) , (v true) , (v &quot;67k5HcM8MvrG4W3g&quot;) , (v false) ])) , (v (array [ (v &quot;WUT&quot;) , (v -1129141369.7042432) ])) , (v true) , (v true) , (v true) ]))) , (kv &quot;wewhrodks&quot; : (v &quot;pZq9-igQ8duez-2ljx&quot;)) &#125;))) , (kv &quot;gtqsa&quot; : (v (object &#123; (kv &quot;jmvxdhijcto&quot; : (v false)) , (kv &quot;lcmda&quot; : (v &quot;WjOrJ2LYfzKQGJo5&quot;)) , (kv &quot;wfalxb&quot; : (v (object &#123; (kv &quot;ughqdafcs&quot; : (v -9495910)) , (kv &quot;brlppwzlnmgg&quot; : (v 402164226.45842004)) , (kv &quot;ropwwyjawgzz&quot; : (v &quot;iik70xIeU&quot;)) , (kv &quot;aszjnb&quot; : (v 1956944183)) , (kv &quot;yvbqnnbcwrd&quot; : (v -1321431854.5694437)) , (kv &quot;szaksjoreg&quot; : (v -1762152526.1502628)) , (kv &quot;xwbexpijou&quot; : (v -76361776)) , (kv &quot;qllee&quot; : (v (array [ (v &quot;7a369Qx4&quot;) , (v &quot;eaiH3&quot;) , (v -1463573779.8968208) , (v 1859529275) , (v true) , (v &quot;Wc_PmMxb-VjHxPF&quot;) , (v -1394802728.9850135) ]))) &#125;))) , (kv &quot;hyrgp&quot; : (v (array [ (v (array [ (v false) , (v true) , (v true) , (v false) , (v 1600525728.510348) , (v 1477670049.6301804) , (v -1408927035.2439978) ])) ]))) , (kv &quot;ekmzpr&quot; : (v 947171221)) &#125;))) &#125;)) , (v true) , (v true) , (v (object &#123; (kv &quot;hfbnayomqxb&quot; : (v &quot;-tEG9L_MT-lVxhAp4o2h&quot;)) , (kv &quot;ttnwbajxwmid&quot; : (v (array [ (v (array [ (v &quot;SLOITZF8LLfe&quot;) , (v &quot;rEZwSKxZVl6M1fTnIfGw&quot;) , (v (object &#123; (kv &quot;oeury&quot; : (v false)) , (kv &quot;txlxscs&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;yylyftlwcv&quot; : (v false)) , (kv &quot;scfkla&quot; : (v 1112458523)) , (kv &quot;lkkni&quot; : (v &quot;tw&quot;)) &#125;)) , (v true) , (v (array [ (v 1721570529.5780563) ])) , (v (array [ (v &quot;UnaDzaQWp1Hp&quot;) , (v &quot;HC55U8kL9R77jPE2E8&quot;) , (v -31553003.19174124) , (v -1776708183.9907858) , (v false) ])) , (v (array [ (v 740509758.3785872) , (v &quot;myszDs6&quot;) , (v &quot;nY7KhaNOOU7WKBc&quot;) , (v &quot;5Aad&quot;) , (v &quot;RcPhKjHEOl1dmv_&quot;) ])) , (v (object &#123; (kv &quot;rzxyelmc&quot; : (v true)) , (kv &quot;orfoytwdmg&quot; : (v -1804838882)) , (kv &quot;iobeqrngumas&quot; : (v &quot;BIMsvb-hJ6X2hdu&quot;)) , (kv &quot;esxrchfadzoq&quot; : (v -249608084.84166723)) , (kv &quot;cxerxqunemc&quot; : (v true)) &#125;)) ])) , (v -1646832468.5599566) , (v -1764572259.4452567) , (v 1988156300.5752835) , (v 1666583997.4309957) , (v true) , (v (array [ (v (object &#123; (kv &quot;ampbux&quot; : (v &quot;OJmVnnfy&quot;)) , (kv &quot;rlutd&quot; : (v false)) , (kv &quot;bdwfmqvh&quot; : (v &quot;bMx840MVei&quot;)) , (kv &quot;abfqowxspnc&quot; : (v -1293686463)) &#125;)) , (v true) ])) ]))) , (kv &quot;waubayani&quot; : (v &quot;mWUmNyQ-NLiWnxFKH&quot;)) , (kv &quot;xeezilvjywzs&quot; : (v (array [ (v &quot;ulnCAb4OH9l&quot;) , (v (array [ (v -1664174944.4062052) ])) ]))) , (kv &quot;xjjsm&quot; : (v -102469492)) , (kv &quot;uzheaxk&quot; : (v &quot;jKoaTZNvx4TMw&quot;)) &#125;)) , (v (array [ (v -911939157) , (v -302078829) ])) ]))) &#125;)) ])) , (v &quot;iVaLppCSz&quot;) , (v -1142231380.7056024) , (v (object &#123; (kv &quot;usvvvhc&quot; : (v (object &#123; (kv &quot;fqzkuz&quot; : (v (array [ (v (object &#123; (kv &quot;pzlnvdwu&quot; : (v &quot;hzFIgAK&quot;)) , (kv &quot;olymzwfwvtt&quot; : (v (array [ (v -266530806.77854586) , (v 1833340364.8589609) , (v (array [ (v false) , (v 276067264) , (v -782030817.2674904) , (v &quot;f_pgkvk-&quot;) , (v (array [ (v &quot;9Xf&quot;) , (v true) ])) ])) , (v -596590212.4880091) , (v (array [ (v &quot;VmouSaZPJd&quot;) , (v 2012501615) , (v (array [ (v &quot;K5Q0NTy-I5&quot;) , (v -1812848914.9299462) , (v 2138029277.70359) , (v false) , (v -457066934.88024026) , (v true) , (v -1623167784.2607136) , (v false) , (v &quot;EhfGlbMmjlVBx3mjJls&quot;) , (v &quot;u3shbj0cF&quot;) ])) , (v false) , (v -953170684.1374441) , (v true) , (v &quot;NNmzk-HUBFZWs&quot;) , (v &quot;4DRdfhexuYiWS08FjRdn&quot;) , (v 1838005167.2895813) , (v true) ])) , (v -782348539.4130992) , (v (array [ (v (array [ (v 1522396998) , (v true) , (v &quot;XG5lZSp8B&quot;) , (v -201812936.45375398) , (v &quot;5RQ3&quot;) ])) , (v true) , (v (array [ (v &quot;FZ&quot;) , (v -1768876312.0571415) , (v &quot;z7fvJ9f8JC2WkvO1Aucz&quot;) ])) , (v 283632164.9722192) , (v false) , (v (object &#123; (kv &quot;duyrblc&quot; : (v -1820386759)) , (kv &quot;nkgixl&quot; : (v &quot;yr5rcS9FF3LXKaUr&quot;)) , (kv &quot;tmioklyyupt&quot; : (v &quot;jpDzAd6i&quot;)) , (kv &quot;kxswmphsw&quot; : (v &quot;rt6Xw&quot;)) , (kv &quot;wdrqcaqdvin&quot; : (v &quot;Dq0qja1WuOGG5wA&quot;)) , (kv &quot;jnbwuaqxalyo&quot; : (v &quot;3ed&quot;)) , (kv &quot;wyuweibddof&quot; : (v false)) , (kv &quot;bwkzkmnjqx&quot; : (v &quot;e_xakKp&quot;)) , (kv &quot;thpqrdhxevkx&quot; : (v &quot;lHjkQwI2&quot;)) &#125;)) ])) , (v 1125496477.5141318) ]))) , (kv &quot;prlxvt&quot; : (v 1938487863)) , (kv &quot;wwjiarxv&quot; : (v (array [ (v &quot;JAN-2CCVY&quot;) ]))) , (kv &quot;wgsbtd&quot; : (v -1127624748.385507)) , (kv &quot;ipmup&quot; : (v 1600003972.0067897)) , (kv &quot;reijfcfevbn&quot; : (v &quot;r&quot;)) &#125;)) , (v &quot;SJTEA000f&quot;) , (v (object &#123; (kv &quot;hkrfgfnrgzz&quot; : (v false)) , (kv &quot;qklxjqbc&quot; : (v false)) , (kv &quot;ksgpypwfiy&quot; : (v (array [ (v 1288517438) , (v &quot;nwqy3CA&quot;) , (v &quot;aauQ8QZ8n&quot;) , (v (object &#123; (kv &quot;yfykqslkwxs&quot; : (v &quot;bd&quot;)) , (kv &quot;skzwhhffzbgc&quot; : (v (array [ (v false) , (v false) , (v &quot;IYi3RznNg&quot;) , (v -122348317) , (v &quot;h8QhT0&quot;) , (v -1314250165) , (v 415753574.6413267) , (v 1431208413.0203135) ]))) , (kv &quot;taesxczxf&quot; : (v true)) , (kv &quot;kejqi&quot; : (v &quot;zO-jDFolY1OiTE3&quot;)) &#125;)) ]))) , (kv &quot;nskvtkjdftjf&quot; : (v &quot;Irld7TQYyeh8ZNU&quot;)) , (kv &quot;oapspw&quot; : (v (object &#123; (kv &quot;uupdm&quot; : (v true)) , (kv &quot;nllunbvd&quot; : (v (array [ (v false) , (v (array [ (v -1834695793.3633256) , (v -1624924054) , (v &quot;1&quot;) , (v false) , (v false) , (v false) , (v -1939064287) ])) , (v (object &#123; (kv &quot;dfwwkshyv&quot; : (v -1411531788.586073)) , (kv &quot;zofniwaf&quot; : (v true)) , (kv &quot;wfgbkb&quot; : (v -1555546596)) &#125;)) , (v (object &#123; (kv &quot;lvgiefsbbt&quot; : (v -1736935206.7722793)) , (kv &quot;eyhvomnrl&quot; : (v -809972012)) , (kv &quot;feuvewffnqzn&quot; : (v -1505000750.5516632)) , (kv &quot;empkpk&quot; : (v true)) , (kv &quot;boklfpzimof&quot; : (v true)) , (kv &quot;qdrvqqrb&quot; : (v &quot;u2ypVMht7ohG&quot;)) &#125;)) ]))) , (kv &quot;tuzweotgx&quot; : (v 1388990284)) , (kv &quot;rqejjy&quot; : (v 2043367539)) , (kv &quot;xyelmlvi&quot; : (v false)) , (kv &quot;vwzotukl&quot; : (v &quot;ShzdGkF&quot;)) , (kv &quot;gxuefkg&quot; : (v &quot;I0n&quot;)) , (kv &quot;pgqxejuoysiq&quot; : (v -736508110.7389425)) &#125;))) , (kv &quot;amnhqiiisvpg&quot; : (v (array [ (v false) , (v (array [ (v 28287444) , (v 1343029431.5755444) , (v &quot;tWXCIjq3I&quot;) , (v (array [ (v &quot;Im6xjbxPc&quot;) , (v &quot;EnAI&quot;) ])) , (v true) , (v -1133952647) , (v (array [ (v false) ])) , (v (array [ (v 1858642134.4409337) , (v &quot;XWn_4Ld-7jo&quot;) , (v 179514941.64881298) , (v 1510684272) , (v -1808707697.2660255) , (v &quot;0-TEQlXKIlVJQLcth&quot;) ])) , (v (object &#123; (kv &quot;bmjtfov&quot; : (v true)) , (kv &quot;cwcxjngupmqd&quot; : (v 29782138.571137372)) , (kv &quot;zmmxy&quot; : (v -569505818)) , (kv &quot;puagc&quot; : (v true)) , (kv &quot;wevlsnbmbfja&quot; : (v 1534321337.5022151)) , (kv &quot;mfyaxj&quot; : (v false)) , (kv &quot;rzoztndxrihr&quot; : (v &quot;WW&quot;)) , (kv &quot;geyoyfq&quot; : (v &quot;ax&quot;)) , (kv &quot;azdwhljwvda&quot; : (v &quot;dYIz4RvrB2sNNP&quot;)) , (kv &quot;tvrnagirx&quot; : (v 60971197)) &#125;)) ])) , (v &quot;rQfMgL4ZQ-wGV1iku35v&quot;) ]))) , (kv &quot;qingyq&quot; : (v 1762803120.143789)) &#125;)) , (v (object &#123; (kv &quot;dmvawgr&quot; : (v false)) , (kv &quot;udzqpqcl&quot; : (v (array [ (v &quot;y5aWH4qlX&quot;) , (v 565590808.165537) , (v (object &#123; (kv &quot;vvtzutc&quot; : (v true)) , (kv &quot;qxhcbunra&quot; : (v (object &#123; (kv &quot;sdbybtqn&quot; : (v &quot;mFBaz9buWRkmjdew&quot;)) , (kv &quot;nhvcmghbm&quot; : (v true)) , (kv &quot;mzffm&quot; : (v &quot;B4utuXdW&quot;)) , (kv &quot;ouwro&quot; : (v false)) &#125;))) , (kv &quot;ceqoowzve&quot; : (v (array [ (v &quot;x91CDIq-9C1ozreobKu&quot;) ]))) &#125;)) ]))) , (kv &quot;goybpdntid&quot; : (v false)) , (kv &quot;orhketzzarug&quot; : (v &quot;2J6KB-y8f6C1&quot;)) , (kv &quot;zpqubfmr&quot; : (v (object &#123; (kv &quot;hnyjjhs&quot; : (v (object &#123; (kv &quot;xjonatlcldo&quot; : (v (object &#123; (kv &quot;tlsuxnllejc&quot; : (v false)) &#125;))) , (kv &quot;ulmndwqx&quot; : (v true)) &#125;))) , (kv &quot;pygtbupvhji&quot; : (v (array [ (v false) , (v true) , (v &quot;a&quot;) , (v true) , (v (object &#123; (kv &quot;voowytwqolr&quot; : (v -1247701554.1297677)) , (kv &quot;ryxyvkvsh&quot; : (v true)) , (kv &quot;bbktpkspax&quot; : (v false)) , (kv &quot;ayzzgja&quot; : (v 1905564178)) &#125;)) ]))) , (kv &quot;kfyowyelgmt&quot; : (v (object &#123; (kv &quot;fmcuq&quot; : (v -1579449653.3019078)) , (kv &quot;degzr&quot; : (v -800372906.2981399)) , (kv &quot;dtwerzx&quot; : (v &quot;Wp8mQMlmUPqhP&quot;)) , (kv &quot;gmvubk&quot; : (v (object &#123; (kv &quot;kebbpxilwfb&quot; : (v 1895470768.2458827)) , (kv &quot;wtagbpyjybn&quot; : (v true)) , (kv &quot;prktuuffw&quot; : (v false)) , (kv &quot;foywhoyy&quot; : (v 97265018.89559394)) , (kv &quot;bkizy&quot; : (v &quot;IdYg80No408CXB&quot;)) , (kv &quot;miknac&quot; : (v false)) , (kv &quot;aqksp&quot; : (v -1849963173)) , (kv &quot;nbvruldc&quot; : (v &quot;MKRGQCOnIESj_W0A&quot;)) , (kv &quot;ihlpbtxlyqu&quot; : (v &quot;WwbXb&quot;)) , (kv &quot;dxlevjbcozl&quot; : (v &quot;cqwd13CqR0-zIeJGCw&quot;)) &#125;))) , (kv &quot;ixqcrlahohe&quot; : (v false)) , (kv &quot;rbqppk&quot; : (v 21028962.3474731)) , (kv &quot;yytaazpbqmvc&quot; : (v (array [ (v 1323188036) , (v &quot;6W1y-jyOtQ&quot;) , (v true) , (v false) , (v -618331288.0945133) , (v 1669605770.178974) ]))) , (kv &quot;xmovhvrrtg&quot; : (v true)) , (kv &quot;focljncxdmlr&quot; : (v 1309317027.4259272)) &#125;))) , (kv &quot;kbykymuhama&quot; : (v false)) , (kv &quot;clfxbxcygz&quot; : (v false)) , (kv &quot;ytgkzfwrv&quot; : (v &quot;rfSshhH_kiaXvelhGo&quot;)) , (kv &quot;bgbakxabisgu&quot; : (v (object &#123; (kv &quot;pkvsz&quot; : (v &quot;egaMuGBa8Qfa5I&quot;)) &#125;))) , (kv &quot;holjctzbqel&quot; : (v 1651434988.270569)) &#125;))) , (kv &quot;hqpxanby&quot; : (v &quot;r37u1IP&quot;)) , (kv &quot;yxkttnpxwaox&quot; : (v -1863554173.0387821)) &#125;)) , (v (object &#123; (kv &quot;ctgkv&quot; : (v true)) , (kv &quot;qputjogv&quot; : (v &quot;-sxb2nsWb0sQC0Rc&quot;)) , (kv &quot;madfxlfuq&quot; : (v &quot;sPcX-SN8&quot;)) , (kv &quot;ezoahwnyylh&quot; : (v (object &#123; (kv &quot;mzyapdgprmu&quot; : (v (object &#123; (kv &quot;evwgwfvrzp&quot; : (v 932445348)) , (kv &quot;ytszegqwb&quot; : (v (array [ (v &quot;G&quot;) ]))) , (kv &quot;cmsfarxyrev&quot; : (v (array [ (v &quot;C8qR1m&quot;) , (v false) , (v false) ]))) , (kv &quot;xiuasy&quot; : (v (object &#123; (kv &quot;bvoisakdm&quot; : (v true)) , (kv &quot;ayavjwsb&quot; : (v 1278232255.2951758)) , (kv &quot;dxyyvtny&quot; : (v false)) , (kv &quot;ugrjjvmxq&quot; : (v &quot;tPj3SrDB0IF6qCZ&quot;)) &#125;))) , (kv &quot;srvuhe&quot; : (v (array [ (v &quot;qo-ZtMhsK4v5s&quot;) , (v &quot;GFyW&quot;) , (v -123351802.83050978) , (v -1368455574) , (v 1139927106.920848) , (v 47683931.04126628) ]))) , (kv &quot;oelfrw&quot; : (v -166850612)) , (kv &quot;iufibiyc&quot; : (v false)) , (kv &quot;vpqlp&quot; : (v true)) , (kv &quot;ndfibkxmz&quot; : (v 156483043)) , (kv &quot;gfemgvho&quot; : (v 838081767)) &#125;))) , (kv &quot;vxjidsoyps&quot; : (v &quot;PGb5G_1W32Gr1OcbQ&quot;)) , (kv &quot;rgapait&quot; : (v &quot;Ig_fXHvw_XQfwq7A&quot;)) &#125;))) , (kv &quot;sxbstkhmvx&quot; : (v -601966274.7765642)) &#125;)) , (v true) ]))) , (kv &quot;xxxxilq&quot; : (v false)) , (kv &quot;azaxaqohjwmt&quot; : (v 1386916826.7485476)) &#125;))) , (kv &quot;ufnsksfmugc&quot; : (v (array [ (v (array [ (v (object &#123; (kv &quot;egeiifo&quot; : (v 1059812245)) , (kv &quot;alhfcrc&quot; : (v -1565288040.0016382)) &#125;)) , (v (object &#123; (kv &quot;lstxmbc&quot; : (v (object &#123; (kv &quot;hvnxgruzukz&quot; : (v (object &#123; (kv &quot;ymdvclcta&quot; : (v -799970865)) , (kv &quot;gpeykkfuspq&quot; : (v true)) , (kv &quot;nincpakwr&quot; : (v (array [ (v &quot;bqVlhUg&quot;) , (v -114950637.80423953) , (v false) ]))) , (kv &quot;vwiuerby&quot; : (v false)) , (kv &quot;hcpsqijyxwl&quot; : (v (array [ (v &quot;_LmxO-PGsd-GVgaKvrAM&quot;) , (v &quot;mdHhyjwFR8E&quot;) , (v &quot;29uKxRcQ7J&quot;) , (v true) ]))) , (kv &quot;sjhsk&quot; : (v &quot;VOkxfZpvMv&quot;)) , (kv &quot;tmmle&quot; : (v (object &#123; (kv &quot;zomltioly&quot; : (v 342659797)) , (kv &quot;nlpovewuqmmp&quot; : (v true)) , (kv &quot;iioma&quot; : (v 508432360)) , (kv &quot;qfeodjgla&quot; : (v &quot;Nhd9Oa24X&quot;)) , (kv &quot;nhmcokhelqqj&quot; : (v 1357286345.2177863)) , (kv &quot;jagktor&quot; : (v &quot;xXIZjtVVVzwe_opnE&quot;)) , (kv &quot;rhetwomhtd&quot; : (v &quot;bR1lB&quot;)) , (kv &quot;whhlkyvml&quot; : (v false)) , (kv &quot;sptyga&quot; : (v &quot;58&quot;)) &#125;))) &#125;))) , (kv &quot;bcyespjpngip&quot; : (v (array [ (v &quot;Xa0-sRSJVzz&quot;) , (v &quot;dP0bSw-D&quot;) , (v -846722323) , (v (object &#123; (kv &quot;jqdwsxpdw&quot; : (v false)) , (kv &quot;odqdgkhvm&quot; : (v &quot;kFN9XcS4FB&quot;)) &#125;)) , (v 2056245345) , (v (array [ (v &quot;tgFXPN4_19rdn&quot;) ])) , (v &quot;M&quot;) , (v -1470809164.7869449) , (v (object &#123; (kv &quot;ufhegw&quot; : (v true)) , (kv &quot;iazkqhvtoq&quot; : (v &quot;afnqo6mDeP2Xsxq83Ab&quot;)) , (kv &quot;wavqh&quot; : (v &quot;SlfEs5u&quot;)) , (kv &quot;eqzczxdcck&quot; : (v -1380453940.3618248)) , (kv &quot;xnahyqovk&quot; : (v false)) , (kv &quot;vimhaam&quot; : (v true)) , (kv &quot;zaidgqslv&quot; : (v &quot;Rse2&quot;)) , (kv &quot;uakqnpwkev&quot; : (v false)) &#125;)) , (v true) ]))) , (kv &quot;byijcggxyeb&quot; : (v false)) , (kv &quot;frrra&quot; : (v (array [ (v 1273321882.546601) , (v (object &#123; (kv &quot;bkdtsfpjzy&quot; : (v 1353578293)) , (kv &quot;rqfykyl&quot; : (v false)) , (kv &quot;zvtat&quot; : (v true)) , (kv &quot;tbtiqgvrqnc&quot; : (v true)) , (kv &quot;oaiwertwn&quot; : (v 381394347)) , (kv &quot;cdpayscr&quot; : (v false)) , (kv &quot;caskly&quot; : (v &quot;ov&quot;)) , (kv &quot;qqctqbssi&quot; : (v -174402819)) , (kv &quot;fmmnjju&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;jwrnyx&quot; : (v 1540108149)) , (kv &quot;llawzkyebhy&quot; : (v 550464134)) , (kv &quot;aocen&quot; : (v &quot;9&quot;)) , (kv &quot;tbugwy&quot; : (v -785657559.0930029)) , (kv &quot;soyelakldgqv&quot; : (v &quot;aaV&quot;)) &#125;)) ]))) , (kv &quot;snkqlthypi&quot; : (v (object &#123; (kv &quot;lgqphwlv&quot; : (v &quot;5e&quot;)) , (kv &quot;pgwort&quot; : (v (array [ (v &quot;9q2GDxjj6EA0&quot;) , (v true) , (v &quot;IQq20&quot;) , (v &quot;NHziSgT7tXC&quot;) , (v &quot;jOvmpnP45APMj6VSupAS&quot;) , (v &quot;BYMiNR1TRCc933--jWB&quot;) , (v -1324989878) , (v true) , (v 202601235.2834469) ]))) &#125;))) , (kv &quot;jynodrxs&quot; : (v -229028908)) , (kv &quot;kfhdb&quot; : (v (array [ (v (array [ (v false) , (v &quot;HMUrYf6IGF4Q0EnSOm&quot;) , (v 1788715909.1798944) , (v 1002720161) , (v false) , (v 1813446997) ])) ]))) , (kv &quot;lyjub&quot; : (v &quot;AVLk91kJfcOkQ&quot;)) &#125;))) , (kv &quot;azukickdmzi&quot; : (v &quot;hgUoSBFSHwfwf&quot;)) &#125;)) , (v true) , (v (array [ (v -1830050411.707309) , (v &quot;V2pbDFO&quot;) , (v 2136923622.426689) , (v &quot;YiH-Sa&quot;) , (v 42986518.777260296) , (v (object &#123; (kv &quot;itexzdasgzb&quot; : (v (object &#123; (kv &quot;qpqhr&quot; : (v (object &#123; (kv &quot;zbtbpe&quot; : (v true)) , (kv &quot;lfkwatuqgbtj&quot; : (v -1714369248)) , (kv &quot;irfvaosk&quot; : (v &quot;iN7jE-&quot;)) , (kv &quot;kvllcp&quot; : (v true)) , (kv &quot;fhfoo&quot; : (v true)) , (kv &quot;xvjvz&quot; : (v -1454793156)) , (kv &quot;lyubjax&quot; : (v false)) , (kv &quot;ckome&quot; : (v -1412675725)) , (kv &quot;jsvlgwg&quot; : (v false)) , (kv &quot;kurkdvgyo&quot; : (v &quot;hHurh&quot;)) &#125;))) , (kv &quot;vvlghgxnxsn&quot; : (v true)) &#125;))) , (kv &quot;mcwfzdkyq&quot; : (v false)) , (kv &quot;adeoyomffc&quot; : (v 1548960367)) , (kv &quot;owttxei&quot; : (v (array [ (v true) , (v false) , (v (array [ (v &quot;wWJazDa6WAaegP&quot;) , (v 545967908.4459687) , (v &quot;0QysTlzpxu&quot;) , (v 1640572288.6534097) , (v &quot;k5zXkSkCut5ZCq&quot;) ])) , (v &quot;hF8K&quot;) , (v 2018777646) , (v false) ]))) , (kv &quot;tffvcumpi&quot; : (v 1498011014.6961753)) , (kv &quot;rdboodqnzju&quot; : (v (array [ (v 156522948.53122738) , (v &quot;p9I7ba&quot;) , (v true) , (v &quot;5fm2A2FH0dvAd8c&quot;) , (v &quot;DrQQlYn5AlzdUzwx&quot;) , (v (array [ (v false) , (v &quot;NQIGd&quot;) , (v 218207687) , (v true) , (v false) , (v &quot;lEkh7&quot;) , (v false) ])) , (v false) , (v &quot;_ZOzwWOLAw0FAx&quot;) , (v &quot;v67dsKoEDmqSC&quot;) , (v 1687700076) ]))) , (kv &quot;cpipaikzft&quot; : (v 538825608.0691938)) , (kv &quot;uvvvyuvmff&quot; : (v 642661858)) , (kv &quot;vxlreufxgl&quot; : (v (array [ (v -255202773.76708487) , (v (array [ (v &quot;CDFfvQuhrDE&quot;) , (v &quot;fOj8IX&quot;) , (v &quot;P1Md5i&quot;) , (v &quot;KCttk&quot;) , (v 1720484967) ])) , (v (array [ (v false) , (v false) , (v false) , (v &quot;glOQ7CC3Rq&quot;) , (v &quot;ZeysOm8Xrcuh4&quot;) , (v &quot;CTnfQDT2CnUR&quot;) ])) , (v true) , (v 1584066022.3255289) , (v 810670081.4445043) ]))) &#125;)) , (v true) , (v 854302211.0162857) ])) , (v 437006145.3470045) , (v (object &#123; (kv &quot;ofciakb&quot; : (v -174610721)) , (kv &quot;jgiiaqh&quot; : (v &quot;g7oWIJ&quot;)) , (kv &quot;rahwlhedy&quot; : (v &quot;XshbHeI6q0ByspizkDyu&quot;)) , (kv &quot;tloyn&quot; : (v &quot;QaCYk65&quot;)) , (kv &quot;xrrimsvafkqb&quot; : (v &quot;2&quot;)) , (kv &quot;gndyhheqourq&quot; : (v &quot;ncTWjBzT&quot;)) , (kv &quot;fqxffwalaysp&quot; : (v -1220649343.3438647)) , (kv &quot;hilcqrvttzf&quot; : (v (array [ (v (object &#123; (kv &quot;xyxuqicjid&quot; : (v (array [ (v -686442259) , (v true) , (v &quot;2xgSE&quot;) , (v true) , (v false) , (v false) ]))) , (kv &quot;vcrswrmkrrxq&quot; : (v (object &#123; (kv &quot;avwpliogx&quot; : (v &quot;OIUJn2g8&quot;)) , (kv &quot;pesizs&quot; : (v &quot;NMS&quot;)) , (kv &quot;pdhqei&quot; : (v &quot;io&quot;)) , (kv &quot;lksoed&quot; : (v &quot;Ci2gyuNoyhoFGy34-E&quot;)) , (kv &quot;bsgvthoxwew&quot; : (v -583559162.235261)) , (kv &quot;utaeahobmm&quot; : (v -864692808)) , (kv &quot;xamweuvefgsb&quot; : (v &quot;ATIL&quot;)) , (kv &quot;vigxzuglhf&quot; : (v -427564725.84841317)) , (kv &quot;xrmkarvoxktz&quot; : (v -1336149298.6769412)) &#125;))) , (kv &quot;hldzsw&quot; : (v (array [ (v true) , (v 1363062430.8286984) ]))) , (kv &quot;decsandn&quot; : (v &quot;QNnvs8GHi_&quot;)) , (kv &quot;kwjez&quot; : (v (array [ (v &quot;vxgr_39Y5iefRpJrRu8z&quot;) , (v false) , (v 1547917335) , (v false) , (v false) , (v &quot;HhPfgHwQ7Gu-&quot;) ]))) , (kv &quot;tmhdhzzoenbm&quot; : (v (array [ (v false) ]))) , (kv &quot;gbyohmhpbde&quot; : (v false)) , (kv &quot;mtfnj&quot; : (v (array [ (v -1699702608) , (v 985332408) , (v -1815034078) , (v -1413622309.8855631) , (v -2085717593.4400523) , (v 1407784160.48939) ]))) , (kv &quot;ergefuqaunl&quot; : (v &quot;8CENOQt3VEkU1P-JB6Tb&quot;)) , (kv &quot;pnfjtwagjl&quot; : (v &quot;isLLGRDsqKLLuPL&quot;)) &#125;)) , (v (object &#123; (kv &quot;jfnvnzjrvas&quot; : (v -587565188.3387564)) , (kv &quot;taqrkae&quot; : (v &quot;C_94_KfHv&quot;)) , (kv &quot;kpvdasjlv&quot; : (v true)) , (kv &quot;rjtzonifh&quot; : (v (object &#123; (kv &quot;vctwsgao&quot; : (v &quot;xdQSkHmlHKlY4-il&quot;)) , (kv &quot;yifopp&quot; : (v 1406234035.787533)) , (kv &quot;auvpebfqq&quot; : (v &quot;HLLn&quot;)) , (kv &quot;flhvpumykx&quot; : (v false)) , (kv &quot;xzywwymvn&quot; : (v 1653270283)) , (kv &quot;upxnp&quot; : (v true)) , (kv &quot;ifkmnr&quot; : (v false)) , (kv &quot;nkxswbbwqy&quot; : (v -1627803020)) , (kv &quot;whegc&quot; : (v false)) , (kv &quot;qrfyepxtesps&quot; : (v 1517334209.7266629)) &#125;))) , (kv &quot;uuidntxmgctz&quot; : (v 1107173297.2634706)) , (kv &quot;fynzmbl&quot; : (v (object &#123; (kv &quot;oucehooes&quot; : (v true)) , (kv &quot;wigldikwgq&quot; : (v -2062754791)) , (kv &quot;cdkshxakjrd&quot; : (v -2071869785.565263)) , (kv &quot;swfwn&quot; : (v &quot;OtQ0uaz6KX7AtkKL&quot;)) , (kv &quot;hvjejhhf&quot; : (v -2036255945)) , (kv &quot;owzivlf&quot; : (v -1975368684)) , (kv &quot;moouubve&quot; : (v 1454759009)) , (kv &quot;mgpvcbpmj&quot; : (v &quot;dDSwnk-q&quot;)) &#125;))) &#125;)) , (v (array [ (v true) ])) , (v &quot;GIeXKf4YI9N&quot;) , (v -1716528085) , (v &quot;dL986fxNicw&quot;) ]))) , (kv &quot;nrzjrgcivno&quot; : (v (array [ (v &quot;zxJy&quot;) , (v (object &#123; (kv &quot;flekwokf&quot; : (v (object &#123; (kv &quot;chrzxtx&quot; : (v false)) , (kv &quot;tlaypitrxrcg&quot; : (v true)) , (kv &quot;rqovrbh&quot; : (v &quot;rSGtS&quot;)) , (kv &quot;cwxqet&quot; : (v 498858192)) , (kv &quot;uolbpvycxhje&quot; : (v &quot;DN9hNwEYX&quot;)) , (kv &quot;usdclspoyzm&quot; : (v -501600594)) , (kv &quot;hkqho&quot; : (v true)) , (kv &quot;rgexemxrjs&quot; : (v &quot;JYToGeHgVHBez&quot;)) , (kv &quot;tablq&quot; : (v -761106229)) &#125;))) , (kv &quot;kgsseatvemrz&quot; : (v false)) , (kv &quot;jfsjxqvyr&quot; : (v &quot;rQc-LzndacPTFET&quot;)) &#125;)) , (v (array [ (v (object &#123; (kv &quot;pxkuzi&quot; : (v 155012834)) , (kv &quot;rjebalsjayqa&quot; : (v &quot;HtPrksIN7v&quot;)) &#125;)) ])) , (v -38828973.82330755) , (v true) , (v (object &#123; (kv &quot;qltnluhelm&quot; : (v false)) , (kv &quot;awocxhtybq&quot; : (v -1147863638.496814)) , (kv &quot;rnple&quot; : (v false)) , (kv &quot;hgspdpidju&quot; : (v (array [ (v -707962268.7103155) , (v false) , (v false) , (v false) , (v true) , (v false) , (v -1703293578) ]))) &#125;)) , (v &quot;HUdE9z63A3LoAOi1&quot;) , (v false) , (v -1874697115) , (v &quot;5QsgUXTu5Do3gjONN6R&quot;) ]))) , (kv &quot;ivljitunpban&quot; : (v (array [ (v &quot;u&quot;) , (v 172763108) , (v &quot;Wv&quot;) , (v (object &#123; (kv &quot;suplycjurouc&quot; : (v &quot;BxUKVizfXs7qmWNxnF&quot;)) , (kv &quot;gcctzcd&quot; : (v (object &#123; (kv &quot;aywdjhgw&quot; : (v -1358459504.777664)) , (kv &quot;jqiwjd&quot; : (v -301889543)) , (kv &quot;cffdnzjgjvwp&quot; : (v true)) , (kv &quot;odxhcuuv&quot; : (v false)) , (kv &quot;rpmxmjfggbki&quot; : (v true)) , (kv &quot;goerbw&quot; : (v &quot;vbDUol5SzjLE&quot;)) , (kv &quot;icsmd&quot; : (v 1180498061.2653542)) &#125;))) , (kv &quot;wjdczsoeuhj&quot; : (v (object &#123; (kv &quot;gfousxhraqn&quot; : (v &quot;TNViA&quot;)) &#125;))) , (kv &quot;btjtdnxp&quot; : (v false)) , (kv &quot;gxvvecbba&quot; : (v 1312169211.2258654)) &#125;)) ]))) &#125;)) , (v (array [ (v true) , (v (array [ (v (object &#123; (kv &quot;vtetekbagto&quot; : (v (object &#123; (kv &quot;edznxylsm&quot; : (v &quot;kNxwwsdvAInKPYWip0U&quot;)) , (kv &quot;hjpaslu&quot; : (v &quot;ZhmDrjY7ioU&quot;)) , (kv &quot;mjxbopj&quot; : (v -2065787595)) , (kv &quot;xsfxftjs&quot; : (v false)) , (kv &quot;gfhygsfm&quot; : (v true)) , (kv &quot;qgmdk&quot; : (v 827018739)) &#125;))) , (kv &quot;xjaksz&quot; : (v false)) , (kv &quot;nzmlpamehmu&quot; : (v 735253786.4510173)) , (kv &quot;daxfd&quot; : (v &quot;VB4PsY&quot;)) , (kv &quot;buvqtwddn&quot; : (v (array [ (v 2098135094) , (v &quot;PHLKCITfw&quot;) ]))) , (kv &quot;udflozzlkyg&quot; : (v (array [ (v 1961779952.5347717) , (v 1785170000) , (v &quot;uqw3nxatTxu36F&quot;) , (v &quot;CFKrC8kCiEuUT&quot;) , (v false) ]))) &#125;)) , (v false) ])) , (v (object &#123; (kv &quot;kqxmcle&quot; : (v &quot;X8BA11NXhb&quot;)) , (kv &quot;qewgdmmowuu&quot; : (v &quot;Q&quot;)) , (kv &quot;gkseon&quot; : (v (array [ (v (array [ (v -1603302651) , (v true) , (v &quot;Wf2110MvCqcjTOh3v&quot;) ])) , (v (object &#123; (kv &quot;umuyq&quot; : (v false)) , (kv &quot;locnaoewb&quot; : (v true)) , (kv &quot;iwvujfs&quot; : (v false)) , (kv &quot;wmmjmhleazfq&quot; : (v false)) , (kv &quot;opajytbtcdm&quot; : (v &quot;TyxATiSOvShV5af-&quot;)) , (kv &quot;zfckxgk&quot; : (v 350224266)) &#125;)) , (v true) , (v false) , (v (object &#123; (kv &quot;awtsoveqz&quot; : (v 1134185262)) , (kv &quot;ncodth&quot; : (v &quot;gaky7tuPqEE0C&quot;)) &#125;)) , (v &quot;DSqtgTHuNfWi7&quot;) ]))) , (kv &quot;xtuopoolnj&quot; : (v false)) , (kv &quot;xgowkwczwjv&quot; : (v &quot;-9uOjEDl0O4gX&quot;)) , (kv &quot;wdnlav&quot; : (v (array [ (v (object &#123; (kv &quot;tpgohoctng&quot; : (v &quot;Y46LStph&quot;)) , (kv &quot;widgle&quot; : (v &quot;Ngb4LzVfY&quot;)) , (kv &quot;flzprcgveboh&quot; : (v &quot;2dMreZNPc5Q&quot;)) , (kv &quot;euiyic&quot; : (v 757084534.4392618)) , (kv &quot;rborrfq&quot; : (v &quot;9YZH&quot;)) , (kv &quot;mudkvx&quot; : (v true)) , (kv &quot;uhkhesmnaiob&quot; : (v &quot;7vg95u2z57M1Q25C-M&quot;)) &#125;)) , (v (object &#123; (kv &quot;gnczqzvjo&quot; : (v -1891773607)) , (kv &quot;giknkeeuf&quot; : (v &quot;D6ZeuWMNjlEGSjJ&quot;)) , (kv &quot;ugypzkizrld&quot; : (v &quot;94Pzm6l-lf&quot;)) , (kv &quot;bfvyofbn&quot; : (v 76276623)) , (kv &quot;cedymruvgjf&quot; : (v -532730165)) , (kv &quot;avgcykyxuwk&quot; : (v -1061464690)) , (kv &quot;xbusnelkecy&quot; : (v -651789297.1341338)) , (kv &quot;ndhqgjwwxldo&quot; : (v &quot;hNXqDlGLEFaTu9f_&quot;)) &#125;)) , (v (array [ (v &quot;gWSAJs6-CGZ56gAg_Y&quot;) , (v &quot;BPAfpx3e2n0&quot;) , (v &quot;NABtxE6GLd-qka&quot;) , (v &quot;p1qdw0N6r5rD&quot;) , (v &quot;MtVItBGsAhR&quot;) , (v false) , (v false) , (v &quot;ARlvMx&quot;) , (v &quot;jp5WSWtCQrfP&quot;) , (v &quot;lGua4WWpxu7QECDUmrEb&quot;) ])) , (v &quot;2&quot;) , (v -44631012.89008953) , (v (object &#123; (kv &quot;ykgmxa&quot; : (v &quot;7A7zpaE6DfqW81ODsnV1&quot;)) , (kv &quot;rxazfwoptzh&quot; : (v -314219665.38402504)) , (kv &quot;gnyiyaqmnyc&quot; : (v &quot;ret-gAGMPDX1&quot;)) , (kv &quot;krmuhffwvxew&quot; : (v -827107678)) &#125;)) , (v 1951560197) , (v &quot;I2q41pZlE9D5GJM9Ti&quot;) , (v &quot;UHwvhh&quot;) ]))) , (kv &quot;fconiontxfdn&quot; : (v &quot;wPGj-k9r7Gsw9m-lorOr&quot;)) , (kv &quot;horfk&quot; : (v -986402277.1490486)) , (kv &quot;byrfwyebr&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;jkawcat&quot; : (v (array [ (v (object &#123; (kv &quot;eiwsojacsq&quot; : (v 1676112449)) , (kv &quot;jgekmpdhsj&quot; : (v true)) , (kv &quot;kxzjfsr&quot; : (v false)) , (kv &quot;zoxmobvqq&quot; : (v -1025819360.89981)) , (kv &quot;oxpxptidr&quot; : (v &quot;8Jw&quot;)) , (kv &quot;myumz&quot; : (v 2062684081.3193998)) , (kv &quot;ajiapeku&quot; : (v true)) &#125;)) ]))) , (kv &quot;sxjjcmxdqbdz&quot; : (v &quot;bFq2QpiS3Wv&quot;)) , (kv &quot;mxidhsade&quot; : (v &quot;KBmZGynEl&quot;)) , (kv &quot;gogjwvyl&quot; : (v (object &#123; (kv &quot;osblktbs&quot; : (v false)) , (kv &quot;mbjpwu&quot; : (v (object &#123; (kv &quot;fovbzafybwit&quot; : (v &quot;cor6Yj84WMYZZVdj0gR&quot;)) , (kv &quot;kufslrcds&quot; : (v true)) , (kv &quot;aedavebnby&quot; : (v -1008775510)) , (kv &quot;akozzffzo&quot; : (v &quot;kuv_U&quot;)) , (kv &quot;zyjtlrlhyi&quot; : (v &quot;gTiMoPevyTHG&quot;)) , (kv &quot;kiutts&quot; : (v -1869528574)) &#125;))) , (kv &quot;snpymey&quot; : (v -1405478994.7553291)) , (kv &quot;yydbdmay&quot; : (v &quot;UJDkJA8UnpYBifEGR7A&quot;)) , (kv &quot;ydbwea&quot; : (v &quot;mb3&quot;)) , (kv &quot;npmhuprqm&quot; : (v 1345924656)) , (kv &quot;jwqvtfyi&quot; : (v &quot;Vv-zGw1KE5K4KmL4&quot;)) , (kv &quot;dzhwkqbkbvdd&quot; : (v 409088616.6203143)) , (kv &quot;iccnidhljlv&quot; : (v true)) &#125;))) &#125;)) , (v &quot;eBpw8c5&quot;) , (v &quot;fv0FygNy&quot;) , (v (object &#123; (kv &quot;dparw&quot; : (v (array [ (v (array [ (v &quot;64UujJ_a&quot;) , (v false) , (v -1319664683.701457) , (v true) ])) , (v 343007839.0356881) , (v &quot;1ssduUoG3NU&quot;) , (v -230863137.02555355) , (v (object &#123; (kv &quot;agyvksvk&quot; : (v 1224923770)) , (kv &quot;qkmvsy&quot; : (v false)) &#125;)) , (v (array [ (v false) ])) , (v &quot;7TRBmb&quot;) , (v (array [ (v false) ])) ]))) , (kv &quot;mjtol&quot; : (v &quot;Ewvi&quot;)) , (kv &quot;pmduvkbvdjew&quot; : (v &quot;mDz-fviuNzDx0&quot;)) , (kv &quot;dgauwepluvu&quot; : (v (array [ (v &quot;cFayhU5PCb&quot;) ]))) , (kv &quot;ljsisniuv&quot; : (v &quot;-e9Bw0fykhHnQoTNtK&quot;)) , (kv &quot;pvwoizptzx&quot; : (v -1044962708.4456303)) , (kv &quot;vzdmw&quot; : (v 1739167092)) , (kv &quot;zostl&quot; : (v (array [ (v (array [ (v &quot;QMXU&quot;) , (v false) , (v &quot;v&quot;) , (v -1531678963) , (v &quot;Ld&quot;) , (v -915392466.0197387) , (v true) , (v true) ])) , (v -419754185.52356327) , (v &quot;H&quot;) , (v (object &#123; (kv &quot;oojizut&quot; : (v &quot;B1&quot;)) , (kv &quot;zxfcorphhpc&quot; : (v true)) , (kv &quot;yeeusktu&quot; : (v true)) , (kv &quot;eofwvez&quot; : (v &quot;JDfBxoS&quot;)) , (kv &quot;ykniglx&quot; : (v 894496872.6096759)) , (kv &quot;vfmudpukpts&quot; : (v 52724179)) , (kv &quot;tefrfckeznj&quot; : (v false)) , (kv &quot;sphgz&quot; : (v -348481428.2368012)) , (kv &quot;kdgletzzod&quot; : (v -192619065)) &#125;)) ]))) &#125;)) ])) , (v &quot;soLc3ycyACp4J_E&quot;) , (v (array [ (v true) , (v (array [ (v 698327156.9576945) , (v &quot;58-IwRp6vSMoGd&quot;) , (v (array [ (v &quot;lBQcZ5&quot;) ])) ])) , (v (array [ (v (object &#123; (kv &quot;vrimflr&quot; : (v &quot;fmqZnUDIcG6HtrwMYzh&quot;)) , (kv &quot;fqeyl&quot; : (v (array [ (v &quot;oslrVT4aPI&quot;) , (v false) , (v true) , (v true) ]))) , (kv &quot;wjqgoc&quot; : (v false)) , (kv &quot;bbxvpx&quot; : (v -1588328944)) , (kv &quot;kcacsgkzbhsm&quot; : (v 1823753277)) , (kv &quot;dtnexmkn&quot; : (v (object &#123; (kv &quot;mtlopmxnlljh&quot; : (v &quot;qevx7HX5o&quot;)) , (kv &quot;vzippqhu&quot; : (v -83660442.98092143)) , (kv &quot;ctockzclcchc&quot; : (v &quot;72L&quot;)) , (kv &quot;fntbektlg&quot; : (v false)) , (kv &quot;zzbwmvpkg&quot; : (v false)) , (kv &quot;womcvvuq&quot; : (v -1374331395.6846483)) , (kv &quot;biigdjgtvzw&quot; : (v false)) , (kv &quot;yzsokcz&quot; : (v -1864378177.8145332)) &#125;))) , (kv &quot;qnwdg&quot; : (v (array [ (v true) , (v &quot;BGA&quot;) ]))) , (kv &quot;iaphtsnw&quot; : (v (object &#123; (kv &quot;nzmuozxm&quot; : (v true)) , (kv &quot;bvrzv&quot; : (v -1951734142.2764938)) , (kv &quot;jrgdwxvmhuz&quot; : (v &quot;uhTgCYksgDExQTZrn&quot;)) , (kv &quot;otapzat&quot; : (v &quot;amDDWs2BNkNyqMvvsOQ&quot;)) &#125;))) , (kv &quot;apbdjrqoqih&quot; : (v (object &#123; (kv &quot;bihgijjmug&quot; : (v 1578062139)) , (kv &quot;hbahgngaqdgj&quot; : (v -463244010.35605156)) , (kv &quot;xzbyvefdxagh&quot; : (v &quot;COEUoP&quot;)) &#125;))) &#125;)) , (v false) , (v (array [ (v true) , (v (array [ (v &quot;74kweLE&quot;) , (v &quot;L4jwyZJenG&quot;) , (v 2078429203) , (v false) , (v &quot;jnbMtD9f0l05rPo9wKb&quot;) , (v 869401191.1674111) , (v -764084235) , (v &quot;lneU2WKax7TEpaEM&quot;) , (v 971814952.9628687) ])) ])) , (v true) , (v -1565998836) ])) , (v true) , (v true) , (v (array [ (v (object &#123; (kv &quot;exoerrwjv&quot; : (v (object &#123; (kv &quot;gmowcou&quot; : (v true)) , (kv &quot;kecvbhxcpe&quot; : (v true)) , (kv &quot;xrwmphhr&quot; : (v true)) , (kv &quot;cumgpwughusb&quot; : (v 2050389757.2037556)) , (kv &quot;aazqnpi&quot; : (v &quot;8G9jVSuuoudZS&quot;)) , (kv &quot;viuaicdqcs&quot; : (v true)) , (kv &quot;njbeccdcoger&quot; : (v -108041845)) &#125;))) , (kv &quot;wfhpwozki&quot; : (v (array [ (v true) , (v true) , (v false) , (v &quot;J9pThE&quot;) , (v &quot;bj56bo33JtcAuVtFH-&quot;) , (v &quot;tuTSxut5hG&quot;) , (v true) , (v false) , (v true) , (v true) ]))) , (kv &quot;wnmuxly&quot; : (v false)) , (kv &quot;dnefxymgxusr&quot; : (v -1732480955)) , (kv &quot;atzsq&quot; : (v &quot;sAV5u7AglE024AASW_W&quot;)) , (kv &quot;qxkxwl&quot; : (v false)) , (kv &quot;gedlckhckywi&quot; : (v (array [ (v &quot;r4j9iixHwlytAQu9&quot;) , (v &quot;F2j9MQ1kOE&quot;) , (v &quot;0tBcbsKdKSTKMiL&quot;) , (v false) , (v &quot;zduEc_cuOqg&quot;) , (v true) , (v true) , (v true) , (v true) ]))) , (kv &quot;scwmxl&quot; : (v false)) , (kv &quot;lohjxobrc&quot; : (v 1387867700)) , (kv &quot;lnzgcv&quot; : (v &quot;tvO-&quot;)) &#125;)) , (v &quot;gPuBaN0&quot;) , (v &quot;Td&quot;) , (v false) , (v -1810221717) , (v 26261587.327259026) ])) , (v 587226643.9908946) , (v (array [ (v true) , (v (array [ (v (object &#123; (kv &quot;sstsyzjvjcc&quot; : (v true)) , (kv &quot;iydpcko&quot; : (v -660241731)) , (kv &quot;cuinwrkagfnf&quot; : (v -1511733569.0501897)) , (kv &quot;miugqwhluq&quot; : (v -1153831005.8297157)) &#125;)) ])) , (v (array [ (v true) ])) , (v true) , (v (object &#123; (kv &quot;xwtgdypuuoip&quot; : (v (object &#123; (kv &quot;jfdmjy&quot; : (v false)) , (kv &quot;uxzmpo&quot; : (v 1897582818.237855)) &#125;))) , (kv &quot;kbtar&quot; : (v &quot;sfCPlz0Dw&quot;)) , (kv &quot;cchfun&quot; : (v &quot;z4k&quot;)) , (kv &quot;buviuffu&quot; : (v -1541101613.0841894)) , (kv &quot;awmerqx&quot; : (v (object &#123; (kv &quot;tmmscngs&quot; : (v -1457687961)) , (kv &quot;hyzgfrzhkq&quot; : (v true)) , (kv &quot;groauuimfff&quot; : (v true)) , (kv &quot;bfknyfu&quot; : (v true)) , (kv &quot;cuvamo&quot; : (v true)) , (kv &quot;faknxnyyyo&quot; : (v &quot;KfjeiDi8x&quot;)) &#125;))) , (kv &quot;dgxbdhvwz&quot; : (v false)) , (kv &quot;tuxmoobswc&quot; : (v false)) , (kv &quot;mqyye&quot; : (v -1420559132.8642693)) , (kv &quot;cwepngen&quot; : (v &quot;vD2nC-CzhxOCrEe&quot;)) , (kv &quot;fsfkaeygzakb&quot; : (v true)) &#125;)) , (v -135748470) , (v &quot;6&quot;) ])) , (v 900941300) ])) , (v (array [ (v -1025637874.2588499) , (v (array [ (v (array [ (v false) , (v (object &#123; (kv &quot;gklfiz&quot; : (v true)) , (kv &quot;tjtyzgefhdd&quot; : (v -582853363.0086337)) , (kv &quot;osfgdnauftk&quot; : (v &quot;Vl3EqlA7OKiAlIjw&quot;)) , (kv &quot;bzidnf&quot; : (v true)) , (kv &quot;wdpicjspsl&quot; : (v true)) , (kv &quot;rkeddbrws&quot; : (v &quot;pMYedEiTgONmh&quot;)) , (kv &quot;xerpbflz&quot; : (v 758419376)) , (kv &quot;gilbjkg&quot; : (v &quot;UyyvO&quot;)) &#125;)) , (v (object &#123; (kv &quot;xoltj&quot; : (v &quot;o4gD1a80AUIP8ppL&quot;)) , (kv &quot;cyhvvey&quot; : (v true)) , (kv &quot;nfilawa&quot; : (v &quot;uoyzlCjrGOVh848s&quot;)) , (kv &quot;kuzeng&quot; : (v &quot;NZtEzPtn5Lrt&quot;)) , (kv &quot;mdplgzrqprbk&quot; : (v -1088587722)) , (kv &quot;gishhkef&quot; : (v true)) , (kv &quot;myphkklb&quot; : (v false)) , (kv &quot;wiikvhyaeo&quot; : (v &quot;ON&quot;)) , (kv &quot;brinalpoac&quot; : (v &quot;cUQcPCbVl40IEIhpoiq&quot;)) &#125;)) , (v &quot;m-89eKmeXXiAncvW&quot;) , (v (array [ (v -680112778.9736067) , (v 681158006.8874329) ])) ])) ])) , (v -1924960368.6434278) , (v -1037694580) ])) ])) , (v true) , (v true) , (v -1708300594.5945342) , (v true) ]))) , (kv &quot;xhenye&quot; : (v (object &#123; (kv &quot;kemzofsdxy&quot; : (v (array [ (v -1713931968) , (v (array [ (v -805035427.518543) , (v -869517642) , (v 1087071941.8443158) , (v (object &#123; (kv &quot;wgpwldezn&quot; : (v false)) , (kv &quot;wlxpboidk&quot; : (v 1098127049.5216)) , (kv &quot;ksbsgwowzwel&quot; : (v -60523137.21947116)) , (kv &quot;sigyfdoize&quot; : (v -1639786919)) , (kv &quot;stkxya&quot; : (v (array [ (v (object &#123; (kv &quot;tcbjdawezee&quot; : (v 1503065519.4656055)) &#125;)) , (v 212498625) , (v (object &#123; (kv &quot;omcernksme&quot; : (v false)) , (kv &quot;mephnqtasows&quot; : (v -1877881674.7753944)) , (kv &quot;yparxi&quot; : (v false)) , (kv &quot;anvfifj&quot; : (v &quot;xDPd4N&quot;)) , (kv &quot;tsbpyhtkt&quot; : (v &quot;YC4LfaxY62Ki8&quot;)) , (kv &quot;ebvohotbw&quot; : (v &quot;vTE2YTprZ&quot;)) , (kv &quot;dhfcmbhyg&quot; : (v false)) , (kv &quot;lqkjefon&quot; : (v &quot;nKiFRhv2jrSonP&quot;)) , (kv &quot;emkwdzynylwt&quot; : (v &quot;Nw7OSW&quot;)) , (kv &quot;snephpktpam&quot; : (v &quot;Y8j_Z0&quot;)) &#125;)) , (v &quot;njufIeTs0jwWkhmsw&quot;) , (v 1526070883) , (v (object &#123; (kv &quot;reqebzgpz&quot; : (v -112549694)) , (kv &quot;lyyoavlqsb&quot; : (v true)) , (kv &quot;grigtdofeoez&quot; : (v -2103438349.1102376)) , (kv &quot;lnxlrkl&quot; : (v &quot;jRMpG&quot;)) , (kv &quot;enubd&quot; : (v &quot;s&quot;)) , (kv &quot;zfeektqqyp&quot; : (v &quot;yJ06uHs&quot;)) , (kv &quot;rycqya&quot; : (v 2065122808.7950985)) &#125;)) , (v -43811785.0890918) ]))) , (kv &quot;gobhbw&quot; : (v (array [ (v true) , (v &quot;cj2FXZuCS0nEBHOLS&quot;) , (v 1161769059) , (v 950471239.4319127) , (v (array [ (v true) , (v false) , (v &quot;TGh-nycPTRZ22D-NQ_o4&quot;) , (v 1879746423) , (v -1876361804.542124) , (v -1254490223.1645222) , (v false) , (v 925658823) , (v &quot;HohOH5&quot;) ])) , (v 951874358) , (v (array [ (v &quot;CoK54yZH1M&quot;) , (v -2136020746.5936499) , (v &quot;u1FpY9ocUf6mkX&quot;) ])) , (v false) ]))) &#125;)) , (v (object &#123; (kv &quot;dfoclqw&quot; : (v &quot;NODCfR359C7M_&quot;)) , (kv &quot;nsjko&quot; : (v &quot;v6uuOpD&quot;)) , (kv &quot;lfeupzcqmpk&quot; : (v false)) , (kv &quot;ypyzeid&quot; : (v &quot;zklVHAI1JkTrYBCSlMu&quot;)) , (kv &quot;uvtppjgprezb&quot; : (v &quot;nvjJyMbGqua4fTcRWfaX&quot;)) , (kv &quot;enpchum&quot; : (v true)) , (kv &quot;jlvise&quot; : (v -1635524437.4004927)) , (kv &quot;yzygqpc&quot; : (v (array [ (v 919260239.0778828) , (v false) , (v true) , (v &quot;divak2ET&quot;) , (v 631651870.7437193) , (v &quot;6c43tow5bgTZwalPi3&quot;) , (v (object &#123; (kv &quot;onzidfdhjvn&quot; : (v false)) , (kv &quot;hoikkswnfo&quot; : (v false)) , (kv &quot;gcjwd&quot; : (v true)) , (kv &quot;dsjfmtbjfkf&quot; : (v true)) , (kv &quot;wzorkob&quot; : (v &quot;NgMYbSVqgUkzF9JDnrGc&quot;)) , (kv &quot;zgfrfx&quot; : (v &quot;lRSUTBYtkk&quot;)) , (kv &quot;gxkvcgvjhrjy&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;mgrtkrixa&quot; : (v 1371923484)) , (kv &quot;nnvtjmx&quot; : (v &quot;YjulmwcbzFHNCjlEK&quot;)) , (kv &quot;tqbrrnahao&quot; : (v true)) , (kv &quot;ltqihfo&quot; : (v -1121423677.0131004)) , (kv &quot;jyuohu&quot; : (v &quot;UmNpZAav-gZC9&quot;)) , (kv &quot;wjycdsilfq&quot; : (v false)) &#125;)) , (v (array [ (v false) , (v false) ])) ]))) , (kv &quot;tmqrlqn&quot; : (v &quot;_irJ&quot;)) , (kv &quot;ythdpzeyfzx&quot; : (v true)) &#125;)) , (v (array [ (v (object &#123; (kv &quot;awyrscv&quot; : (v 1292780261.5250838)) , (kv &quot;qdlqnvxa&quot; : (v (array [ (v &quot;L&quot;) , (v -353702928) , (v 192952383.1282911) , (v &quot;hQ&quot;) , (v false) ]))) , (kv &quot;varhial&quot; : (v (object &#123; (kv &quot;xexbq&quot; : (v false)) , (kv &quot;rwmadniztrgr&quot; : (v true)) , (kv &quot;unadilf&quot; : (v &quot;UH7GtJNx_vmXxyUCzIk&quot;)) , (kv &quot;xdkzfafcg&quot; : (v &quot;bKgInz8LfRnIiwgU1K8&quot;)) &#125;))) , (kv &quot;hfboeiy&quot; : (v &quot;6CqK9frOn&quot;)) &#125;)) , (v (object &#123; (kv &quot;zfnkvjt&quot; : (v (array [ (v -1253032068) , (v -728221895.5465573) , (v false) , (v 2032637908.5663962) , (v &quot;yyjjD_rA8CVE&quot;) ]))) , (kv &quot;rtcpgukulhb&quot; : (v 1968728972.8089237)) &#125;)) , (v &quot;BT2VYUTpEb5Cjqnw&quot;) , (v &quot;xLSFRK4I&quot;) , (v false) ])) , (v (array [ (v 1515070620.1010866) , (v false) , (v &quot;A2iiSSi&quot;) , (v (array [ (v 937788248.1172682) , (v (object &#123; (kv &quot;vnone&quot; : (v 1000593445.688209)) , (kv &quot;wkzrmmqhmxn&quot; : (v 109353062.87504955)) , (kv &quot;ljobzqcl&quot; : (v -1305573497.3978724)) , (kv &quot;vbdvvgkvnbz&quot; : (v 1681311307)) , (kv &quot;jokojizfo&quot; : (v -624502743.2195749)) , (kv &quot;nlgeakc&quot; : (v false)) , (kv &quot;eafzbbc&quot; : (v -1600168674)) , (kv &quot;daldy&quot; : (v true)) , (kv &quot;nffxijzispp&quot; : (v -1340518226.6470952)) &#125;)) , (v true) , (v (object &#123; (kv &quot;vmxlik&quot; : (v -1099209302.919163)) , (kv &quot;hzwmoypchkb&quot; : (v true)) , (kv &quot;tgeup&quot; : (v true)) , (kv &quot;ckriw&quot; : (v &quot;8ktRRoIRCJ-Zspy&quot;)) , (kv &quot;tjofribrztg&quot; : (v 1531989934)) , (kv &quot;dpyobifthft&quot; : (v &quot;Yes4k&quot;)) , (kv &quot;qqhrac&quot; : (v -1250147402.9694977)) , (kv &quot;mnnvxiqx&quot; : (v 354940954.2023201)) &#125;)) , (v (array [ (v &quot;3Kk&quot;) , (v true) , (v &quot;OegGtq&quot;) ])) , (v (object &#123; (kv &quot;dznuwqekx&quot; : (v true)) , (kv &quot;pszamqn&quot; : (v true)) , (kv &quot;rcdhqdm&quot; : (v false)) , (kv &quot;deimsggq&quot; : (v -1359990668)) , (kv &quot;fzdhcqlvkwz&quot; : (v false)) , (kv &quot;coezuvymrwq&quot; : (v true)) , (kv &quot;ndwhvjwdmpz&quot; : (v 1133737449.8011916)) , (kv &quot;jriqcqqfntzc&quot; : (v false)) &#125;)) , (v true) ])) , (v (object &#123; (kv &quot;fslaxrik&quot; : (v false)) , (kv &quot;lqlwk&quot; : (v true)) , (kv &quot;orezefygfs&quot; : (v -384506863.7335491)) , (kv &quot;pupujtozydhb&quot; : (v (object &#123; (kv &quot;akmugk&quot; : (v 1298074756.0830932)) , (kv &quot;nuherbzi&quot; : (v 620762501)) , (kv &quot;ztztrjzflxzy&quot; : (v 207627657.13165218)) &#125;))) , (kv &quot;fkhaz&quot; : (v -843406251.23525)) &#125;)) , (v &quot;4imZzm7iFV1VHJCXg&quot;) , (v (object &#123; (kv &quot;etsfrmszqo&quot; : (v &quot;kliPKjln&quot;)) , (kv &quot;ltrbd&quot; : (v (object &#123; (kv &quot;ncvvtkh&quot; : (v -816505512.1692358)) , (kv &quot;lgiwvwk&quot; : (v 363142221.68780464)) , (kv &quot;bhaizaze&quot; : (v -900522473.784486)) , (kv &quot;fwlzzerdngk&quot; : (v &quot;hY&quot;)) , (kv &quot;zlvcoery&quot; : (v false)) , (kv &quot;beirwfg&quot; : (v -1425768084)) , (kv &quot;knkmc&quot; : (v &quot;k6&quot;)) , (kv &quot;tnabfypju&quot; : (v &quot;j_0I0a&quot;)) , (kv &quot;nsntcxlceva&quot; : (v &quot;75coqfV&quot;)) &#125;))) , (kv &quot;bkafiqd&quot; : (v &quot;yBKcIFotKhSp&quot;)) &#125;)) , (v (object &#123; (kv &quot;sbtnn&quot; : (v 592441966.4201996)) , (kv &quot;vaarlun&quot; : (v false)) , (kv &quot;odzfk&quot; : (v -1135987808.335956)) , (kv &quot;qwrruiurzvkk&quot; : (v 1742165528)) , (kv &quot;inxjx&quot; : (v &quot;S2_thA_3-NNCY31gGT1T&quot;)) , (kv &quot;nxrrxumkkr&quot; : (v false)) , (kv &quot;kvrbgdlej&quot; : (v 583298432)) , (kv &quot;gkoaeizts&quot; : (v &quot;q3&quot;)) , (kv &quot;toixqytpfs&quot; : (v (object &#123; (kv &quot;lygaokqo&quot; : (v false)) &#125;))) , (kv &quot;hcuozupeotwn&quot; : (v &quot;OxYpQGiuidTV-MArY_&quot;)) &#125;)) , (v true) ])) , (v true) , (v 951251792.4160668) ])) , (v true) , (v false) , (v (object &#123; (kv &quot;lgpdzpgjpx&quot; : (v &quot;7wP3NVNKzy-MB25jeir&quot;)) , (kv &quot;hdnflqsvmny&quot; : (v false)) , (kv &quot;tnbwgwfs&quot; : (v &quot;1RGUKMbrEA6Ihghi&quot;)) , (kv &quot;efwxvbpr&quot; : (v true)) , (kv &quot;apcjsvc&quot; : (v &quot;tgnFEuP&quot;)) &#125;)) , (v (array [ (v &quot;fibVHn0&quot;) , (v -1355452961.8300054) ])) , (v -763636159.0354669) , (v &quot;45&quot;) , (v (object &#123; (kv &quot;egleu&quot; : (v false)) &#125;)) ]))) &#125;))) , (kv &quot;wyflumxx&quot; : (v 606853676.8559177)) , (kv &quot;xfrfs&quot; : (v (object &#123; (kv &quot;bpmmre&quot; : (v -699035788.1210531)) &#125;))) , (kv &quot;astjsmkrgfl&quot; : (v true)) , (kv &quot;vtdbsxzbrp&quot; : (v (array [ (v &quot;1jr1jrHCCxX0k8u7v&quot;) , (v (array [ (v 561744.5374090297) , (v (object &#123; (kv &quot;qocslunn&quot; : (v -1236546869.1413891)) , (kv &quot;uajwiy&quot; : (v (object &#123; (kv &quot;gbdfahkx&quot; : (v &quot;WoT6CAbAkcIW&quot;)) , (kv &quot;cboasttcgo&quot; : (v (object &#123; (kv &quot;qgmezcgvnn&quot; : (v (object &#123; (kv &quot;akpfwxcg&quot; : (v &quot;Yp&quot;)) , (kv &quot;hiaodfs&quot; : (v true)) , (kv &quot;uihrnqe&quot; : (v &quot;fww0o0M_9FZOup&quot;)) , (kv &quot;zpouvy&quot; : (v &quot;0eD&quot;)) , (kv &quot;ghrzcndjz&quot; : (v -570933190.062901)) &#125;))) , (kv &quot;njeqvwtsqwpp&quot; : (v &quot;PJWbPOqcZ-FytU&quot;)) , (kv &quot;nzmogoyk&quot; : (v (array [ (v true) , (v true) , (v false) , (v &quot;9FkCYsQq9TrnH_dnFQ&quot;) , (v &quot;Ficgqseqb_U&quot;) , (v true) , (v -1941578162) , (v true) , (v true) , (v 1506648943) ]))) , (kv &quot;wjbsmmgbl&quot; : (v &quot;VBVa6elwD&quot;)) , (kv &quot;txityj&quot; : (v (array [ (v false) , (v -1925291825.7742538) , (v &quot;k7MRGhftWwpnDN0&quot;) , (v true) , (v &quot;JJlSfDuz3UWrQoE&quot;) , (v false) , (v &quot;8xdxWhnbhmPN_KB3OWXF&quot;) , (v -1269897173) ]))) , (kv &quot;xfewjrmanegv&quot; : (v 1592995213.1564643)) , (kv &quot;fvosshqzogej&quot; : (v 185009600)) , (kv &quot;pbwhd&quot; : (v (array [ (v -1760380269.8625515) , (v &quot;awu511SC9Md&quot;) , (v &quot;Jt_E&quot;) , (v true) , (v &quot;mp_tGG-T9V&quot;) , (v &quot;YkRm3Rx9zfUQHS0QH-&quot;) , (v 212218763) , (v &quot;QLEYD0QJescPx9&quot;) , (v -1273082687.541183) ]))) &#125;))) &#125;))) , (kv &quot;nbqdwg&quot; : (v (object &#123; (kv &quot;sexkplynokqd&quot; : (v &quot;niQlORKBhnnlFC&quot;)) , (kv &quot;rclcgw&quot; : (v (object &#123; (kv &quot;rdffsor&quot; : (v (array [ (v &quot;N6X--z88Fnbe&quot;) , (v &quot;_Ir_HVKHuk0Rt3S&quot;) , (v &quot;PQEOnICemO7maPrhCojI&quot;) , (v &quot;XJz&quot;) ]))) , (kv &quot;gmnrusskm&quot; : (v false)) , (kv &quot;yssqtqw&quot; : (v (array [ (v false) , (v &quot;LqeoL4zcCFtJ&quot;) , (v &quot;w6a&quot;) , (v &quot;BrxFIwRASm-NJre&quot;) ]))) , (kv &quot;fekusikau&quot; : (v (array [ (v &quot;l&quot;) , (v false) , (v &quot;HUtsC0vgdMouv4cYg9a&quot;) , (v &quot;yXwZunKBou7y&quot;) , (v &quot;BpN9Jyo_K-I8&quot;) , (v &quot;gb1Ud72In&quot;) , (v false) , (v true) , (v true) ]))) , (kv &quot;jecveapqju&quot; : (v (object &#123; (kv &quot;jvscquwuv&quot; : (v -395093179.77329963)) , (kv &quot;xqzqje&quot; : (v false)) , (kv &quot;alvtrd&quot; : (v &quot;FOUKJj&quot;)) , (kv &quot;jpjucwmkj&quot; : (v &quot;Ak74yG&quot;)) , (kv &quot;tylxotikf&quot; : (v false)) , (kv &quot;kqvmlgcygg&quot; : (v 244130615.79503688)) , (kv &quot;wcjbdzwa&quot; : (v 500287767.6856092)) , (kv &quot;kvzyms&quot; : (v &quot;jjt1Ke&quot;)) &#125;))) , (kv &quot;kryqgjeoece&quot; : (v &quot;YVyZcPu&quot;)) , (kv &quot;mpmxzopptusc&quot; : (v true)) , (kv &quot;uyarzrmja&quot; : (v true)) &#125;))) , (kv &quot;tukitmlig&quot; : (v (array [ (v 389513860) ]))) , (kv &quot;kjczl&quot; : (v 1795259296.5039878)) , (kv &quot;wybdsosyzcha&quot; : (v -1290623776.184505)) &#125;))) , (kv &quot;tpjlykcz&quot; : (v false)) , (kv &quot;ygjosauo&quot; : (v true)) , (kv &quot;cumkci&quot; : (v (object &#123; (kv &quot;dylgur&quot; : (v &quot;vFLo5yzkUM6UO&quot;)) , (kv &quot;jaibsrqo&quot; : (v &quot;gux8fEqYsbxyDs&quot;)) , (kv &quot;agfyveq&quot; : (v -1597233399)) , (kv &quot;kcwihvc&quot; : (v (array [ (v (object &#123; (kv &quot;tfkioivxg&quot; : (v &quot;fpKwZ3982rwZ&quot;)) , (kv &quot;ixzpspa&quot; : (v false)) , (kv &quot;vzpfevtxupda&quot; : (v &quot;d3&quot;)) , (kv &quot;keoceyx&quot; : (v &quot;VV246o0k1&quot;)) &#125;)) , (v false) , (v false) ]))) , (kv &quot;bhnylkf&quot; : (v -791060771)) , (kv &quot;ztumv&quot; : (v true)) , (kv &quot;wsgjuxhmkq&quot; : (v (array [ (v -1676766713) , (v -1537104182.010321) , (v false) , (v &quot;W&quot;) , (v false) ]))) , (kv &quot;luxuouaiafks&quot; : (v false)) , (kv &quot;lumoeigwphr&quot; : (v &quot;18xmBvOSPeC8azShirG&quot;)) &#125;))) &#125;)) , (v (array [ (v false) , (v -802997708.7600138) , (v (array [ (v -2053605394) , (v (array [ (v (array [ (v -1399814510.7030656) , (v 977135150.16729) , (v 192789963) ])) , (v false) , (v true) , (v -1150809483) , (v 870594874.543454) , (v -349754105.96800435) , (v &quot;uXDHWbTUZ6w3mef&quot;) , (v &quot;b7&quot;) ])) , (v &quot;orfu_NuA3PULBFvt&quot;) , (v &quot;rMQgHO7qp_iEQtYRhI&quot;) , (v (array [ (v true) , (v &quot;VArbiT7&quot;) , (v (object &#123; (kv &quot;ugybni&quot; : (v &quot;tppWs4TDciQA&quot;)) &#125;)) , (v (object &#123; (kv &quot;mbtwxuiw&quot; : (v 2007589536.1571848)) , (kv &quot;eyggegpd&quot; : (v &quot;AYUXBDRQwp7bLRi3dorR&quot;)) , (kv &quot;ajqnjvonyzj&quot; : (v 584606137)) , (kv &quot;krqxfzymxdhi&quot; : (v false)) , (kv &quot;rsewnnoeu&quot; : (v &quot;RNFJ&quot;)) , (kv &quot;dvpynxqkhny&quot; : (v true)) , (kv &quot;fqalezvvugs&quot; : (v &quot;4acA2cG0&quot;)) , (kv &quot;nikiirsvj&quot; : (v true)) &#125;)) , (v &quot;1Mc&quot;) ])) , (v -1573848105.4230146) , (v &quot;SKiwY-9YeY_hPRmWFWIT&quot;) , (v false) , (v (array [ (v &quot;HNinq-l&quot;) , (v (array [ (v &quot;H&quot;) , (v false) , (v -441521083.9283443) , (v &quot;Z_8ZCGG8lrV1&quot;) , (v true) , (v true) , (v &quot;Q-e&quot;) ])) , (v -116020140.1204658) , (v (array [ (v false) , (v &quot;3ZEu7c7zJKB&quot;) , (v &quot;fKIq_dNpbcxxNy-sORG6&quot;) , (v 293709833.5096803) , (v true) , (v true) , (v &quot;tqp-eB&quot;) , (v false) ])) ])) , (v false) ])) , (v &quot;fAvqf0aMIECKiDSrk&quot;) , (v &quot;EGQCCS&quot;) , (v (array [ (v 1425411792.9755037) , (v (array [ (v (array [ (v true) , (v &quot;Fdhp&quot;) ])) , (v 105232888) , (v false) , (v true) , (v (object &#123; (kv &quot;xqgbtiqmhey&quot; : (v -106846587)) &#125;)) , (v (array [ (v true) , (v 1006096276) , (v &quot;5WCyPiTJsXj&quot;) , (v &quot;9GHK&quot;) , (v &quot;6XNJL_xKyP0OyEbNVJF&quot;) , (v true) ])) , (v 29964889.205074985) , (v (object &#123; (kv &quot;eyfebw&quot; : (v 1032894485.2535043)) , (kv &quot;qtwexefmcxe&quot; : (v 328388067)) , (kv &quot;qjxmrqn&quot; : (v 1410429136.1468182)) , (kv &quot;gyqlgbgm&quot; : (v 42956826.78513192)) , (kv &quot;spvsoitnwsvt&quot; : (v -907252368.4503814)) , (kv &quot;awqktjufcadd&quot; : (v true)) , (kv &quot;byekartjnn&quot; : (v false)) , (kv &quot;afzuxwogfevn&quot; : (v &quot;sH_tdB&quot;)) , (kv &quot;wjigflls&quot; : (v true)) &#125;)) ])) ])) , (v (object &#123; (kv &quot;dciduftzpd&quot; : (v (object &#123; (kv &quot;zybiggjjth&quot; : (v (array [ (v &quot;-eW&quot;) , (v -1749116727.1662536) , (v -1805132480) , (v true) , (v &quot;mUG-Kz&quot;) , (v 592646268.447506) ]))) , (kv &quot;tzdjwzontahh&quot; : (v (object &#123; (kv &quot;pfcwvgyfg&quot; : (v &quot;FRQU&quot;)) &#125;))) , (kv &quot;ygzvbonzwtj&quot; : (v (object &#123; (kv &quot;fskrfxpk&quot; : (v false)) &#125;))) , (kv &quot;uqrrz&quot; : (v &quot;f5OnXaoFbhbCBJA&quot;)) , (kv &quot;rodqmxzelk&quot; : (v (array [ (v &quot;6eYX_&quot;) , (v false) , (v 1599473240) , (v true) , (v false) , (v false) ]))) &#125;))) , (kv &quot;ozkrzb&quot; : (v (array [ (v false) , (v false) , (v true) , (v &quot;3lupCUGZAL2Re&quot;) , (v -991088956) , (v false) , (v (array [ (v false) , (v &quot;0Ll6v86z&quot;) , (v &quot;V&quot;) , (v 676772777) , (v -1714910506.345465) , (v -17895074.62039487) , (v -1787194802) , (v false) , (v &quot;9KUleV_UtVK7X&quot;) , (v false) ])) , (v (object &#123; (kv &quot;blkymot&quot; : (v 1561878291)) , (kv &quot;dfsjexi&quot; : (v false)) , (kv &quot;fjuwryhskukl&quot; : (v -2017954572.5434089)) , (kv &quot;uhbjdyxmoq&quot; : (v &quot;HBzUOXH&quot;)) , (kv &quot;qignwtxsgtx&quot; : (v &quot;i-kKQjuksT&quot;)) , (kv &quot;juccofewjq&quot; : (v true)) , (kv &quot;zndmvljdwu&quot; : (v -223870705.86433518)) , (kv &quot;xkwkq&quot; : (v &quot;uH&quot;)) &#125;)) ]))) &#125;)) , (v (object &#123; (kv &quot;qlututwete&quot; : (v true)) , (kv &quot;adhcbteqsfzz&quot; : (v true)) , (kv &quot;veflfjbjnjy&quot; : (v (object &#123; (kv &quot;htrpocyvqy&quot; : (v 349697001)) , (kv &quot;wrztntsfss&quot; : (v (array [ (v true) , (v &quot;CW2vaEa7&quot;) , (v true) , (v &quot;lq_&quot;) , (v true) , (v 735024535) ]))) , (kv &quot;lqwyvb&quot; : (v false)) , (kv &quot;itxzlrk&quot; : (v -347041377)) , (kv &quot;lyvjzhag&quot; : (v true)) &#125;))) , (kv &quot;znuyqb&quot; : (v &quot;GggEy&quot;)) &#125;)) , (v 887667842) , (v false) ])) , (v (array [ (v (object &#123; (kv &quot;bmlgtqc&quot; : (v (array [ (v false) , (v &quot;rqMMUo&quot;) ]))) , (kv &quot;euqgr&quot; : (v (object &#123; (kv &quot;dymouqh&quot; : (v true)) , (kv &quot;orfbvtq&quot; : (v (object &#123; (kv &quot;iejmjdyrs&quot; : (v &quot;V85icpm_ijqUg&quot;)) , (kv &quot;vbrvfuqjpcfm&quot; : (v true)) &#125;))) , (kv &quot;cbimevfc&quot; : (v (object &#123; (kv &quot;builaeezns&quot; : (v &quot;Df-FqGrIuenzif2yuY&quot;)) , (kv &quot;emenwqmmhov&quot; : (v false)) , (kv &quot;clvpjlh&quot; : (v 1092852226)) , (kv &quot;hvocpqlfrqsk&quot; : (v &quot;lbfwg&quot;)) , (kv &quot;yxpgfpxrvruj&quot; : (v true)) , (kv &quot;tetvli&quot; : (v -1680553264.5893738)) , (kv &quot;jbqeqk&quot; : (v true)) &#125;))) &#125;))) , (kv &quot;ctqrrbyaaqhr&quot; : (v true)) &#125;)) , (v (array [ (v (object &#123; (kv &quot;bimrwghswo&quot; : (v (array [ (v false) , (v -1164119898.5468001) , (v false) , (v true) , (v &quot;wby-NKerV58i&quot;) , (v &quot;Yom5xxJlUS6y&quot;) ]))) , (kv &quot;libtxdvwhj&quot; : (v -1980565219)) , (kv &quot;rxkxzgemfkhz&quot; : (v false)) , (kv &quot;vzpncd&quot; : (v 453388184)) &#125;)) , (v &quot;fg4x7JY6TEYPwNyd&quot;) , (v (array [ (v &quot;SGMMXIDILo_FbbQwOx6j&quot;) , (v (object &#123; (kv &quot;kjuersyzccgx&quot; : (v true)) , (kv &quot;kbjrbqpvhjq&quot; : (v &quot;x5lQpiEDR5wKZ&quot;)) , (kv &quot;xvfuz&quot; : (v 327749931.6296166)) , (kv &quot;pdceqod&quot; : (v &quot;NJd&quot;)) &#125;)) ])) , (v (object &#123; (kv &quot;ybzaahpuqjh&quot; : (v (object &#123; (kv &quot;rqehh&quot; : (v false)) , (kv &quot;cpbzshh&quot; : (v 474891438)) , (kv &quot;xsttzxrlsvwi&quot; : (v &quot;tEQvPHpktpk78tcJNV&quot;)) &#125;))) , (kv &quot;bmdmbwatgluo&quot; : (v (object &#123; (kv &quot;tngdbtfwfjtr&quot; : (v true)) , (kv &quot;husdsu&quot; : (v true)) &#125;))) , (kv &quot;iisdly&quot; : (v true)) , (kv &quot;lausvjta&quot; : (v -1051639134)) , (kv &quot;ofltnwrxwvtu&quot; : (v false)) , (kv &quot;mautqg&quot; : (v (array [ (v true) ]))) &#125;)) , (v (object &#123; (kv &quot;pfwvqeg&quot; : (v &quot;iCwbtXG1jJE&quot;)) , (kv &quot;fxfezdbjhlpe&quot; : (v (object &#123; (kv &quot;ovxtj&quot; : (v 1080202809)) &#125;))) , (kv &quot;zzrnxa&quot; : (v true)) , (kv &quot;rcjwgxcqes&quot; : (v (object &#123; (kv &quot;ehzuxhctq&quot; : (v &quot;1wnzwzgnZD&quot;)) , (kv &quot;gpohoalgwj&quot; : (v 1939205415)) &#125;))) , (kv &quot;lhvslswxzwf&quot; : (v true)) , (kv &quot;rqmne&quot; : (v &quot;7OR0gCLkAOxPb8zn&quot;)) , (kv &quot;knklginsn&quot; : (v true)) , (kv &quot;ilscwraz&quot; : (v (object &#123; (kv &quot;bgcjkzdykmv&quot; : (v -2087115871.6244044)) , (kv &quot;cdtmzlvlad&quot; : (v false)) , (kv &quot;ibqikxxf&quot; : (v &quot;LB_&quot;)) , (kv &quot;uenygcjpcc&quot; : (v &quot;-Q9&quot;)) , (kv &quot;zsrzwnuz&quot; : (v &quot;CZ31U92hEH6D1ZvvKl&quot;)) &#125;))) , (kv &quot;kavbxa&quot; : (v (array [ (v -571391870) , (v 1359112810) , (v &quot;0P6Fi5XxY6Gt&quot;) , (v &quot;x0RFlz2_NfLL&quot;) , (v true) , (v &quot;hUcVjSk8&quot;) , (v 1481727538) ]))) &#125;)) , (v false) ])) , (v (array [ (v -92991441.58020832) ])) ])) , (v &quot;oGeqskhAUrLi-K9GMly&quot;) , (v -1008876839) , (v &quot;d6sH0xEbHC6hBpA3P&quot;) , (v &quot;hL28NZJpr&quot;) , (v -846574898) ])) ]))) , (kv &quot;ewxjjyuo&quot; : (v (array [ (v (object &#123; (kv &quot;wlskfio&quot; : (v (array [ (v false) , (v true) , (v (array [ (v &quot;4&quot;) , (v &quot;7qZYZKZxT&quot;) , (v (array [ (v &quot;bCVyvkYz_HK5&quot;) , (v (array [ (v 302098255.8934899) , (v 1823035976) , (v &quot;_Gf1-lyJA&quot;) , (v &quot;D3X58Uiu&quot;) ])) , (v (object &#123; (kv &quot;enmdwv&quot; : (v -2086951943.2325172)) &#125;)) , (v &quot;Mhi5mNoQNN-vk&quot;) , (v (object &#123; (kv &quot;ovoldmoq&quot; : (v &quot;ypNy2&quot;)) , (kv &quot;vyttyofwdeu&quot; : (v &quot;iu13Jozou&quot;)) , (kv &quot;kyrsackwkwcv&quot; : (v 1702607487)) , (kv &quot;baosyvlbwokk&quot; : (v 827733957.3994164)) , (kv &quot;pwwrfysifrf&quot; : (v &quot;9rZS&quot;)) , (kv &quot;daxwsjv&quot; : (v 330954118)) , (kv &quot;tdqnt&quot; : (v &quot;WDHV_NY&quot;)) , (kv &quot;sahsrmijujm&quot; : (v &quot;XCMv0QPB7hp&quot;)) &#125;)) , (v (object &#123; (kv &quot;meymmbpch&quot; : (v &quot;qQ&quot;)) &#125;)) , (v &quot;UC0l&quot;) , (v (array [ (v &quot;mQ89vi&quot;) , (v true) , (v 1807380904.4068377) , (v true) , (v &quot;LWT8otFgdN-2&quot;) , (v true) , (v true) ])) ])) , (v (array [ (v (array [ (v false) , (v &quot;r_iaSOjDJizgWfKTVLv&quot;) , (v &quot;7WgYK0ds3p_&quot;) , (v &quot;sR0AzZ2nh&quot;) , (v &quot;IfkootTtt66AYmx8&quot;) , (v 432874271.3492509) , (v &quot;V2p2AkKLcQSoW&quot;) , (v &quot;VqEXrh5PpdEXW&quot;) , (v -250522174.4528205) , (v 1881293682) ])) , (v &quot;pL&quot;) , (v (array [ (v true) , (v 1597087752) , (v -479340988.3343571) , (v false) ])) , (v 1362746135) , (v true) , (v -984937760) , (v &quot;D9&quot;) , (v 1802679211.0451655) , (v &quot;U&quot;) ])) , (v (object &#123; (kv &quot;vfewicpzsd&quot; : (v (object &#123; (kv &quot;lnptk&quot; : (v true)) , (kv &quot;mphanqkvg&quot; : (v &quot;7rt3cs97e8FcZaNwv&quot;)) , (kv &quot;myriihbc&quot; : (v true)) , (kv &quot;jwdadczhu&quot; : (v &quot;k6YiieH5A2AfeMX&quot;)) , (kv &quot;hhsyocbay&quot; : (v 2088565662.8026524)) , (kv &quot;ppocyjhnyfw&quot; : (v -1285977432.0531442)) , (kv &quot;qxrzorvip&quot; : (v &quot;7KNiE&quot;)) &#125;))) , (kv &quot;dleyysswc&quot; : (v (object &#123; (kv &quot;lnkzk&quot; : (v false)) , (kv &quot;wxuxwyjx&quot; : (v &quot;AuvXjDV1b71yVR4dq&quot;)) , (kv &quot;nemwjgg&quot; : (v 203990540.5535996)) , (kv &quot;cwqpqxa&quot; : (v &quot;gOfc_6fgF&quot;)) , (kv &quot;qregtsefat&quot; : (v true)) , (kv &quot;vjklnndaw&quot; : (v -922256624.7759064)) , (kv &quot;yesgdekxdkr&quot; : (v -1242756045)) , (kv &quot;iyznnbg&quot; : (v 816397031)) &#125;))) , (kv &quot;dfprffw&quot; : (v (object &#123; (kv &quot;otokfvj&quot; : (v true)) , (kv &quot;wobsu&quot; : (v &quot;sImH&quot;)) , (kv &quot;ptxxmrcjyp&quot; : (v -504203914.2462589)) &#125;))) , (kv &quot;hropaxwuvg&quot; : (v &quot;Vl4KOyqYLmbLlF&quot;)) , (kv &quot;hapxq&quot; : (v true)) , (kv &quot;ycqqonwjjqe&quot; : (v false)) , (kv &quot;nxpfremqescb&quot; : (v -979478208.0100743)) , (kv &quot;ovcbynvqqzs&quot; : (v &quot;p2yMkTIozYAquwD0BXyz&quot;)) , (kv &quot;obibivinxzi&quot; : (v -76109536.15975918)) , (kv &quot;mhxfot&quot; : (v (object &#123; (kv &quot;zpjur&quot; : (v true)) , (kv &quot;qgfechzs&quot; : (v &quot;cFj3MFm9&quot;)) , (kv &quot;numso&quot; : (v &quot;oT5J_cBc&quot;)) , (kv &quot;vhonktbrouof&quot; : (v &quot;yml_N&quot;)) , (kv &quot;zvaveqjsfg&quot; : (v -718891526)) , (kv &quot;ujiwxt&quot; : (v &quot;PeDPk7QKYLsaB_oX&quot;)) , (kv &quot;yuxpnqmksu&quot; : (v &quot;tAekGFlr4ZF_O&quot;)) , (kv &quot;pqmgegatlpo&quot; : (v true)) , (kv &quot;wqwbnjk&quot; : (v &quot;xssZU97dKX&quot;)) , (kv &quot;dgkqcdv&quot; : (v -1802763662)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;rzwkqxpljy&quot; : (v &quot;r4LxKg0pkUXeVgd&quot;)) , (kv &quot;clgmypzgz&quot; : (v (array [ (v -194264292.15141857) , (v &quot;rPvjgi&quot;) , (v &quot;ggDs2j&quot;) , (v true) , (v true) , (v true) , (v false) , (v &quot;ARc8Z&quot;) , (v 255432289.78754443) ]))) , (kv &quot;ygqpbazzh&quot; : (v &quot;3Vl34a&quot;)) , (kv &quot;uybnutkchsqz&quot; : (v &quot;qDXXxx7NE6A_vj7&quot;)) , (kv &quot;lgvto&quot; : (v &quot;L4edBdWMt&quot;)) , (kv &quot;krurwyolxxmx&quot; : (v &quot;AG5jwr4kzbcLu&quot;)) , (kv &quot;ajjhoro&quot; : (v &quot;P&quot;)) , (kv &quot;rblwkrerpdlu&quot; : (v (array [ (v false) , (v false) , (v -48073830) , (v &quot;64LykBwj3KxV36lV&quot;) , (v &quot;WjA&quot;) , (v true) , (v false) , (v true) , (v false) ]))) , (kv &quot;gmwtvemdj&quot; : (v (object &#123; (kv &quot;ponkn&quot; : (v true)) , (kv &quot;xryznoh&quot; : (v true)) , (kv &quot;wiuwyypaoo&quot; : (v &quot;Z&quot;)) , (kv &quot;knimef&quot; : (v &quot;xK&quot;)) &#125;))) &#125;)) , (v &quot;nHR&quot;) , (v -402066793) , (v (array [ (v (object &#123; (kv &quot;fqkalsaxm&quot; : (v 1029874193.7218463)) , (kv &quot;pxusjwwlpid&quot; : (v -408158064)) , (kv &quot;eieiq&quot; : (v &quot;f6HYII&quot;)) , (kv &quot;ynxnclsnmhg&quot; : (v -1799101665)) , (kv &quot;gwjpdizskxi&quot; : (v &quot;s7Hfy9&quot;)) , (kv &quot;qxurnvewvaeb&quot; : (v 1614058216.6136463)) , (kv &quot;eoccdktvyyoq&quot; : (v &quot;SkA4XMaUrqQ&quot;)) , (kv &quot;bpeuarsexpr&quot; : (v 1632296444.7840831)) , (kv &quot;iuzzdbdstmv&quot; : (v -1290213224.113266)) &#125;)) , (v -235477017) , (v -1355490881.169675) , (v false) ])) , (v (object &#123; (kv &quot;fliwevcm&quot; : (v &quot;5YU0&quot;)) , (kv &quot;yaeqxg&quot; : (v (array [ (v false) ]))) , (kv &quot;ncbhivtwqybs&quot; : (v true)) , (kv &quot;nmfehzstbrq&quot; : (v 347018696)) , (kv &quot;zxtkgl&quot; : (v &quot;M&quot;)) , (kv &quot;oxbbrsoiojq&quot; : (v (array [ (v false) , (v -1471193267) ]))) , (kv &quot;wkfgroymz&quot; : (v -1174030722)) , (kv &quot;hdkqrzujjzcl&quot; : (v (array [ (v -1566230641.9768677) , (v -524062138.16113025) , (v 374913053.5746212) , (v &quot;2JWXVC&quot;) , (v &quot;eFrbzsdYyyxKIXPOVH54&quot;) , (v 665258485) , (v 904542319.709816) , (v false) , (v &quot;GgTN-hu_4dbJj-n3u&quot;) , (v -982305335) ]))) , (kv &quot;myxwmmki&quot; : (v (array [ (v true) , (v true) , (v 1656980713.0403624) ]))) , (kv &quot;zmsxpqac&quot; : (v false)) &#125;)) ])) , (v 757917705.8162723) , (v -1739166167) , (v &quot;CtA1Ro&quot;) , (v (array [ (v -683679780) , (v (array [ (v true) , (v false) , (v false) , (v -590813035) ])) , (v (object &#123; (kv &quot;hifhjhidsrb&quot; : (v (array [ (v true) , (v false) , (v -516065053) , (v -339008091) , (v true) ]))) , (kv &quot;kxvkurqrors&quot; : (v (array [ (v &quot;hbqQuvWgNQZS2Fa2yj&quot;) , (v true) , (v &quot;6dQ9XtUHebZ4kwPAl-7w&quot;) ]))) , (kv &quot;htsmjiz&quot; : (v (array [ (v -698199182.2113508) , (v false) , (v -1664814329) , (v 2069733558.4444075) , (v -234710634) , (v true) , (v -2126970710.6003466) ]))) , (kv &quot;qltnsgwvb&quot; : (v 621766196.008857)) , (kv &quot;abcrfwsgc&quot; : (v &quot;9FhGT1orFI&quot;)) , (kv &quot;byddsksb&quot; : (v (object &#123; (kv &quot;ppegqosqm&quot; : (v &quot;8fmi&quot;)) , (kv &quot;pqhvs&quot; : (v &quot;6x1ltJesWPuN&quot;)) , (kv &quot;wsjvpcmrjq&quot; : (v true)) , (kv &quot;daxgxroity&quot; : (v &quot;e_9jwxk4XUNL&quot;)) , (kv &quot;xdydofs&quot; : (v &quot;OXYfXTn-mb&quot;)) , (kv &quot;cpisa&quot; : (v &quot;mxNYG-g_fd&quot;)) , (kv &quot;ksefvgagbgat&quot; : (v false)) &#125;))) , (kv &quot;wyfxopkxv&quot; : (v false)) , (kv &quot;lgzzqgsxu&quot; : (v -1678218765.086281)) &#125;)) ])) , (v false) ]))) , (kv &quot;mcldtqgzhc&quot; : (v (object &#123; (kv &quot;jujcds&quot; : (v &quot;wfEyQUp7kAeuL0J&quot;)) , (kv &quot;qszahak&quot; : (v 786216426)) , (kv &quot;ytjazh&quot; : (v (array [ (v (array [ (v (object &#123; (kv &quot;uopqxeaup&quot; : (v &quot;w&quot;)) , (kv &quot;khyzbkfy&quot; : (v true)) , (kv &quot;qutgyd&quot; : (v false)) , (kv &quot;wdlbmfkwcfc&quot; : (v &quot;EQWiY_9YgFJOhb2&quot;)) , (kv &quot;vvbmdc&quot; : (v &quot;WQjh&quot;)) , (kv &quot;hhskku&quot; : (v false)) , (kv &quot;pzueectvbiox&quot; : (v -441144534.4889692)) &#125;)) ])) , (v (object &#123; (kv &quot;piafs&quot; : (v (array [ (v -1559226766) , (v true) ]))) , (kv &quot;vgqueqvjzrzj&quot; : (v &quot;Fbv-qDgliLklax9&quot;)) , (kv &quot;fejnumt&quot; : (v (array [ (v &quot;Is2&quot;) , (v &quot;-qQcA4MLNdMWrJUW1vs&quot;) , (v -1137924841) , (v false) , (v 1996164626) , (v &quot;4gBrRzFq5z&quot;) ]))) , (kv &quot;yrphkqocw&quot; : (v &quot;YpRgL3-z5J79bVK&quot;)) , (kv &quot;jchlcd&quot; : (v -1295730314)) , (kv &quot;fuylitdjsbpp&quot; : (v (array [ (v true) ]))) &#125;)) , (v true) , (v (array [ (v (array [ (v true) , (v true) , (v &quot;n0z&quot;) , (v 1316135786) , (v 516124673.01366377) , (v 1150613976.6446474) , (v false) , (v -1168540718.826539) , (v false) , (v -1788242240.514571) ])) , (v (array [ (v &quot;-3n-oYv4h&quot;) , (v 904275476) , (v &quot;XD_uHM&quot;) , (v &quot;Ic-&quot;) , (v true) , (v true) , (v &quot;VxfdtS1ynpZC&quot;) ])) , (v -774382468.2206059) , (v &quot;h_Akv&quot;) , (v 1894939886.4613366) ])) ]))) , (kv &quot;hdjml&quot; : (v (array [ (v (array [ (v -1906715167.7154028) , (v (object &#123; (kv &quot;exivmlldeh&quot; : (v &quot;Pca2PCoVWGy&quot;)) , (kv &quot;vietfbkhww&quot; : (v &quot;jb_tksEAr-&quot;)) , (kv &quot;kxvbyxtx&quot; : (v -748366235.5526559)) , (kv &quot;eaggdsbhka&quot; : (v 1259366349.96522)) , (kv &quot;minol&quot; : (v false)) &#125;)) , (v &quot;8y&quot;) ])) , (v false) ]))) &#125;))) &#125;)) , (v &quot;D5b8aep2rHs_4&quot;) , (v &quot;tuttnY2hP8CBhIR&quot;) , (v (object &#123; (kv &quot;uzxmdzxwwz&quot; : (v true)) , (kv &quot;pyyrilpawpn&quot; : (v 886193335)) , (kv &quot;jfbfmuz&quot; : (v &quot;IAU6NF5W7E93o2_ZW&quot;)) , (kv &quot;hygtvkfdz&quot; : (v &quot;49e&quot;)) , (kv &quot;ocvvng&quot; : (v (object &#123; (kv &quot;aqdjrp&quot; : (v 1581318894.6392348)) , (kv &quot;gdlgkskwsn&quot; : (v (array [ (v (array [ (v true) , (v (array [ (v &quot;ZsztPEP98me6k_N&quot;) , (v &quot;C2cRo&quot;) , (v 964092523.9734194) , (v &quot;0KJbTpm&quot;) , (v 1096984743.970191) , (v true) , (v -816526325.4639177) , (v 2111817927.3652468) , (v true) , (v &quot;PwYiFPI0jaL4e&quot;) ])) , (v &quot;4SB38X95Y&quot;) , (v true) , (v -757378637) , (v 140114379) , (v false) ])) , (v (object &#123; (kv &quot;hmenefwzhjbr&quot; : (v &quot;cXrZluwpNqkKM91EBaM&quot;)) , (kv &quot;jnjdcw&quot; : (v &quot;gjwSSP&quot;)) , (kv &quot;exzmqek&quot; : (v false)) &#125;)) , (v 529739277.27264667) ]))) , (kv &quot;ujohexrcdqfv&quot; : (v (object &#123; (kv &quot;urqpe&quot; : (v (object &#123; (kv &quot;zqqmdwftzzq&quot; : (v (array [ (v 144356748) , (v true) , (v -62844341.87803153) , (v false) , (v -1492676543) , (v 97010809.25408071) , (v true) ]))) , (kv &quot;btctsujjv&quot; : (v -849921904)) , (kv &quot;unyqzdgzfkp&quot; : (v 1064333977)) &#125;))) , (kv &quot;vmzmeifi&quot; : (v &quot;yj4g&quot;)) , (kv &quot;otyqujvhdxvl&quot; : (v (object &#123; (kv &quot;joxcoh&quot; : (v (object &#123; (kv &quot;erzwfbas&quot; : (v true)) , (kv &quot;iwzvqlaubyt&quot; : (v false)) , (kv &quot;xbigiit&quot; : (v -1106906916.8232164)) , (kv &quot;emsddn&quot; : (v false)) , (kv &quot;dbxkfjl&quot; : (v true)) , (kv &quot;ijtlnuxfjwiw&quot; : (v 723367848)) , (kv &quot;ffiinqj&quot; : (v &quot;euxnlAR--BNLYK4UP&quot;)) , (kv &quot;flcnp&quot; : (v &quot;OagU&quot;)) &#125;))) , (kv &quot;biwxeez&quot; : (v &quot;7S8ASWD4DKbfStl&quot;)) , (kv &quot;vocdts&quot; : (v (array [ (v &quot;ZZYJ9joTaJ-nEo&quot;) , (v &quot;w4I4w_O5JDA&quot;) ]))) , (kv &quot;rqpdoefh&quot; : (v false)) , (kv &quot;bijnkvo&quot; : (v &quot;D-kWzO&quot;)) , (kv &quot;crwwpytvetyx&quot; : (v (object &#123; (kv &quot;oifzvrlvqv&quot; : (v &quot;Ww69GzTD3Au&quot;)) &#125;))) &#125;))) &#125;))) , (kv &quot;dvaihcflbf&quot; : (v true)) , (kv &quot;nbmcbsrl&quot; : (v 55649510)) , (kv &quot;yvcxd&quot; : (v (object &#123; (kv &quot;pbtbmgzqknkg&quot; : (v (array [ (v (object &#123; (kv &quot;hsvpce&quot; : (v true)) , (kv &quot;zuaico&quot; : (v false)) , (kv &quot;jfmwzcx&quot; : (v true)) , (kv &quot;ygdjtc&quot; : (v true)) , (kv &quot;bcwklaujgh&quot; : (v &quot;h9juu-URKtV&quot;)) , (kv &quot;epnmjflsw&quot; : (v 1095034813.787303)) &#125;)) , (v &quot;V8Wv0zxHA&quot;) , (v 1991477397.2298384) , (v (object &#123; (kv &quot;actindo&quot; : (v -1386946732)) , (kv &quot;dsnvxcbvaidg&quot; : (v -1322518166)) , (kv &quot;qspwoqbgbkf&quot; : (v true)) , (kv &quot;xgrfltt&quot; : (v true)) , (kv &quot;hrmmrt&quot; : (v false)) , (kv &quot;rocrirdytq&quot; : (v true)) , (kv &quot;wlhkdmj&quot; : (v &quot;7CaT9wVudV&quot;)) , (kv &quot;cmmll&quot; : (v -10348053)) , (kv &quot;nnqrql&quot; : (v false)) , (kv &quot;yzsyxyyn&quot; : (v &quot;HdCdqVVLgef1&quot;)) &#125;)) , (v (object &#123; (kv &quot;qpigw&quot; : (v true)) , (kv &quot;hjztccuuj&quot; : (v false)) , (kv &quot;ghbvt&quot; : (v false)) , (kv &quot;guphstikpu&quot; : (v -703630790.7987573)) , (kv &quot;pcuur&quot; : (v false)) , (kv &quot;dfufdqniyrln&quot; : (v false)) &#125;)) ]))) , (kv &quot;nyyjphus&quot; : (v (object &#123; (kv &quot;vtgtquuvuwvm&quot; : (v (array [ (v false) , (v false) , (v false) , (v false) , (v true) , (v &quot;B&quot;) , (v &quot;U9IwTbzcy3Zp6RqEt&quot;) , (v &quot;ydYKPeWa1JIB&quot;) , (v false) ]))) , (kv &quot;mleucqkvoydy&quot; : (v (object &#123; (kv &quot;cumdcmornviw&quot; : (v false)) , (kv &quot;yqgrm&quot; : (v -1596228354.0448751)) , (kv &quot;erhgaahsotc&quot; : (v -1101538965)) , (kv &quot;gjbhzzddqfp&quot; : (v -853032076.6797427)) , (kv &quot;hjjscd&quot; : (v false)) &#125;))) , (kv &quot;xwajfngcka&quot; : (v false)) , (kv &quot;frrnvrqji&quot; : (v (object &#123; (kv &quot;bhpdajlem&quot; : (v 627763190)) , (kv &quot;eepzqlapcfl&quot; : (v &quot;MJvCbR&quot;)) , (kv &quot;virba&quot; : (v &quot;RIMk5wD&quot;)) , (kv &quot;pffoox&quot; : (v 1641514859)) , (kv &quot;qwsbvwjrk&quot; : (v true)) , (kv &quot;ffbibogtwzv&quot; : (v &quot;IoZc2w4Epxh6N3y4He&quot;)) , (kv &quot;bxcvv&quot; : (v &quot;5C86t83PTfnQlpaaV&quot;)) , (kv &quot;zlvapztcg&quot; : (v 932477427.4998753)) , (kv &quot;wtjteo&quot; : (v true)) , (kv &quot;apimss&quot; : (v 1308708692)) &#125;))) , (kv &quot;djfvg&quot; : (v false)) , (kv &quot;tdcmuid&quot; : (v (object &#123; (kv &quot;ktdqimljmq&quot; : (v -2134717210.4028487)) , (kv &quot;ykryhohp&quot; : (v true)) , (kv &quot;qyjxm&quot; : (v false)) , (kv &quot;thufqdtvkf&quot; : (v -351874524.3639772)) , (kv &quot;ezaajf&quot; : (v 1952725419.4566972)) &#125;))) , (kv &quot;pmwiun&quot; : (v true)) , (kv &quot;urafxu&quot; : (v (object &#123; (kv &quot;cppchinkwla&quot; : (v true)) , (kv &quot;ypdfayqej&quot; : (v &quot;e&quot;)) &#125;))) , (kv &quot;zpafysv&quot; : (v -1843351676.4220238)) , (kv &quot;khwnisjic&quot; : (v (array [ (v -1321500873) , (v true) , (v &quot;OdSUmeR&quot;) , (v true) , (v true) , (v false) , (v -1469078394.0145407) , (v true) , (v &quot;MxgA4rxEqKeo1S&quot;) , (v &quot;FOd3_02txpAK4e6F83&quot;) ]))) &#125;))) , (kv &quot;uofyt&quot; : (v &quot;AYXhcj_beQtNfVHRIz&quot;)) , (kv &quot;fpajxq&quot; : (v &quot;5TCPSkFdAzZ&quot;)) , (kv &quot;lqfbtrzvqmec&quot; : (v &quot;a7NgMhplqo852YhI&quot;)) , (kv &quot;cjfyemggpcbh&quot; : (v (array [ (v true) , (v -1697479909) , (v &quot;bDQYjxc&quot;) , (v (array [ (v false) , (v &quot;GXe1HXDFHNyE6y&quot;) , (v false) , (v 662478893.071877) , (v 896710804) , (v true) , (v false) ])) , (v -323751803) , (v (array [ (v &quot;UaRMKAi74o&quot;) , (v &quot;pvXocIx0HgL7I&quot;) , (v false) , (v &quot;qC-&quot;) , (v -84034391) , (v false) , (v false) ])) ]))) , (kv &quot;nkqas&quot; : (v (object &#123; (kv &quot;vpfhut&quot; : (v (object &#123; (kv &quot;vvimqbf&quot; : (v true)) , (kv &quot;qwrvoo&quot; : (v true)) , (kv &quot;lraaluyslp&quot; : (v &quot;TOa-MN5&quot;)) , (kv &quot;ytexzrlnc&quot; : (v false)) , (kv &quot;lxkoakr&quot; : (v false)) , (kv &quot;sadoghsmopw&quot; : (v &quot;IvuO6LBdb&quot;)) &#125;))) , (kv &quot;ozyyhoe&quot; : (v (array [ (v &quot;9WT4y4PU&quot;) , (v &quot;nuZ5nwVhbw_8HSJU4KS4&quot;) , (v &quot;RsJMYHP&quot;) ]))) , (kv &quot;zjyymdftxkhn&quot; : (v 1177104596.9635024)) , (kv &quot;zcdrqr&quot; : (v (array [ (v &quot;ZEDZTsUJsEzwl2_EYg&quot;) , (v &quot;YHba2G&quot;) , (v 714998063.8911437) , (v false) , (v &quot;LXXk69&quot;) , (v 2072565414.68213) , (v &quot;jdCv0dmPu-dj-RmRV&quot;) , (v &quot;R4FssgbPL0XavpqyYx&quot;) ]))) &#125;))) , (kv &quot;natbxbghrhs&quot; : (v (array [ (v (object &#123; (kv &quot;lsxdolpzvg&quot; : (v &quot;UBpes42EFW-G6Frt&quot;)) , (kv &quot;jplnir&quot; : (v &quot;sA2rF4UEcuGhLfREL&quot;)) &#125;)) , (v &quot;DgDmNxgGmy&quot;) , (v (object &#123; (kv &quot;fxdow&quot; : (v true)) , (kv &quot;mdkklxu&quot; : (v -833464483.6372155)) , (kv &quot;pofdpnvs&quot; : (v true)) , (kv &quot;uzoehhii&quot; : (v false)) &#125;)) , (v (array [ (v &quot;OrfsMP-&quot;) , (v -1932683014.0949554) ])) ]))) , (kv &quot;eojsep&quot; : (v &quot;_4r5YZKVLc_&quot;)) &#125;))) &#125;))) &#125;)) ]))) , (kv &quot;ktmvgrxpsppv&quot; : (v false)) &#125;)) ])) , (v &quot;AyCOf&quot;) , (v 1037567253.0805973) , (v -1252882131.4680645) , (v true) , (v (object &#123; (kv &quot;xaitrnxfvw&quot; : (v (object &#123; (kv &quot;nwgjmr&quot; : (v &quot;pKVnueXWV&quot;)) , (kv &quot;gdvpvjt&quot; : (v &quot;uPsA-iMYPH4rZOSC&quot;)) , (kv &quot;mdlsov&quot; : (v (array [ (v &quot;fnS_W-r-Ts&quot;) , (v &quot;GH1JBoLKbS8UZ&quot;) , (v true) , (v 74408454.32561278) , (v (object &#123; (kv &quot;vmaeogwofia&quot; : (v (object &#123; (kv &quot;ipuzqxt&quot; : (v 665408851.2694653)) , (kv &quot;kzuzrpryce&quot; : (v -937327654)) , (kv &quot;tkxqer&quot; : (v (object &#123; (kv &quot;fyxqvguanpn&quot; : (v &quot;ba&quot;)) , (kv &quot;cgfaldkqrkru&quot; : (v &quot;-UDJp65e&quot;)) , (kv &quot;nauxavect&quot; : (v (array [ (v (object &#123; (kv &quot;sfiyhuxsumq&quot; : (v 2008216037.4933994)) , (kv &quot;tdemqbspwop&quot; : (v 228013618.26449654)) , (kv &quot;wcoqgwhss&quot; : (v false)) , (kv &quot;cadwgw&quot; : (v &quot;jwR&quot;)) , (kv &quot;vckdkr&quot; : (v true)) , (kv &quot;sbibvslyeyp&quot; : (v &quot;y2mGH3&quot;)) &#125;)) , (v true) ]))) , (kv &quot;ztizbieqm&quot; : (v &quot;uP1ot-CXhrZrcDLEzno&quot;)) , (kv &quot;duvsmv&quot; : (v false)) , (kv &quot;exrzpl&quot; : (v 1917425767)) , (kv &quot;cboayo&quot; : (v (object &#123; (kv &quot;kysneor&quot; : (v (array [ (v &quot;0tyWNfGAKIPkm3O4&quot;) , (v &quot;Vi0RmMEAqF&quot;) , (v &quot;nO3y0az__9O2&quot;) , (v false) , (v false) , (v true) , (v -783708593.2980149) , (v true) , (v 809154590.0862904) ]))) , (kv &quot;tkltoff&quot; : (v (object &#123; (kv &quot;ymmizcfb&quot; : (v true)) , (kv &quot;ugytqyclqdu&quot; : (v true)) , (kv &quot;luaditwcrco&quot; : (v 419106966)) , (kv &quot;ugwbgbgiqxor&quot; : (v true)) , (kv &quot;uvhbn&quot; : (v &quot;z6WQi&quot;)) , (kv &quot;dwfwtk&quot; : (v 372214359.85793847)) , (kv &quot;pikwq&quot; : (v true)) &#125;))) , (kv &quot;xktiwoai&quot; : (v true)) , (kv &quot;ojcjccg&quot; : (v 1925714307.607916)) , (kv &quot;quvitvvwisb&quot; : (v true)) , (kv &quot;xvwzmfzkzum&quot; : (v (array [ (v true) , (v true) , (v 130780451.96412788) , (v 598921339.3154116) , (v false) , (v 1723692770.2819989) , (v &quot;aBAua-5u-Tpg&quot;) , (v &quot;0IXCiXjS9yGW0BG3m&quot;) ]))) , (kv &quot;aigupwnb&quot; : (v (array [ (v true) , (v false) , (v true) , (v -1882527666) , (v &quot;i0X-xn0mWxz9u5-TriLO&quot;) , (v &quot;0Aj41Tnsb&quot;) ]))) , (kv &quot;juckmwgwcb&quot; : (v (object &#123; (kv &quot;idavqp&quot; : (v false)) , (kv &quot;vcwarugu&quot; : (v -1469597156)) &#125;))) , (kv &quot;xinpen&quot; : (v (array [ (v &quot;tPyEk9c1syndc3&quot;) , (v false) , (v &quot;THB98AvSqzKcHEBn&quot;) , (v false) ]))) &#125;))) , (kv &quot;punnwnmdciie&quot; : (v &quot;lv5jELCtrUO52o-KJ&quot;)) , (kv &quot;oawbjhktyij&quot; : (v -1291719047)) &#125;))) , (kv &quot;crgbbqcxy&quot; : (v (object &#123; (kv &quot;lsalwrwswux&quot; : (v &quot;4vS-yM&quot;)) , (kv &quot;hqachm&quot; : (v (array [ (v -1247013279) , (v true) ]))) , (kv &quot;rdksj&quot; : (v (object &#123; (kv &quot;dlbizx&quot; : (v false)) &#125;))) , (kv &quot;bltpbf&quot; : (v true)) , (kv &quot;wetdrf&quot; : (v (array [ (v false) , (v true) , (v (object &#123; (kv &quot;njnmixrv&quot; : (v 42996778.67090652)) , (kv &quot;zhbodmpzs&quot; : (v -962959328.7427077)) , (kv &quot;zhxlz&quot; : (v &quot;GOAzM-Vm9&quot;)) &#125;)) , (v (array [ (v 702672969.9366589) , (v 779897125.0527567) , (v -1882619161.545962) , (v 1962396605.138651) , (v 317912394.07081777) , (v false) ])) , (v (array [ (v &quot;94&quot;) , (v &quot;Mtaq&quot;) , (v &quot;UDhtPSzQ4&quot;) , (v false) , (v -1044773190) ])) , (v true) , (v (array [ (v &quot;-fsZ9pb5VOQC&quot;) , (v &quot;lINBW2V5U&quot;) , (v true) , (v false) , (v &quot;ifHuRX&quot;) , (v false) , (v &quot;_W8t&quot;) ])) , (v true) , (v (array [ (v &quot;cieOlUtKRnuT&quot;) , (v true) ])) ]))) , (kv &quot;akhdodevaash&quot; : (v &quot;lkP&quot;)) &#125;))) , (kv &quot;tqobirb&quot; : (v 1495570939.5241272)) , (kv &quot;biqgpgmqjwwq&quot; : (v -1813608887)) , (kv &quot;nderigfnlv&quot; : (v &quot;39JVSNIVACz&quot;)) , (kv &quot;vqjzp&quot; : (v true)) , (kv &quot;vwhvd&quot; : (v (array [ (v -2132325901.2181122) , (v 208570528) , (v 1424864018) , (v (object &#123; (kv &quot;crimmugzqek&quot; : (v (array [ (v &quot;5GrAglNTYfxFX&quot;) , (v -43915189.08423189) , (v &quot;-qXpJQf2NsCPXePUE6&quot;) , (v 889818545) , (v &quot;80DSaPlDpslc9P5kuO&quot;) , (v false) , (v &quot;ex1OsiVF6bWW&quot;) ]))) , (kv &quot;dcxiajo&quot; : (v &quot;TdhE&quot;)) , (kv &quot;ixerbgwxbo&quot; : (v true)) , (kv &quot;eimphyvig&quot; : (v true)) , (kv &quot;ikqtwf&quot; : (v (object &#123; (kv &quot;legmvolpfekw&quot; : (v true)) , (kv &quot;vhaboipfs&quot; : (v &quot;Wv&quot;)) , (kv &quot;mnvjyxhn&quot; : (v &quot;dexlv8Q&quot;)) , (kv &quot;qvcsf&quot; : (v &quot;Ln_McgAU&quot;)) , (kv &quot;chfuipb&quot; : (v true)) , (kv &quot;vmejnnyctt&quot; : (v &quot;iT42ZvyHzOXetdrK&quot;)) , (kv &quot;nzkwiscf&quot; : (v &quot;ncZdyHAnZ2UhKXmhJObP&quot;)) , (kv &quot;zycnyzmprzh&quot; : (v true)) &#125;))) &#125;)) , (v (array [ (v (object &#123; (kv &quot;tqujsinaseya&quot; : (v 1130899582)) , (kv &quot;akfdz&quot; : (v 1347778477.8603253)) , (kv &quot;zomiksqpjke&quot; : (v false)) , (kv &quot;vsakhu&quot; : (v &quot;MxElHC8yR&quot;)) , (kv &quot;llovrj&quot; : (v -529440494.98601544)) , (kv &quot;akdgqov&quot; : (v &quot;99i&quot;)) &#125;)) , (v (object &#123; (kv &quot;jjulgvgi&quot; : (v 370210260)) &#125;)) , (v 1680941987.5654912) , (v (object &#123; (kv &quot;isdcpqwxsggu&quot; : (v -1311623569)) , (kv &quot;wkedmnqtsm&quot; : (v false)) , (kv &quot;ogwnn&quot; : (v false)) , (kv &quot;fbiuahdsf&quot; : (v &quot;f4miqUjeBGt3w5iPEx&quot;)) , (kv &quot;jergw&quot; : (v -514005093)) , (kv &quot;uqptvn&quot; : (v &quot;C&quot;)) , (kv &quot;pekdfhpsfpe&quot; : (v &quot;ZHSkEGF&quot;)) , (kv &quot;rkhmqntbgu&quot; : (v -463204898)) , (kv &quot;hcvjy&quot; : (v &quot;z&quot;)) &#125;)) , (v true) , (v &quot;dMzND9hwPw&quot;) , (v false) , (v (array [ (v -172298609) , (v &quot;0yMvw9k5dcC5D3tx5&quot;) , (v &quot;LjJQLd&quot;) ])) ])) , (v (object &#123; (kv &quot;xiikqoz&quot; : (v 6173870)) , (kv &quot;fxbdfex&quot; : (v &quot;pO0Fq_cyI&quot;)) , (kv &quot;wldszsxvsmz&quot; : (v (array [ (v &quot;XfymyHk0h9uUqbBkCTb&quot;) ]))) , (kv &quot;yktfxybqdgot&quot; : (v 1080248968.2307198)) , (kv &quot;tiuxncu&quot; : (v -1123876297)) , (kv &quot;cjqjbzc&quot; : (v (object &#123; (kv &quot;gcelcngawmn&quot; : (v true)) , (kv &quot;veuzupn&quot; : (v 1515198042)) , (kv &quot;hvocmpbb&quot; : (v true)) , (kv &quot;ajgprb&quot; : (v &quot;UZLjc9zLIeA&quot;)) &#125;))) &#125;)) , (v false) , (v (object &#123; (kv &quot;leuzclxdr&quot; : (v (array [ (v &quot;tY_q3R&quot;) , (v 1177404898.563247) , (v true) , (v true) ]))) , (kv &quot;sfvloovh&quot; : (v true)) , (kv &quot;zpvwvumebnk&quot; : (v (object &#123; (kv &quot;klaho&quot; : (v &quot;sR-R5eF4I00OJF&quot;)) , (kv &quot;rmxwaomhq&quot; : (v &quot;3wsI5sCXJ0bO5UTKvGj&quot;)) , (kv &quot;xwvmblnbcye&quot; : (v &quot;Mm4Zm&quot;)) , (kv &quot;mhpwxooe&quot; : (v &quot;fZRe4I2HCv&quot;)) , (kv &quot;ljqtzqpno&quot; : (v &quot;hDUp2Y&quot;)) , (kv &quot;ydyzsyzmxtjl&quot; : (v &quot;FmQIuazO1ud8Cg5A8&quot;)) , (kv &quot;vvnvimxw&quot; : (v false)) , (kv &quot;spmitz&quot; : (v true)) , (kv &quot;tpgxea&quot; : (v &quot;kKXnnFrqwKmNAsQmakcV&quot;)) &#125;))) , (kv &quot;dsjkfcy&quot; : (v false)) , (kv &quot;lflwioj&quot; : (v (array [ (v &quot;Wrd-pr3KuOG4lZMY6dju&quot;) , (v &quot;mgczMGF8c8jsWZOrO&quot;) , (v true) , (v &quot;WrFoP&quot;) , (v true) , (v &quot;X&quot;) , (v &quot;SwE0x4a1BC3c8YXEoK&quot;) , (v false) , (v -268756878.93164307) ]))) , (kv &quot;erukdrpm&quot; : (v (array [ (v 542123994) , (v &quot;02XaSvbpV&quot;) , (v &quot;iluAYY&quot;) , (v false) , (v -721305034.5615451) ]))) &#125;)) , (v false) ]))) &#125;))) , (kv &quot;gvrysjncyvt&quot; : (v (array [ (v 1933814086) , (v true) , (v (array [ (v false) , (v -1998462860) , (v -1753193031.6921995) , (v 1277621131.847381) , (v &quot;FD6CYFJ_zX&quot;) , (v 966918327) , (v false) , (v true) , (v &quot;otAq0Aq2GEPf&quot;) ])) , (v (object &#123; (kv &quot;egioeulhvqih&quot; : (v (array [ (v false) , (v (object &#123; (kv &quot;zjtukvzcv&quot; : (v &quot;0RZM&quot;)) , (kv &quot;iahcr&quot; : (v 1856060910.0138543)) , (kv &quot;wpzeus&quot; : (v 1841749390.9825985)) , (kv &quot;dvekwvpws&quot; : (v &quot;Z3zqrI&quot;)) , (kv &quot;thofliozmss&quot; : (v false)) &#125;)) ]))) , (kv &quot;wsoustdrzjc&quot; : (v &quot;fxzDMVrJdSmrpa&quot;)) , (kv &quot;hfmzcznrdc&quot; : (v &quot;drv4c5Kd&quot;)) &#125;)) , (v (object &#123; (kv &quot;ffonk&quot; : (v (object &#123; (kv &quot;gcnveb&quot; : (v (object &#123; (kv &quot;abrsddzwabvs&quot; : (v &quot;VdH&quot;)) , (kv &quot;wufifns&quot; : (v &quot;yh2bNEH-6MDuw&quot;)) , (kv &quot;jvgoik&quot; : (v -343291111.24708116)) , (kv &quot;dhauhjsksg&quot; : (v &quot;vSragp1ZkOyHPI-&quot;)) , (kv &quot;zelznmwts&quot; : (v false)) , (kv &quot;vafaottx&quot; : (v -1500223981)) , (kv &quot;ledflcxoehkp&quot; : (v 71251486.1832187)) , (kv &quot;kszxlkiyjyv&quot; : (v &quot;N4bFCE1j8v&quot;)) &#125;))) , (kv &quot;tkegmmk&quot; : (v &quot;7p6sJe9D6MN&quot;)) , (kv &quot;btxtaxojfj&quot; : (v (array [ (v true) , (v -1444023301.5188413) ]))) &#125;))) , (kv &quot;vtfxmbdsina&quot; : (v &quot;CfoQwAP&quot;)) , (kv &quot;lzdjoduld&quot; : (v (object &#123; (kv &quot;gtovzii&quot; : (v (array [ (v &quot;8stOHqU9H&quot;) , (v &quot;z1lFmFRa&quot;) , (v -525981145.12686515) , (v 244010675) , (v -526438903.3560455) , (v true) , (v 2006357312) , (v 115730732.30066715) ]))) , (kv &quot;mcozxjqiswx&quot; : (v (object &#123; (kv &quot;fqdnyiycce&quot; : (v -2078795136)) , (kv &quot;bxznqjtwuecc&quot; : (v &quot;7NCuYEyBP_jtdlL&quot;)) &#125;))) &#125;))) , (kv &quot;grweow&quot; : (v 1327601283.0796964)) &#125;)) , (v true) , (v &quot;ytSJb&quot;) , (v 1289937196) , (v (object &#123; (kv &quot;nsjfaqtozdiq&quot; : (v (array [ (v 1348251724) , (v -2073776674.9959857) , (v &quot;yscEon&quot;) ]))) , (kv &quot;mtajujqcjhbi&quot; : (v &quot;NVkVnnhxrLd9D3bUxzFG&quot;)) , (kv &quot;csmttzbju&quot; : (v (array [ (v (object &#123; (kv &quot;uicda&quot; : (v &quot;0g-A4hRiJTBx&quot;)) , (kv &quot;yhkgperv&quot; : (v &quot;6okbTRhoFRlg3&quot;)) , (kv &quot;vgiotooyspmz&quot; : (v true)) &#125;)) , (v -8320402.341022304) , (v (array [ (v &quot;Fojw-yk&quot;) , (v -2117892031) , (v &quot;6y-5SXj1WsZWMfDx&quot;) , (v -133903523.65406267) , (v -743256906) ])) , (v false) , (v true) , (v (object &#123; (kv &quot;edjtyrkndj&quot; : (v false)) , (kv &quot;vquvp&quot; : (v false)) , (kv &quot;buvmt&quot; : (v &quot;vKhhL2YgbMB5&quot;)) , (kv &quot;comfclpaviq&quot; : (v &quot;5CYbjxcDl&quot;)) , (kv &quot;mylfrot&quot; : (v true)) , (kv &quot;dhukpm&quot; : (v true)) , (kv &quot;caudyywms&quot; : (v &quot;cin&quot;)) , (kv &quot;lxxomkwlsw&quot; : (v true)) , (kv &quot;ygzfcjwl&quot; : (v -84334868)) &#125;)) ]))) &#125;)) ]))) &#125;)) ]))) , (kv &quot;sycer&quot; : (v &quot;i1HF-wId8QzvgqK3FA&quot;)) , (kv &quot;vhmghdmuui&quot; : (v &quot;llUmv7pH1AyiHHzvhWwD&quot;)) , (kv &quot;fgijoenp&quot; : (v 1558325042)) , (kv &quot;ykolpeo&quot; : (v (array [ (v &quot;88PS56UZulx-inCG&quot;) , (v true) , (v (object &#123; (kv &quot;fgfntzqwrl&quot; : (v &quot;PasaHKVAYZH1qz8&quot;)) , (kv &quot;libqze&quot; : (v 1223365768.3000464)) , (kv &quot;ovmzujoerw&quot; : (v (object &#123; (kv &quot;lxorfhwdepn&quot; : (v false)) , (kv &quot;damivyfbnvb&quot; : (v true)) , (kv &quot;jkisoikdnnn&quot; : (v &quot;WXkOGqTGIjjDlKaLZSS&quot;)) , (kv &quot;mfhfuqxxs&quot; : (v (array [ (v (object &#123; (kv &quot;ylpqsbar&quot; : (v &quot;JLqNwIP9&quot;)) , (kv &quot;jliqdjcs&quot; : (v &quot;d-xpY35BSvsbVTsbhky&quot;)) , (kv &quot;bylytt&quot; : (v -1977813527.9998777)) &#125;)) , (v (array [ (v (object &#123; (kv &quot;achslfrmy&quot; : (v -1619523244)) , (kv &quot;egakdwl&quot; : (v false)) , (kv &quot;okuczsx&quot; : (v &quot;yPK4R&quot;)) , (kv &quot;hvshjusz&quot; : (v 1888707639)) , (kv &quot;rsmwcjwixwq&quot; : (v false)) , (kv &quot;qztzczybq&quot; : (v true)) , (kv &quot;hmnrxaxg&quot; : (v true)) , (kv &quot;ajslgzzg&quot; : (v 346037474)) &#125;)) , (v 428389414.2818284) , (v 1820291183) ])) , (v false) , (v false) , (v &quot;KThFH8&quot;) , (v (array [ (v -1362611154) , (v -1782482339) , (v (object &#123; (kv &quot;kripj&quot; : (v true)) , (kv &quot;hleij&quot; : (v true)) , (kv &quot;efjqd&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;qakdpnaavj&quot; : (v &quot;Fser3cuOMY&quot;)) , (kv &quot;cohczheg&quot; : (v -1395581718.8152132)) , (kv &quot;zoosbosdad&quot; : (v &quot;fXb9WkG69&quot;)) , (kv &quot;dwvaqmt&quot; : (v -1209329041)) , (kv &quot;jxwogwotjte&quot; : (v &quot;Ec&quot;)) , (kv &quot;ryadgxte&quot; : (v -1619639352.0624394)) , (kv &quot;pysip&quot; : (v &quot;rak2hlB5r&quot;)) , (kv &quot;qvmivczz&quot; : (v &quot;YAoSBMaIsTq&quot;)) , (kv &quot;pyskjgobi&quot; : (v -220426541)) , (kv &quot;ncsqooescr&quot; : (v 42231826.02604102)) &#125;)) , (v false) ])) , (v (object &#123; (kv &quot;exgtpnsb&quot; : (v false)) , (kv &quot;lmmfjqbktj&quot; : (v true)) , (kv &quot;oebit&quot; : (v false)) , (kv &quot;vkubvnjc&quot; : (v (array [ (v true) , (v true) , (v false) ]))) , (kv &quot;kfaqn&quot; : (v -97139896.9271268)) , (kv &quot;hirlfp&quot; : (v &quot;-zBgX2Il0Lp&quot;)) , (kv &quot;yiuiivasqorj&quot; : (v false)) &#125;)) , (v (array [ (v false) , (v 622217944) , (v (array [ (v &quot;coL0Id&quot;) , (v &quot;hWUlEIoZs3O9StE65&quot;) , (v 1652165275.062476) , (v -984403703.8521897) , (v &quot;fdW8Q0&quot;) , (v &quot;vI1-1OOQvgoiDy8y&quot;) , (v 1642042642) , (v 40142986) ])) , (v -532192500.50051343) , (v -631464246) , (v (array [ (v true) , (v false) , (v -1321535133) , (v true) , (v false) , (v true) ])) , (v (array [ (v true) , (v 1189081854.6000803) , (v &quot;G&quot;) ])) , (v &quot;D0V8t&quot;) , (v -1373645174.969025) ])) , (v true) , (v true) ]))) , (kv &quot;coezxqikvfb&quot; : (v (array [ (v (array [ (v &quot;TJ&quot;) , (v false) , (v (object &#123; (kv &quot;qejgvqw&quot; : (v -1175428489)) , (kv &quot;vlookl&quot; : (v -23580035.57871896)) , (kv &quot;xwchrs&quot; : (v true)) , (kv &quot;yxjibfi&quot; : (v -1161161506.0811968)) &#125;)) , (v -631235238.5539757) , (v &quot;TfOa9bv-jU&quot;) ])) , (v (array [ (v (array [ (v 531397625) , (v -801203347.1844071) , (v -2058039786) , (v 420272857) , (v false) , (v -627030855) , (v true) , (v &quot;XAdqcfCr6MhHaGFIgP&quot;) , (v -324396190.9126076) ])) , (v (object &#123; (kv &quot;wrkndtkzezf&quot; : (v 1685206454.1314747)) , (kv &quot;waagoicnyf&quot; : (v -550574854)) , (kv &quot;habgnvxjr&quot; : (v &quot;ViMdI&quot;)) , (kv &quot;ndhluxfw&quot; : (v &quot;Ot8XtMUdcpREZif&quot;)) , (kv &quot;axugtu&quot; : (v 2126366783)) &#125;)) , (v (object &#123; (kv &quot;gjugtqivi&quot; : (v &quot;FBjW3KtBUF9CDt&quot;)) , (kv &quot;hljkyb&quot; : (v &quot;v8m&quot;)) , (kv &quot;lhgcfacqb&quot; : (v &quot;RXZ7oZpRqMqQkXL9&quot;)) &#125;)) , (v (object &#123; (kv &quot;gvgze&quot; : (v &quot;9PPlxSmtn&quot;)) , (kv &quot;ftpnejealy&quot; : (v 386140924)) , (kv &quot;hvaqkrhu&quot; : (v 1146501964)) , (kv &quot;vqeetpx&quot; : (v false)) , (kv &quot;afpdgdul&quot; : (v &quot;1Nd-df6rtAHcrTUmP0&quot;)) , (kv &quot;rmwwflnqwoby&quot; : (v -1653117054.804914)) , (kv &quot;fhxpvdgt&quot; : (v -1724282527)) , (kv &quot;opknvvmocs&quot; : (v 584295467.4330444)) , (kv &quot;qkpqtux&quot; : (v false)) , (kv &quot;woqzc&quot; : (v true)) &#125;)) ])) , (v &quot;7txRuWSRra&quot;) , (v 1276752681) , (v false) , (v (object &#123; (kv &quot;ujtingovsree&quot; : (v &quot;d5&quot;)) , (kv &quot;dbsgzw&quot; : (v &quot;DhJ_R&quot;)) , (kv &quot;yoisrwf&quot; : (v false)) , (kv &quot;fpklqd&quot; : (v (array [ (v &quot;BTFJTuRG&quot;) , (v &quot;Wa5HE4iq_P2&quot;) ]))) , (kv &quot;bdcsrtni&quot; : (v (array [ (v true) , (v -860576137.4352238) , (v false) , (v true) ]))) &#125;)) ]))) , (kv &quot;esqbyf&quot; : (v &quot;Ri8i0kOQBINnk&quot;)) , (kv &quot;poaosu&quot; : (v &quot;wRXmFzV&quot;)) &#125;))) , (kv &quot;hudlnngxoxvv&quot; : (v (array [ (v (object &#123; (kv &quot;hbgmvgvdzp&quot; : (v &quot;k&quot;)) &#125;)) , (v false) , (v (object &#123; (kv &quot;dymzmp&quot; : (v (object &#123; (kv &quot;elwyiqujdby&quot; : (v false)) , (kv &quot;neikbicwjj&quot; : (v &quot;WJrMffS&quot;)) , (kv &quot;vzrqsd&quot; : (v 718763689)) , (kv &quot;yhomc&quot; : (v (object &#123; (kv &quot;zrkhzfmyeak&quot; : (v 2121909918.0496738)) , (kv &quot;upiisnhbml&quot; : (v &quot;5aK8Nzem7xwtm&quot;)) , (kv &quot;tobdfqewlbp&quot; : (v true)) , (kv &quot;yssrjmzhv&quot; : (v &quot;yLrwTb&quot;)) &#125;))) , (kv &quot;wmnitbq&quot; : (v (object &#123; (kv &quot;ddeftcdgzdu&quot; : (v &quot;wi88ZHNIadWT0Prf_Whz&quot;)) , (kv &quot;ukvmjku&quot; : (v -381847229.7375061)) , (kv &quot;uqeqg&quot; : (v 890415691.2828615)) , (kv &quot;orziloh&quot; : (v &quot;iIw&quot;)) , (kv &quot;xqgoilebws&quot; : (v 1916144411)) , (kv &quot;vfpxxhh&quot; : (v false)) , (kv &quot;nstfnjnr&quot; : (v &quot;p64uOoKt6KXdvivAv1s&quot;)) &#125;))) &#125;))) , (kv &quot;jilvdomyxv&quot; : (v false)) , (kv &quot;ceuqyypj&quot; : (v 1110767780.539967)) , (kv &quot;goxtrtfaxvry&quot; : (v 207587263)) , (kv &quot;tlccpqucg&quot; : (v 334426003)) , (kv &quot;zjsdtq&quot; : (v &quot;HjNAEENv&quot;)) , (kv &quot;tzuuhiogkce&quot; : (v (object &#123; (kv &quot;mevmkwwvjnb&quot; : (v (object &#123; (kv &quot;ioosbvjb&quot; : (v false)) , (kv &quot;djgobkaiikjf&quot; : (v &quot;HE03adnL2I&quot;)) , (kv &quot;qnljxkbnerj&quot; : (v 541163549.8000541)) , (kv &quot;hnqvz&quot; : (v false)) , (kv &quot;aeehbdv&quot; : (v -1976737778)) &#125;))) , (kv &quot;tmxhfjcbnepf&quot; : (v (object &#123; (kv &quot;brslusqcde&quot; : (v true)) , (kv &quot;npkmb&quot; : (v &quot;NPlR&quot;)) , (kv &quot;tvopmpt&quot; : (v 462169666.2405092)) , (kv &quot;ewsljrvfg&quot; : (v false)) , (kv &quot;nzgdgnqvcdf&quot; : (v 1342954174.1982095)) , (kv &quot;pozmtpven&quot; : (v true)) , (kv &quot;nkisjrvv&quot; : (v &quot;oPLZZ8LE0ku-q7iQ9b&quot;)) , (kv &quot;wcujnozihxt&quot; : (v &quot;EddIW1p1XgmyJPdipXV&quot;)) &#125;))) , (kv &quot;rcomqypba&quot; : (v 462840377.43369365)) , (kv &quot;uyftgfhdiq&quot; : (v &quot;eg_jk0PqESIQj9wX&quot;)) , (kv &quot;cqgmdzetmdq&quot; : (v (object &#123; (kv &quot;sfmiozvnda&quot; : (v &quot;up&quot;)) , (kv &quot;ryscdso&quot; : (v &quot;1s6rXl7Ei3z86RWsE&quot;)) , (kv &quot;cmuovfe&quot; : (v 1821479204)) , (kv &quot;uirasazog&quot; : (v &quot;K4d31hN6vXoF3JabO&quot;)) , (kv &quot;daokpf&quot; : (v 1789880138)) , (kv &quot;yqkmiuychj&quot; : (v false)) &#125;))) , (kv &quot;gbgmwquaa&quot; : (v true)) , (kv &quot;ebrndy&quot; : (v &quot;0ljLwN7RtA5aud90&quot;)) &#125;))) , (kv &quot;kyrhia&quot; : (v true)) , (kv &quot;ywqokscmmm&quot; : (v &quot;y0iBz6SCfhSx6qr3rch&quot;)) &#125;)) , (v &quot;cmj&quot;) , (v (object &#123; (kv &quot;xzyndotshh&quot; : (v -1281975182)) , (kv &quot;nrabunreo&quot; : (v 1954812880.5355344)) &#125;)) , (v (object &#123; (kv &quot;qjambnlpx&quot; : (v (object &#123; (kv &quot;xygxwacsupec&quot; : (v (array [ (v 340391043) ]))) , (kv &quot;nheujfelpqcj&quot; : (v -932395202.0291632)) , (kv &quot;jghxkwz&quot; : (v &quot;W0&quot;)) , (kv &quot;vovicezopgsk&quot; : (v &quot;SwMFPrkM&quot;)) , (kv &quot;vgzpb&quot; : (v (array [ (v true) , (v true) , (v true) , (v -1624666979) , (v true) , (v -567706336.3549725) , (v -633739921.4671117) ]))) , (kv &quot;rlbcossoyp&quot; : (v true)) , (kv &quot;fzencfm&quot; : (v &quot;X8Mybnsr&quot;)) , (kv &quot;lnupvnoenvd&quot; : (v false)) , (kv &quot;gdsdpbt&quot; : (v -848647087.6559281)) , (kv &quot;sliqaurbahrz&quot; : (v (object &#123; (kv &quot;wxynemd&quot; : (v 634898877)) , (kv &quot;srgfo&quot; : (v &quot;vWlvX&quot;)) , (kv &quot;pfswnhm&quot; : (v &quot;Z6pa_ppPlnDg&quot;)) , (kv &quot;xfgypxcgvy&quot; : (v &quot;kJi1zL3_Ds3XKmxPLAd&quot;)) &#125;))) &#125;))) , (kv &quot;azvwyprlv&quot; : (v (array [ (v 1799632225) , (v (object &#123; (kv &quot;bqouuuoz&quot; : (v &quot;ggYxS9zRHdF-&quot;)) , (kv &quot;cfrji&quot; : (v 1967226922)) , (kv &quot;qbydbrpaljk&quot; : (v 333891598.4598398)) , (kv &quot;uakvpkibgtx&quot; : (v &quot;un3pO&quot;)) , (kv &quot;xjpywrjaadww&quot; : (v 1137214531)) , (kv &quot;kewzuzq&quot; : (v -1765992900)) , (kv &quot;ichvjf&quot; : (v true)) , (kv &quot;ixqtoq&quot; : (v 1117983701.6031604)) , (kv &quot;rmfzttl&quot; : (v false)) &#125;)) , (v false) , (v (array [ (v true) ])) , (v (array [ (v -1652605109) , (v true) ])) , (v (object &#123; (kv &quot;gxluujjwgc&quot; : (v &quot;jTCXYNl&quot;)) , (kv &quot;zzqiudvgagti&quot; : (v true)) , (kv &quot;ycxjt&quot; : (v &quot;iE&quot;)) , (kv &quot;aznlzskruj&quot; : (v true)) , (kv &quot;pdbxi&quot; : (v &quot;K-O_dzi&quot;)) , (kv &quot;icwwrcabfxi&quot; : (v -32971801)) &#125;)) , (v (array [ (v false) , (v true) , (v &quot;oO0Rx&quot;) , (v true) , (v &quot;nMwURukvCAKHAqA&quot;) , (v 1095355233) , (v -1386656049.5323694) ])) , (v (array [ (v &quot;-ZQgXzn-p&quot;) , (v &quot;pt&quot;) , (v false) , (v &quot;g-WXAHWjOHCpMfA&quot;) , (v &quot;JvboHKFgqqZbOC20D&quot;) , (v -1056842207.8321831) , (v &quot;eA3H&quot;) , (v false) , (v &quot;b3iw_&quot;) ])) ]))) , (kv &quot;tpzvzkafjc&quot; : (v &quot;CRP9YzwvFQWE6BN&quot;)) , (kv &quot;heplvvpgw&quot; : (v &quot;85OvTowA&quot;)) , (kv &quot;nbufeanahk&quot; : (v (object &#123; (kv &quot;idaas&quot; : (v &quot;_Nn&quot;)) , (kv &quot;aryad&quot; : (v (array [ (v &quot;djX6edd_fb3hYQ&quot;) , (v true) , (v 1590515175.1057904) , (v -2093542758.903518) , (v &quot;WW_F0a&quot;) , (v true) ]))) , (kv &quot;xqdbyficc&quot; : (v (array [ (v false) ]))) , (kv &quot;brywbe&quot; : (v true)) , (kv &quot;ocbqh&quot; : (v (object &#123; (kv &quot;xsummkvn&quot; : (v -1817109006.5547726)) &#125;))) , (kv &quot;rdcothbjb&quot; : (v false)) , (kv &quot;qcttxxxxi&quot; : (v (array [ (v -818807583) , (v true) , (v true) , (v false) ]))) , (kv &quot;efahpqzj&quot; : (v &quot;R57sOOr9Za2Wd&quot;)) , (kv &quot;eeapyckpew&quot; : (v (array [ (v false) , (v -1856407735) , (v false) , (v true) , (v &quot;J_O_y&quot;) , (v &quot;pm10TfTvUteKT2RXE&quot;) , (v &quot;bFHxsj&quot;) , (v false) ]))) , (kv &quot;ytcynrrietaq&quot; : (v -1527475417)) &#125;))) &#125;)) ]))) , (kv &quot;wmjzmwhqlbc&quot; : (v (array [ (v (object &#123; (kv &quot;mxvsuj&quot; : (v &quot;8c&quot;)) , (kv &quot;neihw&quot; : (v 431366429.63239086)) , (kv &quot;bnkrqpzgkdz&quot; : (v (array [ (v (array [ (v &quot;i&quot;) , (v false) , (v -1095187386) , (v &quot;odozRxO&quot;) , (v -1132872641) ])) , (v (object &#123; (kv &quot;qirbi&quot; : (v true)) , (kv &quot;znsyvcnvh&quot; : (v &quot;F&quot;)) , (kv &quot;vpezjkitzafj&quot; : (v 1400705265.7485986)) , (kv &quot;afvfegfyo&quot; : (v &quot;NrM-N&quot;)) , (kv &quot;brvusyqqzefz&quot; : (v true)) , (kv &quot;nbrxcwajbw&quot; : (v &quot;KF7Bh4wrSrYi&quot;)) , (kv &quot;azwleqebe&quot; : (v &quot;JKvo&quot;)) &#125;)) , (v &quot;ZNDoK_wen6ogHhqJWk&quot;) ]))) , (kv &quot;kdbmren&quot; : (v &quot;34v68XnTiO-7T&quot;)) , (kv &quot;atfpsjwsdsqy&quot; : (v &quot;hj7uVZcfk&quot;)) , (kv &quot;qxpfhutkhl&quot; : (v -399152168)) , (kv &quot;grthyenomao&quot; : (v false)) , (kv &quot;kojtpqup&quot; : (v &quot;_7&quot;)) , (kv &quot;cbtfxj&quot; : (v -265427838)) &#125;)) , (v (object &#123; (kv &quot;sbuoeltvd&quot; : (v -2024066120.4197364)) , (kv &quot;bnfusny&quot; : (v -629230922)) , (kv &quot;qbycq&quot; : (v true)) , (kv &quot;arskzeskrw&quot; : (v (array [ (v &quot;t-PtDdanvq8z30J16a_3&quot;) , (v false) , (v &quot;71nvF15asdFdoXH8XYR&quot;) , (v (object &#123; (kv &quot;cozcmhwzau&quot; : (v true)) , (kv &quot;uzijguinqd&quot; : (v true)) , (kv &quot;tzhbstt&quot; : (v false)) , (kv &quot;gvfnewieev&quot; : (v true)) , (kv &quot;dszopgrhnsqu&quot; : (v false)) , (kv &quot;ulzbcau&quot; : (v &quot;J-a3aeQP&quot;)) &#125;)) ]))) , (kv &quot;ueowwvdhg&quot; : (v false)) , (kv &quot;dmphkwb&quot; : (v &quot;TI5Vn&quot;)) , (kv &quot;pcnqqsmxsl&quot; : (v true)) &#125;)) ]))) , (kv &quot;akwznb&quot; : (v true)) , (kv &quot;elkgkvp&quot; : (v (array [ (v &quot;413oFyiM5dL&quot;) , (v true) , (v &quot;Q9t&quot;) , (v false) , (v (object &#123; (kv &quot;yyhdnoslf&quot; : (v &quot;Jw5Tn&quot;)) &#125;)) , (v (array [ (v (object &#123; (kv &quot;uupxbttrujqz&quot; : (v (array [ (v 1225838384) , (v true) , (v -1837761.2741319232) , (v true) ]))) , (kv &quot;ojxvk&quot; : (v &quot;Sl7oeePz&quot;)) , (kv &quot;cslhzweo&quot; : (v false)) &#125;)) ])) , (v (object &#123; (kv &quot;wurxwq&quot; : (v &quot;x&quot;)) , (kv &quot;rwidbbpdi&quot; : (v 95229170)) , (kv &quot;ohqsfyv&quot; : (v false)) , (kv &quot;cqvvjhmhhwi&quot; : (v (object &#123; (kv &quot;ghggmqazmtph&quot; : (v &quot;KiKT&quot;)) , (kv &quot;izmtvfpfoakz&quot; : (v &quot;9&quot;)) , (kv &quot;qmartopbcoy&quot; : (v false)) , (kv &quot;eoowpew&quot; : (v 864986508)) , (kv &quot;zweftgkzbb&quot; : (v (object &#123; (kv &quot;wqaextgahy&quot; : (v 83561984.3406899)) , (kv &quot;ovcgjwtyugg&quot; : (v -708383028)) , (kv &quot;pawhiadrjg&quot; : (v &quot;lxR6bQceFWYUdrBV&quot;)) , (kv &quot;ahschcfz&quot; : (v 2713669.1460380233)) , (kv &quot;msqjv&quot; : (v true)) &#125;))) &#125;))) , (kv &quot;ypktjhlfn&quot; : (v -1904703131)) , (kv &quot;jzzaenwz&quot; : (v -1042249631.5948138)) , (kv &quot;jbzmnf&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;tnfbdeozeg&quot; : (v (array [ (v &quot;t&quot;) , (v (object &#123; (kv &quot;chzuel&quot; : (v -1399189474)) , (kv &quot;qgrydtn&quot; : (v &quot;HtGAAMFmsSmfC&quot;)) , (kv &quot;cryrsgddqm&quot; : (v 143644766.18056485)) , (kv &quot;rflltq&quot; : (v 2113402702)) , (kv &quot;pgplp&quot; : (v false)) , (kv &quot;toldsj&quot; : (v -1091630692.6403463)) , (kv &quot;sumcy&quot; : (v 2099404124)) &#125;)) ]))) , (kv &quot;shdocmbbhmgl&quot; : (v false)) , (kv &quot;jvxyauzs&quot; : (v -277293084)) , (kv &quot;pkabavqtko&quot; : (v (array [ (v (object &#123; (kv &quot;efxqqui&quot; : (v false)) , (kv &quot;opzrx&quot; : (v -1693810093)) , (kv &quot;eumbfglwm&quot; : (v &quot;2jVmWV&quot;)) , (kv &quot;iialimusx&quot; : (v false)) , (kv &quot;isqfjlfbo&quot; : (v &quot;Rlb7pvn2E07hT&quot;)) , (kv &quot;fbxkrgzpmrv&quot; : (v -877809374.2971884)) &#125;)) , (v false) ]))) , (kv &quot;zyhed&quot; : (v &quot;SM53xJ7LZwg3fdmUyuB&quot;)) , (kv &quot;gltlw&quot; : (v &quot;MMQ4MkU0&quot;)) , (kv &quot;vfmfchwhg&quot; : (v true)) , (kv &quot;oliasrs&quot; : (v -1492099131.2639546)) , (kv &quot;krbak&quot; : (v &quot;uxcYBTYQUpUOf8voOc&quot;)) , (kv &quot;fyxmavfgawr&quot; : (v (object &#123; (kv &quot;keiagk&quot; : (v (array [ (v &quot;9W1oi4vy&quot;) , (v false) , (v true) , (v &quot;MA4mkG6&quot;) ]))) , (kv &quot;imfneflt&quot; : (v &quot;99v_daTjffSSYQy6c&quot;)) , (kv &quot;ipxtfprcegle&quot; : (v 862644594.1910795)) , (kv &quot;seicjcfqub&quot; : (v (array [ (v false) , (v false) , (v false) , (v 1335980611) , (v false) ]))) , (kv &quot;qsifcfucd&quot; : (v 732207890.6455723)) , (kv &quot;joedqpbcsm&quot; : (v &quot;m1RA03onfSASN_7pfJwo&quot;)) , (kv &quot;bnswqv&quot; : (v &quot;zHezJLfgWHZyymyPo&quot;)) , (kv &quot;ndwwubfmue&quot; : (v (object &#123; (kv &quot;nmuys&quot; : (v &quot;x08LXCqDFmnQxF&quot;)) &#125;))) , (kv &quot;zwaiymlva&quot; : (v &quot;ZVfU&quot;)) , (kv &quot;ljfctv&quot; : (v -566532982)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;grgufqd&quot; : (v &quot;2LnoQPQwX6x1PAT5&quot;)) , (kv &quot;rqqxr&quot; : (v true)) , (kv &quot;ztwegwwb&quot; : (v &quot;JfBFQN1sEzCG9lThUD_&quot;)) , (kv &quot;jzdtcszbjsh&quot; : (v (object &#123; (kv &quot;szjgwrfeqbwq&quot; : (v true)) , (kv &quot;kwlyydwjlb&quot; : (v (object &#123; (kv &quot;xeguokwplh&quot; : (v 1082138701)) , (kv &quot;xfwfnjwu&quot; : (v &quot;zd3GTnX2rO3HsE03e7d&quot;)) , (kv &quot;qsmeptikol&quot; : (v 1739352283.968711)) &#125;))) , (kv &quot;ntofmaixubge&quot; : (v &quot;w&quot;)) , (kv &quot;pgvwgseaw&quot; : (v false)) &#125;))) , (kv &quot;uurtfnqs&quot; : (v (object &#123; (kv &quot;ktgqagztsghp&quot; : (v (object &#123; (kv &quot;okrbo&quot; : (v &quot;0_hzBAZ&quot;)) , (kv &quot;nwlxstco&quot; : (v &quot;_iFB8HLYBjE&quot;)) , (kv &quot;xivlfsd&quot; : (v 941292043.7375271)) &#125;))) , (kv &quot;hsjnnasdskn&quot; : (v &quot;RXt6Knc6ncddU99wQJE&quot;)) , (kv &quot;vgzlbkpdpef&quot; : (v 2059991665)) , (kv &quot;abutkp&quot; : (v (object &#123; (kv &quot;izskxbf&quot; : (v &quot;_MQ8&quot;)) , (kv &quot;doqopq&quot; : (v -1072073099.9893911)) , (kv &quot;udiwnd&quot; : (v &quot;-uU0qBwQgznG&quot;)) , (kv &quot;ygmugf&quot; : (v &quot;rEWGZNUsA9j3zXJ1&quot;)) &#125;))) &#125;))) , (kv &quot;syxthvudru&quot; : (v &quot;HFT42glSkDnrm8XxByn&quot;)) &#125;)) ]))) &#125;)) , (v (object &#123; (kv &quot;khqer&quot; : (v (array [ (v false) , (v (object &#123; (kv &quot;tcdang&quot; : (v true)) , (kv &quot;wcrtt&quot; : (v (array [ (v &quot;IUdsS7AP5YuIGiPLcux&quot;) , (v true) , (v (object &#123; (kv &quot;iszogjghqdme&quot; : (v &quot;mOvQ&quot;)) , (kv &quot;erqwcrllirgp&quot; : (v &quot;LCEUXKWW6&quot;)) , (kv &quot;ppuwv&quot; : (v -1638069480)) &#125;)) , (v (array [ (v &quot;xbwqUPy2CqmaKGzjYGgj&quot;) , (v true) ])) ]))) , (kv &quot;xuqvvpjgu&quot; : (v 587748282)) , (kv &quot;yoerecjfp&quot; : (v &quot;TcSF6V71QM9qDc&quot;)) , (kv &quot;hkinpwpjtya&quot; : (v -1235207403)) , (kv &quot;lmpytjkua&quot; : (v (object &#123; (kv &quot;qeayzy&quot; : (v 1609681803)) , (kv &quot;skupvgxfgmj&quot; : (v true)) , (kv &quot;wsgrqmolddb&quot; : (v false)) &#125;))) , (kv &quot;xapacidrjwci&quot; : (v false)) , (kv &quot;vewlqfya&quot; : (v -1505822609)) , (kv &quot;hptnmqyi&quot; : (v 1964458605)) &#125;)) , (v false) , (v false) , (v (array [ (v false) , (v (array [ (v &quot;ZKvoa&quot;) , (v (array [ (v false) , (v true) , (v &quot;iP_zNQmJr9YODGRrE&quot;) , (v false) , (v -862573801.5205334) , (v 470704924.4933845) , (v true) , (v true) ])) , (v (array [ (v &quot;vlRr73Z9yKQ&quot;) , (v &quot;QekOKcTWF&quot;) , (v &quot;g9&quot;) , (v &quot;tK1AsGuebPcq5gT&quot;) , (v 744815156.0114157) , (v &quot;F563lnnyDh7JBB&quot;) , (v -1091586509) , (v true) , (v &quot;X4DnB7brSTeAVZ0nPl&quot;) ])) , (v (object &#123; (kv &quot;qroqaekrqci&quot; : (v -988886156)) , (kv &quot;hlxrw&quot; : (v false)) , (kv &quot;jtbrxuds&quot; : (v -196812410)) , (kv &quot;mazjezda&quot; : (v 1149832522)) , (kv &quot;ktuhey&quot; : (v false)) &#125;)) , (v 1747534196) , (v false) , (v (object &#123; (kv &quot;lnlzbenhuxbs&quot; : (v true)) , (kv &quot;mzobwlmkx&quot; : (v &quot;CHoTm&quot;)) , (kv &quot;cgxvchsjj&quot; : (v &quot;j3GzXyRAtK&quot;)) , (kv &quot;uvpgjrxhums&quot; : (v 46883908.35847041)) , (kv &quot;vyzbxcwjhcuf&quot; : (v -262415858.2344973)) , (kv &quot;dmhrsss&quot; : (v 980331266.1202828)) , (kv &quot;isobj&quot; : (v false)) , (kv &quot;diqwig&quot; : (v -1662428453.0488622)) , (kv &quot;cnrtgscjh&quot; : (v &quot;5P&quot;)) &#125;)) ])) , (v &quot;x0D_T0gStehqg&quot;) , (v 2038449666) ])) , (v &quot;--&quot;) , (v -257452405) ]))) , (kv &quot;xhdjhvbbzi&quot; : (v (array [ (v &quot;thlkqORxHYSrq6&quot;) ]))) , (kv &quot;qgjsd&quot; : (v (object &#123; (kv &quot;hefrnkcuhukg&quot; : (v 1414682479)) , (kv &quot;dzgabuqiqkeu&quot; : (v &quot;_OC&quot;)) , (kv &quot;raylmoi&quot; : (v (array [ (v (array [ (v 1261750707.9350622) , (v (array [ (v true) , (v true) , (v true) , (v &quot;dM7SKVbVIlN9kkbAt-&quot;) , (v -1688606776.865353) ])) , (v (array [ (v -1974516927) , (v 778046617) , (v false) , (v 1660585964.6766663) ])) , (v (array [ (v 1437608012) , (v false) , (v &quot;ekFL1QAz539v&quot;) ])) , (v (array [ (v -965784674) , (v 917444701.599134) , (v &quot;hobzLlT077ffsmjyVJza&quot;) , (v &quot;jku&quot;) , (v true) , (v 1269961638.8205886) , (v &quot;begBiXJD8GVRt5&quot;) , (v 1981243353.2825513) ])) ])) ]))) , (kv &quot;mwqhhxi&quot; : (v 1224280321)) , (kv &quot;vyvwzyrhlmij&quot; : (v (object &#123; (kv &quot;tvfedfwiydi&quot; : (v true)) , (kv &quot;ubvshvar&quot; : (v 357853522.94037277)) , (kv &quot;ifsanjhmlan&quot; : (v true)) , (kv &quot;xzpfnkpuseeu&quot; : (v -1437887099.366021)) , (kv &quot;blzblzfipzsb&quot; : (v (array [ (v (object &#123; (kv &quot;mtlld&quot; : (v 606806810.5353504)) &#125;)) , (v 513242589) , (v (array [ (v &quot;4PPUSOh&quot;) ])) , (v &quot;o7gyErrUF_OO&quot;) , (v 779910928.9457561) , (v 725403731.5453243) , (v (array [ (v &quot;Mwuep_vs3NICxzyVg&quot;) , (v &quot;EcGddf3x-s9B&quot;) , (v -114166931.70836346) , (v false) ])) , (v (object &#123; (kv &quot;tzrqz&quot; : (v &quot;wZCbblJStx&quot;)) , (kv &quot;irxgfi&quot; : (v -840824075)) , (kv &quot;ainkogqiw&quot; : (v &quot;lVzO_a3K4rJbQlZz3cKz&quot;)) , (kv &quot;zzwlcpuax&quot; : (v -351879049.34823805)) , (kv &quot;nuvjwhkor&quot; : (v -976311756.2356169)) , (kv &quot;jnigghuee&quot; : (v &quot;ZhUW1OdR&quot;)) , (kv &quot;vbklz&quot; : (v 102928883)) , (kv &quot;cxdvfe&quot; : (v &quot;CMV6qey&quot;)) &#125;)) ]))) , (kv &quot;tnnfl&quot; : (v (array [ (v (object &#123; (kv &quot;fiyepmng&quot; : (v true)) , (kv &quot;gruwflcpi&quot; : (v 2061722071.3332555)) , (kv &quot;gzidhmz&quot; : (v &quot;ZARldKlcrNDSPtM-BcX5&quot;)) , (kv &quot;squojhvm&quot; : (v 1319158712.813816)) , (kv &quot;iraaurvtcwxp&quot; : (v 1703367132.1705606)) , (kv &quot;tmhfj&quot; : (v true)) , (kv &quot;ledoer&quot; : (v &quot;wgjcoqcqfr&quot;)) &#125;)) , (v (object &#123; (kv &quot;ymjgzviomn&quot; : (v -799748891)) , (kv &quot;zqfrdk&quot; : (v &quot;F&quot;)) , (kv &quot;hiwsih&quot; : (v false)) , (kv &quot;uxglwwb&quot; : (v &quot;3XnTvoXo3&quot;)) , (kv &quot;sjonftbvmi&quot; : (v &quot;NSQSV5TUTZ&quot;)) , (kv &quot;tyvjdbowtuqd&quot; : (v false)) , (kv &quot;vyfbbzusfim&quot; : (v -2026203141.9014688)) , (kv &quot;ftlsdid&quot; : (v -1010682756.7113624)) , (kv &quot;rfrwmn&quot; : (v false)) , (kv &quot;pfdileg&quot; : (v &quot;dSk9egdB6e_&quot;)) &#125;)) ]))) , (kv &quot;gdodt&quot; : (v (array [ (v (object &#123; (kv &quot;vmyzm&quot; : (v -439700837)) , (kv &quot;zwdidxwnspkd&quot; : (v &quot;NHAM9_r&quot;)) , (kv &quot;cyvbaurmgmln&quot; : (v -1667505671.8765008)) , (kv &quot;tjoislquuxvv&quot; : (v -63911009)) , (kv &quot;ixiuvashmkr&quot; : (v &quot;gVuv&quot;)) , (kv &quot;wwnjrivcvjn&quot; : (v &quot;zTL1r--ymAZ&quot;)) , (kv &quot;wgepehgd&quot; : (v true)) &#125;)) , (v &quot;zjWW&quot;) ]))) &#125;))) , (kv &quot;sajbvpb&quot; : (v (object &#123; (kv &quot;qcloywiur&quot; : (v (object &#123; (kv &quot;yhorytusuz&quot; : (v -1379688463.1455112)) , (kv &quot;hogkfsgzpamu&quot; : (v -666842903)) , (kv &quot;lsayekkqs&quot; : (v -994958780.7773955)) , (kv &quot;oadgsdrnp&quot; : (v &quot;ygmT11y92&quot;)) , (kv &quot;xitnxkvvjgq&quot; : (v (object &#123; (kv &quot;ncnxktnpkad&quot; : (v &quot;bMSH40DQ3SHl6&quot;)) , (kv &quot;wtnqywvrsxet&quot; : (v true)) , (kv &quot;odopv&quot; : (v 1704202652.1402304)) , (kv &quot;nbcjnxzfhou&quot; : (v true)) , (kv &quot;dslwgdpgrij&quot; : (v false)) , (kv &quot;izhysr&quot; : (v 75853655.80537708)) &#125;))) , (kv &quot;mbogqtxbincw&quot; : (v -816104583.1152381)) , (kv &quot;gyclsmz&quot; : (v &quot;I2mIXBLLCBQTI2sk&quot;)) &#125;))) , (kv &quot;uvohdkkwtpnx&quot; : (v (object &#123; (kv &quot;bkqpxl&quot; : (v true)) , (kv &quot;qrbhv&quot; : (v (array [ (v &quot;v&quot;) ]))) , (kv &quot;skjxpncfrge&quot; : (v false)) , (kv &quot;usovgpr&quot; : (v (array [ (v &quot;P1wmVlh-&quot;) , (v -1518359520) , (v true) , (v false) , (v true) ]))) , (kv &quot;bsjydwu&quot; : (v (array [ (v true) , (v &quot;Y&quot;) , (v &quot;LSYKAv1gDE5OSCOc&quot;) , (v &quot;4RaIKjGY1jaPr6cn&quot;) ]))) &#125;))) , (kv &quot;hnigy&quot; : (v true)) , (kv &quot;fpogrokuqj&quot; : (v false)) , (kv &quot;hdbkrl&quot; : (v (array [ (v 956507853) , (v (object &#123; (kv &quot;bjmwhvgc&quot; : (v true)) , (kv &quot;vpxthxybwm&quot; : (v true)) , (kv &quot;vfkka&quot; : (v &quot;WnXCcABs20V4P9ZwxF&quot;)) , (kv &quot;gpertrf&quot; : (v false)) , (kv &quot;fjnfovsgng&quot; : (v &quot;NR6z37bwW8Ydil&quot;)) , (kv &quot;cewpd&quot; : (v &quot;Augz4JjvyTZiFH&quot;)) &#125;)) , (v (array [ (v &quot;0vADm5fHM311Dqms&quot;) , (v &quot;Ywus1q&quot;) , (v &quot;l3R7oY-YstdhC&quot;) , (v true) ])) , (v (array [ (v false) , (v true) , (v true) ])) ]))) , (kv &quot;oqhhnjphghbf&quot; : (v -1990764709)) , (kv &quot;bqroyt&quot; : (v &quot;zbS9zKmLyi&quot;)) , (kv &quot;mxswvycxk&quot; : (v (object &#123; (kv &quot;ecuukhnx&quot; : (v (array [ (v -1031661410) , (v &quot;gxxDR2UrsB6FX7EsK&quot;) , (v &quot;W5UeCms_pG1XKnQiGnC1&quot;) , (v true) , (v 1279258678) , (v &quot;haXr&quot;) , (v &quot;b&quot;) , (v -859144426) , (v false) ]))) , (kv &quot;ooyjsehuley&quot; : (v -260638973.93744504)) , (kv &quot;okzzvy&quot; : (v (object &#123; (kv &quot;zdwuti&quot; : (v &quot;nmULtLEpRm&quot;)) , (kv &quot;rbmylisp&quot; : (v true)) , (kv &quot;iqqxy&quot; : (v &quot;A0R1JNBNg&quot;)) , (kv &quot;htmsh&quot; : (v true)) , (kv &quot;olyfzrwa&quot; : (v false)) &#125;))) , (kv &quot;djlddewcp&quot; : (v false)) , (kv &quot;dteztss&quot; : (v (object &#123; (kv &quot;vjdksmwy&quot; : (v true)) , (kv &quot;rnrmvweunet&quot; : (v -1554963459.8263817)) , (kv &quot;cwuyrr&quot; : (v -1539560369)) , (kv &quot;nfbmvdqhbn&quot; : (v true)) , (kv &quot;wscnr&quot; : (v &quot;-QL4jvEip3kIjD3X_HqX&quot;)) , (kv &quot;fqhytiab&quot; : (v &quot;7HgHf-t-nDE&quot;)) , (kv &quot;sdrxhigfwyz&quot; : (v &quot;6L2iCph7cik&quot;)) &#125;))) &#125;))) , (kv &quot;wpkzvs&quot; : (v (array [ (v true) , (v (array [ (v -824736981.3011173) , (v &quot;NLLHrW6FdWbYXy5&quot;) , (v 1772019627.6826005) , (v -1237801588.9772856) , (v true) , (v 1699988814) , (v -670454594) ])) , (v (array [ (v &quot;zHk-3vfEyqWJAzHN6E&quot;) , (v 298547097) , (v -306906116) , (v true) , (v &quot;yORZJB-gJy5i&quot;) , (v -1577708022) , (v true) ])) , (v false) ]))) &#125;))) , (kv &quot;neixga&quot; : (v true)) , (kv &quot;oqrmbmjmjwc&quot; : (v false)) , (kv &quot;xggut&quot; : (v &quot;aLLbZ0_fLQFJSn7vbQ-N&quot;)) , (kv &quot;wphmqzbwpp&quot; : (v (array [ (v -988844865) ]))) &#125;))) , (kv &quot;qkerwnf&quot; : (v &quot;I3Ehd9v8O&quot;)) &#125;)) , (v true) , (v &quot;vKMrzQC0DwPZTqXEEo&quot;) , (v &quot;FlSpCCj0JjXQ&quot;) , (v -262821999) , (v &quot;uyGwNgotAHeKb8tXF6&quot;) , (v &quot;juP-aqqitcx0MLKNtv&quot;) ]))) , (kv &quot;rkdzkji&quot; : (v (object &#123; (kv &quot;opmnqsbrql&quot; : (v false)) &#125;))) , (kv &quot;xboipcso&quot; : (v true)) &#125;))) , (kv &quot;sqvizokcr&quot; : (v &quot;lg2WCWuOOKblGEvuJxry&quot;)) , (kv &quot;yphghvuatif&quot; : (v (array [ (v &quot;KHX&quot;) , (v (object &#123; (kv &quot;gcempqa&quot; : (v -435758201)) , (kv &quot;pfkjlnucldzt&quot; : (v (array [ (v &quot;4B2QBgFw1&quot;) , (v (object &#123; (kv &quot;clfmgbpylozu&quot; : (v (array [ (v (object &#123; (kv &quot;wykkewfsvkfx&quot; : (v true)) &#125;)) , (v (array [ (v true) ])) , (v false) ]))) , (kv &quot;gkpjmwde&quot; : (v false)) , (kv &quot;wfbmk&quot; : (v (object &#123; (kv &quot;hjhwydqlgck&quot; : (v false)) , (kv &quot;zntpb&quot; : (v 1426698482.2730246)) , (kv &quot;pfhvvwf&quot; : (v (array [ (v true) , (v false) , (v true) , (v (object &#123; (kv &quot;ymtwgdp&quot; : (v -1610821698.0233555)) , (kv &quot;fxotjx&quot; : (v -982010626)) , (kv &quot;fakcosl&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;taetdp&quot; : (v true)) , (kv &quot;zlxtouucw&quot; : (v true)) , (kv &quot;dopar&quot; : (v 2133262238.939302)) , (kv &quot;zacsyzzafhyz&quot; : (v &quot;5H6koXgeSJjFM1-A&quot;)) , (kv &quot;ilxfap&quot; : (v -6357516)) , (kv &quot;zwmwa&quot; : (v &quot;220X8A7o75Qip&quot;)) , (kv &quot;pdavucrzogah&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;lfeqc&quot; : (v 622047750.3004048)) , (kv &quot;baveivifz&quot; : (v 955086141.1868833)) , (kv &quot;upqtrzh&quot; : (v &quot;eV17ZNGeu3jF4xs&quot;)) , (kv &quot;qfyiaui&quot; : (v &quot;h&quot;)) , (kv &quot;srkxtfqvou&quot; : (v 950475571.8482186)) , (kv &quot;snyqzwvcr&quot; : (v 1997060590.3469007)) , (kv &quot;ketvuoitkaj&quot; : (v false)) , (kv &quot;dyicvmuxonvc&quot; : (v 1238057345.405381)) , (kv &quot;xzhtg&quot; : (v 1081780473.5438356)) &#125;)) , (v -43776949.58843712) , (v -1066018084) ]))) , (kv &quot;lmnfdiycp&quot; : (v (array [ (v false) , (v &quot;wybvLjnvWah&quot;) , (v (object &#123; (kv &quot;oqwixwsv&quot; : (v -349342221)) , (kv &quot;liufgx&quot; : (v true)) , (kv &quot;orwbmcephb&quot; : (v true)) , (kv &quot;pqvumndiu&quot; : (v 719429786)) , (kv &quot;qsqybtshm&quot; : (v false)) , (kv &quot;kuunxjf&quot; : (v &quot;kfQ4Ms&quot;)) , (kv &quot;hofhyeiz&quot; : (v &quot;11Vg1Zxz-2o1qAd&quot;)) , (kv &quot;kocnrvu&quot; : (v -2121340188.659414)) &#125;)) , (v (array [ (v 868650456) , (v true) , (v false) , (v &quot;ytP2qezeqTj9bX5MipJ&quot;) , (v -1684183822.181116) , (v false) , (v false) , (v true) ])) , (v &quot;sd-0&quot;) , (v &quot;buxK0y0Lg34Ha&quot;) ]))) , (kv &quot;bqivwbovyok&quot; : (v &quot;y87Ga3RoThgm4zQoW&quot;)) , (kv &quot;vmcnod&quot; : (v (array [ (v (array [ (v false) , (v &quot;P7PwFdKQE2Nv5EHAWyR&quot;) , (v false) ])) ]))) , (kv &quot;zixdwj&quot; : (v (object &#123; (kv &quot;gcelk&quot; : (v (object &#123; (kv &quot;ccdvni&quot; : (v &quot;qjfoGTlqW1SK0XE&quot;)) , (kv &quot;aivxcz&quot; : (v &quot;hWaXUzPF5KHXhD24&quot;)) , (kv &quot;wbvjmchlsnhz&quot; : (v &quot;ayxY4K8yfSqLWJDKNyl&quot;)) , (kv &quot;wvaodhthpkq&quot; : (v 1824810533)) , (kv &quot;ohxnd&quot; : (v -1558047131)) &#125;))) , (kv &quot;rylhvguawz&quot; : (v 1026463459)) &#125;))) &#125;))) , (kv &quot;qduvuqqjgd&quot; : (v false)) , (kv &quot;voeaxmnswjmu&quot; : (v (object &#123; (kv &quot;ecjpiovrveko&quot; : (v &quot;hGin1d3EvmP-7IL2&quot;)) , (kv &quot;weapu&quot; : (v (array [ (v false) , (v (array [ (v -343302248) , (v &quot;1b_gbcshP4l&quot;) ])) , (v (array [ (v false) , (v true) , (v &quot;HOQGH25Sh-_q6HlMBA&quot;) ])) , (v (object &#123; (kv &quot;ampaeupvlcpv&quot; : (v &quot;8cv-88-&quot;)) , (kv &quot;soidbtehv&quot; : (v &quot;xreI&quot;)) &#125;)) , (v (array [ (v &quot;MEIC1fse&quot;) , (v true) , (v &quot;nmQuAHdLVa&quot;) ])) , (v (object &#123; (kv &quot;qgmacn&quot; : (v true)) , (kv &quot;xafonjd&quot; : (v -1511285736)) , (kv &quot;qvvvofsfnalt&quot; : (v false)) , (kv &quot;amzwr&quot; : (v 520195117.50623035)) , (kv &quot;lsuud&quot; : (v 1627220284)) , (kv &quot;ulaym&quot; : (v true)) &#125;)) , (v false) , (v -1951910240.1517031) , (v &quot;TxN5qnk&quot;) , (v -1508050847) ]))) , (kv &quot;lluecptqhplu&quot; : (v (object &#123; (kv &quot;qpsvw&quot; : (v -1383734218.1532288)) , (kv &quot;nhswnlx&quot; : (v -1411487489.4017806)) &#125;))) , (kv &quot;hpqmxcqc&quot; : (v (object &#123; (kv &quot;uwcontr&quot; : (v (object &#123; (kv &quot;kmmglniuqrzz&quot; : (v &quot;FYd&quot;)) , (kv &quot;qaxcmqw&quot; : (v -4716927)) , (kv &quot;pyxeoansbdur&quot; : (v true)) , (kv &quot;fhpepladgkc&quot; : (v &quot;DWjeMHlYwyxB&quot;)) , (kv &quot;xsfcnf&quot; : (v true)) , (kv &quot;scldwjzv&quot; : (v 605622367.263732)) , (kv &quot;vdcisfkg&quot; : (v true)) , (kv &quot;ymerdawujuvm&quot; : (v 1522284921)) , (kv &quot;gjebutthrq&quot; : (v &quot;BsN7FuQWdhFMo2vxGLV&quot;)) &#125;))) , (kv &quot;gzlbgdswtg&quot; : (v false)) , (kv &quot;xylhbzlljel&quot; : (v false)) , (kv &quot;vgrabym&quot; : (v (object &#123; (kv &quot;ldexyhoxiw&quot; : (v false)) , (kv &quot;ixvucs&quot; : (v &quot;O155cd6C&quot;)) , (kv &quot;yxlpdwxss&quot; : (v true)) , (kv &quot;lwfgdnncrbb&quot; : (v false)) , (kv &quot;nspmy&quot; : (v true)) , (kv &quot;ofgnuvr&quot; : (v &quot;CNkm&quot;)) , (kv &quot;cvzjz&quot; : (v false)) , (kv &quot;mtbbanavmqku&quot; : (v 634785919.1245813)) , (kv &quot;mdfalo&quot; : (v false)) &#125;))) , (kv &quot;znqqoxwz&quot; : (v (object &#123; (kv &quot;sssdvxyg&quot; : (v false)) , (kv &quot;yqtacvdtumm&quot; : (v -843524312.9739331)) , (kv &quot;jlltvpgblk&quot; : (v 474917399.0235441)) , (kv &quot;gzizhlcnthiu&quot; : (v &quot;FpozppFyAy9THKziJkj6&quot;)) &#125;))) , (kv &quot;kjxvglgtpyts&quot; : (v 1288059843.9959335)) , (kv &quot;mxstyhruj&quot; : (v &quot;BHq&quot;)) , (kv &quot;kgpkvsl&quot; : (v &quot;t&quot;)) &#125;))) &#125;))) , (kv &quot;pyqceyga&quot; : (v &quot;l2_GqR6sjpIP8t&quot;)) &#125;)) , (v -903701859) , (v false) , (v false) , (v 1728992263) ]))) &#125;)) , (v false) , (v -672356226.957377) , (v 1035684588) , (v &quot;8&quot;) , (v (object &#123; (kv &quot;bxxvoj&quot; : (v &quot;TBN3W2JlXE3Og2od7&quot;)) , (kv &quot;myathmkth&quot; : (v (array [ (v (array [ (v (array [ (v (object &#123; (kv &quot;bkywset&quot; : (v (object &#123; (kv &quot;ibfwzvemftqr&quot; : (v -1079506988.3973684)) , (kv &quot;bzjin&quot; : (v &quot;ZQ&quot;)) , (kv &quot;spssumdxtlk&quot; : (v false)) , (kv &quot;heaed&quot; : (v false)) , (kv &quot;ckopwart&quot; : (v true)) , (kv &quot;shbkunked&quot; : (v 1771550310)) , (kv &quot;qebraekrkv&quot; : (v &quot;hvKAFeR&quot;)) , (kv &quot;seofjkg&quot; : (v &quot;oBA0&quot;)) , (kv &quot;ivpoo&quot; : (v -1519804200.870205)) &#125;))) , (kv &quot;zkzhszvy&quot; : (v false)) , (kv &quot;cbpfigkqg&quot; : (v (object &#123; (kv &quot;txfljrmef&quot; : (v &quot;UlIEg1D_XBPmJLtjYX&quot;)) , (kv &quot;blduuxkg&quot; : (v false)) , (kv &quot;pubxki&quot; : (v false)) , (kv &quot;fkdaajcdr&quot; : (v true)) &#125;))) , (kv &quot;eatzilo&quot; : (v &quot;3Js9qlvLgmIN5Jx&quot;)) , (kv &quot;cvouqqqfbmhd&quot; : (v 171988647)) , (kv &quot;duotchdxw&quot; : (v true)) , (kv &quot;hjadhohlk&quot; : (v &quot;ezA6qurjYaJ&quot;)) &#125;)) , (v &quot;aN1mtSa&quot;) , (v 2029903438) , (v true) , (v (array [ (v (array [ (v false) , (v true) , (v -2128210644) , (v -250665377.27768734) , (v true) ])) , (v &quot;x&quot;) , (v true) , (v false) , (v &quot;smIG&quot;) , (v &quot;CoLs&quot;) , (v false) ])) , (v &quot;s2p&quot;) , (v (array [ (v (object &#123; (kv &quot;nbtzzsrfkb&quot; : (v 642071068.7049124)) &#125;)) , (v -971868225) , (v false) , (v (object &#123; (kv &quot;vdrhibk&quot; : (v 623425684)) , (kv &quot;pdhsilahxqpo&quot; : (v &quot;7ieoVifxJkddsXt&quot;)) , (kv &quot;vvuzpopy&quot; : (v false)) , (kv &quot;eybdmglrj&quot; : (v false)) , (kv &quot;bkhtv&quot; : (v -1661861702.5063853)) , (kv &quot;emwsrutts&quot; : (v &quot;eA52oBr&quot;)) , (kv &quot;pwlsjkoidkmk&quot; : (v &quot;G6juG2OWs1d9&quot;)) , (kv &quot;rkqnp&quot; : (v -1741937058)) , (kv &quot;efqrfia&quot; : (v true)) , (kv &quot;kumjec&quot; : (v false)) &#125;)) , (v (array [ (v 648097805.0335655) , (v true) , (v -2112661578.3023882) , (v -1146653657) , (v &quot;dir8&quot;) , (v true) , (v true) ])) , (v true) , (v false) , (v &quot;9P3&quot;) ])) , (v -1334820002) , (v 595712603.0936697) ])) , (v -281537918) ])) , (v &quot;Uvg3Y3oFHNUxEp30&quot;) , (v (object &#123; (kv &quot;hgyzdkdy&quot; : (v (array [ (v &quot;9Uie314BMftima&quot;) , (v true) , (v (object &#123; (kv &quot;sotct&quot; : (v true)) &#125;)) , (v &quot;59U3b8i&quot;) ]))) , (kv &quot;yokbdhwh&quot; : (v false)) , (kv &quot;eynjbrwb&quot; : (v true)) , (kv &quot;oabxvq&quot; : (v &quot;2DoHvk857a_lrfklT4&quot;)) &#125;)) , (v (object &#123; (kv &quot;osygtmx&quot; : (v (array [ (v false) , (v (object &#123; (kv &quot;nsfddvwp&quot; : (v &quot;idKBQd3lZ29Tjgfe1y&quot;)) , (kv &quot;spsgmhntf&quot; : (v 330631670)) , (kv &quot;nibycsnme&quot; : (v &quot;Dw8cBUziw8En&quot;)) &#125;)) , (v &quot;Nv&quot;) , (v &quot;1joRrD&quot;) ]))) , (kv &quot;lnuqzcushd&quot; : (v -1676899906.901859)) &#125;)) , (v false) , (v &quot;g-8UktsAr06Eh0L2Poo0&quot;) , (v false) ]))) &#125;)) ]))) &#125;)) , (v -213332158.27588025) ]))) , (kv &quot;nbnggrygoy&quot; : (v &quot;yp&quot;)) , (kv &quot;ycumlxwikgr&quot; : (v (object &#123; (kv &quot;iyubzkip&quot; : (v false)) , (kv &quot;offnsfcl&quot; : (v true)) , (kv &quot;ksyweaa&quot; : (v (object &#123; (kv &quot;uxtvieoit&quot; : (v false)) &#125;))) &#125;))) , (kv &quot;rgvqdwb&quot; : (v (object &#123; (kv &quot;jybsltnvy&quot; : (v (object &#123; (kv &quot;xlppzktcs&quot; : (v &quot;J1JdsVwVyJdrQa649K3&quot;)) , (kv &quot;bwavtox&quot; : (v &quot;QtHHotgt-L&quot;)) , (kv &quot;urjtvql&quot; : (v (array [ (v &quot;7KC-uxYUw8zX&quot;) , (v true) , (v (array [ (v true) , (v false) , (v (object &#123; (kv &quot;ukqypkmyvorz&quot; : (v (object &#123; (kv &quot;fsbkh&quot; : (v (array [ (v true) , (v -396259340) , (v (array [ (v &quot;5-ve18wqKWFnnT&quot;) , (v (array [ (v &quot;oqaPSB9Ry&quot;) , (v &quot;AiIg3ixsCel&quot;) ])) , (v true) , (v (object &#123; (kv &quot;tvris&quot; : (v 98702793)) , (kv &quot;kqeprkrsqczh&quot; : (v false)) , (kv &quot;cznzkycnpr&quot; : (v -1884812888.907853)) , (kv &quot;prgxikvoqufx&quot; : (v false)) , (kv &quot;ifubqotxloo&quot; : (v false)) , (kv &quot;zrofrgar&quot; : (v false)) , (kv &quot;jxpcv&quot; : (v -2070201681.387905)) &#125;)) , (v 1214036958.5357575) ])) , (v true) , (v &quot;SsWiQyfqVjwX&quot;) , (v &quot;EE&quot;) , (v -110675921.80617763) ]))) , (kv &quot;eupxdds&quot; : (v true)) &#125;))) , (kv &quot;wobzbzsqtg&quot; : (v false)) , (kv &quot;okngdfyyrcr&quot; : (v -1464983761)) , (kv &quot;vmtnsjlalehh&quot; : (v &quot;sTugHHf8XIxWo0eHD&quot;)) , (kv &quot;rzuntodsepbs&quot; : (v &quot;4&quot;)) , (kv &quot;wdvvsb&quot; : (v (array [ (v (array [ (v (object &#123; (kv &quot;tpjeqsmkt&quot; : (v false)) , (kv &quot;cbqzndrzjjsj&quot; : (v (object &#123; (kv &quot;nviisdo&quot; : (v -1521429533.4565473)) , (kv &quot;nobssdwar&quot; : (v 1343226861.2757792)) , (kv &quot;gqwlsrfzwf&quot; : (v &quot;3iaxwkt0RM&quot;)) , (kv &quot;gakijsy&quot; : (v &quot;lE1mFr&quot;)) , (kv &quot;zgdmkv&quot; : (v 556129813.9012625)) , (kv &quot;ywzfvk&quot; : (v false)) , (kv &quot;tuvnyjygk&quot; : (v &quot;7Pt5vC3T6fUwiF&quot;)) &#125;))) , (kv &quot;httjvpcosyfh&quot; : (v false)) , (kv &quot;lercx&quot; : (v (array [ (v &quot;ScvOCA&quot;) ]))) , (kv &quot;mxuisw&quot; : (v (object &#123; (kv &quot;cebidi&quot; : (v true)) , (kv &quot;nmaumyfw&quot; : (v false)) , (kv &quot;qirrf&quot; : (v true)) , (kv &quot;hapgodsohrev&quot; : (v false)) , (kv &quot;uuyqhluhdd&quot; : (v 1225244835.6137476)) , (kv &quot;btcboshxj&quot; : (v -1726960766.593483)) , (kv &quot;bmjdmvjgyct&quot; : (v false)) , (kv &quot;zipprm&quot; : (v &quot;1-4uLH4Nd4&quot;)) , (kv &quot;rweybknzrjw&quot; : (v false)) &#125;))) , (kv &quot;gfldjngmcetb&quot; : (v &quot;Xwi1Is-Wae5Mh&quot;)) , (kv &quot;dbkbytfqqfu&quot; : (v &quot;XrYFgqcwWf&quot;)) , (kv &quot;lzmomz&quot; : (v 1210828284.458338)) &#125;)) , (v (object &#123; (kv &quot;qofgjsbpa&quot; : (v &quot;lPe3YVp3tkUzZN&quot;)) , (kv &quot;hatcsniudmii&quot; : (v (array [ (v &quot;B7_&quot;) , (v &quot;NyV_Jonz2OAyY6ltALj1&quot;) , (v 634956320.1239021) , (v false) , (v &quot;_pTUM4JspaI5O865ma9&quot;) , (v &quot;cRngbJYyKXRVbLuhL&quot;) , (v &quot;Rv&quot;) , (v &quot;R&quot;) , (v true) ]))) , (kv &quot;kacunnn&quot; : (v 1399556841.028177)) , (kv &quot;iupsnyhoiiq&quot; : (v (array [ (v -1972922641.9374359) , (v &quot;s&quot;) ]))) , (kv &quot;aymyrxrmi&quot; : (v -741296721)) , (kv &quot;tsmyxkhr&quot; : (v 1085629646.5417953)) , (kv &quot;nvgkuv&quot; : (v true)) , (kv &quot;xtbheqtcbapi&quot; : (v true)) &#125;)) , (v &quot;Ydke&quot;) ])) , (v &quot;zpt3ABbbdSt0B-&quot;) , (v (object &#123; (kv &quot;omgtdid&quot; : (v &quot;U8Z&quot;)) , (kv &quot;osvqnbs&quot; : (v (array [ (v false) , (v (array [ (v true) , (v false) ])) , (v (object &#123; (kv &quot;edpuszxim&quot; : (v false)) , (kv &quot;pifkmxdrsur&quot; : (v false)) , (kv &quot;xvqkqkdnolxm&quot; : (v 978118458.574277)) , (kv &quot;xpoccptq&quot; : (v 47526341)) , (kv &quot;evinetjp&quot; : (v &quot;kjPIsTJFZlp5xHYu&quot;)) , (kv &quot;lzapr&quot; : (v &quot;VRgwazYF&quot;)) , (kv &quot;kadxwpgbkhp&quot; : (v false)) , (kv &quot;srazywmgm&quot; : (v 602758167.3839445)) , (kv &quot;tcxutxugzqcq&quot; : (v 1452428179.1749983)) , (kv &quot;dultxrq&quot; : (v -1007461906)) &#125;)) , (v (array [ (v &quot;8b-Pr7Kn&quot;) , (v -487416787.86377096) , (v &quot;U2_Zrf82MYOPzu1snwH&quot;) , (v &quot;F&quot;) ])) ]))) , (kv &quot;wmxwqd&quot; : (v &quot;tgk&quot;)) , (kv &quot;arwnqyja&quot; : (v (array [ (v (object &#123; (kv &quot;jqovvdluiyrv&quot; : (v -213492824)) , (kv &quot;wgdgghkon&quot; : (v -1134931908)) , (kv &quot;jtpzqudrwvr&quot; : (v false)) , (kv &quot;wdjtsriuflz&quot; : (v &quot;9TR2fwOU8bJK6YiHMd1W&quot;)) , (kv &quot;rksrbxhf&quot; : (v -1687481301)) , (kv &quot;bqmerjt&quot; : (v &quot;O8&quot;)) , (kv &quot;gggrphsuu&quot; : (v true)) , (kv &quot;ueafywvz&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;eahupohevotx&quot; : (v &quot;80x3KZ&quot;)) &#125;)) , (v true) ]))) &#125;)) , (v true) , (v &quot;JdyIX2-Hn4OEk&quot;) , (v &quot;STde89a7noAlPR&quot;) , (v &quot;dBq21b8vjY4mlsICX&quot;) ]))) &#125;)) , (v (array [ (v &quot;h8hocFCh&quot;) , (v false) , (v (array [ (v (array [ (v &quot;JrZEt5&quot;) , (v &quot;2K3NMgoO4gV&quot;) ])) , (v true) , (v (array [ (v (array [ (v (object &#123; (kv &quot;ppxflqzqraah&quot; : (v &quot;iQQHa&quot;)) , (kv &quot;epixkvau&quot; : (v 758653854)) &#125;)) , (v (array [ (v false) , (v &quot;eypg&quot;) ])) , (v (array [ (v -1380729948.803885) , (v 2126935865) , (v 2000434995) , (v false) , (v &quot;-zAki_NR-7rJ-DTA1KX&quot;) , (v true) ])) ])) , (v 1062605677.5219938) , (v 1675845058.2376373) , (v false) ])) , (v &quot;G-Yr5hdfY4P3LZjlpi&quot;) , (v (object &#123; (kv &quot;pjfwt&quot; : (v 2129191539)) , (kv &quot;lxltli&quot; : (v 1789733854.3638878)) , (kv &quot;wfxtvbczg&quot; : (v true)) , (kv &quot;usglsqvortk&quot; : (v (array [ (v &quot;vhy-S1Q2&quot;) , (v (array [ (v -2031983774) , (v &quot;NNqZ&quot;) , (v -1504365382.5674405) , (v &quot;JhSjhaU3x6vi&quot;) , (v true) , (v true) , (v 579475293.7172605) , (v true) ])) , (v (object &#123; (kv &quot;ibjpvhriglff&quot; : (v 305281416)) , (kv &quot;yiywlzqv&quot; : (v &quot;gLyGVouaO4GoWmP3qWm&quot;)) &#125;)) ]))) , (kv &quot;kaaatkapwnzp&quot; : (v &quot;5tMN-IW97lr00LpdCeA&quot;)) , (kv &quot;ascnhrajahp&quot; : (v (object &#123; (kv &quot;bywiqnht&quot; : (v (object &#123; (kv &quot;pwwfzfxuusf&quot; : (v 1826516450.1429155)) , (kv &quot;lrkstk&quot; : (v -1130208890.5220625)) , (kv &quot;mjftwpi&quot; : (v &quot;JKzfI07UlayAB0Y&quot;)) , (kv &quot;guzpwj&quot; : (v &quot;cyGnOg_AA2nD5u&quot;)) , (kv &quot;yivfdxujl&quot; : (v -895183558.2281595)) &#125;))) , (kv &quot;ftahhhqvq&quot; : (v &quot;-e0ij7e6SwR2P&quot;)) , (kv &quot;rfios&quot; : (v 260283669.05151594)) , (kv &quot;wkgxf&quot; : (v 480514597.7402332)) , (kv &quot;trsngyfa&quot; : (v true)) , (kv &quot;iutgxh&quot; : (v (object &#123; (kv &quot;xgaxfzhzo&quot; : (v -1296950418)) , (kv &quot;oynzdakxa&quot; : (v -176407622)) , (kv &quot;jmetjzvg&quot; : (v &quot;QZyqbP&quot;)) , (kv &quot;bdsubbxgke&quot; : (v 479590449.7327938)) , (kv &quot;gbguyurx&quot; : (v &quot;k_JYavggr&quot;)) , (kv &quot;dcgjgkyxoi&quot; : (v 111545634.56584488)) , (kv &quot;kxmgnp&quot; : (v false)) , (kv &quot;fadnjmiuya&quot; : (v false)) , (kv &quot;pntppjqr&quot; : (v -7989414.3503097715)) &#125;))) , (kv &quot;rtrfsa&quot; : (v (array [ (v true) ]))) &#125;))) , (kv &quot;woaczhsg&quot; : (v (object &#123; (kv &quot;oebom&quot; : (v (array [ (v &quot;EDFJM-lf3QtlY_pHqj&quot;) , (v &quot;w&quot;) ]))) , (kv &quot;phkuygxtxei&quot; : (v -1307045192.5497377)) , (kv &quot;nzjtrerixro&quot; : (v (object &#123; (kv &quot;zzcgiwj&quot; : (v true)) , (kv &quot;wzkrztkuwyw&quot; : (v 749644112.278047)) , (kv &quot;viygguukb&quot; : (v true)) , (kv &quot;kmqinxavcydb&quot; : (v -154275871)) , (kv &quot;tdciknezbmsj&quot; : (v -1583677231.0414896)) , (kv &quot;qxywny&quot; : (v &quot;Zhm_duX1K813n39f&quot;)) , (kv &quot;dmmgas&quot; : (v &quot;99YGwgK&quot;)) , (kv &quot;bxlxri&quot; : (v 624666521)) &#125;))) , (kv &quot;joqygfz&quot; : (v &quot;Ekernz1wS&quot;)) , (kv &quot;btmnwww&quot; : (v -1057462085)) , (kv &quot;fjkkogenlrg&quot; : (v &quot;JaUfKQ-rmTsH&quot;)) , (kv &quot;czxgbb&quot; : (v (array [ (v &quot;d94e&quot;) , (v &quot;tFHwH&quot;) , (v -1999864211) , (v &quot;9qcTd&quot;) , (v -273132748.6449169) , (v 877566785.3296286) , (v &quot;XnOqV2RJlwW0uce&quot;) , (v false) ]))) , (kv &quot;hjzjpy&quot; : (v (object &#123; (kv &quot;fgopruspo&quot; : (v true)) , (kv &quot;qbxsmxzuayhl&quot; : (v true)) , (kv &quot;jqcqu&quot; : (v false)) , (kv &quot;jepkrnjpvwc&quot; : (v 529790938)) , (kv &quot;bsfzzfplxn&quot; : (v -136154324.43923798)) , (kv &quot;lprmnmu&quot; : (v &quot;_V7TWr3V_JSasIrO&quot;)) , (kv &quot;hfrrnq&quot; : (v &quot;9QMc&quot;)) , (kv &quot;fszhlid&quot; : (v &quot;VyQUrXWG&quot;)) &#125;))) , (kv &quot;tjebnm&quot; : (v &quot;VyKVNxgu99oXT&quot;)) , (kv &quot;qvnfpidlla&quot; : (v &quot;ezbxu25zTodYRTpZ4e&quot;)) &#125;))) &#125;)) , (v 1282576622.419129) , (v 582364215.0738711) ])) , (v (array [ (v (object &#123; (kv &quot;vxanjrgqi&quot; : (v &quot;5L&quot;)) , (kv &quot;drmfrdy&quot; : (v &quot;V3yZ19vMCwFTKS&quot;)) , (kv &quot;urbkobqrmmln&quot; : (v (array [ (v (array [ (v &quot;gLPGoPvAz5a&quot;) , (v 1521034207.1729093) , (v true) ])) , (v (object &#123; (kv &quot;rbjhjirux&quot; : (v false)) , (kv &quot;unwnojgevj&quot; : (v &quot;TZvuYvGEjt50HZP&quot;)) , (kv &quot;cluhihroygc&quot; : (v false)) , (kv &quot;ezvwld&quot; : (v false)) , (kv &quot;ytvdsty&quot; : (v false)) , (kv &quot;ongckhpo&quot; : (v &quot;iBorLz&quot;)) , (kv &quot;fyjdodv&quot; : (v true)) , (kv &quot;kussreacf&quot; : (v &quot;asCAhF9cu&quot;)) , (kv &quot;ogruag&quot; : (v true)) &#125;)) , (v (array [ (v 1011116435) , (v false) , (v 1485289377.634779) ])) , (v (object &#123; (kv &quot;aplfilhrtjjx&quot; : (v true)) , (kv &quot;eihtnlrwwzxb&quot; : (v true)) , (kv &quot;rzoztu&quot; : (v 1095829320)) , (kv &quot;lytof&quot; : (v false)) , (kv &quot;sxcahhyzr&quot; : (v true)) , (kv &quot;gzlprjzgbpdk&quot; : (v false)) &#125;)) , (v false) , (v false) , (v (object &#123; (kv &quot;rugpoixexacg&quot; : (v true)) , (kv &quot;bvygqkqcgc&quot; : (v &quot;P5FZ&quot;)) , (kv &quot;mhmzd&quot; : (v -1466907616)) , (kv &quot;aqbayw&quot; : (v &quot;MqA7Neo6B38Ku&quot;)) , (kv &quot;vbtpdxqfk&quot; : (v &quot;I&quot;)) , (kv &quot;upuadtl&quot; : (v 80394027.89645492)) , (kv &quot;bjysln&quot; : (v &quot;U4Rny9BW&quot;)) , (kv &quot;zkipgelsd&quot; : (v false)) , (kv &quot;aixmzrmby&quot; : (v &quot;gt5pk&quot;)) , (kv &quot;yduplhuvgmi&quot; : (v false)) &#125;)) , (v -307605855) , (v (object &#123; (kv &quot;ezuajerq&quot; : (v false)) , (kv &quot;vhkbpsqfmit&quot; : (v 1968884069)) &#125;)) , (v (object &#123; (kv &quot;ntdwc&quot; : (v &quot;Xjd3XSRfRTSK1&quot;)) , (kv &quot;wceydxoioh&quot; : (v 1965027804.2400434)) , (kv &quot;xxiaudqian&quot; : (v -1997821084)) , (kv &quot;jxihtwhvthf&quot; : (v &quot;jebasp7IEo&quot;)) , (kv &quot;ulrkflp&quot; : (v &quot;DsDwmqlHe2CqtePX8&quot;)) , (kv &quot;ayaiumowny&quot; : (v -1009840586.3308966)) , (kv &quot;xqzdft&quot; : (v -665041725)) , (kv &quot;uwmgab&quot; : (v &quot;0HY-QpTeR7cqLH3R&quot;)) , (kv &quot;dyzdmyohvu&quot; : (v &quot;TJL1_wTnzt6lavK6&quot;)) &#125;)) ]))) , (kv &quot;hyoqnafola&quot; : (v (object &#123; (kv &quot;pwhkipsgz&quot; : (v (array [ (v &quot;BSRRArMhL7xak1M31&quot;) , (v true) , (v 757226289.2586085) , (v false) , (v -501488775.6009502) ]))) , (kv &quot;xnehiwtkc&quot; : (v false)) , (kv &quot;ugyuiaife&quot; : (v 439819996)) , (kv &quot;qoviscvhth&quot; : (v (object &#123; (kv &quot;yrmaynayeij&quot; : (v true)) , (kv &quot;tmeozoxvbfa&quot; : (v &quot;V11MPCnwVpN2-J5Ou&quot;)) &#125;))) , (kv &quot;eqfap&quot; : (v false)) &#125;))) , (kv &quot;qoqdvxulp&quot; : (v &quot;3our4wWe2d3eEvIt4Sa&quot;)) , (kv &quot;pkgatdqqfwrp&quot; : (v -196209564.13036972)) , (kv &quot;osdumghoylle&quot; : (v (array [ (v 1611788818) , (v false) , (v (array [ (v &quot;O&quot;) , (v true) , (v true) , (v &quot;-FRchYxwjwqw5E6&quot;) ])) ]))) , (kv &quot;lguesgpxu&quot; : (v &quot;nAMf4fNwxeBLOqKPfj&quot;)) &#125;)) , (v 1090543472) ])) , (v (array [ (v (array [ (v false) , (v true) ])) , (v true) , (v -941485381) , (v (array [ (v (array [ (v &quot;0n-42O__G1z&quot;) ])) , (v true) ])) , (v (object &#123; (kv &quot;zgcmj&quot; : (v &quot;HtaNd9fGSL&quot;)) , (kv &quot;rtqht&quot; : (v (array [ (v -824540812.8593875) , (v 660363567.1515678) , (v (object &#123; (kv &quot;nrqclovx&quot; : (v true)) , (kv &quot;desvin&quot; : (v true)) , (kv &quot;qbgarpxmjee&quot; : (v true)) , (kv &quot;pwquqr&quot; : (v -520766202.2372695)) , (kv &quot;evcrtodq&quot; : (v &quot;NFNGSQ2mv9I33U&quot;)) &#125;)) , (v true) , (v -1495767378.5317547) , (v &quot;0GYeM&quot;) , (v (object &#123; (kv &quot;cipvprhghcud&quot; : (v -781186501.119179)) , (kv &quot;ucahxszlo&quot; : (v &quot;--kXBRT2q7lvCNQf&quot;)) , (kv &quot;esghfvf&quot; : (v -1967794274.5454607)) , (kv &quot;plsbnwziqql&quot; : (v &quot;AwYqNyGlsT-&quot;)) , (kv &quot;qdhis&quot; : (v &quot;LVC_&quot;)) , (kv &quot;jfifn&quot; : (v &quot;ep&quot;)) , (kv &quot;ajqypvgdf&quot; : (v false)) , (kv &quot;nzcksivfrz&quot; : (v -836485434)) , (kv &quot;brfxkuh&quot; : (v -778236244)) &#125;)) , (v -216954925) ]))) , (kv &quot;nzvhy&quot; : (v &quot;jH&quot;)) , (kv &quot;ukllw&quot; : (v &quot;iA5&quot;)) , (kv &quot;mojlxj&quot; : (v (array [ (v (object &#123; (kv &quot;wpztutyupo&quot; : (v -338843594.4339943)) , (kv &quot;zodofh&quot; : (v 1523937168.7352705)) &#125;)) , (v &quot;iTikYWHkhRF46nuHGbG&quot;) , (v (object &#123; (kv &quot;yjizlvyztm&quot; : (v &quot;rCeofY3Uo3msby8-&quot;)) , (kv &quot;pqguwcscw&quot; : (v &quot;f2n-Vg1lXIpYjdl&quot;)) , (kv &quot;ziwwftnb&quot; : (v false)) , (kv &quot;jdunfl&quot; : (v true)) , (kv &quot;wgrsxovefz&quot; : (v false)) , (kv &quot;rmfmr&quot; : (v -1203824748.6801581)) &#125;)) , (v -767556187) , (v false) ]))) , (kv &quot;nqntey&quot; : (v &quot;XmKsO7JoUS&quot;)) , (kv &quot;edzduh&quot; : (v true)) , (kv &quot;fsxahg&quot; : (v (array [ (v &quot;WGJAk_bVHfv&quot;) , (v false) , (v (object &#123; (kv &quot;jjilv&quot; : (v 789428308.424335)) &#125;)) , (v true) , (v (object &#123; (kv &quot;lczojeami&quot; : (v 1004841634)) , (kv &quot;rpjett&quot; : (v &quot;JPcL0dB&quot;)) , (kv &quot;urttiphnwi&quot; : (v false)) , (kv &quot;cnnuagwpk&quot; : (v false)) &#125;)) , (v (array [ (v -755107435) , (v true) ])) , (v 1383079708) , (v 838205861) ]))) , (kv &quot;xmfcccwn&quot; : (v 1235369070)) , (kv &quot;exocsfeahsly&quot; : (v false)) &#125;)) , (v &quot;pfPQ7bUvXQwFBfI1Z&quot;) , (v (object &#123; (kv &quot;vcoiofawgu&quot; : (v (array [ (v (array [ (v true) , (v &quot;-&quot;) , (v false) , (v &quot;MiLGOXZT5KjgtxbR&quot;) , (v -1227980006) , (v true) , (v &quot;M6hA6AfvaBer&quot;) ])) ]))) , (kv &quot;lujwrmzs&quot; : (v true)) , (kv &quot;dpjdjbi&quot; : (v (object &#123; (kv &quot;isvatttpdje&quot; : (v (object &#123; (kv &quot;violsvosfmxa&quot; : (v false)) , (kv &quot;pfsxuzszx&quot; : (v true)) , (kv &quot;akyyailt&quot; : (v 40326686.00178264)) , (kv &quot;avmlhwr&quot; : (v false)) , (kv &quot;wvmlkv&quot; : (v &quot;ZRdrVDeTcXB&quot;)) , (kv &quot;txcgatdp&quot; : (v false)) , (kv &quot;wzwdlio&quot; : (v true)) , (kv &quot;lgnpzi&quot; : (v 826279485.8329575)) , (kv &quot;blowaixo&quot; : (v true)) , (kv &quot;tlvjpvlr&quot; : (v -1104323009)) &#125;))) , (kv &quot;xidqngh&quot; : (v (object &#123; (kv &quot;plxlnpsuy&quot; : (v -136412828.46290082)) , (kv &quot;oyxqf&quot; : (v &quot;slHZmXREf5IRy&quot;)) , (kv &quot;hjieskfa&quot; : (v true)) &#125;))) , (kv &quot;qogsqpetclu&quot; : (v (object &#123; (kv &quot;pxefltrmw&quot; : (v true)) , (kv &quot;xhvgo&quot; : (v false)) , (kv &quot;plytsqcpmkak&quot; : (v &quot;oQOzYu8fp__ZZzspf&quot;)) , (kv &quot;siqsjmzcz&quot; : (v 1383803960)) , (kv &quot;gqatsrxw&quot; : (v -891877637)) , (kv &quot;jlrxxmfrd&quot; : (v false)) , (kv &quot;punnhvkqgac&quot; : (v &quot;Vm1gbb5ao&quot;)) , (kv &quot;nvcgb&quot; : (v true)) , (kv &quot;zotzvmdcp&quot; : (v false)) &#125;))) &#125;))) , (kv &quot;mdibv&quot; : (v (array [ (v true) , (v (array [ (v -1920264690) , (v &quot;KkgopGyRuR&quot;) , (v false) , (v false) , (v -1181246202) , (v &quot;lLMcq7wT0u6aZLx1XCS&quot;) ])) , (v 1171184833.0889344) , (v -920898457.9398856) , (v (array [ (v true) , (v true) , (v &quot;wjvObeS9eH&quot;) , (v true) ])) , (v (array [ (v &quot;r89vOJSkrrfGYNGU&quot;) , (v 1423639620) , (v false) , (v false) , (v -2118872242) ])) , (v (array [ (v &quot;WZp-jdVNe9WUwKyG0ne&quot;) , (v &quot;hdJR&quot;) , (v 762229991) , (v &quot;NNrmgK1gc&quot;) , (v false) , (v 645298371) ])) , (v true) , (v (array [ (v true) , (v true) , (v &quot;OiqeOXDN&quot;) , (v true) ])) ]))) , (kv &quot;gljtxygmgnoq&quot; : (v -485413025.0423097)) , (kv &quot;tifqxq&quot; : (v &quot;PNKzLbjwza41QHN7gfg&quot;)) , (kv &quot;usxgfwssv&quot; : (v false)) , (kv &quot;ysggaphttbu&quot; : (v -1434779242.503896)) , (kv &quot;jguyfdarj&quot; : (v false)) , (kv &quot;ljsnzpmvc&quot; : (v (array [ (v (array [ (v true) , (v false) , (v -888245601) , (v &quot;DtjmbUbk-Y&quot;) , (v true) , (v &quot;NUivd0O_964hQZAaCM2R&quot;) ])) , (v true) , (v &quot;4FRIjSJEd&quot;) , (v (array [ (v &quot;Y5Da&quot;) , (v &quot;1Df_BHi2ppyn&quot;) , (v &quot;8lJLj91VcyZl&quot;) , (v true) , (v &quot;1dVqAY1jjCNk4_YCm_RA&quot;) , (v true) , (v &quot;Ufv6Un&quot;) , (v &quot;1yXm&quot;) , (v &quot;C6G8d9LjKWX3&quot;) , (v &quot;Urh9Opm0r&quot;) ])) , (v true) , (v (array [ (v false) , (v -691112049) , (v false) ])) , (v (object &#123; (kv &quot;lvcepeefsiik&quot; : (v 2111693983.8375793)) , (kv &quot;isveyzpwkn&quot; : (v &quot;Ygu3&quot;)) , (kv &quot;vtfphso&quot; : (v true)) &#125;)) ]))) &#125;)) , (v &quot;FgREOo5h2k7VG&quot;) ])) , (v &quot;9Gimy_iH&quot;) , (v -1846879668) , (v &quot;WX&quot;) ])) , (v false) , (v (object &#123; (kv &quot;phpuw&quot; : (v (array [ (v (array [ (v (object &#123; (kv &quot;raibbewtjz&quot; : (v -1220581968.5143535)) , (kv &quot;jbrvt&quot; : (v 400707980)) , (kv &quot;nrzfutgbch&quot; : (v &quot;up1IdlFMyt&quot;)) , (kv &quot;mgymfulzmjm&quot; : (v (object &#123; (kv &quot;mzoznw&quot; : (v false)) , (kv &quot;nxuhkromgyrq&quot; : (v -468163948)) , (kv &quot;ihqawepduqge&quot; : (v false)) , (kv &quot;enanlwabhlnq&quot; : (v false)) , (kv &quot;vwniulyrxqq&quot; : (v 2006513682)) &#125;))) , (kv &quot;qygtv&quot; : (v (array [ (v 712827304) ]))) , (kv &quot;plqoj&quot; : (v 196752168.14052448)) &#125;)) , (v 1530826049) , (v true) ])) , (v (object &#123; (kv &quot;hoewcxak&quot; : (v -529285862.78081095)) , (kv &quot;rdkjktsbm&quot; : (v (array [ (v (array [ (v false) , (v true) , (v 2089688925) , (v &quot;_xygmhNWhs2CG2Ws&quot;) , (v false) , (v &quot;z5Hes4K&quot;) , (v &quot;-yXCohP014GZh&quot;) , (v 1851605383.7822597) , (v true) , (v 1408456384.3299663) ])) , (v &quot;fW&quot;) , (v true) , (v &quot;GVUyAs70GJW-2Ku&quot;) , (v &quot;Na9s-kGMlq7l3dp0gC&quot;) ]))) , (kv &quot;fcbdr&quot; : (v 648098158.2295865)) , (kv &quot;fapgflckukv&quot; : (v (object &#123; (kv &quot;shnbvkvjud&quot; : (v true)) , (kv &quot;sidkmqd&quot; : (v (object &#123; (kv &quot;vfhpq&quot; : (v -438938499.9046679)) , (kv &quot;vfdfwfuizkkb&quot; : (v false)) , (kv &quot;ymmiv&quot; : (v &quot;K9ekHXWSppvvW&quot;)) , (kv &quot;eavvh&quot; : (v &quot;a&quot;)) , (kv &quot;cmgeoyntxfb&quot; : (v false)) &#125;))) , (kv &quot;kepvkp&quot; : (v (object &#123; (kv &quot;pbwwksrua&quot; : (v &quot;HSJUVpOTiOLCoSdE9i8h&quot;)) , (kv &quot;ppshv&quot; : (v false)) , (kv &quot;qdmeyoov&quot; : (v &quot;7m&quot;)) , (kv &quot;koxkdaxj&quot; : (v &quot;r30Hy0P6&quot;)) , (kv &quot;izbuq&quot; : (v &quot;HE&quot;)) , (kv &quot;ebmsipwqjf&quot; : (v false)) , (kv &quot;xzsutnv&quot; : (v true)) , (kv &quot;yseailigdpu&quot; : (v &quot;_Oe1Mb&quot;)) &#125;))) , (kv &quot;jilmpjqmebqu&quot; : (v true)) , (kv &quot;mmqtk&quot; : (v (object &#123; (kv &quot;jiqswgbidkcz&quot; : (v -600289668.1997764)) , (kv &quot;pozrxlwnicmj&quot; : (v -1938116520)) , (kv &quot;ysjtzvqcbtka&quot; : (v false)) , (kv &quot;wlfoh&quot; : (v true)) , (kv &quot;crdmlo&quot; : (v -775185645.335729)) , (kv &quot;rymnpnt&quot; : (v &quot;67CWTuoSS-HCBSnsT&quot;)) , (kv &quot;jrqjvpjy&quot; : (v &quot;5vA-6&quot;)) &#125;))) &#125;))) &#125;)) , (v (object &#123; (kv &quot;iqfwdhvxt&quot; : (v (array [ (v (array [ (v &quot;cDc74anahW&quot;) , (v 81284520) , (v &quot;-GKYIedyE&quot;) , (v &quot;Ce&quot;) , (v -988655852.0732201) , (v false) , (v &quot;VRJHPX&quot;) , (v true) , (v &quot;cgDGx9u&quot;) , (v &quot;2S&quot;) ])) , (v (object &#123; (kv &quot;kwdtjnwyqh&quot; : (v true)) , (kv &quot;nfsic&quot; : (v &quot;60jcx&quot;)) , (kv &quot;mecwggrteesl&quot; : (v -1139375608)) , (kv &quot;gqxlrsdtwk&quot; : (v 598344409)) , (kv &quot;ssrzcdmuivk&quot; : (v false)) , (kv &quot;bunpzghb&quot; : (v false)) , (kv &quot;ghepmqqgprxb&quot; : (v &quot;8VRKt-wDZHpQ3zFr&quot;)) , (kv &quot;qppaluod&quot; : (v &quot;5R-HdOFV&quot;)) , (kv &quot;okawvhmkx&quot; : (v &quot;kjeBjAHvp_NP5&quot;)) , (kv &quot;txntwypns&quot; : (v 685414976.153466)) &#125;)) , (v (array [ (v 1739772069.7531114) , (v true) , (v &quot;XaGgqy&quot;) , (v &quot;RwGOtKq-1XA3kGHxSxj&quot;) , (v true) , (v 641014644.867056) , (v -808749567.2080882) , (v &quot;uI&quot;) , (v false) ])) , (v -408962742.8051345) , (v &quot;CgHySm29GsrPLL&quot;) , (v (object &#123; (kv &quot;mlmye&quot; : (v true)) , (kv &quot;hjdtoyy&quot; : (v &quot;xjhyCe8jp7&quot;)) , (kv &quot;tqrdoqwjkek&quot; : (v 836131928.1066666)) , (kv &quot;idajceyj&quot; : (v 1186855296.3268478)) &#125;)) ]))) , (kv &quot;uabkdzydas&quot; : (v (array [ (v (object &#123; (kv &quot;ndggdrnriq&quot; : (v &quot;5s498r6QO5f4O21&quot;)) , (kv &quot;iybijqnqu&quot; : (v &quot;nvELVQoajllij&quot;)) , (kv &quot;rnubwnfd&quot; : (v true)) &#125;)) , (v -135278750.97632736) , (v &quot;0-&quot;) , (v (array [ (v 861257612) , (v &quot;YSt&quot;) ])) , (v (array [ (v &quot;Hriq_i8O&quot;) , (v true) , (v &quot;2WyD5sM2kJ6tk8saK&quot;) , (v &quot;-pYRzho&quot;) , (v &quot;OywpZGYH&quot;) , (v true) , (v &quot;TGVsRxHuDESYPJX&quot;) , (v false) , (v true) , (v true) ])) , (v false) , (v (array [ (v false) , (v &quot;FZZMk3hxTGyFIZf&quot;) , (v &quot;840ukL&quot;) ])) , (v &quot;4cBYOiZS5T687&quot;) ]))) , (kv &quot;wcblckswrwgx&quot; : (v 1691134642.1109512)) , (kv &quot;imiyna&quot; : (v &quot;y2obPNr&quot;)) &#125;)) , (v (object &#123; (kv &quot;hzsnvp&quot; : (v (array [ (v true) , (v (object &#123; (kv &quot;mvvptanvzlv&quot; : (v 1235246065.646934)) , (kv &quot;ispkrfaefd&quot; : (v &quot;o7jyOqBNz-sp5&quot;)) &#125;)) ]))) , (kv &quot;fbwnal&quot; : (v false)) , (kv &quot;dmyhpklcgjpz&quot; : (v (object &#123; (kv &quot;evuyme&quot; : (v &quot;VGTLhrsgB3tG&quot;)) , (kv &quot;irsvzpkrrs&quot; : (v (object &#123; (kv &quot;htcvmq&quot; : (v 1643584917.6512115)) , (kv &quot;kpvfd&quot; : (v -1377834402)) , (kv &quot;nvotaaj&quot; : (v &quot;ZSQJklJxCP&quot;)) , (kv &quot;esfolj&quot; : (v &quot;toKuUYfZ&quot;)) &#125;))) , (kv &quot;zsmjcbtlqn&quot; : (v 629882819)) , (kv &quot;xlmcltjykzn&quot; : (v &quot;8QotloMb3Bl73WVjn7&quot;)) , (kv &quot;mhapclfrxs&quot; : (v 1028717782)) , (kv &quot;cxqqhtko&quot; : (v false)) , (kv &quot;wiyuy&quot; : (v &quot;PzzXnXU5PPnPW9z&quot;)) , (kv &quot;ixdetedk&quot; : (v -1124814436.5608842)) , (kv &quot;wqzmq&quot; : (v (array [ (v true) , (v &quot;SRb3jdXAyC6nKc-_zw7&quot;) , (v true) , (v true) ]))) , (kv &quot;cbqsa&quot; : (v &quot;C&quot;)) &#125;))) , (kv &quot;ijdvphas&quot; : (v (array [ (v (object &#123; (kv &quot;sousu&quot; : (v 1832542641.4012554)) , (kv &quot;tpcnhwrccrg&quot; : (v -2064401096)) , (kv &quot;hoolqinb&quot; : (v -1849626143.48401)) , (kv &quot;yribmyatzdpx&quot; : (v true)) , (kv &quot;cmsqnvrn&quot; : (v false)) , (kv &quot;qegvonsx&quot; : (v true)) , (kv &quot;gvpxrrsg&quot; : (v -470037709.29599655)) &#125;)) , (v 1780541435.6086545) , (v &quot;2WH45mLOypsCrtyWjI&quot;) ]))) , (kv &quot;brznzoa&quot; : (v (object &#123; (kv &quot;yskyrbx&quot; : (v false)) , (kv &quot;pnlhlxjujkef&quot; : (v &quot;bOa6&quot;)) , (kv &quot;iyvplfxfia&quot; : (v true)) , (kv &quot;vwvlvwtxyhfj&quot; : (v &quot;N93v0&quot;)) , (kv &quot;yedkmanvi&quot; : (v (array [ (v false) , (v 322287198.0058443) , (v -2137145925.7176564) , (v false) , (v -1862343833) ]))) , (kv &quot;mutvvihn&quot; : (v 1914305547)) , (kv &quot;hrgevkwio&quot; : (v true)) &#125;))) , (kv &quot;bphxtjilrubc&quot; : (v (object &#123; (kv &quot;oljlt&quot; : (v (array [ (v &quot;Cdja2cH2kJPDxV&quot;) , (v false) , (v &quot;JqDgQgoz5&quot;) , (v -1924686300) , (v &quot;1z-ffRR&quot;) , (v -975594968.6513255) , (v 1351202255.9644172) , (v -83283900.85926154) , (v &quot;UiqLAWnoR8_-&quot;) ]))) , (kv &quot;fhfkdg&quot; : (v &quot;AoxpLG0MnCxRin8qpN&quot;)) , (kv &quot;noynicwlt&quot; : (v (object &#123; (kv &quot;asaczkb&quot; : (v true)) , (kv &quot;xqnvdzjoaga&quot; : (v -121663039)) , (kv &quot;moekjcd&quot; : (v &quot;axOlNW&quot;)) , (kv &quot;jjivbsd&quot; : (v &quot;r6&quot;)) , (kv &quot;vxxxyqf&quot; : (v true)) , (kv &quot;vzygsjgygkwc&quot; : (v &quot;F&quot;)) , (kv &quot;ybnvrci&quot; : (v &quot;lsCcA0emGlFbRK-0Y5r&quot;)) , (kv &quot;uvchzg&quot; : (v -1294386589.0755918)) , (kv &quot;tcxske&quot; : (v false)) &#125;))) , (kv &quot;ksdknwbv&quot; : (v 1542149459)) &#125;))) , (kv &quot;cpspsyg&quot; : (v &quot;old4MF&quot;)) , (kv &quot;tiyhssqn&quot; : (v false)) , (kv &quot;ldury&quot; : (v -2137708872.0328448)) &#125;)) , (v (object &#123; (kv &quot;uvbayhisyau&quot; : (v false)) , (kv &quot;fbdcl&quot; : (v (array [ (v false) ]))) , (kv &quot;ilipavyawcwt&quot; : (v (array [ (v false) , (v -2045197450) , (v (array [ (v &quot;OQWt9&quot;) , (v false) , (v true) , (v &quot;NiLrcY92VJf0iefLZwg&quot;) ])) , (v (object &#123; (kv &quot;xcsnqderihp&quot; : (v &quot;pS_3_A6DziH&quot;)) , (kv &quot;cmvxao&quot; : (v true)) , (kv &quot;hlmbjxhrqas&quot; : (v true)) &#125;)) ]))) , (kv &quot;synpgy&quot; : (v -986091799)) , (kv &quot;lvumkb&quot; : (v &quot;RU6FR1NOba1YjH1&quot;)) &#125;)) , (v false) , (v true) ]))) , (kv &quot;tynezwj&quot; : (v (object &#123; (kv &quot;mhsjy&quot; : (v 1067132576)) , (kv &quot;azwzs&quot; : (v -55742754)) , (kv &quot;ymgots&quot; : (v true)) , (kv &quot;ewhppxkutkts&quot; : (v (array [ (v 527907098.9250864) , (v 1892161595) , (v false) , (v (object &#123; (kv &quot;fsdyrxoquq&quot; : (v 745891887.899272)) , (kv &quot;xvrfjphm&quot; : (v (object &#123; (kv &quot;kgvsflndweqt&quot; : (v &quot;SUD&quot;)) , (kv &quot;vrvcsvgr&quot; : (v false)) , (kv &quot;wpvuwif&quot; : (v false)) , (kv &quot;ftxbkgziqdc&quot; : (v &quot;B&quot;)) , (kv &quot;nmbvmziwdc&quot; : (v &quot;1cM&quot;)) , (kv &quot;annfksy&quot; : (v 848087104.0004258)) , (kv &quot;zksdebbbkveq&quot; : (v 2007092837)) , (kv &quot;ggcchlgwt&quot; : (v 26860668.38137573)) , (kv &quot;fvfvk&quot; : (v true)) &#125;))) , (kv &quot;nrjmook&quot; : (v false)) , (kv &quot;xxewpss&quot; : (v false)) , (kv &quot;yiyrzpaoj&quot; : (v &quot;1BtrWrePoIWrpkudhX&quot;)) &#125;)) , (v &quot;MhqFhSDsoiZCbs&quot;) , (v -1962448143.37587) , (v &quot;JHiJtLt-0PV&quot;) , (v -848857355) , (v &quot;MRj0q3&quot;) ]))) , (kv &quot;rijrkwvr&quot; : (v true)) , (kv &quot;pnmllj&quot; : (v 1122358779.127721)) , (kv &quot;pgslfn&quot; : (v (array [ (v (object &#123; (kv &quot;yrdudea&quot; : (v &quot;MY7kvGHCZr9Kzg&quot;)) , (kv &quot;qqycz&quot; : (v (array [ (v &quot;3EePfhnF-pz1P5f5L1c&quot;) , (v true) , (v &quot;ALUO_TrBhOAau7&quot;) , (v &quot;o&quot;) , (v false) , (v false) ]))) , (kv &quot;ggdaewjpdxn&quot; : (v 43629698)) , (kv &quot;aaeykjqyuwv&quot; : (v (array [ (v 7708036) , (v &quot;3LaRVqg1v6z48GT2N5&quot;) , (v &quot;u3_N_yT&quot;) , (v -941937619.7056336) , (v true) , (v &quot;jOAWu80H22KqLb&quot;) , (v &quot;lkEitOoWKpUj1dFrcS&quot;) , (v &quot;pGHWYfPt6&quot;) ]))) , (kv &quot;fzxsvhmj&quot; : (v (object &#123; (kv &quot;xezjomecr&quot; : (v &quot;AgAqyZIQyboQj&quot;)) &#125;))) , (kv &quot;wixxk&quot; : (v 972492071.1440042)) , (kv &quot;vzllenlwss&quot; : (v true)) , (kv &quot;lrdnw&quot; : (v true)) , (kv &quot;osbmvcdln&quot; : (v -99838667.00018373)) &#125;)) , (v true) , (v (array [ (v -1156729928.6033874) , (v &quot;RQ2Ddf3m&quot;) , (v &quot;tBLZLWI&quot;) , (v &quot;t&quot;) , (v (object &#123; (kv &quot;awjkkoqbm&quot; : (v 514900056.4981093)) , (kv &quot;nbcdkmlmksj&quot; : (v 546112394)) , (kv &quot;mgyhnwvdfxm&quot; : (v -962693348.4544209)) &#125;)) , (v (object &#123; (kv &quot;ulkmuvuzsms&quot; : (v -916021827)) , (kv &quot;kcfrccqkckw&quot; : (v 2011197419.3960195)) , (kv &quot;wdwcfnc&quot; : (v -329734869.0126096)) &#125;)) , (v -1267535808) ])) , (v -444607644.5187344) ]))) &#125;))) , (kv &quot;zailmdcer&quot; : (v (array [ (v true) , (v (object &#123; (kv &quot;qhjwptdlpln&quot; : (v (object &#123; (kv &quot;ohcdtvwvstwx&quot; : (v (object &#123; (kv &quot;rcspfos&quot; : (v &quot;A1Dk1UpauJXvX9k&quot;)) , (kv &quot;glkbaffy&quot; : (v true)) , (kv &quot;mnelbrmrt&quot; : (v 112804143.37796865)) , (kv &quot;qdsgvsw&quot; : (v true)) , (kv &quot;fsxjpyvw&quot; : (v &quot;_HuByYd&quot;)) &#125;))) , (kv &quot;kfznxtpub&quot; : (v false)) , (kv &quot;ofemihcvnwn&quot; : (v (object &#123; (kv &quot;ylbvhdqfoyui&quot; : (v &quot;-RKVqKpB-R5TisiMbWnI&quot;)) , (kv &quot;bpoomkqufn&quot; : (v &quot;PEdcpgwubbyM6lBINEkU&quot;)) , (kv &quot;hnlnv&quot; : (v 124374927)) , (kv &quot;vfqzpvgccqsd&quot; : (v 1250199480.562264)) , (kv &quot;ekfazrxics&quot; : (v true)) , (kv &quot;iovjqhuw&quot; : (v true)) , (kv &quot;xatkt&quot; : (v &quot;hZ-f&quot;)) , (kv &quot;ltotrchgpdxy&quot; : (v false)) , (kv &quot;tksjv&quot; : (v 321121533)) , (kv &quot;pqupavhjgb&quot; : (v 602017169)) &#125;))) , (kv &quot;aychomumdpm&quot; : (v true)) , (kv &quot;uywocbg&quot; : (v -1340353830.8160665)) &#125;))) , (kv &quot;nsvmmtzffyi&quot; : (v &quot;snOsd3LX&quot;)) , (kv &quot;rinhb&quot; : (v 744708339)) , (kv &quot;hwcszmejvzow&quot; : (v (object &#123; (kv &quot;jxqyosu&quot; : (v 497375279.6818433)) , (kv &quot;hhbbwqh&quot; : (v true)) , (kv &quot;rwejxwoqvyg&quot; : (v false)) , (kv &quot;lxlpcsnxev&quot; : (v &quot;cvZ1&quot;)) &#125;))) , (kv &quot;nfjwuxgz&quot; : (v -205472971.4876565)) , (kv &quot;yexcq&quot; : (v (array [ (v &quot;xCJ3l&quot;) , (v (array [ (v 2142794310) , (v &quot;YD9&quot;) , (v 1041074376) , (v false) , (v false) , (v true) ])) , (v (object &#123; (kv &quot;nrjyrjy&quot; : (v false)) , (kv &quot;scybwd&quot; : (v false)) , (kv &quot;buboehn&quot; : (v true)) , (kv &quot;mtbdgt&quot; : (v true)) &#125;)) , (v -555213888) ]))) , (kv &quot;rgmsxkvxe&quot; : (v false)) &#125;)) ]))) , (kv &quot;xqodyvquaqk&quot; : (v (object &#123; (kv &quot;tlwbalafs&quot; : (v &quot;P11VyUVgEJDBLnfTBXW&quot;)) , (kv &quot;bwxxsdvbejyj&quot; : (v false)) , (kv &quot;sqixnooxi&quot; : (v false)) , (kv &quot;ktegqrv&quot; : (v (object &#123; (kv &quot;uzxuwoxxz&quot; : (v &quot;kCXkDF&quot;)) , (kv &quot;nxyxwdsox&quot; : (v (array [ (v -1728493142.145594) , (v -1561089932) , (v false) , (v (object &#123; (kv &quot;qalgexoqmec&quot; : (v 1265040040.7056124)) , (kv &quot;qjxkymosrtfl&quot; : (v 362528080.91682416)) , (kv &quot;uyooswivc&quot; : (v -2044499441)) , (kv &quot;effancqxpu&quot; : (v false)) , (kv &quot;iqkfcx&quot; : (v -1148395558.362454)) , (kv &quot;njrrjmktjpwx&quot; : (v &quot;LZ&quot;)) , (kv &quot;wqusenwc&quot; : (v -1117229386.9430377)) , (kv &quot;sjbwosrsmpss&quot; : (v -686080485.4933355)) , (kv &quot;rhavtoocclud&quot; : (v -1203546311)) , (kv &quot;wqatpzwmre&quot; : (v &quot;Qz8iNjQfh_OC1&quot;)) &#125;)) , (v false) , (v (array [ (v &quot;x7Pl&quot;) , (v 1352206425) , (v &quot;DlQW4MIpCg&quot;) , (v true) , (v &quot;aQNozs&quot;) , (v 263610904.8397138) , (v &quot;Qhc3c4Vh5ksc&quot;) , (v false) ])) , (v &quot;C9&quot;) , (v (object &#123; (kv &quot;jmjwwqfrquof&quot; : (v -921098144.7482386)) , (kv &quot;nzqzi&quot; : (v &quot;LyWG&quot;)) , (kv &quot;hzicitfhylcq&quot; : (v false)) , (kv &quot;yyhdtfualcg&quot; : (v &quot;411pRUYZ&quot;)) , (kv &quot;erpmbuucfv&quot; : (v &quot;4-lsO0Ln4F9ICyaffi94&quot;)) , (kv &quot;wjdfwodqqjh&quot; : (v 1845939237)) , (kv &quot;woficflha&quot; : (v &quot;R8DMlnDFzfh1-MoViEB&quot;)) &#125;)) ]))) , (kv &quot;myzhandzdy&quot; : (v (array [ (v false) , (v -118610442) , (v &quot;Bprb_a-aR&quot;) , (v &quot;Jw9oewLB51H3d9fr1_U&quot;) , (v true) , (v (object &#123; (kv &quot;htwvzax&quot; : (v &quot;moCFEdcSc1fA&quot;)) , (kv &quot;dkmrfqrq&quot; : (v &quot;99hr&quot;)) , (kv &quot;bltsputcmprx&quot; : (v &quot;dwLUtu&quot;)) , (kv &quot;fhntywcb&quot; : (v false)) , (kv &quot;gqpjbpmp&quot; : (v 1619105248.3625658)) &#125;)) , (v true) , (v (array [ (v 653762948) , (v &quot;X1QOlNfVvU&quot;) , (v false) , (v &quot;_Fjg6U-NrrOBv0BMny&quot;) , (v true) , (v &quot;owS9j47lQuPjQLAA&quot;) ])) , (v -635964171) ]))) , (kv &quot;qcwaaot&quot; : (v false)) , (kv &quot;nhqlxfhgztcs&quot; : (v (object &#123; (kv &quot;tpltmbqkqtw&quot; : (v &quot;kqzyLHJeavq&quot;)) , (kv &quot;bhvmuytmnh&quot; : (v 514166948)) , (kv &quot;rqbjvcu&quot; : (v 362096038)) , (kv &quot;ohqcrbnvbq&quot; : (v (array [ (v -12337413) , (v true) , (v true) , (v 2048459193.417751) , (v &quot;y2FmUh1EwZqM-f&quot;) , (v true) , (v &quot;aQsDFy0975Fx3hZcVb&quot;) , (v true) ]))) , (kv &quot;ygrkbf&quot; : (v (array [ (v -954464231.8863583) , (v false) , (v &quot;YPRoJ&quot;) , (v -665388063) ]))) , (kv &quot;tcrveopu&quot; : (v (array [ (v &quot;ynm9g_LkpS46x3KoGCzg&quot;) , (v 1223992785.9131525) , (v &quot;Z3cP&quot;) , (v &quot;-Ta&quot;) , (v &quot;1vX15_xgYuFJVJcCAY5&quot;) , (v true) , (v &quot;LmB&quot;) ]))) , (kv &quot;ejldgvvkemyw&quot; : (v &quot;k2rlJK2CnrascHYx4mL&quot;)) , (kv &quot;iyhgxvl&quot; : (v (array [ (v &quot;VvNtf6h-&quot;) , (v false) , (v &quot;uALIjfikazNCCS0&quot;) , (v &quot;jorcn2IuT1Ir8h_Ve9&quot;) , (v 1294510970) , (v 1075791699) , (v -1453510649) ]))) , (kv &quot;wpjzzljo&quot; : (v &quot;cE62kGEH8HTj&quot;)) , (kv &quot;kqhfx&quot; : (v (array [ (v 1628421507.6120474) , (v -1474741674) , (v 1557154500.7193115) , (v &quot;f_Y98t&quot;) , (v true) , (v false) , (v -1301617840) ]))) &#125;))) , (kv &quot;zdovecpiahyz&quot; : (v (object &#123; (kv &quot;ltupxfnh&quot; : (v 2093809642.9200048)) , (kv &quot;fxteaf&quot; : (v &quot;hxdYxLMepEB2qYd&quot;)) , (kv &quot;ncuxca&quot; : (v (object &#123; (kv &quot;jjixdw&quot; : (v 170293395)) , (kv &quot;kyvuzj&quot; : (v true)) , (kv &quot;gvbtnfyn&quot; : (v false)) , (kv &quot;bopeavpzvt&quot; : (v &quot;4&quot;)) , (kv &quot;yiufa&quot; : (v &quot;OwGFajXMMs54jbd&quot;)) , (kv &quot;vxfuuzfo&quot; : (v true)) , (kv &quot;pmsrorsxilu&quot; : (v &quot;vFJPkmlcnvYSUWIYn&quot;)) , (kv &quot;noikw&quot; : (v false)) &#125;))) &#125;))) , (kv &quot;rcihvgacfpqo&quot; : (v (array [ (v false) , (v 1463749411) , (v false) , (v (object &#123; (kv &quot;zaifbuaeew&quot; : (v &quot;ejObiDfCR6bx-evuh9&quot;)) , (kv &quot;myuzlsbrw&quot; : (v -1870480788)) , (kv &quot;ibhfvndtg&quot; : (v -1148483894.446386)) , (kv &quot;jweqnj&quot; : (v 669003129.2767447)) , (kv &quot;fcdyrkk&quot; : (v 2085526436.2747927)) &#125;)) , (v &quot;cAn&quot;) , (v &quot;QCu2W&quot;) , (v (array [ (v false) , (v -1865418814.6994572) , (v 1694073013.129531) , (v false) , (v &quot;J_iAqF98wgJrP&quot;) , (v &quot;jwXPdyZ6PT0aIqUz&quot;) , (v -959408941) , (v &quot;WT8A2KKDj9JjjcaT&quot;) , (v true) , (v true) ])) , (v false) , (v &quot;b3i&quot;) ]))) , (kv &quot;ddblff&quot; : (v (array [ (v (array [ (v &quot;9uxFIdq8RhB8mWL&quot;) , (v true) , (v 1988094303) ])) , (v (object &#123; (kv &quot;efqirhszudz&quot; : (v false)) , (kv &quot;jyskyzxm&quot; : (v 1329926014)) , (kv &quot;kobioghsdtc&quot; : (v &quot;USVCW&quot;)) , (kv &quot;ryqwshdmw&quot; : (v &quot;LF5QaVOa&quot;)) , (kv &quot;uupdatjptuvr&quot; : (v &quot;ORw76yFFzdZ0C3w_5&quot;)) , (kv &quot;dahnbudw&quot; : (v &quot;YdB&quot;)) , (kv &quot;qfnvalw&quot; : (v true)) , (kv &quot;mziolg&quot; : (v 953290145)) , (kv &quot;ypsyh&quot; : (v -699497270)) &#125;)) , (v &quot;Q0lrqPC7at8g&quot;) , (v true) , (v &quot;tca6egLJo8XVCrO7WIy&quot;) , (v -1037565328.9697363) , (v (array [ (v &quot;6rBa6a_hrj&quot;) , (v 1685089684.3163245) , (v &quot;FG2&quot;) , (v &quot;Yw&quot;) , (v 1262160201) , (v 1216789119) , (v false) , (v false) ])) ]))) , (kv &quot;gftpmxyyux&quot; : (v -1934447629.6346464)) , (kv &quot;auwpxgwhmud&quot; : (v false)) &#125;))) , (kv &quot;apxrvvats&quot; : (v &quot;Zcnx4qoueeYYR_V2pYBC&quot;)) &#125;))) &#125;)) , (v 1393668854.5378907) ])) , (v (array [ (v true) , (v (object &#123; (kv &quot;jniiammtrvh&quot; : (v (array [ (v (object &#123; (kv &quot;mvvpuwdwsvk&quot; : (v 1896626739)) , (kv &quot;mgpfgu&quot; : (v (object &#123; (kv &quot;wrhcb&quot; : (v false)) , (kv &quot;pcrnx&quot; : (v (array [ (v false) , (v true) ]))) , (kv &quot;tjqkdjqsqxw&quot; : (v false)) , (kv &quot;rrhzbkttk&quot; : (v true)) , (kv &quot;admmbmftyrnd&quot; : (v true)) , (kv &quot;ogfmylz&quot; : (v (object &#123; (kv &quot;jjhfnzixtuta&quot; : (v &quot;OhGIGVSXB-gBnnyssop&quot;)) &#125;))) , (kv &quot;mbmclipip&quot; : (v &quot;GC6wfdV9Pceq&quot;)) , (kv &quot;cctetq&quot; : (v false)) &#125;))) , (kv &quot;prhdduxx&quot; : (v -1548791816.1863751)) , (kv &quot;takzcm&quot; : (v &quot;8a_QSI&quot;)) , (kv &quot;ufcje&quot; : (v &quot;M7sdHwXkzi_OV-F&quot;)) , (kv &quot;efjglvw&quot; : (v (array [ (v (array [ (v true) , (v true) , (v -1608494638.2646492) , (v false) ])) , (v (object &#123; (kv &quot;cpuhkiklfyap&quot; : (v -752399298.0508018)) , (kv &quot;fozrewalc&quot; : (v &quot;iZ751GLXd&quot;)) &#125;)) , (v 763091849) ]))) , (kv &quot;wtopazjgo&quot; : (v -737149764)) , (kv &quot;xxhmwduj&quot; : (v (object &#123; (kv &quot;vxulqgsacxxf&quot; : (v (object &#123; (kv &quot;hjjlytnanoll&quot; : (v 2130711664)) , (kv &quot;kpswzbwad&quot; : (v 788365059.7536508)) , (kv &quot;dwyjfdhnt&quot; : (v -449660438)) , (kv &quot;hbovhw&quot; : (v true)) , (kv &quot;atcfunzxztm&quot; : (v 659791201.3745784)) , (kv &quot;hvbhsbgpzd&quot; : (v true)) &#125;))) &#125;))) , (kv &quot;mhgjuc&quot; : (v (object &#123; (kv &quot;ghysasaagd&quot; : (v (object &#123; (kv &quot;sajlbhu&quot; : (v false)) , (kv &quot;tvlugo&quot; : (v true)) , (kv &quot;aqpwkyoy&quot; : (v &quot;jPSSEh-WOftErGA8-&quot;)) , (kv &quot;efhwwjsjjgsg&quot; : (v true)) , (kv &quot;etwtftioabzo&quot; : (v true)) , (kv &quot;vfkddwamjxw&quot; : (v 2126698548)) , (kv &quot;wvntlvb&quot; : (v -1866904988)) , (kv &quot;ahcmuac&quot; : (v &quot;-oxmlGdLsoH&quot;)) , (kv &quot;xokodsuzzec&quot; : (v -1954642857)) , (kv &quot;jpeqigxce&quot; : (v true)) &#125;))) , (kv &quot;ktjik&quot; : (v (array [ (v 296215686) , (v true) , (v false) ]))) , (kv &quot;pmjfkcvk&quot; : (v (object &#123; (kv &quot;mbmucjxz&quot; : (v &quot;0vrm&quot;)) , (kv &quot;pclxgxtubhmc&quot; : (v &quot;tD4o&quot;)) , (kv &quot;vlksej&quot; : (v -175231836)) , (kv &quot;ghpki&quot; : (v &quot;F7p_WKvzAN5iOhC3o&quot;)) , (kv &quot;bozomyvosp&quot; : (v &quot;CSclbwm&quot;)) , (kv &quot;fjfukyjt&quot; : (v true)) , (kv &quot;grjvvj&quot; : (v &quot;rI&quot;)) , (kv &quot;njlkaw&quot; : (v 126601870)) &#125;))) , (kv &quot;bgydh&quot; : (v 238702224)) , (kv &quot;xkkmnpwius&quot; : (v (array [ (v true) , (v 602126973.4586275) , (v false) , (v -2099514570) ]))) , (kv &quot;sgrouw&quot; : (v false)) &#125;))) &#125;)) , (v 1904329721.0161448) , (v true) , (v (array [ (v false) , (v &quot;G35V&quot;) , (v (object &#123; (kv &quot;gbbexruig&quot; : (v &quot;e&quot;)) , (kv &quot;rcdffshtx&quot; : (v true)) , (kv &quot;qkkvzzrqmrc&quot; : (v &quot;QzRXEart&quot;)) , (kv &quot;iwhgrxvrutj&quot; : (v (object &#123; (kv &quot;dqzrmiamfe&quot; : (v 5338367)) , (kv &quot;fwnvhjwyjn&quot; : (v &quot;cBuKgd--OCRWGMpQWm&quot;)) , (kv &quot;fsvlekwmasq&quot; : (v 699200148)) , (kv &quot;jrxhsvbc&quot; : (v -483164045.0900765)) , (kv &quot;cmqnz&quot; : (v &quot;MPbfVMlO7K&quot;)) , (kv &quot;swwvqixfxg&quot; : (v true)) , (kv &quot;cjlenicb&quot; : (v &quot;_RiN-hxANau06d&quot;)) , (kv &quot;myauaesu&quot; : (v -237651078.23778957)) , (kv &quot;gxgnxrmjwd&quot; : (v -800057586.983838)) &#125;))) , (kv &quot;bexshbqykkd&quot; : (v false)) , (kv &quot;dgvxkxpvmp&quot; : (v (object &#123; (kv &quot;sliao&quot; : (v &quot;EFh&quot;)) , (kv &quot;hnkanlmqluf&quot; : (v &quot;cQpxGxo06hZo&quot;)) , (kv &quot;lqfgaynbjt&quot; : (v 934444396.8198074)) , (kv &quot;lzpracwzul&quot; : (v -1892061636)) , (kv &quot;laiwssjmvu&quot; : (v 1897981532)) , (kv &quot;nndsymtnkd&quot; : (v &quot;VC&quot;)) , (kv &quot;ezqkcunsfmby&quot; : (v -277793116)) &#125;))) , (kv &quot;mbwjvtdy&quot; : (v &quot;tH9nXzEcBN&quot;)) , (kv &quot;zvhxjuvq&quot; : (v (object &#123; (kv &quot;vtlomhnp&quot; : (v false)) , (kv &quot;ehzkxyktwrf&quot; : (v &quot;szZ2OD95wjNcMPGI&quot;)) &#125;))) &#125;)) ])) , (v (object &#123; (kv &quot;curgpbccjop&quot; : (v &quot;N24pjsPzpSjGlN9OQMjz&quot;)) , (kv &quot;bgbgvif&quot; : (v &quot;mDy1jjc1j0Wx8kN&quot;)) , (kv &quot;qbhmjdrfo&quot; : (v &quot;qb62bZW9&quot;)) , (kv &quot;dbykj&quot; : (v (object &#123; (kv &quot;auzkmnzxjapz&quot; : (v 1667514137)) , (kv &quot;puqnd&quot; : (v (array [ (v &quot;0CQ2LcEz&quot;) , (v &quot;tOU4&quot;) , (v true) , (v false) ]))) , (kv &quot;xoegtcmq&quot; : (v true)) , (kv &quot;gnhikinkynjd&quot; : (v (object &#123; (kv &quot;jgcwndaskbil&quot; : (v true)) , (kv &quot;vhdpljdcot&quot; : (v &quot;Nqy1Sw7HuqSdQMh&quot;)) , (kv &quot;rakkbwhvqghl&quot; : (v true)) , (kv &quot;qrqnx&quot; : (v 845268718)) , (kv &quot;qpgue&quot; : (v false)) , (kv &quot;kwwtzuqpgy&quot; : (v true)) , (kv &quot;myeacnfgsk&quot; : (v false)) , (kv &quot;ixvpdp&quot; : (v -1400331300.3967977)) , (kv &quot;ykmdoup&quot; : (v 1544908603)) , (kv &quot;xtnvvepj&quot; : (v &quot;Toes9E-_mmm1hIEIf3v&quot;)) &#125;))) , (kv &quot;sijtzlcewxv&quot; : (v (array [ (v &quot;mgTG&quot;) , (v -1312622706.0005493) , (v -748071872.9063215) , (v &quot;k5HRQ5YkWH&quot;) , (v &quot;Z2koh&quot;) , (v -1601009741.181673) , (v false) , (v true) ]))) , (kv &quot;vswjrsxcc&quot; : (v (array [ (v -1781510486.6382377) , (v 738261088.4060149) , (v false) ]))) &#125;))) , (kv &quot;wgygkoujeg&quot; : (v (object &#123; (kv &quot;decksh&quot; : (v (array [ (v &quot;L3mZbob3cw01NixLlo5&quot;) , (v &quot;x731RwliBKfGSt0&quot;) , (v &quot;tG&quot;) , (v &quot;MnJPRnV&quot;) , (v -1758605267) , (v &quot;ag4&quot;) , (v &quot;QEITkzmwz&quot;) , (v &quot;HdFWevpiRqxeVz5fwLh&quot;) , (v false) , (v &quot;FNo8JwpsyCif08IODE&quot;) ]))) , (kv &quot;ioduo&quot; : (v (object &#123; (kv &quot;uflngzw&quot; : (v -1852810563.9251583)) , (kv &quot;goiqqzcn&quot; : (v &quot;Z56lv5_HC&quot;)) , (kv &quot;csywikg&quot; : (v true)) &#125;))) , (kv &quot;rnqgsjwwe&quot; : (v -774072143)) &#125;))) , (kv &quot;tejdvsk&quot; : (v 1001278416)) , (kv &quot;tyxekzdovvi&quot; : (v (array [ (v false) , (v false) , (v false) , (v (array [ (v -236543921.39379314) , (v -218223095.06218123) , (v 2024458747.6611235) , (v 811219365) , (v 1874311562.6366107) , (v &quot;5OeI7FUMWuG3Z&quot;) , (v false) , (v -1089151101.8916988) , (v &quot;Sb6rZny&quot;) , (v true) ])) , (v true) ]))) , (kv &quot;pbuacempyqc&quot; : (v (array [ (v (array [ (v 367384543) , (v true) , (v 75013920.66130935) , (v false) ])) , (v (object &#123; (kv &quot;tdztxdwmoac&quot; : (v true)) , (kv &quot;wkufkebkpxld&quot; : (v 1821757583.0949125)) &#125;)) , (v -1671201456) , (v -13804822) , (v true) ]))) &#125;)) , (v 123218945.75887775) , (v 1404339664.8457758) , (v -185387580) ]))) , (kv &quot;wfxxhuopmim&quot; : (v &quot;o&quot;)) , (kv &quot;thlluaecv&quot; : (v (array [ (v (object &#123; (kv &quot;jqylqw&quot; : (v 858899554.5139351)) , (kv &quot;wyaxfgej&quot; : (v (array [ (v (array [ (v false) , (v 2146352084.1838827) , (v 897904204.9450395) , (v &quot;fCyRLl8&quot;) , (v &quot;FsZ&quot;) , (v &quot;pez&quot;) , (v &quot;vPDYf&quot;) ])) , (v 1029640518.8229874) , (v (array [ (v &quot;bS8H&quot;) , (v false) , (v &quot;VgbMbDwvIx3&quot;) , (v &quot;VpogD&quot;) , (v false) , (v true) , (v &quot;65MgTmyuEc9qhn&quot;) , (v &quot;ohZaQT-Te&quot;) , (v &quot;Sb_yHdC&quot;) ])) , (v (array [ (v false) , (v &quot;zWd-heUqu7TY&quot;) , (v -1415954974.5944912) , (v &quot;XVfjamolrzF_0J-MNON&quot;) , (v 1217890143) , (v false) , (v true) , (v &quot;L&quot;) , (v &quot;4YKDBuAW7K&quot;) , (v &quot;V&quot;) ])) , (v true) , (v 1879580067.000942) , (v false) , (v -1654839801) , (v 100052159) , (v -800557284.0829028) ]))) , (kv &quot;nukzrbzjkir&quot; : (v (array [ (v 258533839) , (v false) , (v 213444138.73006603) , (v true) , (v (object &#123; (kv &quot;wamgajbsfmn&quot; : (v 1014574950.7713586)) , (kv &quot;rhppvf&quot; : (v true)) &#125;)) , (v 1687657363.011777) , (v 656166339) , (v (object &#123; (kv &quot;qodhrxoozlui&quot; : (v 773350455.8654208)) , (kv &quot;fzxlwnmvso&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;amxmmhaatwi&quot; : (v &quot;w4Iq0dh76AwL6rF794&quot;)) , (kv &quot;jdytudkv&quot; : (v &quot;Y-EfiosyEMlaRPTp&quot;)) , (kv &quot;cxtnekqlzw&quot; : (v 400003200)) , (kv &quot;plralpu&quot; : (v true)) , (kv &quot;pejnuyfnjbl&quot; : (v false)) , (kv &quot;hhuaisozovi&quot; : (v false)) , (kv &quot;pseyarlgnk&quot; : (v &quot;CpVc8&quot;)) , (kv &quot;bydduv&quot; : (v &quot;BIEj&quot;)) , (kv &quot;ydecuydn&quot; : (v true)) , (kv &quot;gofashwjae&quot; : (v true)) &#125;)) , (v false) ]))) , (kv &quot;zbwpjqk&quot; : (v -1838182697.1353338)) , (kv &quot;tiytaujw&quot; : (v true)) , (kv &quot;jbywktlgkk&quot; : (v true)) , (kv &quot;cqebwqv&quot; : (v (array [ (v &quot;zZKgvSnimrcGR&quot;) , (v false) ]))) , (kv &quot;imbcwcqyc&quot; : (v &quot;AnyBg57Kmk&quot;)) , (kv &quot;fwjmsokyr&quot; : (v false)) &#125;)) , (v (array [ (v (array [ (v &quot;WCuK_qLgOsxn4BMsnDaz&quot;) , (v &quot;xfi&quot;) , (v &quot;q&quot;) , (v true) ])) , (v (array [ (v -748211176.155107) , (v true) , (v -1401010966.5864644) , (v (array [ (v false) , (v 2021869653) , (v true) ])) , (v (object &#123; (kv &quot;cotgmplpyhln&quot; : (v &quot;bpFT8lpuaJKZcoaKRJl&quot;)) , (kv &quot;pzeyy&quot; : (v 1930716822.8471415)) , (kv &quot;yytlawbnur&quot; : (v -2074115774)) , (kv &quot;scgzdmgpfpsb&quot; : (v &quot;H&quot;)) , (kv &quot;qkpaxjqh&quot; : (v -378880434.1711195)) , (kv &quot;yjnbykz&quot; : (v &quot;EeMLOw&quot;)) , (kv &quot;lwamhujh&quot; : (v &quot;yLFHgWnhZtyZQPp7c&quot;)) , (kv &quot;zdslfzis&quot; : (v -1136508944.5711713)) &#125;)) , (v (array [ (v &quot;j_wou9M&quot;) ])) ])) , (v (object &#123; (kv &quot;ixozxwi&quot; : (v &quot;q&quot;)) , (kv &quot;qbuctkyregs&quot; : (v false)) , (kv &quot;fqksdag&quot; : (v -85523788)) , (kv &quot;hhdzzwng&quot; : (v false)) , (kv &quot;uczxinozzdl&quot; : (v &quot;rBOZkBxD-&quot;)) , (kv &quot;xxumgxoy&quot; : (v false)) &#125;)) , (v (array [ (v true) , (v -50400980.76733317) , (v (array [ (v false) ])) , (v -358240810) , (v 1918005033) , (v (array [ (v -1111099668.4828126) , (v false) , (v true) , (v false) , (v false) , (v false) , (v -767809010.557472) , (v -512038665) ])) , (v &quot;Bijq3eom6YtjA1muZ&quot;) ])) , (v false) , (v (array [ (v (object &#123; (kv &quot;afrilsa&quot; : (v 746200788)) &#125;)) , (v -1753507973) , (v false) , (v (array [ (v false) , (v &quot;esKJNd5dF9gOXmtCqmH&quot;) , (v -1523271154) ])) , (v (object &#123; (kv &quot;jgpewpzwoow&quot; : (v true)) , (kv &quot;tipks&quot; : (v false)) , (kv &quot;kxyczl&quot; : (v 410494353)) &#125;)) , (v &quot;qtLE8BoZUES3VC5wH&quot;) ])) , (v -1283908529) ])) , (v false) , (v (array [ (v &quot;w_5&quot;) , (v &quot;yoYoJ4lJQyZJceGGDfP&quot;) , (v -1342247946.4252052) , (v false) ])) , (v -1258133438) , (v (array [ (v (object &#123; (kv &quot;dznrdltba&quot; : (v false)) , (kv &quot;iqjobzn&quot; : (v &quot;alqGLwf&quot;)) , (kv &quot;jfbyehkaebv&quot; : (v (object &#123; (kv &quot;mnstnkdjvtoq&quot; : (v -1251476420)) , (kv &quot;yjrummqkn&quot; : (v true)) , (kv &quot;ahuatvir&quot; : (v &quot;0&quot;)) , (kv &quot;sasckoghgs&quot; : (v &quot;O3qWnVu7XVnjWAPstQ&quot;)) , (kv &quot;hqdssn&quot; : (v &quot;zcGIZ8WW-ETpeMWe&quot;)) , (kv &quot;gixjuitz&quot; : (v &quot;P-9wp8V5k0AjA&quot;)) &#125;))) , (kv &quot;sryrfu&quot; : (v 2059684846.8308434)) &#125;)) , (v &quot;1IiKLm-ZLO6ST5&quot;) , (v &quot;Io8SN3N1Va&quot;) , (v (array [ (v (array [ (v false) , (v true) , (v true) , (v true) , (v -590360750.2010583) , (v &quot;GrJn&quot;) , (v 1548376817.9896882) , (v 545919761.9998952) , (v false) , (v -1016944141) ])) , (v false) , (v (array [ (v false) , (v 257016788) , (v -182507392.0127049) ])) , (v 1574580550.7959564) , (v -2066992856) , (v 354829285) , (v false) ])) , (v (object &#123; (kv &quot;edzqm&quot; : (v &quot;0n0fh__zbqfIjYvS&quot;)) , (kv &quot;wbctu&quot; : (v -1314199540)) , (kv &quot;pofbcl&quot; : (v (object &#123; (kv &quot;gxbdleekzv&quot; : (v true)) , (kv &quot;ikiutqcwjkv&quot; : (v 1520872176.5736573)) , (kv &quot;nzjdgoih&quot; : (v true)) , (kv &quot;wqfxij&quot; : (v -1586063938.1858013)) , (kv &quot;euutcsikp&quot; : (v false)) , (kv &quot;blffitza&quot; : (v &quot;tc&quot;)) , (kv &quot;rhquzmynvm&quot; : (v -365100281.4269022)) , (kv &quot;hrqjquepkvk&quot; : (v -1861705526.114913)) &#125;))) , (kv &quot;hazdi&quot; : (v true)) &#125;)) , (v -1124751440.8444362) , (v true) , (v (array [ (v (array [ (v &quot;KKAtG5VK7K40i0&quot;) , (v -563064267.2614653) , (v true) , (v &quot;vgRiOICLB4PTs6lo&quot;) , (v &quot;C18_pTNweX9qiHO8bVr5&quot;) , (v -408766011) , (v true) , (v &quot;ftTpxZQwC&quot;) , (v 1894079196.3602607) ])) ])) ])) , (v (array [ (v (array [ (v true) ])) , (v (array [ (v true) , (v -805819753) , (v &quot;-F&quot;) , (v &quot;L&quot;) , (v (array [ (v 1333877086) , (v 831431100) , (v &quot;oXEGuI&quot;) , (v &quot;EwoSumf&quot;) , (v &quot;0aqeG&quot;) , (v &quot;R_Lydo2Pcr8T4Iy45Vs&quot;) , (v false) , (v &quot;bMxfO40XBb&quot;) ])) , (v &quot;jR9d7hIdXMR1nuyfYk&quot;) , (v false) , (v (array [ (v &quot;sGDxU&quot;) , (v &quot;_l&quot;) , (v false) , (v &quot;JMnM7NZM7QdLxisf&quot;) , (v true) , (v &quot;tn&quot;) , (v &quot;Rv36Jim&quot;) , (v 690415519.3377113) , (v &quot;sgLDRwqUuApnK7SzN&quot;) , (v false) ])) , (v &quot;E8y&quot;) ])) , (v false) , (v &quot;cfQTKFFBJV8Kf&quot;) , (v &quot;ZkoPhvR1fop_kH&quot;) , (v 586966110) , (v (array [ (v &quot;Ga&quot;) , (v &quot;k6-OsZvJ-MpKBaoETU&quot;) , (v (array [ (v true) , (v &quot;W4Kem28FRT4zc7&quot;) , (v true) , (v false) , (v &quot;LXH4lUxbJ9&quot;) , (v -579480971.3091834) , (v -965329135.0661935) , (v 745098321.8406487) , (v &quot;O7eD04&quot;) , (v 256803763) ])) , (v -729923167) , (v (object &#123; (kv &quot;fgdxclqyqsq&quot; : (v &quot;EkB&quot;)) , (kv &quot;tkjtxdqdi&quot; : (v -1331031678.9067976)) , (kv &quot;kkfyselgk&quot; : (v 912068528)) , (kv &quot;kjhcbkbrrd&quot; : (v true)) , (kv &quot;ykikpcsxida&quot; : (v true)) , (kv &quot;sqwaoixa&quot; : (v -385379550.47864807)) , (kv &quot;techbeiwmprm&quot; : (v false)) , (kv &quot;dfubtugd&quot; : (v &quot;eLQUEApzgyYkpSPV&quot;)) , (kv &quot;fonxdl&quot; : (v &quot;M9A9Hlvw2L&quot;)) &#125;)) , (v &quot;Emc2MBR58&quot;) , (v (object &#123; (kv &quot;uzefwwfa&quot; : (v -1123906836.8169978)) , (kv &quot;hyafx&quot; : (v true)) , (kv &quot;wlhryfosjwfe&quot; : (v &quot;pk&quot;)) , (kv &quot;bfusa&quot; : (v false)) , (kv &quot;aqvgwpu&quot; : (v -1695858446.6201096)) , (kv &quot;gxohmh&quot; : (v false)) , (kv &quot;ldbcad&quot; : (v true)) &#125;)) , (v 1768243012) , (v (array [ (v true) , (v &quot;qliHrZe-bZRfnvUxu&quot;) , (v &quot;vjQFTDuWzdvRZB2Q&quot;) , (v true) , (v true) , (v false) , (v true) , (v &quot;i&quot;) , (v true) ])) , (v true) ])) ])) , (v (array [ (v (object &#123; (kv &quot;bgdvey&quot; : (v (array [ (v -344534268.0866078) , (v &quot;Irfa&quot;) , (v true) , (v false) ]))) &#125;)) ])) ]))) , (kv &quot;botwups&quot; : (v (object &#123; (kv &quot;yxfydzutdu&quot; : (v -141152099)) , (kv &quot;beynbuc&quot; : (v (array [ (v (array [ (v &quot;ZkqIea&quot;) ])) , (v false) , (v true) , (v true) , (v &quot;oAN5Mf&quot;) , (v &quot;zQIs&quot;) , (v &quot;6__Z4B0iSlUvSzaSZx&quot;) ]))) , (kv &quot;dhqpvs&quot; : (v false)) , (kv &quot;oxwussmmkyct&quot; : (v 1303875127)) , (kv &quot;mdydgv&quot; : (v (object &#123; (kv &quot;kksoktt&quot; : (v -1391672346.5872455)) , (kv &quot;sbtzf&quot; : (v &quot;WVEO2YvR8QuTW6P0Jgt&quot;)) , (kv &quot;tjqpa&quot; : (v 1977149411.4250703)) , (kv &quot;ywhttbtmt&quot; : (v &quot;wjTdln8LEDkNdvqxf8&quot;)) , (kv &quot;lhgjxzonxf&quot; : (v false)) , (kv &quot;zctzg&quot; : (v (object &#123; (kv &quot;scajelqhgrr&quot; : (v false)) , (kv &quot;kvtcfbyy&quot; : (v (array [ (v &quot;AfUTZ4gKSF&quot;) , (v 317001390) , (v &quot;ryYWZiy3FtF2&quot;) ]))) , (kv &quot;rtyket&quot; : (v (array [ (v -1036114681.7964913) , (v &quot;tf0QitbR8O9xtvGf5&quot;) , (v 1332982502.2638862) , (v false) , (v true) , (v &quot;TZA_&quot;) , (v -652603928) , (v true) , (v 1390574689) , (v false) ]))) , (kv &quot;qejie&quot; : (v (object &#123; (kv &quot;smqufrfb&quot; : (v false)) , (kv &quot;gtoqbjpclfw&quot; : (v 1638916118)) , (kv &quot;pfyir&quot; : (v -29443720.445729908)) , (kv &quot;hhebrxce&quot; : (v -1152653643.070923)) , (kv &quot;pzrapinkph&quot; : (v false)) &#125;))) , (kv &quot;acokxnk&quot; : (v (object &#123; (kv &quot;whnhxuyrcmxj&quot; : (v true)) , (kv &quot;ysxivdlxwccj&quot; : (v -549543202)) , (kv &quot;grlqnxsenwo&quot; : (v -1605091218.0205402)) , (kv &quot;ysgfppcgxa&quot; : (v true)) , (kv &quot;okelikbpaunk&quot; : (v false)) , (kv &quot;aghvdwc&quot; : (v 1959686221)) &#125;))) , (kv &quot;gvmlkcbarl&quot; : (v &quot;VC2ie&quot;)) &#125;))) , (kv &quot;yvmssbloycci&quot; : (v &quot;xlG-utO3W&quot;)) , (kv &quot;kilumeuixpra&quot; : (v (object &#123; (kv &quot;mngaffwwt&quot; : (v &quot;7aOygJbtcuCxqT8by&quot;)) , (kv &quot;qdgdooapvhf&quot; : (v true)) &#125;))) , (kv &quot;lrcbzd&quot; : (v 1998026347)) &#125;))) , (kv &quot;wuzfuuengn&quot; : (v false)) , (kv &quot;ittarmczyec&quot; : (v &quot;tIL4PPbTrV&quot;)) &#125;))) , (kv &quot;fcmdqmo&quot; : (v 978735650.1124437)) , (kv &quot;bkddvpsiqn&quot; : (v (object &#123; (kv &quot;rmabbbeyed&quot; : (v (object &#123; (kv &quot;gjktmbx&quot; : (v (array [ (v &quot;4E&quot;) , (v true) , (v &quot;AW&quot;) , (v (array [ (v true) ])) , (v &quot;zQ6Cie7ojjgNUU&quot;) ]))) , (kv &quot;wpnnax&quot; : (v (array [ (v (array [ (v false) , (v &quot;PMKDVXUM&quot;) ])) , (v (array [ (v false) , (v 227281685) , (v -1517772604.7362504) , (v &quot;2&quot;) , (v false) , (v true) , (v &quot;C-tl1e&quot;) ])) , (v (object &#123; (kv &quot;zxstvmldpnj&quot; : (v -16494832.358713515)) , (kv &quot;zqlqltedv&quot; : (v true)) , (kv &quot;ptfoj&quot; : (v true)) , (kv &quot;hcbbgtpw&quot; : (v true)) , (kv &quot;saugkioob&quot; : (v &quot;fW1ewgZWKxUeVxg&quot;)) , (kv &quot;lwvymi&quot; : (v 635029332.4375454)) , (kv &quot;kbspxye&quot; : (v -2016408272)) &#125;)) , (v (array [ (v false) , (v &quot;h&quot;) , (v -1577976928.3655305) , (v -1974299206.3429081) , (v &quot;ZWWXHem3kxH4RNg&quot;) , (v &quot;eNSb5&quot;) ])) , (v &quot;lZ7O&quot;) , (v 1297433422) ]))) &#125;))) , (kv &quot;vvtarlzpih&quot; : (v false)) , (kv &quot;ttzfakmiafi&quot; : (v (array [ (v &quot;l-W&quot;) , (v false) , (v true) , (v (array [ (v -1336747042.387207) , (v (array [ (v true) , (v &quot;9hfXIEnntiVG7&quot;) , (v true) , (v &quot;9VmkgVyw_hUhOAP&quot;) , (v true) , (v -407482117) , (v &quot;tiDFMS1pWL&quot;) , (v true) , (v -163574502.27217305) ])) ])) ]))) , (kv &quot;hvoatumqpjsm&quot; : (v false)) &#125;))) , (kv &quot;gplkqplz&quot; : (v (array [ (v true) , (v (array [ (v &quot;Mc_3N0TBZDPcgX&quot;) ])) ]))) , (kv &quot;vrqlereq&quot; : (v &quot;mhsE5tR&quot;)) , (kv &quot;thtnmsn&quot; : (v (object &#123; (kv &quot;ydlvtzanz&quot; : (v -1414888863)) , (kv &quot;yyiuoipbttz&quot; : (v 32543798.583942864)) , (kv &quot;xmvrjckyl&quot; : (v (array [ (v -965711726) ]))) , (kv &quot;qtuwqtd&quot; : (v (array [ (v -1984464781) , (v &quot;gZkyycZ&quot;) , (v true) , (v false) , (v &quot;YHmhP6Ttr1Ned0VTc8&quot;) , (v -999563241.2870336) , (v (array [ (v (array [ (v false) , (v 1172700925.1223257) , (v &quot;c&quot;) , (v 1639958201.7030485) , (v 955475634) , (v -369295868.619293) , (v false) , (v &quot;fWykK9sVv1R&quot;) ])) , (v &quot;7aXa&quot;) , (v 1816539149) , (v true) , (v -1487024995.0384936) , (v 1089482526) , (v (array [ (v false) , (v true) ])) , (v (object &#123; (kv &quot;fmuxmxyqkwe&quot; : (v &quot;S2JX8CKlBVS8&quot;)) , (kv &quot;avfmikc&quot; : (v -45035359)) , (kv &quot;snhxbwwjzjk&quot; : (v false)) , (kv &quot;gufsln&quot; : (v false)) , (kv &quot;aipyd&quot; : (v -720019848.9478672)) , (kv &quot;iiarzjgssxf&quot; : (v &quot;YVP49F-l8bF2q0m_&quot;)) &#125;)) ])) , (v (array [ (v (array [ (v 591432138) , (v true) , (v &quot;YyrpeF-EXmcmPTGk-d&quot;) , (v &quot;emcP&quot;) , (v -290019325.4129753) , (v -1912570370.784024) , (v true) , (v &quot;OxC_4A&quot;) , (v &quot;yQbThou_8YdKWeqWyAPI&quot;) ])) , (v (array [ (v false) , (v true) , (v true) ])) , (v -1636293799) , (v 1976637394.5380754) , (v true) ])) , (v (array [ (v (object &#123; (kv &quot;spzamyd&quot; : (v &quot;7C&quot;)) , (kv &quot;gclgdvwuzita&quot; : (v false)) , (kv &quot;ldgeomyo&quot; : (v &quot;YJfGWg&quot;)) , (kv &quot;eicdnjt&quot; : (v -263779788.12014225)) , (kv &quot;kfvae&quot; : (v &quot;19wJcs6BF8&quot;)) , (kv &quot;fmydqdiazrfw&quot; : (v -1828122547)) , (kv &quot;mljeevnzbcbl&quot; : (v 856273652)) &#125;)) , (v (object &#123; (kv &quot;izaxgf&quot; : (v false)) , (kv &quot;xhhfwsx&quot; : (v 1775964568.0527732)) , (kv &quot;ifzdyxiiems&quot; : (v true)) , (kv &quot;eupiq&quot; : (v true)) , (kv &quot;oevjpjeqjduz&quot; : (v true)) , (kv &quot;esnwkr&quot; : (v 1715470666)) , (kv &quot;hrhrf&quot; : (v 1451902245)) , (kv &quot;zgtxhstq&quot; : (v true)) , (kv &quot;ypidcpiwwpyt&quot; : (v -917126816.3725044)) &#125;)) ])) ]))) &#125;))) &#125;)) , (v (object &#123; (kv &quot;aqodokqkhg&quot; : (v &quot;Zuwljed&quot;)) , (kv &quot;cwunjk&quot; : (v (object &#123; (kv &quot;vbotghamd&quot; : (v (object &#123; (kv &quot;jmepdy&quot; : (v &quot;q&quot;)) , (kv &quot;xuxswruytv&quot; : (v false)) , (kv &quot;ndcdokr&quot; : (v &quot;WbUtxYV2l_ouqu&quot;)) , (kv &quot;mgizyrvhxpts&quot; : (v &quot;q&quot;)) , (kv &quot;scaanv&quot; : (v (object &#123; (kv &quot;mktyvadr&quot; : (v 1109020019)) , (kv &quot;vugerrcpxhql&quot; : (v false)) , (kv &quot;vtmmxjoci&quot; : (v (object &#123; (kv &quot;ncaacoxpm&quot; : (v 1494489988.383974)) , (kv &quot;qxhdxfldwl&quot; : (v &quot;S3KmDC1TFrOQ39&quot;)) &#125;))) &#125;))) , (kv &quot;ensshllzbgeh&quot; : (v &quot;3D&quot;)) , (kv &quot;znwaofjldbpu&quot; : (v -154842680)) , (kv &quot;guypzmczdt&quot; : (v false)) &#125;))) , (kv &quot;fvwaau&quot; : (v (array [ (v (object &#123; (kv &quot;tsngbvpx&quot; : (v true)) , (kv &quot;eakhxyaegy&quot; : (v &quot;BFPt&quot;)) , (kv &quot;gmbxrlft&quot; : (v false)) , (kv &quot;xqgeyarvdsrx&quot; : (v &quot;R8bR35kB9J96yl9aVz&quot;)) , (kv &quot;xsszczg&quot; : (v -829493280)) , (kv &quot;jsbhx&quot; : (v &quot;uhc9vnLNxrp&quot;)) , (kv &quot;hhyfkmj&quot; : (v &quot;H&quot;)) , (kv &quot;bllvii&quot; : (v &quot;k1t1P6KXdoGlx&quot;)) &#125;)) , (v (array [ (v (object &#123; (kv &quot;ptccx&quot; : (v &quot;lfZzuhjAgdoeszztdy&quot;)) , (kv &quot;bkwefymlntg&quot; : (v &quot;PyQnMyFCEUrWzjXsSm4g&quot;)) , (kv &quot;xfmesjx&quot; : (v &quot;-4DDE6hPZBOz8uacIs&quot;)) , (kv &quot;jokesohwhy&quot; : (v &quot;zXV2ZiJC5bebS&quot;)) &#125;)) , (v (array [ (v &quot;G8UgU7p&quot;) , (v true) , (v -2127904687) , (v &quot;Nu-PJlWElM&quot;) , (v true) , (v &quot;s6qXUkl3jLOD_pc&quot;) , (v &quot;Wxnfgt&quot;) , (v &quot;D5klK1CBaxRBK-DPDexg&quot;) , (v &quot;xkZeTIMgD8Ws6&quot;) ])) , (v &quot;CoF5lUe&quot;) , (v 1937123170) ])) , (v &quot;BHWgFisFGYVw&quot;) , (v true) , (v &quot;BgZOfFqfWfe&quot;) , (v &quot;EFPl&quot;) , (v true) , (v 1037155095.8092796) , (v true) ]))) , (kv &quot;xfdatb&quot; : (v &quot;WNSSfr_aW2flUKzRCzn8&quot;)) &#125;))) , (kv &quot;xusne&quot; : (v (array [ (v (array [ (v 159001374.62753832) , (v false) , (v &quot;zSl8BgFsW_G1cmznFPCz&quot;) , (v (object &#123; (kv &quot;mdatkyo&quot; : (v 1527570384.7669864)) , (kv &quot;xbitixviegbx&quot; : (v (array [ (v true) , (v -1848097938) , (v &quot;7Joyk7PRrOns&quot;) ]))) , (kv &quot;edwrpdsrvch&quot; : (v (array [ (v -552911668) , (v 1645951924.689196) , (v &quot;IZzx&quot;) , (v true) , (v &quot;xlXpfZVO5&quot;) , (v 839412569.866161) , (v false) ]))) , (kv &quot;hachxgwnpjzz&quot; : (v -1436594422)) , (kv &quot;ybwdvfi&quot; : (v (object &#123; (kv &quot;kuvgdtpw&quot; : (v &quot;0z&quot;)) , (kv &quot;hfsqbjixs&quot; : (v false)) , (kv &quot;cbtmoyfr&quot; : (v -1194184635)) , (kv &quot;sheruaykeat&quot; : (v -1567110698.7025378)) , (kv &quot;txkjxsk&quot; : (v &quot;XZL7G&quot;)) , (kv &quot;jpjkcsgsek&quot; : (v 43304917)) , (kv &quot;iieavlkrprbg&quot; : (v &quot;LwQSe8DO7xe2rCbbU&quot;)) , (kv &quot;dsboooa&quot; : (v -393666520.97452974)) , (kv &quot;vndzqxsqg&quot; : (v true)) , (kv &quot;nsagjbmdb&quot; : (v 48834587.35983275)) &#125;))) , (kv &quot;vlclwslfhskz&quot; : (v (array [ (v false) , (v &quot;SXjGCaiTTclDmLrT6F&quot;) , (v false) , (v 1043105482) , (v 2097301784) , (v &quot;4nKmbf&quot;) , (v false) , (v 69831396) ]))) , (kv &quot;osdtk&quot; : (v -208396821)) , (kv &quot;qlmuqhuzp&quot; : (v (object &#123; (kv &quot;usnssurcdr&quot; : (v -574185213.4452506)) , (kv &quot;pltuqsnq&quot; : (v &quot;0uB7KLhla7WL&quot;)) , (kv &quot;nndskrvoog&quot; : (v -1367986628)) , (kv &quot;tofdvdh&quot; : (v &quot;tPBDW54rX0&quot;)) , (kv &quot;kgfcciovi&quot; : (v -1885874500.3966577)) , (kv &quot;edzhv&quot; : (v &quot;LhJo7NIPH&quot;)) , (kv &quot;jzldueqompc&quot; : (v &quot;fzJ7f7arKc&quot;)) , (kv &quot;qgloxhjw&quot; : (v 2080025119)) , (kv &quot;brcfgh&quot; : (v false)) &#125;))) &#125;)) , (v true) , (v true) , (v (array [ (v (object &#123; (kv &quot;flpyfhswfved&quot; : (v true)) , (kv &quot;pyiolxqydog&quot; : (v &quot;ny5FOm36yHm5I6-6JxK8&quot;)) , (kv &quot;dbllpwmpn&quot; : (v false)) , (kv &quot;qkyuhqn&quot; : (v false)) , (kv &quot;mdxbnvba&quot; : (v -889388673.516174)) &#125;)) , (v false) , (v false) , (v -120281594.42272925) , (v 1687573020) , (v (object &#123; (kv &quot;akryajepml&quot; : (v -214721453.71072343)) , (kv &quot;zifcjs&quot; : (v &quot;YFbPFMdGskdp_T0&quot;)) , (kv &quot;pqebnq&quot; : (v true)) , (kv &quot;elaamzzz&quot; : (v 1655404318)) , (kv &quot;ymlxovroz&quot; : (v &quot;22&quot;)) , (kv &quot;amofr&quot; : (v 1210476055)) &#125;)) ])) , (v (array [ (v (object &#123; (kv &quot;xioxpdef&quot; : (v true)) , (kv &quot;nwrnxblzgy&quot; : (v true)) , (kv &quot;kkxlv&quot; : (v true)) , (kv &quot;vkyblcyj&quot; : (v &quot;r&quot;)) , (kv &quot;etypmghiuz&quot; : (v 1221139522)) , (kv &quot;mmbfoxbmc&quot; : (v 1715298681)) &#125;)) , (v (array [ (v &quot;hrpBTNBPMlBHYgtz&quot;) , (v &quot;01lFi-_mz5G&quot;) , (v -75683411) ])) , (v -372350659) , (v (array [ (v true) , (v -1744224698) , (v -314964517) , (v false) , (v false) , (v true) , (v -336477158.931942) ])) ])) , (v 1835082196.4508193) , (v true) ])) , (v (array [ (v false) , (v (object &#123; (kv &quot;clpkqu&quot; : (v (object &#123; (kv &quot;fulgxpyuk&quot; : (v 702470186.2025743)) , (kv &quot;ftijxzvtcahg&quot; : (v &quot;yZUiDfUuWRcbeWKn&quot;)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;tzviwlju&quot; : (v (array [ (v false) , (v -1410925691.7032757) , (v 1770238795) , (v false) , (v &quot;LeusV3QI2S&quot;) , (v true) ]))) , (kv &quot;skasbkydclr&quot; : (v 1851422214)) , (kv &quot;acfmrib&quot; : (v &quot;3g5jstz1o73&quot;)) , (kv &quot;xpwjhkgwq&quot; : (v true)) , (kv &quot;twemfo&quot; : (v (object &#123; (kv &quot;kvwnwqjln&quot; : (v false)) , (kv &quot;edzeemddl&quot; : (v false)) , (kv &quot;nqkcvouhsi&quot; : (v &quot;EOcTpEHD&quot;)) , (kv &quot;nfrukradtkgz&quot; : (v -1138249926)) , (kv &quot;wwslfndbjth&quot; : (v 1376666525.6238637)) , (kv &quot;mglmsgfi&quot; : (v true)) , (kv &quot;uazuuft&quot; : (v true)) , (kv &quot;rpfrwaox&quot; : (v 169389405.60048518)) , (kv &quot;ogghkla&quot; : (v false)) , (kv &quot;ymbmzhdgv&quot; : (v &quot;s4_iUfV2TT6sI1TE7Q&quot;)) &#125;))) &#125;)) , (v &quot;xNh-&quot;) , (v true) , (v &quot;InBfFsXd&quot;) , (v (object &#123; (kv &quot;ntcih&quot; : (v 1429314832)) , (kv &quot;nvopbqaf&quot; : (v false)) , (kv &quot;isymgdnp&quot; : (v (array [ (v 2127520059) , (v &quot;Vu&quot;) , (v &quot;fzNynh5lZrwynoyZjkU&quot;) , (v &quot;4VjUK6&quot;) ]))) , (kv &quot;bnuimydawl&quot; : (v (array [ (v true) , (v &quot;uh5&quot;) , (v &quot;a&quot;) , (v false) , (v 1557105429) , (v -1283217851) , (v &quot;740ZE6Cfka&quot;) , (v &quot;8&quot;) , (v &quot;-Ah7g&quot;) , (v &quot;Um-EqrR&quot;) ]))) &#125;)) , (v -266838979.80874255) , (v (object &#123; (kv &quot;nxkfmkrddfgg&quot; : (v (array [ (v false) ]))) , (kv &quot;sxqsti&quot; : (v &quot;9hKjgSAf&quot;)) , (kv &quot;trlvjragcorp&quot; : (v false)) , (kv &quot;klqvjahdxfpf&quot; : (v &quot;y2Gkwg6zp3oYxq&quot;)) , (kv &quot;znnqfvzllr&quot; : (v true)) , (kv &quot;xavezxjtwmif&quot; : (v -2065045681)) , (kv &quot;uytczusfkl&quot; : (v -1767757264)) , (kv &quot;vspwvbetc&quot; : (v (object &#123; (kv &quot;qugreofhxe&quot; : (v &quot;ldTH9mCs8W-_IRRIZUIU&quot;)) , (kv &quot;uhvuvtm&quot; : (v &quot;XBfTLUpprqb9i3nSe&quot;)) , (kv &quot;rinspvbhxv&quot; : (v 1025589038.8803321)) , (kv &quot;bjpazv&quot; : (v &quot;J2lQWuGgXRw&quot;)) &#125;))) , (kv &quot;vhablr&quot; : (v (object &#123; (kv &quot;wjitko&quot; : (v &quot;KUM&quot;)) , (kv &quot;hjegpced&quot; : (v &quot;Qqs6g1dgXhxpEN&quot;)) , (kv &quot;txkqlveuv&quot; : (v 230362113.51992226)) , (kv &quot;yshaztmyhyk&quot; : (v 783503651.9441766)) , (kv &quot;zzsjxf&quot; : (v -1792742449.880724)) , (kv &quot;avrsqlfkz&quot; : (v false)) , (kv &quot;zbgxhyo&quot; : (v false)) , (kv &quot;iyuwgoey&quot; : (v true)) &#125;))) &#125;)) , (v false) ])) , (v (array [ (v (object &#123; (kv &quot;ozxvrkv&quot; : (v (object &#123; (kv &quot;pgamc&quot; : (v false)) , (kv &quot;saxnwqrch&quot; : (v &quot;o8GQLravXKJD6KR3RJwG&quot;)) , (kv &quot;qvjqwpxd&quot; : (v -124149443.38860717)) , (kv &quot;myabwpwkag&quot; : (v true)) , (kv &quot;onqichz&quot; : (v &quot;aZMXwVeG&quot;)) , (kv &quot;fyabsaqlw&quot; : (v false)) , (kv &quot;epxbw&quot; : (v false)) , (kv &quot;eqehuocmi&quot; : (v &quot;PdPexw6e_ybrNr7e1&quot;)) , (kv &quot;kqswherw&quot; : (v &quot;mfk2&quot;)) &#125;))) , (kv &quot;rrbpuwrwfn&quot; : (v (array [ (v true) , (v -2032913462.575437) , (v &quot;d9_kT&quot;) , (v -1535246190.54071) , (v true) ]))) , (kv &quot;ugxzlfffnc&quot; : (v -1699340109.979918)) &#125;)) , (v (object &#123; (kv &quot;dwaxpfrune&quot; : (v false)) &#125;)) , (v &quot;kDS8_kR4lk0&quot;) , (v -301772859) , (v (object &#123; (kv &quot;qbixfwynlt&quot; : (v true)) &#125;)) , (v -1741110702) , (v &quot;aPWb&quot;) , (v &quot;E74CdAtMvoDtb33o&quot;) , (v -643343114) ])) , (v (array [ (v (array [ (v (object &#123; (kv &quot;xgawotdioqs&quot; : (v 1001952480)) , (kv &quot;wmnkz&quot; : (v -1924782901.6016426)) , (kv &quot;alohrdkf&quot; : (v false)) , (kv &quot;ylfxzrd&quot; : (v -800189854.276272)) , (kv &quot;wbfan&quot; : (v -1781709246)) , (kv &quot;qjdgrosfl&quot; : (v true)) , (kv &quot;ardwbubahkg&quot; : (v &quot;a0sq2nmqkZinl91EBkaV&quot;)) &#125;)) , (v false) , (v &quot;gHTHxplIfuVj5g6i&quot;) , (v (object &#123; (kv &quot;eggxa&quot; : (v true)) , (kv &quot;oyefuyf&quot; : (v &quot;igYxzCUGU&quot;)) &#125;)) , (v &quot;R&quot;) ])) ])) , (v &quot;ugcd2p1qF3uCdCe&quot;) , (v &quot;rWMWxGWxkLUhs&quot;) , (v -733461829) , (v false) , (v (object &#123; (kv &quot;kquvuns&quot; : (v (object &#123; (kv &quot;myvwrwjqgh&quot; : (v (object &#123; (kv &quot;dqijvjqc&quot; : (v true)) , (kv &quot;lseierbiq&quot; : (v true)) , (kv &quot;vjydbvnjksk&quot; : (v false)) , (kv &quot;gjsbllijj&quot; : (v true)) , (kv &quot;hbyya&quot; : (v 1965007814.767449)) , (kv &quot;gvomqit&quot; : (v -220849628.9049218)) , (kv &quot;adsuklcfux&quot; : (v false)) &#125;))) , (kv &quot;dyaiazkrn&quot; : (v true)) , (kv &quot;ukabijrhj&quot; : (v &quot;-2zJymU4aM2CO7hn9_&quot;)) , (kv &quot;qhcuikiyzb&quot; : (v &quot;T-6uinTm4N&quot;)) , (kv &quot;cjclyauxmg&quot; : (v -1283596205)) , (kv &quot;bonpye&quot; : (v &quot;da3FKs_NVPk&quot;)) &#125;))) , (kv &quot;twqbfrsurulc&quot; : (v &quot;yd4oEMiYe115x&quot;)) , (kv &quot;jcjxr&quot; : (v (array [ (v &quot;dzULzi_LR9&quot;) , (v &quot;R5u&quot;) , (v 1248162729.6331239) ]))) , (kv &quot;zapte&quot; : (v (object &#123; (kv &quot;axihjnv&quot; : (v true)) &#125;))) , (kv &quot;ehzsex&quot; : (v (object &#123; (kv &quot;vchltrfmbx&quot; : (v &quot;ZY0QkmdwSz9o5&quot;)) , (kv &quot;uwhayyekh&quot; : (v (array [ (v false) , (v &quot;GrsCC9Ic&quot;) , (v true) , (v false) , (v false) , (v -2068134293) , (v &quot;bFL92dKKAVPPv&quot;) , (v true) , (v &quot;yoB&quot;) ]))) , (kv &quot;hjmofnzrs&quot; : (v (array [ (v &quot;NX3Cuz5cv5txC&quot;) , (v true) , (v 1247043235) , (v &quot;csM2vSg&quot;) , (v &quot;nf18GjPLOu&quot;) , (v false) , (v &quot;kuTFyfn1NmLuX&quot;) , (v true) , (v false) , (v &quot;zeTsOtggOL&quot;) ]))) , (kv &quot;kioldgejm&quot; : (v 1495107089)) , (kv &quot;ibprzzv&quot; : (v 1949031559.894761)) , (kv &quot;yykagzc&quot; : (v 1731468648)) , (kv &quot;kmtixgjaxmuw&quot; : (v (object &#123; (kv &quot;bndvhyixs&quot; : (v 1981313999.1262317)) , (kv &quot;cctkza&quot; : (v false)) , (kv &quot;yonve&quot; : (v -1270129901)) , (kv &quot;ugxwqviage&quot; : (v false)) , (kv &quot;jlzjezjmozt&quot; : (v 741976859.6743804)) , (kv &quot;sevsmthy&quot; : (v &quot;GS&quot;)) , (kv &quot;gjlwhsmy&quot; : (v true)) , (kv &quot;jaopgdbyvg&quot; : (v &quot;EyIEip2&quot;)) , (kv &quot;loriay&quot; : (v true)) &#125;))) &#125;))) , (kv &quot;nhxfedlxr&quot; : (v &quot;lTRz0N10VzouzfEHFZ7Y&quot;)) &#125;)) ]))) , (kv &quot;ynljyo&quot; : (v (object &#123; (kv &quot;uxancdm&quot; : (v (array [ (v (array [ (v (array [ (v &quot;_Q&quot;) , (v false) , (v true) , (v 206904565) , (v -822973653.1527957) , (v true) , (v -1350683442.167704) , (v false) ])) , (v (array [ (v -1596875876.1549363) , (v false) , (v false) , (v -1238012415) , (v -137848010.68573704) , (v 470340449.6492439) , (v &quot;ueV&quot;) , (v &quot;pJseAL2&quot;) , (v &quot;Ddj&quot;) ])) , (v (object &#123; (kv &quot;ndokpnncjhr&quot; : (v 336590575)) , (kv &quot;fyxblnelpycw&quot; : (v -2000012939)) , (kv &quot;eacsllkotep&quot; : (v true)) , (kv &quot;fzzipybwjrj&quot; : (v &quot;eQ8E-5LW&quot;)) &#125;)) , (v &quot;UX9ckX__RQxHUpcWe&quot;) , (v false) , (v &quot;V8_fY&quot;) , (v &quot;KLJPTHF&quot;) ])) , (v (object &#123; (kv &quot;nwvprgnejo&quot; : (v (array [ (v &quot;1eFczhGfNak8XzhFrU4P&quot;) , (v &quot;npufjdvfN1qVxWs6QT&quot;) , (v true) , (v false) , (v 2089311084) ]))) , (kv &quot;xqiscnyeaszu&quot; : (v &quot;NXACMMHpfOt3zUD-i-c4&quot;)) , (kv &quot;eacpubqaezkx&quot; : (v true)) , (kv &quot;ypmdfegxfa&quot; : (v &quot;6vGsrDlfRFoCDE&quot;)) , (kv &quot;agpbbjhkw&quot; : (v (object &#123; (kv &quot;quzcrqccjil&quot; : (v true)) , (kv &quot;cncogxofher&quot; : (v -488366710)) , (kv &quot;ckvnedwsn&quot; : (v &quot;ZisifVoJdyXQMWKv&quot;)) , (kv &quot;yupbpo&quot; : (v &quot;rI4EbA&quot;)) , (kv &quot;dhodomjhlw&quot; : (v &quot;Ik3-P&quot;)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;qodkjxmln&quot; : (v true)) , (kv &quot;rxtqszfvj&quot; : (v &quot;E6DtfGYllUAg&quot;)) , (kv &quot;odcrgsf&quot; : (v (object &#123; (kv &quot;vlovspvtetoc&quot; : (v -1192897874.0416543)) , (kv &quot;hkawoboi&quot; : (v &quot;DWqRBOLpicQA&quot;)) &#125;))) &#125;)) ]))) , (kv &quot;kzyzwvlzgv&quot; : (v &quot;cUjK4x97BL-Ynrz1&quot;)) , (kv &quot;hqvqu&quot; : (v true)) , (kv &quot;hzsyqskdbeiv&quot; : (v &quot;e&quot;)) , (kv &quot;kzaxjhypvjgl&quot; : (v (object &#123; (kv &quot;jxsivexkzo&quot; : (v (object &#123; (kv &quot;vqrdau&quot; : (v (object &#123; (kv &quot;wvqtv&quot; : (v &quot;icEdevVzd1_cNyg4dLpd&quot;)) , (kv &quot;xdscbuuxbp&quot; : (v 55980602.317599505)) , (kv &quot;cynwh&quot; : (v &quot;DNkVnXR&quot;)) , (kv &quot;ymaxnylujjix&quot; : (v true)) &#125;))) , (kv &quot;zchxxebmbloq&quot; : (v true)) , (kv &quot;sycxm&quot; : (v (array [ (v &quot;9fqFa4nbH&quot;) , (v 1437249377) , (v 322273775) , (v &quot;PYFTG5_SAlK_z9LqFGI&quot;) , (v false) ]))) , (kv &quot;ywdzieiipr&quot; : (v (object &#123; (kv &quot;cgszdsgaofr&quot; : (v false)) , (kv &quot;uplsenrjl&quot; : (v false)) , (kv &quot;fmsaqw&quot; : (v 574140967.0779312)) , (kv &quot;ragmhba&quot; : (v false)) , (kv &quot;uukxupjebdt&quot; : (v -861913050.194706)) , (kv &quot;idpdzxu&quot; : (v false)) , (kv &quot;ljodrzis&quot; : (v -122362803.07739404)) , (kv &quot;caqmi&quot; : (v -1386917475.509559)) , (kv &quot;abgqni&quot; : (v &quot;-BGc7D&quot;)) , (kv &quot;ocvaluxbmy&quot; : (v true)) &#125;))) , (kv &quot;isqlorcefbay&quot; : (v false)) , (kv &quot;xrjydeqvvgp&quot; : (v (array [ (v &quot;5SExZUPVC&quot;) , (v &quot;S1BrzW8UIe_kMh7ck&quot;) , (v &quot;Mennkgnk_-&quot;) , (v true) ]))) , (kv &quot;ojoegl&quot; : (v true)) , (kv &quot;bgwktztm&quot; : (v &quot;zJYQF9kPfEi64yMmJFV&quot;)) , (kv &quot;dtawwflo&quot; : (v (object &#123; (kv &quot;prmbytntnpfk&quot; : (v true)) , (kv &quot;whskbvygqyu&quot; : (v true)) &#125;))) &#125;))) , (kv &quot;upzzon&quot; : (v (object &#123; (kv &quot;wiwapzyuvm&quot; : (v false)) &#125;))) , (kv &quot;npjmxeyvdyn&quot; : (v (object &#123; (kv &quot;alrliza&quot; : (v &quot;KvVRCFmdDucSZGGsl2Y1&quot;)) &#125;))) , (kv &quot;ugwyh&quot; : (v &quot;cz9zI4CYznzR7pRxQT&quot;)) , (kv &quot;ispmp&quot; : (v -1161070595.7346845)) , (kv &quot;iyhooyrzxvko&quot; : (v (array [ (v true) , (v (array [ (v 2135292444) , (v false) ])) ]))) , (kv &quot;lzzlxwpf&quot; : (v &quot;vrs&quot;)) , (kv &quot;hgdhigwag&quot; : (v &quot;3vR1&quot;)) , (kv &quot;anunptwmn&quot; : (v 490868286.9516456)) &#125;))) &#125;))) , (kv &quot;kmykwxplkahy&quot; : (v &quot;gINDXm9hJPvk&quot;)) , (kv &quot;xrzwdmizsw&quot; : (v (object &#123; (kv &quot;dlejpvizcs&quot; : (v false)) , (kv &quot;hybzmau&quot; : (v false)) , (kv &quot;fbzuzbsstihj&quot; : (v false)) , (kv &quot;vyrgcnmchu&quot; : (v (object &#123; (kv &quot;hexnep&quot; : (v 86903566.58689654)) , (kv &quot;ciqamo&quot; : (v 755997746.0583944)) , (kv &quot;lphybnxhckce&quot; : (v -883659286)) , (kv &quot;kntjlyol&quot; : (v &quot;j0XLHor4GyIVaM9m&quot;)) , (kv &quot;dmhuzlzd&quot; : (v (object &#123; (kv &quot;hwmyyrnoxp&quot; : (v -78199546.92589629)) , (kv &quot;uyesnb&quot; : (v &quot;0l1fTDEwzaIDl&quot;)) , (kv &quot;eyzswqhfow&quot; : (v &quot;LHNyog9l5kMHvEntcCl&quot;)) , (kv &quot;mrbjtx&quot; : (v (array [ (v 2068123096.8389452) , (v -1122873532) , (v true) , (v -1687160541) ]))) &#125;))) , (kv &quot;emtgkzxrz&quot; : (v (object &#123; (kv &quot;tkwfj&quot; : (v &quot;oQDQmp9K&quot;)) , (kv &quot;ioikrn&quot; : (v true)) , (kv &quot;fsbjvqg&quot; : (v &quot;uJvncDYLevxLNh40BCA&quot;)) , (kv &quot;vinppxfvo&quot; : (v 984126216.2380406)) , (kv &quot;lfhsacupql&quot; : (v -655363689)) , (kv &quot;lwivvwd&quot; : (v -505121060)) , (kv &quot;hxmrmljumk&quot; : (v &quot;gXq2r&quot;)) &#125;))) , (kv &quot;kpahjj&quot; : (v false)) , (kv &quot;vgpxio&quot; : (v (object &#123; (kv &quot;iemjgmvlqyt&quot; : (v 1066597696.7110366)) &#125;))) , (kv &quot;ohoener&quot; : (v 526984296.8950104)) &#125;))) , (kv &quot;pcyevvhbhm&quot; : (v true)) , (kv &quot;pnhgmmqbwqo&quot; : (v (array [ (v (array [ (v -384813210.9348735) , (v &quot;jTqisOJcYxEfnrWZ&quot;) , (v (array [ (v true) , (v &quot;ai&quot;) , (v false) ])) , (v (object &#123; (kv &quot;mlksmc&quot; : (v 544904991.4771177)) , (kv &quot;gmxzqfxpqkw&quot; : (v 615676560)) , (kv &quot;emfgtkyhmja&quot; : (v false)) , (kv &quot;kenyn&quot; : (v -1539863832.219621)) , (kv &quot;iflsjh&quot; : (v &quot;55j&quot;)) , (kv &quot;tklxqhi&quot; : (v false)) , (kv &quot;kpcidrr&quot; : (v &quot;WKpQUvLACTatNvZK&quot;)) &#125;)) , (v (object &#123; (kv &quot;dczutjqjr&quot; : (v &quot;HJ&quot;)) , (kv &quot;imgynm&quot; : (v 1722370622)) , (kv &quot;cbmgmufuzsag&quot; : (v true)) , (kv &quot;qbqbvidcedo&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;zgkpjsze&quot; : (v -716901705)) , (kv &quot;fgliz&quot; : (v &quot;lKqCKibL5MZjuLKmeVc&quot;)) , (kv &quot;bynowlr&quot; : (v false)) , (kv &quot;ntmvbn&quot; : (v true)) , (kv &quot;ndmthnmkfkjs&quot; : (v true)) , (kv &quot;qurxp&quot; : (v -1980876521)) , (kv &quot;fazfpdetljo&quot; : (v -553444748.7876408)) &#125;)) , (v (object &#123; (kv &quot;qivjrpvo&quot; : (v &quot;R4ck9l&quot;)) &#125;)) , (v (object &#123; (kv &quot;ixqli&quot; : (v -1487102848)) , (kv &quot;lexxapiibh&quot; : (v -831838419.8794407)) , (kv &quot;rpbgwjqqxe&quot; : (v -1663625459)) , (kv &quot;gnbvdmqker&quot; : (v &quot;uvk&quot;)) , (kv &quot;ehltigmts&quot; : (v 1691388418)) , (kv &quot;pgopduq&quot; : (v &quot;7l_UxK4Bn71LBN&quot;)) &#125;)) ])) , (v false) , (v 1551494899.4984019) , (v (object &#123; (kv &quot;jvkkz&quot; : (v 2099344304.4488883)) , (kv &quot;emeorwe&quot; : (v (array [ (v -264081947) , (v -652584782) ]))) , (kv &quot;udhbqkggcni&quot; : (v (array [ (v false) , (v &quot;xaQ&quot;) , (v 150251933) , (v 232395191) , (v true) , (v -2080094576.9647558) , (v &quot;0VeV5Zmcr2atC&quot;) , (v -744445166.7022103) ]))) , (kv &quot;wnjall&quot; : (v 119736873.5140159)) , (kv &quot;ciuodjtggcms&quot; : (v 1500276770)) &#125;)) , (v -132045146) , (v -1263155526.3798172) , (v (array [ (v true) , (v true) , (v -1845403816) , (v true) , (v (object &#123; (kv &quot;rnwpeqftieb&quot; : (v &quot;wa1VJra&quot;)) , (kv &quot;fumvqby&quot; : (v 220179072)) , (kv &quot;crlzriky&quot; : (v 1363270212)) , (kv &quot;ilazxjy&quot; : (v &quot;Q-cEaE3a9WdARtVPyV&quot;)) , (kv &quot;ouujzqowyh&quot; : (v &quot;Cu0bxi43yU&quot;)) , (kv &quot;vtwqtblpvrnm&quot; : (v &quot;KqiON&quot;)) , (kv &quot;mpefsnkgb&quot; : (v &quot;CKa53nUGCnm1jLl&quot;)) , (kv &quot;fqhslaxbt&quot; : (v false)) &#125;)) , (v (array [ (v &quot;CZ5zxBFI-yr-&quot;) , (v 996837579) , (v &quot;z-VqI-GM&quot;) ])) ])) , (v 1157774392) , (v (object &#123; (kv &quot;wqgxbeyyk&quot; : (v &quot;KNGZo&quot;)) , (kv &quot;mqaednfivtz&quot; : (v &quot;QFbimE&quot;)) , (kv &quot;dkwclt&quot; : (v 585258470)) , (kv &quot;degnvo&quot; : (v (array [ (v 1870087074.8581982) , (v true) , (v false) , (v 441697875.81590813) , (v -1276310408) , (v false) ]))) , (kv &quot;xbpranxmhka&quot; : (v true)) , (kv &quot;rbsuykf&quot; : (v true)) &#125;)) , (v true) ]))) , (kv &quot;waympjyig&quot; : (v &quot;O-72qWIt4mw8Q&quot;)) , (kv &quot;pjbtl&quot; : (v (object &#123; (kv &quot;txrizmeda&quot; : (v true)) , (kv &quot;rzbrbcf&quot; : (v false)) &#125;))) , (kv &quot;jbapeir&quot; : (v -243415972.33070758)) &#125;))) , (kv &quot;iqucwmblli&quot; : (v &quot;_MC8cU7Q&quot;)) , (kv &quot;grvedrylrgu&quot; : (v true)) , (kv &quot;zvxjb&quot; : (v (array [ (v false) ]))) , (kv &quot;oeefhcro&quot; : (v true)) &#125;)) , (v &quot;woQ3WQ&quot;) , (v 1530398094.1663196) , (v true) , (v -279892369.4923342) ])) , (v (object &#123; (kv &quot;odvuqxuzhl&quot; : (v &quot;If-zPw3ewhHUUjsH&quot;)) , (kv &quot;oglccq&quot; : (v (array [ (v &quot;sQH&quot;) ]))) , (kv &quot;mdkudahvztnq&quot; : (v (array [ (v (object &#123; (kv &quot;kjlowpyomn&quot; : (v (array [ (v false) , (v true) , (v (object &#123; (kv &quot;wkjby&quot; : (v (object &#123; (kv &quot;lrrvnnhcj&quot; : (v -597187784.59663)) , (kv &quot;yywtc&quot; : (v &quot;ZUg0OSBYpNmCi-HJ&quot;)) , (kv &quot;quligcqk&quot; : (v false)) , (kv &quot;nzayretnbgp&quot; : (v 771615638)) , (kv &quot;hepvuchdzhr&quot; : (v true)) , (kv &quot;wmuwvbgs&quot; : (v -1661929412)) , (kv &quot;bvcgrh&quot; : (v true)) , (kv &quot;fcolev&quot; : (v &quot;ib1ZAccT7&quot;)) &#125;))) , (kv &quot;uhkuialjybc&quot; : (v -14902463.998066813)) &#125;)) , (v &quot;5yVg6b2wQ6nml&quot;) , (v 2051546008.6361074) , (v &quot;h9LELDcwm49&quot;) , (v true) , (v &quot;bZhRfo&quot;) , (v &quot;bViI_T1gpNo3U&quot;) , (v (array [ (v 1842507010) , (v 1603058847.1101403) , (v &quot;h32X4c1jt6j_rd17aZra&quot;) , (v (object &#123; (kv &quot;kqiaznxcx&quot; : (v -822081272.285945)) , (kv &quot;nuzdsq&quot; : (v 568732383)) &#125;)) , (v true) , (v (array [ (v &quot;2sOuwh80Wxs&quot;) , (v &quot;6on3D0yF&quot;) , (v -854462434.1293364) , (v -2124315756.7335777) ])) , (v (object &#123; (kv &quot;mlyvkndhd&quot; : (v true)) , (kv &quot;eyvafhniacy&quot; : (v 241247842.76918954)) , (kv &quot;xwlziuuqdds&quot; : (v &quot;z4z8FOVVEeCkZEWx&quot;)) , (kv &quot;xiqhvn&quot; : (v &quot;evZjue8Et&quot;)) , (kv &quot;zwcvw&quot; : (v &quot;Wnft0NExLogAy5eCy&quot;)) &#125;)) ])) ]))) , (kv &quot;wlwfypvkbqc&quot; : (v (array [ (v 922183981.4838742) , (v (array [ (v (array [ (v 1794356284.0645318) , (v &quot;Z7Wmm3GD-FN&quot;) , (v &quot;HiDdKiB3hb&quot;) , (v true) , (v 892854136.1338383) , (v false) , (v &quot;GA-Gaz&quot;) , (v -640930912) , (v false) ])) , (v (array [ (v &quot;L&quot;) , (v &quot;QeEG_sXs&quot;) , (v false) ])) , (v &quot;AUNyT5rpQ-Qf&quot;) , (v -71341847) , (v (object &#123; (kv &quot;firdp&quot; : (v 106244713.97600336)) , (kv &quot;pathgey&quot; : (v -1346476106.4747205)) , (kv &quot;bhxcvparkfg&quot; : (v 1718368904.871837)) , (kv &quot;gcgmintv&quot; : (v false)) , (kv &quot;auejzqxhgu&quot; : (v 1750672087.5233943)) , (kv &quot;zuazpqqbcrxc&quot; : (v false)) , (kv &quot;edzsayx&quot; : (v &quot;EdUp&quot;)) , (kv &quot;wwlestkbocmr&quot; : (v true)) , (kv &quot;qxsfddepbl&quot; : (v true)) , (kv &quot;gixozce&quot; : (v &quot;98Hf7gmq2c&quot;)) &#125;)) , (v &quot;EgZIB&quot;) , (v (object &#123; (kv &quot;fqspfjaarn&quot; : (v -1935998473.5881822)) , (kv &quot;apqmesw&quot; : (v &quot;gUU_RPY6w-9ha&quot;)) , (kv &quot;wzvixkd&quot; : (v true)) , (kv &quot;zhwsr&quot; : (v false)) , (kv &quot;wtozt&quot; : (v 211868485.97610435)) , (kv &quot;utbpvgpk&quot; : (v 2053670032.0998983)) , (kv &quot;dvnedtwysu&quot; : (v false)) &#125;)) , (v (array [ (v -1384320196) , (v &quot;ZTsvgoKO1TZHvm9D&quot;) , (v false) , (v -1128740495) , (v &quot;w&quot;) ])) , (v (object &#123; (kv &quot;vjyfomunn&quot; : (v 37993385)) , (kv &quot;tqnzktdt&quot; : (v &quot;Y&quot;)) , (kv &quot;fgusab&quot; : (v true)) , (kv &quot;twrjqzgmjt&quot; : (v true)) , (kv &quot;repbtawxpu&quot; : (v 367001586)) , (kv &quot;jmnblxzfgjf&quot; : (v -537387394.5935857)) , (kv &quot;pxodfcoi&quot; : (v &quot;gTG-7KABxBCESf&quot;)) , (kv &quot;pmfcmkagluq&quot; : (v true)) &#125;)) , (v -630904128) ])) , (v &quot;uftKFI1EwsGR0MXSDfQ_&quot;) , (v (object &#123; (kv &quot;gclbibixw&quot; : (v false)) , (kv &quot;gqixue&quot; : (v (array [ (v &quot;t_KdrZUuaPJoX93FBz0&quot;) , (v false) , (v &quot;uxhY22&quot;) , (v &quot;Et-VerCo5qnoVwq0fH&quot;) , (v &quot;b_E&quot;) , (v &quot;6sFU2c9dNH3Kc08&quot;) ]))) , (kv &quot;xqqjyz&quot; : (v 1188578083)) , (kv &quot;ptlmuxz&quot; : (v &quot;YP26pG3dESj6&quot;)) , (kv &quot;jkmhpmbuoq&quot; : (v (array [ (v 2063372609) , (v &quot;hkKDEZAvNE2aW&quot;) , (v false) , (v 1860339991) , (v false) ]))) , (kv &quot;pllsykftspw&quot; : (v &quot;o-r4_P&quot;)) , (kv &quot;ecyeljvee&quot; : (v (array [ (v &quot;Nxnp0EVAGns&quot;) , (v 828997780) , (v -1847355517.9817019) , (v false) ]))) , (kv &quot;hjpxyenayzm&quot; : (v -416048100.40616274)) , (kv &quot;otwneuo&quot; : (v (object &#123; (kv &quot;zqovovzcfqik&quot; : (v true)) , (kv &quot;ltudfmakch&quot; : (v true)) , (kv &quot;icehxi&quot; : (v false)) , (kv &quot;qdwuvidygy&quot; : (v 1179111266)) , (kv &quot;gtjpicblqktg&quot; : (v false)) , (kv &quot;mmzcmr&quot; : (v true)) , (kv &quot;zmpovgn&quot; : (v true)) , (kv &quot;auhkoryxkcny&quot; : (v 182036208)) , (kv &quot;fkewudbrw&quot; : (v &quot;00q9dwqYYhqyXXIA&quot;)) &#125;))) , (kv &quot;xlakvqqbigiu&quot; : (v false)) &#125;)) , (v -857113616) , (v (object &#123; (kv &quot;vrwtyvh&quot; : (v 911387766.3383918)) , (kv &quot;ajutwfblrp&quot; : (v (array [ (v true) , (v &quot;z8vcWpRKxC_DCD8&quot;) , (v 1072868669.4918188) , (v true) , (v &quot;R&quot;) ]))) , (kv &quot;jktgkworia&quot; : (v &quot;qvpzK&quot;)) , (kv &quot;nqdmrugju&quot; : (v false)) , (kv &quot;rtkgdgtqaaqw&quot; : (v (object &#123; (kv &quot;wabghwpsr&quot; : (v &quot;IGe9&quot;)) , (kv &quot;qhdqgntifm&quot; : (v 1842147985.444476)) , (kv &quot;twjbcvrye&quot; : (v 1998954074)) , (kv &quot;nynshtox&quot; : (v &quot;TDoCjO&quot;)) , (kv &quot;lqnpvvu&quot; : (v true)) &#125;))) , (kv &quot;baegrfgzhc&quot; : (v &quot;rKbeiZmSky3q5uTi&quot;)) , (kv &quot;msxjsrhttn&quot; : (v (object &#123; (kv &quot;raobvwsbvfe&quot; : (v false)) , (kv &quot;ozphznq&quot; : (v false)) , (kv &quot;wnsjdxqzxj&quot; : (v false)) , (kv &quot;yfakzn&quot; : (v 2083793047.1078691)) &#125;))) , (kv &quot;arabznkte&quot; : (v (array [ (v -1111525965.4567053) , (v 2086314289) , (v &quot;ufHOWqrqu0O2mbId&quot;) , (v &quot;by1T&quot;) , (v -1207850630) , (v false) , (v -314330286.5802073) , (v true) , (v 210890979) ]))) , (kv &quot;rfcsm&quot; : (v (object &#123; (kv &quot;wrdlxhvxgt&quot; : (v true)) &#125;))) &#125;)) , (v true) ]))) , (kv &quot;xdtjpcbylx&quot; : (v true)) , (kv &quot;shpbryeut&quot; : (v false)) , (kv &quot;kyqjyrqwym&quot; : (v &quot;L0QVSwydE_Y&quot;)) , (kv &quot;ewmoyyj&quot; : (v (object &#123; (kv &quot;zadopxgucpil&quot; : (v &quot;V_USUB_&quot;)) , (kv &quot;iyoiefhpssid&quot; : (v &quot;CvND&quot;)) &#125;))) , (kv &quot;grvwrxrbzbl&quot; : (v 94063996.10756856)) , (kv &quot;fagfarby&quot; : (v 1246771448.791895)) , (kv &quot;kyjgnddxslrl&quot; : (v (array [ (v (object &#123; (kv &quot;hyvcg&quot; : (v 1859610399)) , (kv &quot;cfqxkdhiui&quot; : (v (object &#123; (kv &quot;lnfmnd&quot; : (v true)) , (kv &quot;cpmhm&quot; : (v 284545930)) , (kv &quot;ayadpbqmxogn&quot; : (v &quot;8BWlefOz&quot;)) , (kv &quot;epabqwb&quot; : (v false)) , (kv &quot;gdewpspxo&quot; : (v &quot;bJILk_Pted5dsWBE8qcE&quot;)) , (kv &quot;nwhrpjo&quot; : (v true)) , (kv &quot;ubdjjnzt&quot; : (v true)) &#125;))) , (kv &quot;pinbyriw&quot; : (v -575547423)) , (kv &quot;slhflesfk&quot; : (v true)) &#125;)) , (v &quot;Bkv&quot;) , (v &quot;KgIhdSq7&quot;) , (v 1075129330.8661218) , (v (object &#123; (kv &quot;rwbnoo&quot; : (v (object &#123; (kv &quot;qkdwazhxjxeu&quot; : (v 1624289328)) , (kv &quot;fmraq&quot; : (v true)) , (kv &quot;rqlzgfx&quot; : (v true)) , (kv &quot;ofvfpbpxeauq&quot; : (v 1154866821.5273783)) , (kv &quot;xojwacgmzsm&quot; : (v &quot;pvs-SgrRTvRmlO&quot;)) , (kv &quot;birkleuw&quot; : (v true)) &#125;))) , (kv &quot;pspasnokata&quot; : (v (array [ (v true) ]))) , (kv &quot;dklqho&quot; : (v (object &#123; (kv &quot;xurkfic&quot; : (v &quot;BnJIewAi&quot;)) , (kv &quot;qemznpexj&quot; : (v true)) , (kv &quot;gpngwlecic&quot; : (v &quot;RMlpy670x6&quot;)) , (kv &quot;wzaugmnzakh&quot; : (v false)) , (kv &quot;wrfiwcnwy&quot; : (v -404620742.5787289)) , (kv &quot;nfogne&quot; : (v -1859446324.790002)) , (kv &quot;ngpykisz&quot; : (v 1650711905)) , (kv &quot;zdgtipyzg&quot; : (v &quot;o&quot;)) , (kv &quot;nckeuwfi&quot; : (v &quot;9aJW&quot;)) &#125;))) , (kv &quot;ppsshdzhom&quot; : (v (object &#123; (kv &quot;xcpoa&quot; : (v -771878662)) , (kv &quot;ptzmh&quot; : (v 1323150221.3855224)) , (kv &quot;fzbwjscjat&quot; : (v -400460354)) , (kv &quot;wjjmhsbumbt&quot; : (v 949078607.2381575)) , (kv &quot;oujxpneom&quot; : (v 1272716310)) &#125;))) , (kv &quot;rjnuznkzz&quot; : (v 1776044145)) , (kv &quot;cnjadns&quot; : (v true)) , (kv &quot;ueqcnc&quot; : (v (array [ (v &quot;cnM7_Kun0Zx&quot;) ]))) , (kv &quot;mmpzqkuyl&quot; : (v (object &#123; (kv &quot;jmxxlkvjyck&quot; : (v true)) , (kv &quot;pvhhkvizn&quot; : (v &quot;0wCCH-IIK2pIt&quot;)) , (kv &quot;sqhjli&quot; : (v 818836712)) , (kv &quot;odquix&quot; : (v true)) , (kv &quot;dhfeamip&quot; : (v false)) , (kv &quot;pdxvgncm&quot; : (v false)) , (kv &quot;kgewnpmxyjj&quot; : (v &quot;xlybv&quot;)) &#125;))) , (kv &quot;ykxcfwt&quot; : (v 392585739.15162206)) &#125;)) , (v &quot;_hHI&quot;) , (v false) , (v -2146364348) , (v (object &#123; (kv &quot;tnwah&quot; : (v false)) , (kv &quot;mtjla&quot; : (v false)) , (kv &quot;hkeatyji&quot; : (v (array [ (v 1033359561) , (v 911652864.0812898) , (v false) , (v false) , (v false) ]))) , (kv &quot;qzlmosxl&quot; : (v (object &#123; (kv &quot;zhgeyz&quot; : (v false)) , (kv &quot;cchor&quot; : (v &quot;Xjf5XfKHz1saJ1IHvi&quot;)) , (kv &quot;wprytraiq&quot; : (v &quot;n_4WBZ7i5CaWNF9wdp3U&quot;)) , (kv &quot;xveydzjo&quot; : (v false)) &#125;))) , (kv &quot;isbhm&quot; : (v true)) , (kv &quot;oiliduo&quot; : (v &quot;_PZ6&quot;)) &#125;)) ]))) &#125;)) , (v (object &#123; (kv &quot;ckwzgapo&quot; : (v (array [ (v (object &#123; (kv &quot;nnivocdtuxl&quot; : (v -19291974)) , (kv &quot;sabkrhrs&quot; : (v -2094136152.4094925)) &#125;)) , (v (array [ (v (object &#123; (kv &quot;ylbyiwick&quot; : (v &quot;x&quot;)) , (kv &quot;fgzyjvxgwfv&quot; : (v -2134161617)) , (kv &quot;pqteqryrzakm&quot; : (v 1204361735)) , (kv &quot;mdvijdl&quot; : (v false)) , (kv &quot;pvjtlhkh&quot; : (v &quot;SfD29&quot;)) , (kv &quot;ivzvaaabmfe&quot; : (v false)) , (kv &quot;efshdneleg&quot; : (v -849875506)) &#125;)) , (v &quot;seqhsAcIrnAHMQ&quot;) , (v &quot;Whk36U6P7DeSML&quot;) , (v &quot;O&quot;) , (v -256156753) , (v (object &#123; (kv &quot;mhktfiet&quot; : (v true)) , (kv &quot;pdjsew&quot; : (v &quot;3SAFXIssz&quot;)) , (kv &quot;hhyorkbrs&quot; : (v -1207251906)) &#125;)) , (v 415307174) , (v (array [ (v false) , (v 552989141) , (v -1385835760) , (v true) , (v true) ])) ])) , (v (array [ (v &quot;EYddk4DIKPw&quot;) , (v &quot;xxy1EsCfUgLc8-b&quot;) , (v (array [ (v &quot;_FLcs&quot;) , (v 1363548051.5409355) , (v -301676940.00810796) , (v 228483168.44451946) , (v -1077860736) , (v &quot;-fzDjs2ObYAG6mfeGj_J&quot;) ])) , (v (array [ (v false) , (v true) , (v true) ])) , (v false) ])) , (v -2077073598) , (v -2046589380) , (v &quot;CaSYSzOW&quot;) ]))) , (kv &quot;lpzotealkm&quot; : (v (array [ (v &quot;SI5nxNmXbG&quot;) , (v (array [ (v false) ])) , (v (object &#123; (kv &quot;xtzbk&quot; : (v false)) , (kv &quot;nstakx&quot; : (v (object &#123; (kv &quot;glrzav&quot; : (v true)) , (kv &quot;ojnfxi&quot; : (v 160112773)) , (kv &quot;yaixkpytnvs&quot; : (v true)) &#125;))) , (kv &quot;ckxwacwoau&quot; : (v (object &#123; (kv &quot;juennbwumh&quot; : (v false)) , (kv &quot;pecryyztzx&quot; : (v 590879351.09255)) , (kv &quot;whkyc&quot; : (v &quot;daqaT&quot;)) &#125;))) , (kv &quot;fcquywl&quot; : (v (object &#123; (kv &quot;dqkgcpdw&quot; : (v &quot;5HUvgQttOk0Fi5tu&quot;)) &#125;))) , (kv &quot;nwbqckojbnl&quot; : (v false)) , (kv &quot;ldxoxn&quot; : (v (array [ (v -1211923637) , (v false) , (v false) , (v true) , (v -63271166.44183385) , (v &quot;oPaYFpyq6gT0&quot;) , (v false) ]))) , (kv &quot;ceqqpwtv&quot; : (v (object &#123; (kv &quot;heimssuemmzw&quot; : (v true)) , (kv &quot;zccbmmfhkzmn&quot; : (v -1094357860.1518207)) , (kv &quot;pfmys&quot; : (v &quot;Yqkj03db&quot;)) , (kv &quot;wbrpvqzebuz&quot; : (v -2018648370.895539)) , (kv &quot;ffsnfajyc&quot; : (v 553648116)) , (kv &quot;ryatsfgt&quot; : (v 259819060.7299535)) , (kv &quot;ccedgptz&quot; : (v true)) , (kv &quot;sdyjgsm&quot; : (v true)) &#125;))) , (kv &quot;cafbneqhzh&quot; : (v &quot;0yYuLXa2b6QfIvmqjR&quot;)) &#125;)) , (v true) , (v false) ]))) , (kv &quot;osctkxhztsfq&quot; : (v false)) , (kv &quot;rnwednidppx&quot; : (v (object &#123; (kv &quot;jvnpd&quot; : (v false)) , (kv &quot;cltlrwuzp&quot; : (v &quot;jnKw0hw4f2Qpzs&quot;)) , (kv &quot;xqvjhgcdb&quot; : (v (array [ (v (array [ (v &quot;Kydz&quot;) , (v &quot;S2lJpQ9K0_0KzDR&quot;) , (v false) , (v false) , (v 434825082.54542595) , (v &quot;0kxWw7vYJv&quot;) , (v 1417623756.2870884) , (v -671843208.2472482) ])) , (v false) , (v (object &#123; (kv &quot;figllxnwvoz&quot; : (v 1079024476)) , (kv &quot;zybulhqpy&quot; : (v 1830461882.9305499)) &#125;)) , (v &quot;C_zB8BN4rJ1qUGz&quot;) , (v (array [ (v 791961608.4049592) , (v &quot;TNUWl1OfPAr7&quot;) , (v false) , (v false) ])) , (v (array [ (v -1493840201.4146216) , (v &quot;tnd6PSkv0FQuLn&quot;) , (v true) , (v false) , (v -447967588) , (v 1030571001) ])) , (v false) , (v true) , (v true) , (v (object &#123; (kv &quot;wtzkpoio&quot; : (v -2059407859)) , (kv &quot;oagxsuymimu&quot; : (v &quot;2h4QsOsNtMiIoZT&quot;)) , (kv &quot;kbblveccj&quot; : (v true)) , (kv &quot;nfsnt&quot; : (v -1789370203.2844539)) , (kv &quot;klxavnzg&quot; : (v true)) , (kv &quot;cvxvlldl&quot; : (v 1545196262.230724)) , (kv &quot;sotqmp&quot; : (v 1186329623)) , (kv &quot;vasrjee&quot; : (v true)) &#125;)) ]))) , (kv &quot;zdhoap&quot; : (v -193588543)) , (kv &quot;xbkneu&quot; : (v 478378165)) , (kv &quot;hmcplrquyp&quot; : (v false)) &#125;))) , (kv &quot;kcyjofy&quot; : (v (object &#123; (kv &quot;htqrm&quot; : (v 1846774732.6980772)) , (kv &quot;yirrnszaf&quot; : (v (array [ (v (object &#123; (kv &quot;erilxfbdlv&quot; : (v 542262304.2889605)) , (kv &quot;yopwrjtayph&quot; : (v 731282239.9035488)) , (kv &quot;xskaibx&quot; : (v &quot;amLXhcK&quot;)) , (kv &quot;ftbykwjrtkg&quot; : (v false)) , (kv &quot;elvtpjteh&quot; : (v &quot;20&quot;)) &#125;)) , (v (object &#123; (kv &quot;ervks&quot; : (v -357130040)) , (kv &quot;jixclhxu&quot; : (v false)) , (kv &quot;mhmrct&quot; : (v 1665623649)) , (kv &quot;mpsifqei&quot; : (v &quot;kFi8Bg&quot;)) &#125;)) , (v (array [ (v &quot;CU&quot;) , (v &quot;g&quot;) , (v true) , (v &quot;P6VIV1HJFlywzjc&quot;) , (v false) , (v &quot;u_UQJ&quot;) , (v 216107226) , (v -564010953.9462562) , (v true) ])) , (v (object &#123; (kv &quot;fjgsqafcai&quot; : (v true)) , (kv &quot;olvoqkeptj&quot; : (v -934591917.5274441)) , (kv &quot;pnjzqyunfbsf&quot; : (v &quot;f&quot;)) , (kv &quot;npclkqskchlu&quot; : (v true)) , (kv &quot;friydskivp&quot; : (v &quot;0VVAsk0JU2P34A&quot;)) &#125;)) , (v -1513672000.6946142) , (v -1351068498.4718838) , (v (array [ (v false) , (v true) , (v 2022882115) , (v false) , (v 1912320851) , (v true) , (v false) , (v &quot;nYpITzI3lLGF-E0_ROdb&quot;) ])) , (v (object &#123; (kv &quot;etapc&quot; : (v &quot;M0&quot;)) , (kv &quot;ahjaulcquxx&quot; : (v -46720148.68160956)) , (kv &quot;bxlzoh&quot; : (v -1294903924.5851634)) , (kv &quot;gujnngazy&quot; : (v 27472619)) &#125;)) , (v true) ]))) , (kv &quot;ngkwgj&quot; : (v true)) &#125;))) , (kv &quot;txvpojferzzn&quot; : (v -494084553.08683705)) , (kv &quot;ehbzzitx&quot; : (v true)) &#125;)) , (v -1501383589) , (v (array [ (v (object &#123; (kv &quot;tjkmyxzzrqya&quot; : (v (array [ (v (array [ (v -1652453215) , (v false) , (v true) , (v false) , (v &quot;0K5SKb6&quot;) , (v true) , (v false) , (v true) , (v -497658930) ])) , (v &quot;sHrD4vVN&quot;) , (v &quot;VQYUGWFtDb&quot;) , (v -860698228) , (v &quot;YHud7MqAJJHpXW7HTJHp&quot;) , (v &quot;N3SEVlHZqGXS&quot;) ]))) &#125;)) , (v (array [ (v 932063913) ])) , (v -363089538.6711561) , (v -1523290545) ])) , (v (array [ (v 1446672740) , (v (object &#123; (kv &quot;iothjmvzeh&quot; : (v -1242537951)) , (kv &quot;ihhot&quot; : (v (array [ (v &quot;s78NIkI&quot;) , (v (array [ (v 1647053130) , (v &quot;2Wjn&quot;) , (v -1306690771) , (v &quot;ddFBxOAVa3PAHHg4CKiE&quot;) , (v &quot;KTpqkj&quot;) , (v false) , (v false) , (v &quot;CpOo-_sxce&quot;) ])) , (v (array [ (v -1636092903) , (v &quot;mPxQOtGQmJ&quot;) , (v &quot;AH4CnH&quot;) , (v true) ])) , (v (object &#123; (kv &quot;gwobic&quot; : (v -403181897)) , (kv &quot;wswtxcvfgys&quot; : (v false)) , (kv &quot;myftubvhn&quot; : (v &quot;SzOlEiSmLsiF&quot;)) , (kv &quot;gflhmi&quot; : (v false)) , (kv &quot;qcaogsoou&quot; : (v &quot;RffU8rZ_BOTooh&quot;)) , (kv &quot;gtfkfpbcd&quot; : (v &quot;WPnkqeyO&quot;)) , (kv &quot;xlluzryjzeww&quot; : (v &quot;tOATwtSQqc&quot;)) , (kv &quot;pfbjfs&quot; : (v 559311144.1839422)) , (kv &quot;vgyrmepmmiwa&quot; : (v -371798911)) , (kv &quot;xwhxacfh&quot; : (v &quot;vgdoVoqH&quot;)) &#125;)) , (v (array [ (v 682530683.7960426) , (v &quot;_ZQONJwSnyWsI7JBE&quot;) , (v &quot;2Xkij&quot;) , (v true) , (v &quot;0x&quot;) , (v &quot;I2W&quot;) , (v true) , (v &quot;45FqPHuqIeB_bC&quot;) , (v &quot;3Sz&quot;) , (v &quot;uOFooZ&quot;) ])) , (v 1633662757) , (v (object &#123; (kv &quot;qziis&quot; : (v &quot;zRyxpM5I-c&quot;)) , (kv &quot;jsznraaqt&quot; : (v -2070295768)) , (kv &quot;nrhzahy&quot; : (v true)) , (kv &quot;wrekmegkd&quot; : (v -887932026)) , (kv &quot;rnooniws&quot; : (v false)) , (kv &quot;esbvpzcf&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;oaiosezl&quot; : (v &quot;EiqBEX&quot;)) , (kv &quot;zlqquujcwrt&quot; : (v -1740094710)) , (kv &quot;serqndsnavq&quot; : (v true)) , (kv &quot;rqvxophxhr&quot; : (v -155598511.60553136)) &#125;)) , (v (array [ (v 1242812936) , (v &quot;uo5VaeBzyJnP35p&quot;) , (v -1795797045.4796348) , (v &quot;BU9NRN1D1&quot;) , (v -121147141) , (v false) , (v &quot;UeLp7rWGu4incvaTi&quot;) ])) , (v (array [ (v -582860810) , (v false) ])) ]))) , (kv &quot;gxljzi&quot; : (v 1930641502)) , (kv &quot;nukzcjcfvsdr&quot; : (v true)) , (kv &quot;thyjfciw&quot; : (v &quot;Ijg3AeBAlyc&quot;)) , (kv &quot;nyffgwq&quot; : (v (object &#123; (kv &quot;hnsilhtoptne&quot; : (v -334043203)) , (kv &quot;hioyreiwdzre&quot; : (v &quot;uuJkz9iPE-k&quot;)) , (kv &quot;mbxwkyfgvmu&quot; : (v (object &#123; (kv &quot;gduass&quot; : (v true)) , (kv &quot;ethdshvmjc&quot; : (v &quot;C5Kbjt&quot;)) , (kv &quot;zkehxvu&quot; : (v &quot;q&quot;)) , (kv &quot;glrtzejolew&quot; : (v 503692200)) , (kv &quot;ykftxkqrai&quot; : (v false)) , (kv &quot;iheadqq&quot; : (v false)) &#125;))) , (kv &quot;lnopzefyzr&quot; : (v &quot;foHnA&quot;)) , (kv &quot;rtrqnfmg&quot; : (v &quot;PKoAIXFIAbNw0Rqcqc&quot;)) , (kv &quot;ujgkwbxlf&quot; : (v &quot;Cyg1UWqDUn41Hu0&quot;)) , (kv &quot;fcbwm&quot; : (v false)) , (kv &quot;ypzpgljon&quot; : (v (object &#123; (kv &quot;qygwxbgfpsja&quot; : (v &quot;NB8P7TUQjag6DjB7gF&quot;)) , (kv &quot;zutjikjeshe&quot; : (v &quot;EfeMMX0yZ3xLoU&quot;)) , (kv &quot;ecyrigrynd&quot; : (v &quot;oCy&quot;)) , (kv &quot;fdbgoexnqo&quot; : (v -1349577994.2950504)) , (kv &quot;xonanqlrnbvy&quot; : (v true)) , (kv &quot;rbeneurawt&quot; : (v &quot;FAbFncXJhjF&quot;)) , (kv &quot;xtuelgmpxc&quot; : (v &quot;c2H4Nx&quot;)) , (kv &quot;zbwhoul&quot; : (v true)) , (kv &quot;tlfkp&quot; : (v false)) &#125;))) , (kv &quot;gcedhw&quot; : (v true)) &#125;))) , (kv &quot;iwaymz&quot; : (v -1589133269.1797109)) , (kv &quot;ixpeyahkicl&quot; : (v &quot;m_4boP&quot;)) &#125;)) , (v &quot;X-w4O&quot;) ])) ]))) , (kv &quot;vfdhdgxsbz&quot; : (v true)) , (kv &quot;uxvlwnbeu&quot; : (v false)) , (kv &quot;vqnempqmiu&quot; : (v &quot;C&quot;)) , (kv &quot;cjsrbwef&quot; : (v (object &#123; (kv &quot;zehsel&quot; : (v 1214876828.638907)) , (kv &quot;jizzqrgmz&quot; : (v (object &#123; (kv &quot;etgrch&quot; : (v (object &#123; (kv &quot;hlaumnf&quot; : (v (array [ (v false) , (v (array [ (v &quot;wBbU-5s8f&quot;) , (v false) , (v 189722248) , (v &quot;kiJ3Lyv17dVq9_l&quot;) , (v -2078357948) , (v 2048651257.7050533) , (v true) , (v 1281723554.5830126) ])) , (v &quot;nMn&quot;) , (v (object &#123; (kv &quot;zmejepad&quot; : (v false)) , (kv &quot;dlvhsvutptg&quot; : (v -482612548)) , (kv &quot;cygpfqsgbuxu&quot; : (v &quot;zmqC6KeoPsX503&quot;)) , (kv &quot;mfbefymunng&quot; : (v &quot;-mepVI_WAeD1J&quot;)) , (kv &quot;mkbctjjqijc&quot; : (v true)) , (kv &quot;lmhqc&quot; : (v false)) , (kv &quot;bqktp&quot; : (v 1748609852)) , (kv &quot;lfelvsf&quot; : (v &quot;QQ&quot;)) , (kv &quot;uabfoccpc&quot; : (v &quot;mA49c213FyPQl98x&quot;)) , (kv &quot;hzfipgxms&quot; : (v true)) &#125;)) , (v &quot;hvQ&quot;) , (v &quot;rLtkNmPeubnTnnVfkvG-&quot;) , (v (array [ (v true) , (v &quot;VuCpaR9zm-bcHWatQqH&quot;) , (v false) , (v true) , (v &quot;ckBH_oig3D&quot;) , (v true) , (v 125055648) , (v true) ])) , (v &quot;WC1nN81xWZcnXvnP5F&quot;) ]))) , (kv &quot;nxuoqxpnah&quot; : (v (array [ (v &quot;2h5jHzxq&quot;) , (v -1234794731) , (v false) , (v (object &#123; (kv &quot;ltxmflm&quot; : (v -1672856336.746026)) , (kv &quot;sepyc&quot; : (v &quot;jpEO&quot;)) &#125;)) , (v &quot;b61ROO-t1D85eclOhG&quot;) , (v (array [ (v 115812554) , (v &quot;5bxQIjf&quot;) , (v false) , (v 878286566) , (v false) , (v true) , (v -14508498.947033664) ])) , (v (object &#123; (kv &quot;qpqylrujgiz&quot; : (v false)) , (kv &quot;fyxrahgp&quot; : (v false)) &#125;)) , (v (array [ (v true) , (v -261410808.79169464) , (v &quot;huh5FHCU&quot;) , (v true) ])) , (v 1389881693) , (v true) ]))) &#125;))) &#125;))) , (kv &quot;kvngw&quot; : (v (object &#123; (kv &quot;lucpftqpwdr&quot; : (v -1958193229.7286963)) , (kv &quot;ergze&quot; : (v (object &#123; (kv &quot;qyrehutu&quot; : (v &quot;NfyElhYuWz3Q1&quot;)) , (kv &quot;riffcwazr&quot; : (v (array [ (v &quot;g4b&quot;) , (v false) , (v (array [ (v -577110258.0933784) , (v false) , (v false) , (v &quot;Vn0EmZX11&quot;) ])) , (v &quot;ZVaeK1&quot;) , (v (object &#123; (kv &quot;zlkjbu&quot; : (v 1525177545.0048928)) , (kv &quot;zpvogjvi&quot; : (v 599129682.3267891)) , (kv &quot;vdrwcdhfhx&quot; : (v false)) , (kv &quot;uhxii&quot; : (v &quot;2xGv&quot;)) , (kv &quot;qnjaluxmxgi&quot; : (v 8635651.015067456)) , (kv &quot;ngcexgised&quot; : (v 593625433.229349)) , (kv &quot;sugrikhkabcd&quot; : (v 1107572218.4620044)) , (kv &quot;tmbgsh&quot; : (v 1566856544)) , (kv &quot;lblxce&quot; : (v &quot;y1qC9sW4zKYHg&quot;)) , (kv &quot;gqovtuc&quot; : (v &quot;J7APtfabul&quot;)) &#125;)) ]))) , (kv &quot;oaocntr&quot; : (v 655663099)) , (kv &quot;utidomvetnis&quot; : (v false)) , (kv &quot;jmyflkp&quot; : (v &quot;SPbz63P55jJ&quot;)) , (kv &quot;yrmpo&quot; : (v (array [ (v (array [ (v 1820033838) , (v &quot;5OJoz6OuF2&quot;) , (v 1340558773.3276293) , (v 77016921.81585987) , (v false) , (v &quot;Qrp22dEd6xS4fzJ664d&quot;) , (v 1586178319) , (v true) , (v &quot;nFGjHBIJO&quot;) , (v -2136178925) ])) , (v false) , (v (array [ (v &quot;0Cxd&quot;) , (v &quot;fXk3CpZg7-l&quot;) , (v true) , (v &quot;-ZOOAqSj5WASO&quot;) , (v false) ])) , (v (array [ (v &quot;l3n&quot;) , (v -1216257253) , (v &quot;6_90o4uFRjv4MG49dEF&quot;) , (v -1705658898.1871893) , (v &quot;nCnMM3V1YN199izJdVO6&quot;) , (v &quot;bQ0q33tIbdxVt&quot;) , (v &quot;jC-_byN&quot;) ])) , (v (array [ (v 2003610700) , (v true) , (v -1584401438.5794482) , (v true) , (v true) , (v false) ])) , (v (object &#123; (kv &quot;kjmmhvpi&quot; : (v 1779886039.2909331)) , (kv &quot;dcjopuqntyjh&quot; : (v true)) &#125;)) ]))) , (kv &quot;luurnuvsrd&quot; : (v true)) &#125;))) , (kv &quot;fzlxhkyc&quot; : (v (object &#123; (kv &quot;vlfxvun&quot; : (v &quot;HgL-YeE2YA&quot;)) , (kv &quot;modau&quot; : (v (object &#123; (kv &quot;wwtfjzfi&quot; : (v 1303957161.6379359)) , (kv &quot;stiixj&quot; : (v (array [ (v &quot;_IPY9d9Jx6Q&quot;) ]))) , (kv &quot;fwgzca&quot; : (v (array [ (v true) , (v 1404412818.0726027) , (v -1531993346.712324) , (v true) ]))) , (kv &quot;vsibooi&quot; : (v 758666341.1362634)) , (kv &quot;qjvxskqi&quot; : (v &quot;rLO6RJ7p4TZ9Ny&quot;)) , (kv &quot;tuwnkatkybeo&quot; : (v (array [ (v &quot;rCzvB3aTsenjca5FRd&quot;) , (v true) , (v 1463150210.0156615) , (v true) , (v -72426857) , (v -686836968.1115445) , (v true) , (v true) , (v -513349585.6607685) ]))) , (kv &quot;romgfqx&quot; : (v (object &#123; (kv &quot;zpzwheur&quot; : (v 2119676820.6873093)) &#125;))) &#125;))) , (kv &quot;cmstmesveb&quot; : (v -792668551.5628307)) , (kv &quot;ugfsip&quot; : (v (object &#123; (kv &quot;moqfj&quot; : (v 917998779)) , (kv &quot;jsjveqd&quot; : (v &quot;Gt_gd94li&quot;)) , (kv &quot;bgvqnglc&quot; : (v false)) &#125;))) , (kv &quot;hfuhrjxfqrf&quot; : (v &quot;_Qc6ORKESQfQjW6B7&quot;)) , (kv &quot;dpfbhnlwkvec&quot; : (v -1634534127)) &#125;))) &#125;))) , (kv &quot;ocporkkblb&quot; : (v (object &#123; (kv &quot;anvxhzj&quot; : (v -569596606.1740342)) , (kv &quot;wulenfzyu&quot; : (v 1359951712)) , (kv &quot;dzxjd&quot; : (v &quot;Dz9lKL7G58&quot;)) , (kv &quot;lqdvsb&quot; : (v 1509836248.9729517)) , (kv &quot;wgfrxncyon&quot; : (v (object &#123; (kv &quot;hdvdspnhwug&quot; : (v 1183081748)) &#125;))) , (kv &quot;zgeculpuh&quot; : (v &quot;c76qPi&quot;)) &#125;))) &#125;))) , (kv &quot;misqskvuffjt&quot; : (v true)) , (kv &quot;ryeocbbkft&quot; : (v true)) , (kv &quot;cbanyonlxdwz&quot; : (v (object &#123; (kv &quot;msibskdjp&quot; : (v (object &#123; (kv &quot;mjtqanrpnken&quot; : (v &quot;l&quot;)) , (kv &quot;cnnyxihzlmt&quot; : (v -473256434.73792195)) , (kv &quot;qqkvcdoxiso&quot; : (v false)) , (kv &quot;yrshypxofete&quot; : (v (object &#123; (kv &quot;uoejhx&quot; : (v (array [ (v &quot;5vW&quot;) , (v (array [ (v &quot;wmoT&quot;) ])) ]))) , (kv &quot;molahchjs&quot; : (v (array [ (v (array [ (v false) , (v false) , (v -1481543225.207373) , (v true) , (v true) , (v -497168023.61265916) ])) , (v (array [ (v &quot;sbXlO_qZy4ZDHnSQp&quot;) , (v true) , (v 978998136.2120172) , (v true) ])) , (v &quot;5SI5rBbDWZAa9sVC-H&quot;) ]))) &#125;))) , (kv &quot;mriek&quot; : (v 602478010)) &#125;))) , (kv &quot;fhsbywbwbnu&quot; : (v &quot;Qlao752&quot;)) , (kv &quot;iiwppd&quot; : (v (object &#123; (kv &quot;ubnsolwefmpv&quot; : (v 299669847.04656774)) , (kv &quot;znabhudytwhu&quot; : (v (array [ (v (object &#123; (kv &quot;myxqgifowzk&quot; : (v (array [ (v false) , (v true) , (v -113964898) ]))) &#125;)) , (v (array [ (v true) , (v (object &#123; (kv &quot;gjfeldaze&quot; : (v true)) , (kv &quot;nhxjsqk&quot; : (v true)) , (kv &quot;ukeicttwu&quot; : (v true)) &#125;)) , (v (array [ (v 253524511.7091248) , (v -1561804342.9927227) , (v &quot;8qlJ2tMc2lPmMf1C-d&quot;) , (v true) , (v &quot;bI7F21nHFF6&quot;) , (v -580546013.4570572) ])) , (v 1058457335) , (v &quot;23AZ&quot;) , (v 1853383791) ])) , (v (object &#123; (kv &quot;swechudy&quot; : (v -1411283805.3118782)) , (kv &quot;vidtotmqlhg&quot; : (v -587971172)) , (kv &quot;qotuvy&quot; : (v (array [ (v true) , (v false) ]))) , (kv &quot;gudvzl&quot; : (v (object &#123; (kv &quot;apsxqlzdav&quot; : (v true)) , (kv &quot;flqqqq&quot; : (v &quot;HQyguHI5oojr0TmSF&quot;)) , (kv &quot;bagaolodhiq&quot; : (v -1245033283.7643337)) , (kv &quot;kqgmuoevkb&quot; : (v false)) , (kv &quot;aizxr&quot; : (v &quot;SI-&quot;)) , (kv &quot;djxosoeh&quot; : (v &quot;c4JMh4oDfYa6&quot;)) , (kv &quot;nnwjoymlqsjs&quot; : (v -1008859979)) , (kv &quot;ogfonkl&quot; : (v false)) &#125;))) , (kv &quot;czmwavjhwx&quot; : (v (object &#123; (kv &quot;dexqaq&quot; : (v -542532142)) , (kv &quot;fyinyx&quot; : (v &quot;JuxVyUdnvrpbWe&quot;)) &#125;))) &#125;)) , (v 1057570833.6622553) , (v (array [ (v &quot;j3Sg1imsnr&quot;) , (v -2115393853.7811105) , (v (array [ (v -627990941.5141704) , (v 1816430057.8320673) , (v true) , (v 1048627261.6683502) , (v 1176958960.3801389) , (v &quot;Y8-U7FginhYEL_NSxkvF&quot;) , (v true) , (v 1821177530.05043) , (v &quot;ePA0N4&quot;) , (v 1133434934) ])) , (v &quot;XvdpzU&quot;) , (v true) , (v (array [ (v false) , (v &quot;H&quot;) , (v &quot;ST3Q-RzZ&quot;) , (v &quot;HK&quot;) , (v 309254654) , (v &quot;UDp54RFzNZNP&quot;) , (v -971529715.3578794) , (v false) ])) , (v true) , (v (array [ (v 274132440) , (v &quot;DEE5gyP&quot;) , (v &quot;QBf3OlC&quot;) , (v &quot;yBMld1dY3&quot;) ])) ])) , (v &quot;pJaVRZAh&quot;) , (v &quot;flrgejmMnRvk8YYBqRRi&quot;) , (v (array [ (v 331852904.18498605) ])) ]))) , (kv &quot;pirrtpbdw&quot; : (v true)) , (kv &quot;kcvvu&quot; : (v 2129881430)) &#125;))) &#125;))) &#125;)) , (v (object &#123; (kv &quot;atddipjuxvuo&quot; : (v -2092451273)) , (kv &quot;zzxdyvu&quot; : (v &quot;N&quot;)) , (kv &quot;dzpkj&quot; : (v (array [ (v &quot;vC3v43&quot;) ]))) &#125;)) , (v (array [ (v true) , (v &quot;w5&quot;) , (v &quot;kRj-yNIWgRg_t69&quot;) , (v &quot;536w6nuswTPbulA9WL&quot;) , (v 1197838796.6330416) , (v (array [ (v &quot;yuZvr7lV&quot;) , (v (object &#123; (kv &quot;xbjzmwuruay&quot; : (v (object &#123; (kv &quot;rsjvtmxgvcso&quot; : (v 624447374)) , (kv &quot;elvzswnqgi&quot; : (v (object &#123; (kv &quot;zqmysmk&quot; : (v (object &#123; (kv &quot;wbxskgat&quot; : (v -460312853)) , (kv &quot;adplpvc&quot; : (v 465491929)) , (kv &quot;ziockbpie&quot; : (v &quot;g6xo4pULxfcgXZvpvh&quot;)) , (kv &quot;ywcymdjmwrv&quot; : (v true)) , (kv &quot;cxabuwbjgekc&quot; : (v -1445371226.8328083)) , (kv &quot;abzpzj&quot; : (v true)) , (kv &quot;bpebri&quot; : (v &quot;AAmr1RSknZ3O&quot;)) , (kv &quot;veytbgy&quot; : (v -588118666.1096455)) &#125;))) , (kv &quot;amgxj&quot; : (v (array [ (v -17931167.241995856) , (v 496119026) , (v 1440398386) , (v -595214655) , (v false) , (v false) , (v false) , (v 63728793) , (v true) ]))) , (kv &quot;mrmgt&quot; : (v false)) , (kv &quot;cupluleeyy&quot; : (v &quot;z9yD&quot;)) , (kv &quot;cahdgip&quot; : (v true)) &#125;))) , (kv &quot;wiwxn&quot; : (v (object &#123; (kv &quot;jasklpjsg&quot; : (v (array [ (v false) , (v false) , (v &quot;4jZXyH&quot;) , (v &quot;oC-SW&quot;) , (v true) , (v &quot;YcodU&quot;) , (v &quot;9IFiPAzRbNSPZjB&quot;) , (v &quot;uG2N4rBXLz&quot;) , (v -401644846) ]))) , (kv &quot;bdvfatuv&quot; : (v (object &#123; (kv &quot;ckviad&quot; : (v &quot;dsYleGO&quot;)) , (kv &quot;fdjnmag&quot; : (v false)) , (kv &quot;nzwqlhpetxl&quot; : (v &quot;1casUhTLior4MEo_Uu&quot;)) , (kv &quot;duecnyqohwx&quot; : (v true)) , (kv &quot;nzhkplengoao&quot; : (v -46442601)) , (kv &quot;rvrfwu&quot; : (v 1363724138)) , (kv &quot;oitjec&quot; : (v true)) , (kv &quot;cgmiiy&quot; : (v -365524935.720685)) , (kv &quot;jobeol&quot; : (v true)) &#125;))) , (kv &quot;exrhe&quot; : (v false)) , (kv &quot;bldqrtaf&quot; : (v (object &#123; (kv &quot;ljeefg&quot; : (v 367025317)) , (kv &quot;hrqrsm&quot; : (v &quot;qoa31p_3y&quot;)) , (kv &quot;zuccyg&quot; : (v -541882614.1484984)) , (kv &quot;wjuica&quot; : (v 1118851776.4389498)) , (kv &quot;czmjgpwd&quot; : (v &quot;9PcYqGggpmix&quot;)) , (kv &quot;rbmcyozcqvl&quot; : (v &quot;amogXlo4PrsSkF&quot;)) , (kv &quot;ahvsfheb&quot; : (v &quot;kMfDT01PdfWWd3kb&quot;)) , (kv &quot;nrnnyvwecta&quot; : (v &quot;lKH&quot;)) , (kv &quot;rmlknoateb&quot; : (v 822156038.354891)) , (kv &quot;ybmxsaxmrzaw&quot; : (v -651473225)) &#125;))) , (kv &quot;uhuqacydf&quot; : (v (array [ (v &quot;waNiEbv&quot;) , (v 1350490497.2548158) , (v 775728521) , (v 1539224832) , (v &quot;pulQ5&quot;) , (v 1241808962) ]))) , (kv &quot;qqdfed&quot; : (v &quot;Lz6CmeWo4lw5&quot;)) , (kv &quot;erqoigjbo&quot; : (v -955246658)) , (kv &quot;gexidfskffb&quot; : (v (object &#123; (kv &quot;hhbnbynti&quot; : (v -1789604122.7400544)) , (kv &quot;yiufire&quot; : (v &quot;g&quot;)) &#125;))) &#125;))) , (kv &quot;hzyvbr&quot; : (v true)) &#125;))) , (kv &quot;fueuib&quot; : (v -1033000032)) , (kv &quot;pmsxuc&quot; : (v 1383940107)) , (kv &quot;cdkwb&quot; : (v 1835097357)) , (kv &quot;rxhupqtkozqq&quot; : (v 791181043)) , (kv &quot;ttfjsldhkj&quot; : (v (object &#123; (kv &quot;cjnzmbcbf&quot; : (v -1048242788)) , (kv &quot;ysynmgiitgvp&quot; : (v (object &#123; (kv &quot;misctj&quot; : (v (array [ (v true) , (v -885298964) , (v &quot;gFYNoiQyNikoS2OD&quot;) ]))) &#125;))) , (kv &quot;jksjndzv&quot; : (v 1629151140.4761147)) , (kv &quot;twzliww&quot; : (v (array [ (v 1295195848.203685) , (v (object &#123; (kv &quot;yildjgi&quot; : (v 300927061.04864544)) , (kv &quot;ohxpncxyag&quot; : (v &quot;jP4xNMR-KGC5q&quot;)) , (kv &quot;ingdet&quot; : (v false)) , (kv &quot;gayupximsv&quot; : (v 519488545.2668662)) , (kv &quot;eycmcqpaei&quot; : (v &quot;P1vkPMuO3V&quot;)) , (kv &quot;miuth&quot; : (v &quot;bTsYghyZuRIuS&quot;)) , (kv &quot;fgcaqzatsqe&quot; : (v &quot;37jpwgZ6sr1a&quot;)) , (kv &quot;dvotmdwzg&quot; : (v true)) , (kv &quot;lwgmkwg&quot; : (v -2035524854)) &#125;)) , (v (array [ (v false) , (v false) ])) , (v true) , (v &quot;x&quot;) , (v (object &#123; (kv &quot;hvjmysawxg&quot; : (v false)) , (kv &quot;jxvakg&quot; : (v 164364286)) , (kv &quot;stupohp&quot; : (v false)) , (kv &quot;dtsht&quot; : (v &quot;JgI0wAD&quot;)) &#125;)) , (v false) ]))) , (kv &quot;fjgvmma&quot; : (v (array [ (v false) , (v &quot;qrzLC8djl&quot;) , (v (array [ (v &quot;ZbAcMKGSNy9Y87ztUs&quot;) , (v true) ])) , (v (array [ (v &quot;7MJPN5&quot;) , (v false) , (v -298448722) , (v 778830277) , (v true) , (v true) , (v true) ])) , (v (array [ (v &quot;n-zpyZr3dHIq2-hVBQ_X&quot;) , (v true) , (v 566796753) , (v true) , (v -83283383.20949152) , (v &quot;W0rI&quot;) , (v true) , (v false) ])) , (v 1376251897.0495272) , (v false) , (v (array [ (v true) , (v &quot;DLk5q&quot;) , (v true) , (v false) , (v true) , (v &quot;1kaBaRy1znws&quot;) , (v &quot;loSK0NmPNom7XQmLmUFQ&quot;) , (v &quot;aERRBCirk&quot;) , (v -292868053.4987612) ])) , (v (array [ (v -1133209241) ])) , (v (array [ (v &quot;nIFyGvQba-&quot;) , (v false) , (v false) , (v -72343003.88228966) , (v 1117783986.9890037) , (v &quot;hz56HLLERjOUe2ltsiRf&quot;) , (v false) ])) ]))) , (kv &quot;uxurvlltmyha&quot; : (v &quot;qu4gu821b72PNoEx6YZ&quot;)) , (kv &quot;usorhz&quot; : (v (object &#123; (kv &quot;rvtvmd&quot; : (v true)) , (kv &quot;pvavwsznkqr&quot; : (v true)) , (kv &quot;outjipcefu&quot; : (v &quot;IIYGOI5PKxR&quot;)) , (kv &quot;hhxqfz&quot; : (v &quot;lvzs6&quot;)) , (kv &quot;hyqwsjzbq&quot; : (v false)) , (kv &quot;bqetz&quot; : (v false)) , (kv &quot;mmjcqua&quot; : (v false)) , (kv &quot;pxgefn&quot; : (v &quot;GVXLXpkgyZUcYvMO4a&quot;)) &#125;))) , (kv &quot;kisavkhpvm&quot; : (v 740640903)) , (kv &quot;elidlcgkmygj&quot; : (v false)) &#125;))) , (kv &quot;fjtmkah&quot; : (v 276968322)) , (kv &quot;uxqtgafcb&quot; : (v false)) &#125;)) , (v false) ])) , (v (array [ (v -73850871) , (v (array [ (v &quot;kX-xhfhOv&quot;) , (v (object &#123; (kv &quot;kpvwtmofhl&quot; : (v &quot;Xh7YGngfjbXLFX5L&quot;)) , (kv &quot;dctaoshagrp&quot; : (v (object &#123; (kv &quot;kcazdgadwl&quot; : (v 807416430.878505)) &#125;))) , (kv &quot;xxsqne&quot; : (v (object &#123; (kv &quot;swdqrlub&quot; : (v (array [ (v true) , (v &quot;dVgdaKvwmcMWNyM&quot;) , (v true) , (v 815587398.717155) , (v &quot;zrYuTniJ7qWFriEMz&quot;) ]))) , (kv &quot;txytif&quot; : (v true)) , (kv &quot;jvmjsovyyrhc&quot; : (v (object &#123; (kv &quot;hfilguslav&quot; : (v true)) , (kv &quot;ypruvtpkknl&quot; : (v true)) , (kv &quot;iiltcqxy&quot; : (v -375089005)) , (kv &quot;ftqjdkawzau&quot; : (v false)) &#125;))) , (kv &quot;yqtfz&quot; : (v &quot;HFWTm53jg_WUtM&quot;)) , (kv &quot;qvqav&quot; : (v false)) , (kv &quot;esagrm&quot; : (v &quot;Kw8V8cv_Ux&quot;)) &#125;))) , (kv &quot;vnbfvid&quot; : (v (object &#123; (kv &quot;ijrdigj&quot; : (v (array [ (v &quot;Rqd5TbxgsPj&quot;) , (v 1031491675.5852685) , (v -887082712.0007507) , (v false) , (v -51657014) , (v false) , (v &quot;D5l1&quot;) , (v false) ]))) &#125;))) , (kv &quot;ifeqv&quot; : (v 654092592.4447111)) , (kv &quot;paltgh&quot; : (v (array [ (v false) , (v 164799932) ]))) , (kv &quot;nyzkcvb&quot; : (v &quot;dc5G8SfXDo_awC8jm&quot;)) , (kv &quot;ibbmp&quot; : (v &quot;n6MlUZW-azHAZQICXT2n&quot;)) , (kv &quot;xhazidfztf&quot; : (v (object &#123; (kv &quot;jkpkpv&quot; : (v -853809357.9744881)) , (kv &quot;ikangzqcwly&quot; : (v false)) , (kv &quot;kqczfjdkgftw&quot; : (v &quot;LrjtXd8SBppb&quot;)) &#125;))) , (kv &quot;xsktdkwksp&quot; : (v (object &#123; (kv &quot;iqssccnftwpx&quot; : (v -238261042)) , (kv &quot;lpfuuowr&quot; : (v (array [ (v &quot;e&quot;) ]))) , (kv &quot;nwgcv&quot; : (v -186313336)) , (kv &quot;ahcqzysqdk&quot; : (v 1968428739.6304142)) , (kv &quot;jzwtdlt&quot; : (v true)) , (kv &quot;ajxedimm&quot; : (v (array [ (v 414459924.2821679) , (v -1228750016) , (v false) , (v 1419729091.1938372) , (v &quot;Z3mKNBtgBFkTS3OOb3&quot;) , (v &quot;b5RmMsDeQkD&quot;) , (v 447904909) ]))) , (kv &quot;sjykviweuqo&quot; : (v (object &#123; (kv &quot;viiybpxwsvqi&quot; : (v true)) , (kv &quot;vxrrjgth&quot; : (v 1088439598)) , (kv &quot;eumqchb&quot; : (v 962864872)) , (kv &quot;yzfxilmife&quot; : (v 1447548876.6731138)) , (kv &quot;sxkewykyv&quot; : (v -40383427.26321986)) , (kv &quot;rgxcb&quot; : (v &quot;F49YkrtLWDKh1A4P&quot;)) , (kv &quot;yaoocyksi&quot; : (v &quot;D-5rshvwL6b0Za&quot;)) , (kv &quot;wzydygrvj&quot; : (v -1453943058.0054586)) &#125;))) , (kv &quot;utpmstuxj&quot; : (v (array [ (v &quot;kh-YDM2TtCZ&quot;) , (v &quot;ei8&quot;) , (v &quot;3ACysSv1N8mHuvsC&quot;) , (v -1273111834.71746) , (v -1160943267) ]))) , (kv &quot;yvvxy&quot; : (v -1413340899)) &#125;))) &#125;)) , (v 1778286978.8205569) , (v -216690534) , (v &quot;cjnFXfhpYpyH_bMa7p&quot;) , (v (object &#123; (kv &quot;elwqa&quot; : (v (array [ (v false) , (v (object &#123; (kv &quot;pfirxnh&quot; : (v false)) , (kv &quot;cpynqpxvip&quot; : (v 1743374708)) , (kv &quot;ofylteln&quot; : (v &quot;zlbGEyH8PJ&quot;)) , (kv &quot;imfziwwmep&quot; : (v true)) , (kv &quot;zvpzabtv&quot; : (v &quot;kkKYVuf&quot;)) , (kv &quot;whtydxilb&quot; : (v -1800928288.6656966)) &#125;)) , (v false) , (v (object &#123; (kv &quot;abuvxodpwh&quot; : (v &quot;az&quot;)) , (kv &quot;ummdcnnc&quot; : (v false)) , (kv &quot;utarmeuy&quot; : (v &quot;QN0Z_J&quot;)) , (kv &quot;fwxhrdmmeo&quot; : (v 996983189)) , (kv &quot;gipudwpxjwm&quot; : (v true)) , (kv &quot;kyrnpnyx&quot; : (v false)) &#125;)) , (v false) ]))) , (kv &quot;cvnope&quot; : (v true)) , (kv &quot;cmreipu&quot; : (v (array [ (v -1040638369.2635815) , (v (array [ (v -660117018) , (v &quot;HxHfXd_VenH&quot;) , (v false) , (v -1097074189.9149988) , (v &quot;9MU1oiiaqVfEU62VDD&quot;) , (v -592763189) , (v false) ])) , (v false) , (v &quot;PhjAOp&quot;) , (v &quot;pxhhvTe_xtLB&quot;) , (v (array [ (v -1433865628) , (v -1668903714.9972053) , (v &quot;o3vtGTzS4EDW1t8tMcz&quot;) ])) , (v true) ]))) , (kv &quot;oixjyogxtjr&quot; : (v true)) , (kv &quot;sswkoan&quot; : (v &quot;bjS2t&quot;)) , (kv &quot;nimccefqtzmf&quot; : (v &quot;73Z26CSj&quot;)) , (kv &quot;gjcxmvwhep&quot; : (v &quot;2JBO7yy5Cl&quot;)) , (kv &quot;lawglyocpd&quot; : (v true)) &#125;)) , (v -1913470762.0744214) , (v 571121373) , (v (array [ (v (object &#123; (kv &quot;fuzaobcxzw&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;jklrr&quot; : (v (object &#123; (kv &quot;fjeyqwtmehsh&quot; : (v true)) , (kv &quot;xwdvbbxg&quot; : (v false)) , (kv &quot;nkixbxhv&quot; : (v 623145715)) , (kv &quot;nukqrqpqa&quot; : (v &quot;kNYGvTpiO&quot;)) , (kv &quot;zkhgoprbl&quot; : (v true)) , (kv &quot;ijooe&quot; : (v &quot;27sUMk0b6y8JYhyTh&quot;)) , (kv &quot;lmrcglxgm&quot; : (v false)) &#125;))) , (kv &quot;erknvnie&quot; : (v -113486432)) , (kv &quot;twsxrhgvgj&quot; : (v (object &#123; (kv &quot;ovtwo&quot; : (v &quot;4L&quot;)) , (kv &quot;bzlellhgopdr&quot; : (v true)) , (kv &quot;feykcwatlqi&quot; : (v false)) , (kv &quot;lbdshljumfby&quot; : (v &quot;34T9r&quot;)) , (kv &quot;kaecwljt&quot; : (v &quot;YGkitt9MYlc-M4wRZ&quot;)) &#125;))) , (kv &quot;dymtzhpi&quot; : (v (array [ (v &quot;yKiFvzyelZCsj&quot;) , (v true) , (v &quot;cw1x1wyBYjj_AL9Tv&quot;) , (v 207985307) ]))) , (kv &quot;xwqxpbqshtnn&quot; : (v (array [ (v false) , (v 497137294) , (v true) , (v &quot;IZMhbu&quot;) ]))) &#125;)) , (v &quot;2a_YGC5fTL&quot;) , (v 1741249400) , (v false) , (v &quot;-YmczVY&quot;) , (v (array [ (v (array [ (v &quot;Ru0QD7ckM9kV&quot;) ])) , (v &quot;M0ny-&quot;) , (v -1448008029.9092786) , (v -1068028528) , (v (array [ (v &quot;090bSerMqguDVw&quot;) , (v &quot;XEjMOApHoX4LL&quot;) , (v 1206109854.8684351) , (v &quot;SpF49JnW8Z&quot;) , (v 697446934.9846494) , (v -2391421) , (v &quot;A&quot;) , (v true) , (v 899365793) , (v 1261075525) ])) , (v true) , (v (array [ (v true) ])) ])) ])) ])) , (v -810395214.3266428) , (v (array [ (v (object &#123; (kv &quot;vmity&quot; : (v false)) , (kv &quot;briybqvjh&quot; : (v (array [ (v (array [ (v -1598133394) , (v false) , (v -679925868) , (v -631009767.1008494) , (v &quot;X7aklTa&quot;) , (v &quot;3gN1u5TWQ&quot;) , (v true) , (v true) , (v true) , (v -96426440.56146601) ])) , (v true) ]))) , (kv &quot;uksqmbkvguxw&quot; : (v false)) , (kv &quot;dfgmvaacl&quot; : (v (array [ (v &quot;5X8mFN7Ol2muBF&quot;) , (v false) ]))) , (kv &quot;batcao&quot; : (v (object &#123; (kv &quot;jirdgrtv&quot; : (v false)) , (kv &quot;okwbroh&quot; : (v 257188608.5358039)) , (kv &quot;nffnbt&quot; : (v -1246295401.737913)) , (kv &quot;srbgtbvpi&quot; : (v (array [ (v &quot;P&quot;) , (v false) , (v -1864406446) , (v -475705255.9290624) , (v true) , (v -1855044707.305654) , (v 1766612163.3049045) , (v -955429638) , (v 1670746282.0853467) ]))) &#125;))) , (kv &quot;rrkbnhkkiuhw&quot; : (v 537750613.2926879)) , (kv &quot;ritezzdfezpo&quot; : (v &quot;2&quot;)) , (kv &quot;luunujqcxcyb&quot; : (v false)) , (kv &quot;oskemq&quot; : (v 633113027)) , (kv &quot;daleifkxx&quot; : (v (array [ (v &quot;rw&quot;) , (v (array [ (v &quot;HEo0uxAmahwCRX&quot;) ])) , (v (array [ (v true) , (v false) , (v -722024510) , (v -10610564.130206643) , (v true) ])) ]))) &#125;)) , (v (array [ (v -941602040.7381257) ])) , (v (array [ (v (object &#123; (kv &quot;orllfwmmgqrd&quot; : (v &quot;iH7W3684eJ2TK&quot;)) , (kv &quot;ikphlqr&quot; : (v 1583895736.4452858)) , (kv &quot;bnhgk&quot; : (v 298103393.31634396)) , (kv &quot;ivzocctnqlr&quot; : (v -1368972886.0357454)) &#125;)) , (v &quot;Y8EM7zEpJW3bbdCS&quot;) , (v false) ])) ])) , (v 221256744.89781043) ])) ])) , (v true) ]))) , (kv &quot;tzppubfq&quot; : (v true)) , (kv &quot;fswigmh&quot; : (v (object &#123; (kv &quot;nqmfi&quot; : (v false)) &#125;))) , (kv &quot;wmgcfrmdvbww&quot; : (v false)) , (kv &quot;aksbvmxqg&quot; : (v (object &#123; (kv &quot;dagtealh&quot; : (v (array [ (v 1962550443.7441015) , (v false) , (v &quot;MxhPVELl6XO&quot;) , (v (object &#123; (kv &quot;tnofvao&quot; : (v false)) , (kv &quot;lnoar&quot; : (v &quot;orYaDFDN&quot;)) , (kv &quot;vixqvdb&quot; : (v &quot;rzxK2v&quot;)) , (kv &quot;zebvyxsbphz&quot; : (v (array [ (v true) , (v (object &#123; (kv &quot;mnutxggnqney&quot; : (v -969774554.2021906)) , (kv &quot;qirwe&quot; : (v false)) , (kv &quot;gukgliwarip&quot; : (v (array [ (v true) , (v (array [ (v false) , (v false) ])) , (v (array [ (v &quot;ZlwBUE-I&quot;) , (v &quot;GpG9O4h09FWtB5&quot;) , (v true) , (v false) , (v true) ])) , (v false) , (v &quot;wOhNQ-UbVZv3ihmkjZ&quot;) ]))) &#125;)) , (v &quot;j6zwdpcc5DU&quot;) , (v false) , (v 1593913666) , (v 322577893) , (v (object &#123; (kv &quot;fpsoixaexy&quot; : (v (array [ (v 1941115158) , (v -1117609778.6271014) , (v -1004418262.9280051) , (v (array [ (v &quot;Vv9c1Vf4yNvyuOjRk&quot;) , (v true) , (v &quot;lhpxgoisLX3&quot;) , (v false) , (v &quot;5apbc6C_&quot;) , (v &quot;JeE&quot;) , (v &quot;M1_J5mQAC&quot;) , (v false) , (v &quot;x8o7i30&quot;) , (v &quot;p7ecSQ7Bt4wYalCN&quot;) ])) ]))) , (kv &quot;ocdzwvcvpa&quot; : (v (array [ (v &quot;c1iTLHPHflSdSjGwxg&quot;) , (v &quot;TEC&quot;) , (v (array [ (v false) , (v &quot;O2aI_1GTeZ64XT1&quot;) , (v &quot;-7i&quot;) ])) , (v &quot;dNaUenlMmMl-Z4A_&quot;) , (v (object &#123; (kv &quot;obcve&quot; : (v 276216735)) , (kv &quot;rncpobbap&quot; : (v false)) , (kv &quot;dxiubfbt&quot; : (v -1321384873)) , (kv &quot;kpcjcxtq&quot; : (v false)) , (kv &quot;urtqo&quot; : (v true)) , (kv &quot;azcrl&quot; : (v &quot;kBUBIsxgOBW0aL&quot;)) , (kv &quot;ypnyzhlxw&quot; : (v 816295324)) &#125;)) , (v 631353070) , (v (array [ (v &quot;LpbeO66DbtQ6WRZ&quot;) , (v true) , (v &quot;MM42Y4oGhQ8&quot;) , (v &quot;BGk&quot;) , (v 1886293585) , (v true) , (v -296777589) ])) , (v &quot;S_1LgH7MTeJ_z_QzZmXm&quot;) ]))) , (kv &quot;oecdvquksqd&quot; : (v (array [ (v &quot;7YyZU5rB&quot;) , (v false) , (v &quot;8v7R6SATWHL8&quot;) , (v &quot;at55&quot;) , (v &quot;gVJ9AJey&quot;) , (v (array [ (v -148976902) , (v false) , (v &quot;mlx-tM8U&quot;) , (v &quot;Y_GQsBkKh1&quot;) , (v &quot;CM0cEW6hWNpr6hKlxk&quot;) , (v &quot;YlPPsq_3vUvDn&quot;) , (v true) , (v 122610095) ])) , (v (object &#123; (kv &quot;wbdxi&quot; : (v &quot;1Wln9z_dngD7Z9rt9d7&quot;)) , (kv &quot;sqdudrsa&quot; : (v 1960099764.8589048)) , (kv &quot;vysjfaam&quot; : (v 586952255.835377)) &#125;)) ]))) , (kv &quot;ayscnmwbo&quot; : (v (array [ (v (object &#123; (kv &quot;kacuuno&quot; : (v -1167574360.1140378)) &#125;)) , (v true) , (v &quot;BSwzBlcVNDdF&quot;) , (v &quot;i&quot;) , (v (object &#123; (kv &quot;gshviceywd&quot; : (v true)) , (kv &quot;pqdqpyyk&quot; : (v &quot;LfgL_c&quot;)) &#125;)) , (v &quot;rIrgpYZciCPtbdp&quot;) , (v &quot;-nZa9odA-xGUnBs3o&quot;) , (v (object &#123; (kv &quot;igtevuq&quot; : (v &quot;_OetjQgChRfDi&quot;)) , (kv &quot;iougmn&quot; : (v &quot;8DdehyMV&quot;)) , (kv &quot;ezoqaecgtpx&quot; : (v -1472860604)) , (kv &quot;uhudtkhndqih&quot; : (v 1282624780)) , (kv &quot;lmjodfkry&quot; : (v false)) , (kv &quot;rwixzx&quot; : (v &quot;6EtdAoGYAJ&quot;)) , (kv &quot;edvwliddjtk&quot; : (v 364963991.0454926)) , (kv &quot;btqccjq&quot; : (v 1476160251.1735976)) , (kv &quot;igpewawglu&quot; : (v -496093064.16027504)) , (kv &quot;hosro&quot; : (v 380379173.06998396)) &#125;)) ]))) , (kv &quot;hvxvtstkrkp&quot; : (v true)) , (kv &quot;rdsnaqcwj&quot; : (v &quot;dinJ8vHUBVs&quot;)) , (kv &quot;unphtjmurd&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;vohxgkvsl&quot; : (v false)) , (kv &quot;gbavcnsfkf&quot; : (v (object &#123; (kv &quot;aihae&quot; : (v (array [ (v 1329471521) , (v false) , (v &quot;gm7tvwkVxqykYAfW&quot;) , (v true) , (v -1400418873.5356367) , (v true) , (v -1265165377.2554955) ]))) &#125;))) , (kv &quot;odcezwiz&quot; : (v (array [ (v (object &#123; (kv &quot;aqnnlgrs&quot; : (v false)) , (kv &quot;txgeoyf&quot; : (v &quot;_DllYMGG&quot;)) , (kv &quot;sfhnwpmoen&quot; : (v false)) , (kv &quot;kysqjqavqfuo&quot; : (v -1237775725.5050218)) , (kv &quot;ploixzju&quot; : (v -2010917836)) , (kv &quot;izbnme&quot; : (v &quot;MA1m9Lm&quot;)) &#125;)) , (v true) , (v (array [ (v 819379569.9769686) , (v &quot;XN_MheQV&quot;) ])) , (v -974813781) , (v 1139038310) , (v false) ]))) &#125;)) ]))) , (kv &quot;kksyumyygpx&quot; : (v (object &#123; (kv &quot;jeqthholjrt&quot; : (v 100105849.67114657)) , (kv &quot;fzruvvcvpdl&quot; : (v false)) , (kv &quot;uqalxbdye&quot; : (v &quot;2Jju2CQaCpOZE966t&quot;)) , (kv &quot;sgxxzxsyfcv&quot; : (v &quot;eY6r&quot;)) , (kv &quot;hcudahqy&quot; : (v (array [ (v false) , (v 1060841304.3691026) , (v true) , (v (object &#123; (kv &quot;umwipqw&quot; : (v (array [ (v -616788115.8774604) , (v -277835251.30743814) , (v 2054867232) , (v false) , (v &quot;pPX4uwEfUHzFkYm&quot;) , (v true) , (v &quot;VqBTRpxA1k7bLw1DvJ3&quot;) ]))) , (kv &quot;mjcapkgjs&quot; : (v 1715628002.980071)) , (kv &quot;jtqhs&quot; : (v -645263729)) , (kv &quot;ddjkqmqjvnju&quot; : (v (array [ (v true) ]))) , (kv &quot;mzisami&quot; : (v -628876760.9483359)) , (kv &quot;wkucdybkgxj&quot; : (v (object &#123; (kv &quot;rlvkegzsao&quot; : (v false)) , (kv &quot;figgdboz&quot; : (v true)) &#125;))) , (kv &quot;nyleojg&quot; : (v (object &#123; (kv &quot;cnducj&quot; : (v &quot;H-Re&quot;)) , (kv &quot;ptzmgjkttoyk&quot; : (v false)) , (kv &quot;bouryu&quot; : (v 539048589)) , (kv &quot;rtyhs&quot; : (v 485136365)) , (kv &quot;nxhoc&quot; : (v 1186718429.43972)) , (kv &quot;elifmzxy&quot; : (v &quot;KYul80YAa8&quot;)) , (kv &quot;bhkyvpr&quot; : (v 1676960727.7700171)) , (kv &quot;uwvrkqs&quot; : (v &quot;KcrQu&quot;)) , (kv &quot;kiaigzyqttnw&quot; : (v 1394667555)) &#125;))) &#125;)) , (v 1353443847) , (v 1131505624.9675832) , (v &quot;VL&quot;) , (v &quot;Dy5XoI043v&quot;) ]))) , (kv &quot;ajsovcarfpsw&quot; : (v &quot;RiFPrsf4kgkQT&quot;)) &#125;))) , (kv &quot;prwdu&quot; : (v false)) , (kv &quot;wxzaynsu&quot; : (v (array [ (v false) , (v (object &#123; (kv &quot;ohons&quot; : (v true)) , (kv &quot;jlqosvv&quot; : (v false)) , (kv &quot;kyobwcz&quot; : (v true)) , (kv &quot;oqxckzbt&quot; : (v (object &#123; (kv &quot;urlspwtxiw&quot; : (v false)) , (kv &quot;qdlqokxoejzh&quot; : (v true)) , (kv &quot;tmftvry&quot; : (v &quot;bn298MFFU823a3&quot;)) &#125;))) , (kv &quot;knuryam&quot; : (v (object &#123; (kv &quot;gadlvwmr&quot; : (v (array [ (v 860145215.4132569) , (v 358582027.7293879) , (v -2037435741.692382) , (v 270086932.27380097) ]))) , (kv &quot;esttyjcpahw&quot; : (v (array [ (v -976221221) , (v -1973643146) , (v &quot;z3cMJM6z9esvGxOJS&quot;) , (v true) , (v &quot;hfhWOIXSNfFihaymVe&quot;) , (v false) , (v 1412173417) , (v 1865400660) , (v false) ]))) , (kv &quot;tlcdojamsbox&quot; : (v (array [ (v &quot;V&quot;) , (v true) , (v &quot;VFHO8MIs&quot;) , (v &quot;02bgskaJ19&quot;) , (v true) , (v &quot;O5pPwhaDv2WX9&quot;) , (v &quot;kwpg2RXZ8lkKwaZWwHhB&quot;) , (v false) , (v &quot;hvqXZFi9EMl8WlxGIsf&quot;) , (v false) ]))) , (kv &quot;zzavncdhxgxt&quot; : (v true)) , (kv &quot;jnbrma&quot; : (v -537147687)) , (kv &quot;rpiwaj&quot; : (v false)) , (kv &quot;esxht&quot; : (v (object &#123; (kv &quot;bjhqblrf&quot; : (v &quot;1kQ2GkP0Tzc4&quot;)) , (kv &quot;ihoxvxnppyc&quot; : (v &quot;1I-nw0YUA&quot;)) , (kv &quot;fhnzdpszdji&quot; : (v true)) , (kv &quot;rwqxe&quot; : (v 1970450435)) , (kv &quot;ztlvozlgojl&quot; : (v 1809994412.574849)) , (kv &quot;uaonnus&quot; : (v -1068950966.9336827)) , (kv &quot;pphvlq&quot; : (v false)) &#125;))) &#125;))) , (kv &quot;unykb&quot; : (v (array [ (v 1366867140.1759133) , (v (object &#123; (kv &quot;slvegt&quot; : (v true)) , (kv &quot;vnkos&quot; : (v true)) , (kv &quot;dzcjwihindn&quot; : (v 580607365)) , (kv &quot;imnxpznvn&quot; : (v -1885816284)) , (kv &quot;zpoeeiq&quot; : (v &quot;lkg3sIMFyJn4MAJL&quot;)) , (kv &quot;pexgpchohcze&quot; : (v -1882401606.5700426)) , (kv &quot;necpqzfn&quot; : (v true)) , (kv &quot;rrbmyhtfn&quot; : (v 148811573.78353128)) , (kv &quot;wnicsiexhxyy&quot; : (v false)) &#125;)) , (v true) , (v (array [ (v false) , (v &quot;dSljRtqbzE0LFxA9289&quot;) , (v false) , (v &quot;-bpq_yrW&quot;) , (v &quot;V&quot;) , (v &quot;p-0v4hHw&quot;) ])) , (v &quot;j7IC7&quot;) , (v -587584234.5537797) ]))) , (kv &quot;kshyqax&quot; : (v &quot;bPq8MuTZJE1y9YoyM_7&quot;)) &#125;)) , (v (object &#123; (kv &quot;cppvjibja&quot; : (v (object &#123; (kv &quot;szvnn&quot; : (v (array [ (v 278874937.8092257) , (v true) , (v true) , (v true) , (v &quot;30jkXvN&quot;) , (v true) , (v &quot;2fm_Vd8&quot;) , (v false) ]))) &#125;))) &#125;)) , (v -1445285604.2475288) , (v (object &#123; (kv &quot;kavthxxao&quot; : (v (array [ (v -255672626) , (v (object &#123; (kv &quot;undsefvfbr&quot; : (v true)) , (kv &quot;kbxne&quot; : (v -1637547183)) , (kv &quot;pmcprj&quot; : (v &quot;YjgzqA0PkNw&quot;)) , (kv &quot;lzessy&quot; : (v &quot;AiDIMIb-RpPP&quot;)) , (kv &quot;blceqe&quot; : (v true)) , (kv &quot;uhmlxvbdp&quot; : (v false)) , (kv &quot;qcfwcs&quot; : (v false)) , (kv &quot;avvojez&quot; : (v &quot;KhSNMyANHtbuQ&quot;)) , (kv &quot;znzufuv&quot; : (v -1836891490.2199376)) &#125;)) , (v (object &#123; (kv &quot;tifwdb&quot; : (v false)) , (kv &quot;ftvmfvjwnv&quot; : (v &quot;p8jnFVVP&quot;)) , (kv &quot;khjfy&quot; : (v 10255490)) , (kv &quot;xpmayig&quot; : (v &quot;ZLgbxlBuET&quot;)) , (kv &quot;nhffqzmx&quot; : (v false)) , (kv &quot;gpwvntmcqykc&quot; : (v false)) &#125;)) , (v false) , (v 2029257936.9114256) ]))) , (kv &quot;yzjdnynoh&quot; : (v (array [ (v (object &#123; (kv &quot;evavbxmmyys&quot; : (v false)) , (kv &quot;nafzhtiw&quot; : (v &quot;g7I&quot;)) , (kv &quot;qbbluhrhztey&quot; : (v &quot;trg&quot;)) &#125;)) , (v &quot;xhWEsUPx6X9JijRn4ZFf&quot;) ]))) , (kv &quot;rcmjsp&quot; : (v false)) , (kv &quot;rwifid&quot; : (v &quot;T4&quot;)) , (kv &quot;mwpcukwu&quot; : (v -247695617)) , (kv &quot;iyvci&quot; : (v false)) , (kv &quot;ycxzsglvpdfr&quot; : (v -265854823.45786053)) , (kv &quot;pezczmctgq&quot; : (v -1146891373.14226)) , (kv &quot;texwaryw&quot; : (v &quot;xv&quot;)) &#125;)) , (v true) , (v &quot;CXXOR&quot;) , (v true) ]))) , (kv &quot;zqtlcmqif&quot; : (v (array [ (v (array [ (v 1033623001) , (v true) , (v (array [ (v -1395454667) , (v (object &#123; (kv &quot;xznzagsbd&quot; : (v &quot;_F&quot;)) , (kv &quot;pevwyzbtfcar&quot; : (v true)) , (kv &quot;qldrvrkd&quot; : (v true)) , (kv &quot;eloesihdkm&quot; : (v 1062351111.7727145)) &#125;)) , (v true) , (v (object &#123; (kv &quot;tyoannf&quot; : (v false)) , (kv &quot;kysqxlq&quot; : (v -729766689)) , (kv &quot;adadiacf&quot; : (v 1410537009)) , (kv &quot;grktfro&quot; : (v true)) , (kv &quot;ildyykbagb&quot; : (v 615009322)) , (kv &quot;mwtjrywx&quot; : (v true)) , (kv &quot;hvseyvf&quot; : (v true)) , (kv &quot;voafxuqlm&quot; : (v &quot;YPA8TMgjpBm_yD&quot;)) , (kv &quot;kvzugmf&quot; : (v false)) , (kv &quot;dizlpvkcbvxo&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;xwcuyzqn&quot; : (v -1014148751.3180305)) , (kv &quot;scffj&quot; : (v false)) , (kv &quot;wzrzqlvypp&quot; : (v 1116322785.7137117)) , (kv &quot;vicvuwpfk&quot; : (v &quot;iEXEOuHee_0&quot;)) , (kv &quot;qfgle&quot; : (v true)) , (kv &quot;iyopmxsl&quot; : (v -343315638.31447166)) , (kv &quot;tuklofjpupjc&quot; : (v 1803064105)) &#125;)) , (v (object &#123; (kv &quot;nptlc&quot; : (v true)) &#125;)) , (v (array [ (v &quot;PS8CDSfWR&quot;) , (v false) , (v 450237201.55478394) , (v &quot;b91Cjj2rbs&quot;) , (v &quot;rfl_3_jf8&quot;) ])) ])) , (v false) ])) , (v &quot;G_H2KMmeMx&quot;) , (v 808091798) , (v true) ]))) , (kv &quot;yasvsepb&quot; : (v (object &#123; (kv &quot;loufefud&quot; : (v false)) , (kv &quot;brkvdeo&quot; : (v false)) , (kv &quot;leuziqhhtw&quot; : (v (array [ (v (object &#123; (kv &quot;lncbgcgl&quot; : (v (object &#123; (kv &quot;wltycttjvl&quot; : (v 827121072)) , (kv &quot;sebqwx&quot; : (v &quot;6woE-_m5WII9xJZ4FtC&quot;)) , (kv &quot;jfgrxdwz&quot; : (v 889597863)) , (kv &quot;ihwfmyrhe&quot; : (v -1285912033)) , (kv &quot;okyqur&quot; : (v -925292236.0479451)) , (kv &quot;vaxqiwf&quot; : (v true)) , (kv &quot;inknmlmno&quot; : (v -1213145330)) &#125;))) , (kv &quot;mkfqxio&quot; : (v &quot;E0GtS4&quot;)) , (kv &quot;fdmbmawwn&quot; : (v (object &#123; (kv &quot;nisnevtrsnot&quot; : (v &quot;2D_ddxskeLVvibZz&quot;)) , (kv &quot;zzgax&quot; : (v &quot;0eBs&quot;)) , (kv &quot;iiimbcuw&quot; : (v 575039955)) , (kv &quot;dwztncmtc&quot; : (v -615122631.1948534)) &#125;))) , (kv &quot;vemplcglr&quot; : (v (array [ (v -1891680053.552865) ]))) &#125;)) , (v false) ]))) , (kv &quot;lkrznfx&quot; : (v (object &#123; (kv &quot;tyahhnitfct&quot; : (v true)) , (kv &quot;vypuhrynkbh&quot; : (v (array [ (v (object &#123; (kv &quot;zendmqv&quot; : (v &quot;jgV5&quot;)) &#125;)) ]))) , (kv &quot;hsrdmofgdrrv&quot; : (v (array [ (v &quot;h&quot;) , (v 2080801717.778016) , (v true) , (v &quot;KnHw49COD&quot;) , (v -395105653) , (v (array [ (v -1810661652.9448717) ])) , (v (object &#123; (kv &quot;qovhadps&quot; : (v 1097969958)) &#125;)) ]))) &#125;))) , (kv &quot;zgvkfxycn&quot; : (v &quot;JOdsHwbyH99KQJ&quot;)) , (kv &quot;abcnebzdbl&quot; : (v (object &#123; (kv &quot;hqctamapbx&quot; : (v (array [ (v true) , (v (array [ (v -136595945.08933043) , (v &quot;4f9jDeDe&quot;) , (v -1380437794.939825) , (v 2098368072) , (v &quot;R9JvFj-vsz&quot;) , (v &quot;CBQS7J9oox&quot;) ])) , (v (array [ (v false) ])) , (v false) , (v true) ]))) , (kv &quot;yqmmsoxsskn&quot; : (v (object &#123; (kv &quot;zflixdj&quot; : (v (object &#123; (kv &quot;gdiuzqrbotz&quot; : (v 1642214970)) , (kv &quot;ctttho&quot; : (v &quot;m&quot;)) , (kv &quot;xuojrhzxh&quot; : (v &quot;Xl2MgUjKEefumOOzP5ei&quot;)) , (kv &quot;lrdprflpvdr&quot; : (v false)) , (kv &quot;vddsrajgam&quot; : (v false)) , (kv &quot;uxpkk&quot; : (v &quot;co0owXSeLXR&quot;)) , (kv &quot;efbasivdy&quot; : (v &quot;c5xopEVUSq&quot;)) , (kv &quot;cymvcauo&quot; : (v 789897395)) , (kv &quot;iejnmg&quot; : (v -2102182819)) &#125;))) , (kv &quot;jrxvoywp&quot; : (v false)) &#125;))) , (kv &quot;jgloipzfd&quot; : (v (array [ (v &quot;yI-5gGLZNUz1oc&quot;) , (v (object &#123; (kv &quot;idnrdmrsdqon&quot; : (v -689360092.3223418)) , (kv &quot;amzxii&quot; : (v &quot;lStW1NUMZlP8I&quot;)) &#125;)) , (v 568189574) , (v (object &#123; (kv &quot;bstfaw&quot; : (v false)) , (kv &quot;micpjxruqu&quot; : (v false)) , (kv &quot;qugcsztygis&quot; : (v true)) , (kv &quot;pagdlslodcjc&quot; : (v true)) , (kv &quot;uiegt&quot; : (v false)) , (kv &quot;emglc&quot; : (v true)) , (kv &quot;gvccyclvc&quot; : (v &quot;LicGQA&quot;)) , (kv &quot;ostmpcxtb&quot; : (v -1994141473.0746093)) , (kv &quot;idycp&quot; : (v 1213923504.1512299)) &#125;)) , (v (array [ (v &quot;1_bNas3xxAUZbF&quot;) , (v &quot;pF_9&quot;) ])) , (v (array [ (v true) , (v false) , (v 1104499137.6581862) , (v &quot;gtRSEiAkV&quot;) , (v &quot;f&quot;) , (v -1427216932.854449) ])) ]))) , (kv &quot;mtbvt&quot; : (v 12016921.330335487)) &#125;))) , (kv &quot;uylgh&quot; : (v (object &#123; (kv &quot;ngmrlgsvgdmm&quot; : (v false)) , (kv &quot;qewiqgqklm&quot; : (v 305638841)) , (kv &quot;fzimlj&quot; : (v false)) , (kv &quot;oxtylcwf&quot; : (v &quot;NsupUamyhG&quot;)) , (kv &quot;lwebqrro&quot; : (v true)) , (kv &quot;ssbqrxhayu&quot; : (v false)) , (kv &quot;pqgzbx&quot; : (v false)) &#125;))) , (kv &quot;fmxngtvju&quot; : (v &quot;c2WHOzW4MDoeXytfVY9&quot;)) , (kv &quot;modbvffryo&quot; : (v -1210656559.6051788)) &#125;))) &#125;)) , (v 319991990) , (v 752081027) , (v (object &#123; (kv &quot;ayspio&quot; : (v &quot;m&quot;)) , (kv &quot;zdxdb&quot; : (v -172048492)) , (kv &quot;bnmfg&quot; : (v (object &#123; (kv &quot;kdhtl&quot; : (v (array [ (v (object &#123; (kv &quot;wmhosbyou&quot; : (v false)) , (kv &quot;fxppfv&quot; : (v (object &#123; (kv &quot;mysfoij&quot; : (v -625201263)) , (kv &quot;ugxlt&quot; : (v false)) , (kv &quot;yprzwadvwfsc&quot; : (v true)) , (kv &quot;tydbi&quot; : (v 401570268)) , (kv &quot;ulqeoysydicm&quot; : (v true)) , (kv &quot;hcwmujpgy&quot; : (v -987799662)) , (kv &quot;iuzpmg&quot; : (v 383197351)) , (kv &quot;lyzhrztujlv&quot; : (v 259159294)) , (kv &quot;fecthcxk&quot; : (v true)) , (kv &quot;dsmzvpagojbb&quot; : (v &quot;hJr&quot;)) &#125;))) , (kv &quot;quqvjmzatbl&quot; : (v (array [ (v false) , (v &quot;DiSv7&quot;) , (v true) ]))) , (kv &quot;pidmqq&quot; : (v (object &#123; (kv &quot;chyyx&quot; : (v -461079065)) , (kv &quot;wjhldjcagc&quot; : (v &quot;FRVy&quot;)) &#125;))) , (kv &quot;rgbvesz&quot; : (v false)) , (kv &quot;sorekl&quot; : (v &quot;mgJaSKnMIo3AiY&quot;)) , (kv &quot;abwidiqucid&quot; : (v true)) , (kv &quot;vqfoxo&quot; : (v (object &#123; (kv &quot;hsebsd&quot; : (v 1786643087.320104)) , (kv &quot;qgmnjnntxzsf&quot; : (v -1728919091.1725118)) , (kv &quot;nsfwqwicx&quot; : (v -1007085725.6308616)) &#125;))) , (kv &quot;iewhgjluz&quot; : (v false)) , (kv &quot;xvowaxbmf&quot; : (v true)) &#125;)) , (v (array [ (v (array [ (v false) , (v &quot;v---cGsLqE7W&quot;) , (v false) , (v &quot;jkvWg8XrI_Orm&quot;) , (v 888665225) , (v false) ])) , (v true) ])) , (v false) , (v -1079824666.2026174) , (v (object &#123; (kv &quot;gugmas&quot; : (v &quot;ocBec08ppTN8vCnp&quot;)) , (kv &quot;pulknsyowxy&quot; : (v 565963796.0613275)) &#125;)) ]))) , (kv &quot;hzeywjbmxj&quot; : (v -990340286.7455853)) , (kv &quot;akbiudkv&quot; : (v (array [ (v true) ]))) , (kv &quot;vcxlswkf&quot; : (v &quot;udv8PuxZv6Twx5Pb&quot;)) , (kv &quot;flceeypkt&quot; : (v (array [ (v true) , (v (array [ (v -795613352.3213557) , (v 685714582) , (v (object &#123; (kv &quot;jujopuqaynky&quot; : (v 134233885.6473452)) , (kv &quot;bxsnejoecnrr&quot; : (v false)) , (kv &quot;becsdny&quot; : (v &quot;uioKo31gEp40GTcn&quot;)) , (kv &quot;ocdex&quot; : (v true)) , (kv &quot;cmufrjeljfa&quot; : (v 946987801.137704)) , (kv &quot;cvwuwdutbdx&quot; : (v true)) , (kv &quot;zumlhmpfjy&quot; : (v &quot;Ju-wv9XFe_2&quot;)) &#125;)) , (v (object &#123; (kv &quot;qrfvphcxl&quot; : (v &quot;nbjKX2lSdKUcMrDsJMoa&quot;)) , (kv &quot;qfhkpepm&quot; : (v true)) , (kv &quot;isvsnzn&quot; : (v &quot;8s-H4p5jO_1VxSaJSL&quot;)) , (kv &quot;wosutaonjssb&quot; : (v -1321615206.2702007)) , (kv &quot;zhzyarvfbv&quot; : (v false)) , (kv &quot;knqhafffn&quot; : (v &quot;TNWnalBECj98IUDA&quot;)) , (kv &quot;vzsesugbtk&quot; : (v &quot;O1hm&quot;)) &#125;)) , (v (array [ (v &quot;2it-aFXS0Qy_XVn&quot;) , (v &quot;ihixN&quot;) ])) ])) , (v (object &#123; (kv &quot;yxtqdjhupa&quot; : (v 1951743765)) , (kv &quot;rpvck&quot; : (v &quot;f3QIUcvC_fauijzNkf&quot;)) , (kv &quot;slbkyuwnwv&quot; : (v (array [ (v -571232911.2798606) , (v &quot;T7Qzt3Edo4d&quot;) , (v &quot;pWJAm&quot;) , (v -1434131502.6432357) , (v -680271942) , (v &quot;ThdyS9n5bdwstGH&quot;) , (v 1979426403) , (v &quot;90e&quot;) , (v true) ]))) &#125;)) , (v (array [ (v false) , (v (array [ (v &quot;ZnOdJd&quot;) , (v &quot;Me4gneu7Nc7O&quot;) , (v 202051980) , (v 1332684635) ])) , (v true) , (v 1264894043) , (v (array [ (v -395334900.75651824) , (v 1549989907) , (v -961665108) , (v -1593561717.1767528) , (v 1494787750.6725504) , (v 994190181.9693943) , (v 632636626) , (v &quot;3Uf8V_FaTErM79xdKh0&quot;) , (v &quot;V91QGMl63kI&quot;) ])) , (v (array [ (v -753988053.774492) ])) ])) , (v (object &#123; (kv &quot;wflzlntzc&quot; : (v &quot;qKNchhkZHGblmFDrn8U&quot;)) , (kv &quot;ucslcrzdyz&quot; : (v (array [ (v 283139739) ]))) , (kv &quot;yxugzqphta&quot; : (v &quot;y2YbFBO1bXR3ENRvev&quot;)) , (kv &quot;ihtrq&quot; : (v true)) , (kv &quot;yulhhzvvikd&quot; : (v (array [ (v -1046400160.2828263) , (v true) , (v true) , (v false) , (v false) , (v &quot;ei6IDD8UKSW&quot;) , (v 191135027.03853592) , (v &quot;5anD9rNH6&quot;) ]))) , (kv &quot;uqvcq&quot; : (v (array [ (v &quot;ZzSW_B-3&quot;) , (v 783554144.0958288) , (v &quot;KU&quot;) , (v false) , (v true) , (v 1966464103) , (v 1920814712) , (v 683487776.262944) , (v false) , (v &quot;UsBaXA&quot;) ]))) , (kv &quot;ugvxe&quot; : (v false)) , (kv &quot;usrnkbkzfuu&quot; : (v false)) , (kv &quot;fiqwtwvre&quot; : (v 1694627487.7568161)) , (kv &quot;vihhvsxklcbo&quot; : (v 897679784)) &#125;)) , (v (array [ (v &quot;EL7XhBA94&quot;) , (v true) , (v &quot;J8TJrWXYkODR&quot;) , (v (object &#123; (kv &quot;bowvtftalv&quot; : (v &quot;VEBEw8RwnsIw0s&quot;)) , (kv &quot;ltkvjg&quot; : (v &quot;fDHymtYW3L4Hl9R&quot;)) , (kv &quot;vkdztzv&quot; : (v &quot;AzL4677302l8FeVnbbX&quot;)) , (kv &quot;mtardrme&quot; : (v &quot;Xr2f&quot;)) , (kv &quot;mpqnrwt&quot; : (v &quot;6tfiB19W&quot;)) , (kv &quot;xntyeufr&quot; : (v &quot;fEZSq&quot;)) , (kv &quot;zpthzv&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;xnpzojev&quot; : (v false)) , (kv &quot;whsrs&quot; : (v &quot;gzQesBTOCoNKugz3&quot;)) , (kv &quot;uhmjzttq&quot; : (v true)) , (kv &quot;tesve&quot; : (v &quot;nkDSpl0b2Ga8vsHT&quot;)) &#125;)) , (v &quot;WuANCr&quot;) , (v (object &#123; (kv &quot;jyqdak&quot; : (v &quot;gP-zwcSikc&quot;)) , (kv &quot;kvbmsyttia&quot; : (v false)) &#125;)) , (v &quot;H&quot;) , (v &quot;2D1ucsMSfrP&quot;) ])) , (v 1592338348.7924447) , (v (array [ (v &quot;9lYEHCrsXWLkq&quot;) , (v (object &#123; (kv &quot;vsvlvhkuso&quot; : (v true)) , (kv &quot;nnjlgli&quot; : (v 322338594.6300827)) , (kv &quot;fetxoqxoghv&quot; : (v -1991478727)) , (kv &quot;vzrtxhzu&quot; : (v &quot;mKl8xiUneZPXrZuF&quot;)) &#125;)) , (v (array [ (v 1458107595.4483733) , (v 616263965.0955776) , (v 161045273.1067363) , (v true) , (v &quot;Ck3C2JV5hdJA&quot;) ])) , (v (object &#123; (kv &quot;etgzgdsl&quot; : (v false)) , (kv &quot;lhvbzwypzrx&quot; : (v true)) , (kv &quot;smiyikbhw&quot; : (v -984707066.8290443)) , (kv &quot;hktstqzjcrcg&quot; : (v true)) , (kv &quot;brgfn&quot; : (v &quot;HcDo1oRRacy9o4ssNk&quot;)) , (kv &quot;qjyof&quot; : (v true)) , (kv &quot;phdqbosbbkp&quot; : (v 931049523.3590446)) , (kv &quot;ofjidjx&quot; : (v -860738311)) , (kv &quot;ufrxtiehw&quot; : (v &quot;MuqsjxkA8e2Ij&quot;)) &#125;)) , (v (object &#123; (kv &quot;wstjovp&quot; : (v &quot;zI&quot;)) , (kv &quot;wppceiyenski&quot; : (v &quot;kD&quot;)) &#125;)) , (v true) , (v -91349959.14546207) ])) , (v &quot;-VMwHk4&quot;) , (v (array [ (v true) , (v -1807266800) , (v true) , (v true) , (v (array [ (v &quot;Oex_mjMAO4A55c&quot;) , (v &quot;odW9oQlO3A7XKZtEPHM&quot;) , (v &quot;kIsjpeWPlq&quot;) , (v &quot;Scx4fDx65a7UDQ&quot;) , (v true) ])) , (v &quot;UL&quot;) , (v (array [ (v true) , (v -1265257957) , (v false) ])) , (v (array [ (v false) , (v -569818007.5876889) , (v &quot;WwDva9Nc3dMJhikZ_Z&quot;) , (v &quot;NMi7MOHBF7_9sWzRCds&quot;) , (v 380825709.26405615) , (v &quot;iPGQxJbVYprnt&quot;) , (v &quot;VjJf-XdxNrOg3v5yBvx&quot;) , (v true) , (v &quot;oiipbU3t3ISgVwOL7&quot;) , (v true) ])) ])) ]))) , (kv &quot;guinzucru&quot; : (v (array [ (v &quot;vrumW9gl31&quot;) , (v &quot;n&quot;) , (v (array [ (v (object &#123; (kv &quot;ydvzhpou&quot; : (v true)) , (kv &quot;wwnndiumk&quot; : (v true)) &#125;)) , (v false) ])) , (v &quot;Hq3ygnLIYYjOaQae&quot;) , (v (object &#123; (kv &quot;yemwjar&quot; : (v (array [ (v -1042701532.5623459) , (v 24549030) , (v 352751370.9875027) , (v 980109670.3544773) , (v &quot;Hh4ePK8NfvSx4OpOW&quot;) , (v true) , (v false) , (v true) , (v 497346263) ]))) , (kv &quot;vcmrzobsjzl&quot; : (v &quot;nyj2-zg7-0kNw8&quot;)) &#125;)) , (v (array [ (v &quot;Vo_arWN3v&quot;) , (v &quot;8F&quot;) , (v (object &#123; (kv &quot;jibgur&quot; : (v &quot;dXRlpssz3Wyi&quot;)) , (kv &quot;zfseuo&quot; : (v true)) &#125;)) , (v 1937437815) , (v (array [ (v -1245657924.4286041) , (v 651976843) , (v &quot;Cjws8kzUiNPcvX70U-x&quot;) , (v false) , (v &quot;Lm9w&quot;) , (v &quot;xxT2tJHI7wDPW2Kfi&quot;) , (v false) , (v -1952758278.2733572) ])) , (v &quot;g-I&quot;) , (v -2063256198) , (v &quot;IVxDi6r33ruXiEW&quot;) ])) ]))) , (kv &quot;hcgqg&quot; : (v (object &#123; (kv &quot;pkncbpjityxi&quot; : (v true)) , (kv &quot;jywgia&quot; : (v false)) , (kv &quot;xuhpgdb&quot; : (v &quot;2-yvDReio4aNvsXqelv&quot;)) , (kv &quot;diuzqtbp&quot; : (v 1369231263.8563566)) , (kv &quot;boxjl&quot; : (v &quot;RdfmeS&quot;)) , (kv &quot;ieydmbpq&quot; : (v false)) , (kv &quot;wksjcukglkv&quot; : (v &quot;BlskDCFdPhO&quot;)) &#125;))) , (kv &quot;dqksawfwzia&quot; : (v -1709158449.2037373)) , (kv &quot;yqqqgrelsew&quot; : (v (object &#123; (kv &quot;axfkapc&quot; : (v (array [ (v 1314173141.025732) , (v true) , (v 1706611926.1511626) , (v (array [ (v &quot;LGK9&quot;) , (v &quot;OmKGa-_AV6&quot;) , (v false) , (v 619664858) , (v true) ])) , (v true) , (v true) , (v true) , (v &quot;MaHgh1nlG&quot;) , (v &quot;-ht&quot;) , (v (object &#123; (kv &quot;dbxeygnft&quot; : (v true)) , (kv &quot;nwjypbw&quot; : (v -180523820)) , (kv &quot;svlefgltfn&quot; : (v true)) , (kv &quot;wzjlatys&quot; : (v -933287952)) , (kv &quot;xsirbpyegfs&quot; : (v &quot;hAv2H9S7cXb85f2&quot;)) , (kv &quot;ndllh&quot; : (v &quot;1IoYAwtIePJaKWc480&quot;)) &#125;)) ]))) , (kv &quot;xnpsnax&quot; : (v false)) , (kv &quot;zpdmtb&quot; : (v &quot;yn8HiW&quot;)) , (kv &quot;cbdpxx&quot; : (v &quot;irzv&quot;)) , (kv &quot;ronkpjuqyas&quot; : (v true)) , (kv &quot;untzciqdqf&quot; : (v &quot;kJWx8&quot;)) , (kv &quot;nfetkiyomp&quot; : (v true)) &#125;))) &#125;))) , (kv &quot;tqlmboqw&quot; : (v &quot;-dp9i61bMgbiO-d&quot;)) , (kv &quot;lvjlx&quot; : (v -1249334706)) , (kv &quot;yptkyewgcrj&quot; : (v 867985282)) , (kv &quot;ratkrzkarfn&quot; : (v false)) &#125;)) ]))) , (kv &quot;bxxnf&quot; : (v &quot;MmTxJH919O057sU37&quot;)) , (kv &quot;yedby&quot; : (v &quot;QQxVadTt7L8z&quot;)) , (kv &quot;kamasbl&quot; : (v (object &#123; (kv &quot;mswukabrei&quot; : (v (object &#123; (kv &quot;acvtgb&quot; : (v &quot;PDJlQybpSPYdMT8&quot;)) , (kv &quot;yvtaruegobn&quot; : (v 997754640.3758422)) &#125;))) , (kv &quot;gvfkney&quot; : (v -1307017604)) , (kv &quot;uwvrb&quot; : (v &quot;W6WF&quot;)) , (kv &quot;sszkbz&quot; : (v true)) , (kv &quot;fpgzwg&quot; : (v false)) &#125;))) , (kv &quot;eujhncsmq&quot; : (v &quot;jsjZmtqSeh6VVVaY&quot;)) , (kv &quot;sxnqorpzydrm&quot; : (v (object &#123; (kv &quot;phjgkjkonv&quot; : (v (object &#123; (kv &quot;fzbdujgtanh&quot; : (v (array [ (v (array [ (v -1757709659.747855) , (v &quot;GYAkj&quot;) , (v &quot;nQlNvA5Y4oSKpHOF&quot;) , (v true) ])) , (v (array [ (v 952955177.6360663) , (v (object &#123; (kv &quot;qummivimqd&quot; : (v false)) , (kv &quot;gkkvkc&quot; : (v false)) , (kv &quot;snfidxdtto&quot; : (v &quot;11jzRhIv0&quot;)) , (kv &quot;ffdfxfruzwfo&quot; : (v false)) , (kv &quot;lluwr&quot; : (v false)) , (kv &quot;ddlxi&quot; : (v (object &#123; (kv &quot;bofjqgppt&quot; : (v -206304887)) , (kv &quot;pxuxb&quot; : (v &quot;JCAHtEfTWPyjmVUOX&quot;)) , (kv &quot;memsmy&quot; : (v &quot;p&quot;)) , (kv &quot;rhvmwrekpr&quot; : (v -853823899.7978561)) , (kv &quot;rlhshsewp&quot; : (v false)) , (kv &quot;oqjpdotxpz&quot; : (v -446272382)) &#125;))) , (kv &quot;emqee&quot; : (v &quot;3zx8LgmigKIKn&quot;)) , (kv &quot;qmauf&quot; : (v &quot;MA-oPkKz9lXOBiDMSRSN&quot;)) , (kv &quot;kqpwqkyptkmu&quot; : (v (array [ (v &quot;2y0Ls60F8eTpOSN&quot;) ]))) &#125;)) , (v &quot;fTi&quot;) , (v -265643623) , (v &quot;9v_YlQuFo&quot;) , (v &quot;geuPaZjVsj&quot;) , (v (array [ (v (array [ (v false) , (v &quot;GHb-FdyW8EomXgHsT&quot;) , (v false) , (v 1875556833.3559535) , (v &quot;vt&quot;) , (v true) , (v false) , (v &quot;osLW6u4iz&quot;) , (v true) ])) , (v &quot;uJOr4VLCq1t&quot;) , (v (object &#123; (kv &quot;oqebxwxtxpvb&quot; : (v &quot;OeR&quot;)) , (kv &quot;wwwiw&quot; : (v &quot;-nhycJ&quot;)) , (kv &quot;vwbagqlinj&quot; : (v &quot;-D9eDNGKj&quot;)) , (kv &quot;wqnhzms&quot; : (v -655078208)) , (kv &quot;sdmbikfwy&quot; : (v &quot;x5v&quot;)) &#125;)) , (v (object &#123; (kv &quot;ysfsnuamh&quot; : (v false)) , (kv &quot;ybzuhpv&quot; : (v &quot;8DY2&quot;)) , (kv &quot;raiyak&quot; : (v 495006138)) , (kv &quot;hgkoobis&quot; : (v &quot;0&quot;)) , (kv &quot;hputvguzao&quot; : (v false)) , (kv &quot;uyaeh&quot; : (v true)) , (kv &quot;pwqhplzwou&quot; : (v false)) , (kv &quot;taajvximfcy&quot; : (v true)) , (kv &quot;lxmlwsub&quot; : (v false)) , (kv &quot;vsofc&quot; : (v false)) &#125;)) , (v 1088101195) , (v (object &#123; (kv &quot;sojza&quot; : (v false)) , (kv &quot;rbclzrqro&quot; : (v true)) , (kv &quot;huqrznjue&quot; : (v true)) , (kv &quot;vluebofh&quot; : (v &quot;5bTgvkkV&quot;)) , (kv &quot;ezstabvtdeq&quot; : (v 1976572284)) , (kv &quot;aqlzj&quot; : (v &quot;t7yO3IEs7gaC_9MZ&quot;)) , (kv &quot;josruegfqn&quot; : (v &quot;HX2El0rpe6HfH&quot;)) , (kv &quot;edank&quot; : (v -635493072.4155289)) , (kv &quot;aymbgyfbdzj&quot; : (v &quot;ozUhXACnFL&quot;)) &#125;)) , (v -890796541.5700071) , (v &quot;uJXQ5_4G5vIIm4VIv&quot;) ])) , (v &quot;f1xaV9x196tBnFD5_Zd8&quot;) , (v (object &#123; (kv &quot;qiubyf&quot; : (v (array [ (v &quot;CQ&quot;) , (v &quot;cW_&quot;) , (v 461572129.55971146) , (v -1876956237.2727652) , (v false) , (v false) , (v &quot;7FxqTYYKTzo702jmuV&quot;) , (v true) , (v -1361005501) , (v &quot;TG3lzWLUBg17Z&quot;) ]))) , (kv &quot;bsntrkshbbl&quot; : (v true)) , (kv &quot;qayvs&quot; : (v &quot;Uk-oAdeA51cHhbK5&quot;)) , (kv &quot;hadikjuxk&quot; : (v (object &#123; (kv &quot;yvluqwkog&quot; : (v -597445612.6250086)) , (kv &quot;oukykodjcu&quot; : (v 1850557052)) , (kv &quot;cdhblr&quot; : (v true)) , (kv &quot;ciesjxzghfxt&quot; : (v true)) , (kv &quot;jnngdkfpuo&quot; : (v true)) , (kv &quot;pzheolhaonp&quot; : (v 226200614.83962294)) &#125;))) , (kv &quot;cltmvb&quot; : (v -2074776318)) , (kv &quot;obyudplghb&quot; : (v (object &#123; (kv &quot;vecms&quot; : (v 582577524.4319428)) , (kv &quot;mofmkniktapz&quot; : (v &quot;9Js4uKTN&quot;)) , (kv &quot;drxyobybcw&quot; : (v &quot;JTea_0pLArPIzhKEkp2s&quot;)) , (kv &quot;bbpvy&quot; : (v false)) , (kv &quot;kdndzkpnxq&quot; : (v &quot;daMn&quot;)) , (kv &quot;ppwjjqvahr&quot; : (v &quot;uiN&quot;)) , (kv &quot;evdxmgpozur&quot; : (v -1467712807.9154332)) , (kv &quot;lqqxro&quot; : (v &quot;1C&quot;)) &#125;))) , (kv &quot;fvgxbtmyts&quot; : (v (array [ (v false) ]))) &#125;)) , (v (array [ (v &quot;xgyM0w0gJVc-bUsjjc3W&quot;) , (v (array [ (v 1581673185.801224) , (v true) ])) , (v true) , (v &quot;AFAdRfO1vjhVHBXf&quot;) , (v -1417255356) , (v false) , (v 2125252708) , (v -1351228013.1790602) , (v &quot;s8lmQa9-sF3ZiwfgDNG9&quot;) , (v true) ])) ])) , (v true) , (v (array [ (v -1698684901) , (v (array [ (v (array [ (v 849023324.5976223) , (v -977489585.1647764) , (v 1160100524.5048172) , (v &quot;NVoV&quot;) , (v 1956152963.7851565) ])) , (v (object &#123; (kv &quot;zjkbrxqnjyib&quot; : (v 1612094501)) , (kv &quot;laytlrzjm&quot; : (v -1286271773.382401)) &#125;)) , (v 1355048752) ])) , (v &quot;jGiEWnOBrX6zGk7zSk4&quot;) , (v -461191987) ])) , (v (array [ (v &quot;m00pw5&quot;) , (v (object &#123; (kv &quot;tlotkn&quot; : (v (array [ (v false) , (v 985823484) ]))) , (kv &quot;xlbwnbxbhg&quot; : (v true)) , (kv &quot;mkatz&quot; : (v &quot;c6N&quot;)) , (kv &quot;uoveewlh&quot; : (v &quot;l3R3s8B1RC3l&quot;)) , (kv &quot;swouympjz&quot; : (v (object &#123; (kv &quot;auyjvbi&quot; : (v -1255198040.7835124)) , (kv &quot;ghlxvmz&quot; : (v &quot;XdHtr&quot;)) , (kv &quot;wkopoeyqlv&quot; : (v &quot;Zeyj_&quot;)) , (kv &quot;grjesew&quot; : (v &quot;VytG8oHimN0ioronyiAb&quot;)) , (kv &quot;gbvuthtl&quot; : (v &quot;SRCBVKWH&quot;)) , (kv &quot;esscbsk&quot; : (v false)) &#125;))) , (kv &quot;thaxrelsxfav&quot; : (v true)) , (kv &quot;qqifhajga&quot; : (v (object &#123; (kv &quot;zwozmuz&quot; : (v 377293093.26616657)) , (kv &quot;qldgpds&quot; : (v true)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;rcjdyjspy&quot; : (v -952553084)) &#125;)) , (v &quot;x7-N76Cc&quot;) , (v (array [ (v (array [ (v true) , (v true) , (v &quot;zQpYm4rL9JCn&quot;) , (v &quot;NemBXRJmcEsP1C&quot;) , (v 433306137.267195) , (v &quot;qvh8cnT-Jhc8Ou&quot;) , (v 740183319.1502727) , (v &quot;7Bi1GqM4ueA0ampSi&quot;) ])) , (v &quot;O79VGHrnyR7v&quot;) , (v false) , (v (array [ (v &quot;es&quot;) , (v 1505546287) ])) , (v &quot;Nw5tI2Y7hhY4fDj31eWN&quot;) , (v (array [ (v -749123803.2739266) , (v 216748025) , (v &quot;c1Y7-9k8AC&quot;) , (v 176485073) , (v false) , (v &quot;mf_keznyU_20HdZ_0&quot;) , (v true) , (v false) ])) , (v false) , (v (array [ (v -1512885808.9801362) , (v true) , (v -1527868357) , (v &quot;trOTwZC-0g1lgTqEA&quot;) , (v &quot;mV34DCnkb1LlD7d_km&quot;) , (v &quot;YJ0tHHyAmoIKQ&quot;) , (v &quot;gsXJ5zChelW&quot;) ])) , (v (object &#123; (kv &quot;phdse&quot; : (v 595741052.8125976)) , (kv &quot;rxcsoflx&quot; : (v &quot;rIvqIqrnEVGyCwxQP&quot;)) &#125;)) ])) ])) ]))) , (kv &quot;nvotcnis&quot; : (v (object &#123; (kv &quot;ogjfiplwvufn&quot; : (v 1079730809)) , (kv &quot;fnbyltztf&quot; : (v &quot;EsxG2fQUW-4XT62&quot;)) , (kv &quot;rpxsgcq&quot; : (v &quot;CCAOL_U9&quot;)) , (kv &quot;vswsw&quot; : (v (object &#123; (kv &quot;ijmoibjq&quot; : (v true)) , (kv &quot;piivqkugks&quot; : (v true)) , (kv &quot;wpcximi&quot; : (v (array [ (v (object &#123; (kv &quot;iwywzn&quot; : (v &quot;OOfVX3oNFwBZ&quot;)) , (kv &quot;hkynoym&quot; : (v &quot;FJRrQ&quot;)) , (kv &quot;zuonk&quot; : (v &quot;49Eec2&quot;)) , (kv &quot;qjovinmqp&quot; : (v 679144699)) &#125;)) , (v true) , (v &quot;yAS&quot;) , (v 1543015013) , (v (array [ (v -1021945778.6520991) , (v true) , (v 128684704) , (v true) , (v false) , (v &quot;has-i&quot;) ])) , (v &quot;4I6blnY&quot;) , (v (object &#123; (kv &quot;zkwzhwzipi&quot; : (v &quot;5lP5lousE5iL9IoFTG&quot;)) , (kv &quot;bitfyzggq&quot; : (v true)) , (kv &quot;cwnnguoet&quot; : (v false)) , (kv &quot;nqmqzw&quot; : (v false)) , (kv &quot;joozp&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;uhzmeuc&quot; : (v &quot;u3F1Z&quot;)) , (kv &quot;mkneciqrikf&quot; : (v true)) , (kv &quot;ieiag&quot; : (v -1256958208.1722577)) &#125;)) , (v (array [ (v 6951325) , (v true) ])) , (v true) ]))) , (kv &quot;xsqea&quot; : (v (object &#123; (kv &quot;abdpaposxk&quot; : (v (array [ (v -2083214054) , (v true) ]))) , (kv &quot;gavaao&quot; : (v (array [ (v &quot;YVqehowWoxFzxN0tZB8&quot;) , (v false) , (v &quot;ZHK0SwWCyUiC&quot;) ]))) , (kv &quot;dlcfcpjjijg&quot; : (v (array [ (v true) , (v &quot;j2r&quot;) , (v 1558887921.6404164) , (v &quot;TveKjVYhg0U&quot;) , (v 632625983.6673323) , (v false) , (v 1367379215) , (v &quot;mpHgbvMpYFi&quot;) , (v true) ]))) , (kv &quot;cvztpny&quot; : (v &quot;z1wbRKt3-u4cBI6&quot;)) , (kv &quot;tgvmaqhcokg&quot; : (v false)) , (kv &quot;pwlirptw&quot; : (v (object &#123; (kv &quot;kfntxxsbsbon&quot; : (v true)) , (kv &quot;akwavpgf&quot; : (v -1342471866)) , (kv &quot;gzpwxwilyubn&quot; : (v -1743682384.0272207)) , (kv &quot;ndqaenoranu&quot; : (v false)) , (kv &quot;vfzgcfdr&quot; : (v &quot;utqG7ufYK3j2KEVzpp0O&quot;)) , (kv &quot;ufxjjef&quot; : (v -904325888)) , (kv &quot;fodllzopcpx&quot; : (v &quot;P3ZBe5qNinRYq1VxEL&quot;)) , (kv &quot;dhufn&quot; : (v true)) &#125;))) , (kv &quot;ralgamgjl&quot; : (v (array [ (v 2026862038.2987015) , (v false) , (v false) ]))) , (kv &quot;gnknlmlum&quot; : (v false)) , (kv &quot;azfmkyux&quot; : (v (array [ (v &quot;f413rM5j2LvXNTKL&quot;) , (v -615130880) , (v &quot;0Eh4aUF2CsHg_P-mxmH&quot;) , (v -268950414.54959303) , (v true) , (v -1931834889.733659) ]))) &#125;))) &#125;))) , (kv &quot;wzewlxhjnvw&quot; : (v -903799295)) , (kv &quot;nnrugbczmebk&quot; : (v (array [ (v false) , (v false) , (v &quot;G&quot;) , (v (array [ (v true) , (v true) , (v &quot;Xfiip08j2n4cXpvUz7&quot;) , (v -1186540424) , (v true) , (v &quot;c9Pn_xx&quot;) ])) , (v 1124081955) , (v (array [ (v 1830918200) , (v (array [ (v &quot;Q4MTN&quot;) ])) , (v (array [ (v 127409311) , (v -1809447283.2348087) , (v &quot;4tiJNwazi&quot;) , (v &quot;fy&quot;) ])) , (v 930886199.1886995) , (v (array [ (v -245296169) , (v 844880445.720423) , (v -270760168.8320612) , (v &quot;V_ATKaGoE5XM9RgwLv&quot;) , (v false) ])) , (v &quot;kpcQ&quot;) , (v 2045568916.3619785) ])) ]))) , (kv &quot;iquqoa&quot; : (v (array [ (v (object &#123; (kv &quot;bdtrvppokywi&quot; : (v -33393480)) , (kv &quot;xlxonec&quot; : (v -1823845807)) , (kv &quot;pprlnqouqxzn&quot; : (v 2091914113.8744054)) , (kv &quot;ybmwesnuegtd&quot; : (v (array [ (v &quot;FMsxRZWsu2H&quot;) ]))) , (kv &quot;ylogqgharumv&quot; : (v false)) , (kv &quot;nvggdbkr&quot; : (v (object &#123; (kv &quot;crvrsjh&quot; : (v &quot;Xj2cM1hDzTIuhmc&quot;)) , (kv &quot;umhgzsjwk&quot; : (v &quot;KS8J3biYo8P&quot;)) , (kv &quot;dbfkz&quot; : (v -855560738)) , (kv &quot;xyfvzoxzqc&quot; : (v false)) , (kv &quot;otbwgnrz&quot; : (v -2034945952.523522)) , (kv &quot;bbehrnjws&quot; : (v &quot;QbeySRRy15KeDVQz0IMK&quot;)) , (kv &quot;lgsgot&quot; : (v &quot;JnGiCwGsA8aa7o&quot;)) , (kv &quot;rasrciv&quot; : (v -700141086)) , (kv &quot;zdthkydrmln&quot; : (v &quot;qxzRdtqK-lnShu&quot;)) &#125;))) &#125;)) ]))) &#125;))) , (kv &quot;xclapdsaslep&quot; : (v -23588526.03089682)) , (kv &quot;ecrpzheu&quot; : (v (object &#123; (kv &quot;lxthqzfv&quot; : (v (object &#123; (kv &quot;ulylbh&quot; : (v -1018618930)) , (kv &quot;qhlscxfu&quot; : (v &quot;sfZnQ_rXqIm&quot;)) , (kv &quot;bmdtvxutm&quot; : (v true)) , (kv &quot;cczmioh&quot; : (v (array [ (v 111564522) ]))) , (kv &quot;rsbpvrvls&quot; : (v &quot;OzU9laC7lmDxzlEx_wR&quot;)) , (kv &quot;ndcirjkclq&quot; : (v &quot;cqgL1NYFQ3DO&quot;)) , (kv &quot;oggtqukizq&quot; : (v -2106470611)) &#125;))) , (kv &quot;cjwtzzpgrb&quot; : (v (array [ (v &quot;TZD4t4XeIUHjJUIK&quot;) , (v &quot;lQGZmZrYh&quot;) , (v &quot;hyaEwqscH8dteUOzha&quot;) , (v &quot;JaQummas&quot;) ]))) , (kv &quot;wvppj&quot; : (v true)) , (kv &quot;phsqgbfp&quot; : (v 871081896)) &#125;))) , (kv &quot;isvrnahic&quot; : (v false)) , (kv &quot;uasucavojqy&quot; : (v 163609805)) , (kv &quot;vnncwei&quot; : (v -642227261)) , (kv &quot;njzmcyqd&quot; : (v &quot;cDCfe3Bx1w5XYVLraxW&quot;)) , (kv &quot;dweipdxaye&quot; : (v (array [ (v (object &#123; (kv &quot;aeongjioif&quot; : (v (array [ (v (array [ (v true) , (v true) , (v &quot;bECarF5RGKtt1imFtTu&quot;) , (v &quot;xcuL5lX97a&quot;) ])) , (v false) , (v (array [ (v false) ])) , (v -650309984) , (v (object &#123; (kv &quot;feyumfzudt&quot; : (v &quot;TIAi7dPq&quot;)) , (kv &quot;hxjglebiwf&quot; : (v true)) , (kv &quot;tdeggm&quot; : (v &quot;hp&quot;)) , (kv &quot;rortbibldkyq&quot; : (v true)) , (kv &quot;bucfr&quot; : (v &quot;IgFif9jpOZZ&quot;)) , (kv &quot;rjnmvysrynsj&quot; : (v 441984026.3667474)) &#125;)) , (v &quot;hkF&quot;) ]))) , (kv &quot;mxrrwqte&quot; : (v (object &#123; (kv &quot;cnyarz&quot; : (v &quot;bKnE6P4Kw&quot;)) , (kv &quot;dccrzgwzc&quot; : (v (array [ (v 543185771.5837113) , (v &quot;mRCDjZgJS1M3U6rl_af&quot;) , (v false) , (v -1933801689) , (v true) ]))) &#125;))) , (kv &quot;cigvfabm&quot; : (v (object &#123; (kv &quot;saujucr&quot; : (v (array [ (v &quot;qdRdcXyEPd&quot;) , (v true) , (v -2123966068.7962725) , (v 2051049994) ]))) , (kv &quot;exxfgcqhjfc&quot; : (v (object &#123; (kv &quot;rjsubdbuwsh&quot; : (v 1224413664.2868626)) , (kv &quot;lhmairsqez&quot; : (v true)) , (kv &quot;asdzyjpeswup&quot; : (v &quot;o6zuaj&quot;)) , (kv &quot;gmslwelko&quot; : (v 610866014.3874341)) , (kv &quot;qpwadkelki&quot; : (v 1731608847)) , (kv &quot;detfckirhowo&quot; : (v false)) , (kv &quot;clzzljkxqkp&quot; : (v &quot;Y7l0BW7NMz6Avh4D_&quot;)) , (kv &quot;nhupv&quot; : (v -1006743965.8776457)) , (kv &quot;jsopnto&quot; : (v &quot;4DX1mC&quot;)) &#125;))) , (kv &quot;wnfjhwvmooaa&quot; : (v -1886276406.132739)) , (kv &quot;fhgfgkfqxst&quot; : (v (array [ (v 1593165764.0979652) , (v 1637503927) , (v -1873780322.4778817) , (v &quot;cSaqQ3WNTSGVTZ9NIOW&quot;) , (v false) , (v 860733481.5794744) , (v &quot;232_Efq6&quot;) , (v true) ]))) , (kv &quot;dzazh&quot; : (v (object &#123; (kv &quot;fvgaaqcnau&quot; : (v &quot;sNjUz5Ii9I&quot;)) , (kv &quot;jfcavmwu&quot; : (v &quot;kmW&quot;)) , (kv &quot;vlreyb&quot; : (v -710731569)) &#125;))) , (kv &quot;ckaknuqy&quot; : (v &quot;6YIs29pUJ9M&quot;)) , (kv &quot;kcuyg&quot; : (v true)) , (kv &quot;pqegyczzkqw&quot; : (v 205717917)) , (kv &quot;sdvvxdfb&quot; : (v (object &#123; (kv &quot;rsgfdyzjpaa&quot; : (v true)) , (kv &quot;vvmrt&quot; : (v &quot;X5&quot;)) , (kv &quot;xedlylprsv&quot; : (v 570673188.5733104)) , (kv &quot;acwculubdaa&quot; : (v -849395553)) , (kv &quot;puksqgt&quot; : (v false)) , (kv &quot;odewfvhgdr&quot; : (v &quot;A1AQXseK9u8_z&quot;)) , (kv &quot;gekxhikm&quot; : (v -2139423052.295563)) , (kv &quot;mfzqlpyu&quot; : (v true)) , (kv &quot;yqwffaenyag&quot; : (v &quot;9G&quot;)) &#125;))) , (kv &quot;ohtczfdh&quot; : (v (array [ (v false) , (v &quot;73qWp-&quot;) , (v true) , (v true) , (v true) , (v -1329529787) , (v &quot;WAAy6HCE5uYe&quot;) , (v 1557041914.0483782) ]))) &#125;))) , (kv &quot;sbxgh&quot; : (v (array [ (v &quot;Sbg9m7vIEB&quot;) , (v &quot;X9zA0qY1RG9ol_ri&quot;) , (v (object &#123; (kv &quot;cxqgnomfsnjk&quot; : (v &quot;R-_aiqzv6bm&quot;)) , (kv &quot;nuxvtzquh&quot; : (v true)) , (kv &quot;dkughomoiba&quot; : (v &quot;JvX4Y5n_Fh&quot;)) , (kv &quot;adsqv&quot; : (v -682262054)) , (kv &quot;myidiqjbts&quot; : (v true)) , (kv &quot;czjhfzxkbpw&quot; : (v 1751383795.8506076)) , (kv &quot;fqwpzzwkpr&quot; : (v &quot;BU0Yu0NRVTiiHcG9mbDt&quot;)) , (kv &quot;hryel&quot; : (v &quot;G&quot;)) , (kv &quot;ckyvqeihbgl&quot; : (v &quot;QOFYl8GjzR_Ql3f&quot;)) , (kv &quot;ycexw&quot; : (v true)) &#125;)) , (v true) ]))) , (kv &quot;yzpnjnaktksa&quot; : (v false)) , (kv &quot;lgaqcjsfe&quot; : (v (object &#123; (kv &quot;kqnizsh&quot; : (v (array [ (v &quot;p&quot;) , (v -1226305180) , (v 571419224.3518956) , (v false) ]))) , (kv &quot;xzlefub&quot; : (v (object &#123; (kv &quot;fhykv&quot; : (v -339920314.80420333)) , (kv &quot;exqmfy&quot; : (v true)) , (kv &quot;uiaivfguag&quot; : (v &quot;rEv6VY&quot;)) , (kv &quot;jpgztqhjv&quot; : (v true)) , (kv &quot;mkynca&quot; : (v &quot;7z9KNTRB27e&quot;)) , (kv &quot;zhcbqjatyrgg&quot; : (v &quot;wFUzbTyk5tmO6p&quot;)) , (kv &quot;ewpgmkwvlpm&quot; : (v -1934181295)) , (kv &quot;rtirys&quot; : (v true)) &#125;))) &#125;))) &#125;)) , (v 541189816) , (v &quot;es&quot;) , (v (object &#123; (kv &quot;rdflzpxwsbw&quot; : (v true)) , (kv &quot;riayske&quot; : (v (object &#123; (kv &quot;ijxscwliafis&quot; : (v -322441950.5303346)) , (kv &quot;ydhymqlx&quot; : (v false)) , (kv &quot;fjyeyim&quot; : (v false)) , (kv &quot;lbwsgfg&quot; : (v (object &#123; (kv &quot;czcrfatn&quot; : (v &quot;WKr9&quot;)) , (kv &quot;gxekfkxdkdq&quot; : (v true)) , (kv &quot;vtpxn&quot; : (v true)) , (kv &quot;vllqibjw&quot; : (v 1821007224)) &#125;))) , (kv &quot;nvqswevz&quot; : (v -2041833954)) , (kv &quot;rzzkuseaxd&quot; : (v 18807832.889945496)) , (kv &quot;wfxjbegeu&quot; : (v true)) , (kv &quot;pjayyzd&quot; : (v &quot;wWUESoQDH_O&quot;)) , (kv &quot;rfkfqmagir&quot; : (v (object &#123; (kv &quot;mykpqrhvuoy&quot; : (v true)) , (kv &quot;loyhdll&quot; : (v 1440472571.8493106)) , (kv &quot;xcsdvtacdulw&quot; : (v &quot;W344QdjDy_YdH01iG0fS&quot;)) , (kv &quot;tzgvthwrp&quot; : (v true)) &#125;))) &#125;))) , (kv &quot;rsmbhicqnpr&quot; : (v (array [ (v (object &#123; (kv &quot;kmbsnywwsi&quot; : (v 133785125.47638391)) , (kv &quot;evlhamhaxxt&quot; : (v true)) &#125;)) , (v &quot;b7Fb7N&quot;) ]))) , (kv &quot;hfneixzc&quot; : (v (array [ (v (object &#123; (kv &quot;ayxhlht&quot; : (v 1548171683.617593)) , (kv &quot;nqlqirpxh&quot; : (v false)) , (kv &quot;npybayp&quot; : (v false)) , (kv &quot;xuyutuq&quot; : (v 2110743987.1496599)) , (kv &quot;kzmprhoyv&quot; : (v 1322790923)) &#125;)) , (v 1765508816.0791237) ]))) , (kv &quot;xmdoabl&quot; : (v (object &#123; (kv &quot;refxfgkkzu&quot; : (v (object &#123; (kv &quot;xtwns&quot; : (v -1039887662)) , (kv &quot;dzgnbcaxve&quot; : (v false)) , (kv &quot;zmuecq&quot; : (v true)) , (kv &quot;tuzxnlldg&quot; : (v -907643254)) , (kv &quot;ouejpqtx&quot; : (v 331971273)) , (kv &quot;iaugasmfxclk&quot; : (v &quot;9tJxJ&quot;)) &#125;))) , (kv &quot;trcrityop&quot; : (v -989164354)) , (kv &quot;lfjcwkgxift&quot; : (v (array [ (v &quot;1GZo7DANf&quot;) , (v -1561947832.5542061) ]))) , (kv &quot;vgbtbbnj&quot; : (v &quot;q-ihFdKO9bOXv&quot;)) , (kv &quot;ndimwio&quot; : (v &quot;PQcmyo0_y8f7CWYscR&quot;)) , (kv &quot;gwkahgryaxc&quot; : (v 1901846564)) , (kv &quot;telwegwtlv&quot; : (v (array [ (v &quot;oJC0R8V6vDwZnuL&quot;) , (v &quot;cegvtSIH&quot;) , (v false) , (v true) , (v 634771505.5661006) , (v 955230191) , (v true) , (v -1885169813) , (v -1854859621.4315236) , (v false) ]))) , (kv &quot;lgdgl&quot; : (v -1133237594.1663725)) &#125;))) , (kv &quot;pzwvynoappvl&quot; : (v false)) , (kv &quot;fplofweuxvzw&quot; : (v true)) , (kv &quot;ffqjvpjbuesz&quot; : (v &quot;AV5DRiG4gKZl75TR6&quot;)) , (kv &quot;hfdasyzpuoog&quot; : (v &quot;aAMMRCXFrygWvpg&quot;)) , (kv &quot;njrohfn&quot; : (v (object &#123; (kv &quot;ratftlmbwf&quot; : (v false)) , (kv &quot;lfaafenmzbr&quot; : (v 1374843545.5878198)) &#125;))) &#125;)) , (v -2001457228.601632) , (v true) ]))) , (kv &quot;mkbmmctixysm&quot; : (v &quot;ntVR7&quot;)) &#125;))) , (kv &quot;zuczlryopca&quot; : (v &quot;iNj8bmfUHGQpt&quot;)) , (kv &quot;lhkjnmyi&quot; : (v 1518013887.0744526)) , (kv &quot;igdwy&quot; : (v true)) , (kv &quot;xbvcu&quot; : (v 1017887323.7448919)) , (kv &quot;pitvbgiuml&quot; : (v -1811318498)) &#125;))) , (kv &quot;zprckvv&quot; : (v 2108168004)) , (kv &quot;edfcnvtdtx&quot; : (v (array [ (v (object &#123; (kv &quot;zjlropjots&quot; : (v (object &#123; (kv &quot;ohmsqxdlz&quot; : (v false)) , (kv &quot;neisprizn&quot; : (v 1669237908.3217354)) , (kv &quot;csenxeijnht&quot; : (v (array [ (v (array [ (v (object &#123; (kv &quot;zppbppw&quot; : (v 50337283.94736552)) , (kv &quot;ixrpxguua&quot; : (v true)) , (kv &quot;plfzrokdvja&quot; : (v &quot;7eZ616LbAtqHFNJU4MF&quot;)) , (kv &quot;jhygfhqou&quot; : (v 282844661)) , (kv &quot;obpaqtt&quot; : (v 1016820153)) , (kv &quot;tzmnjmnprc&quot; : (v &quot;PIP_KsAQ8TRfWj8&quot;)) &#125;)) , (v false) , (v (array [ (v &quot;iYCPkOgKcGLcpqf&quot;) , (v 1795872978.9544482) ])) , (v 67846688.50918601) , (v 1202186634.870897) , (v false) ])) , (v 9448510.009504765) , (v (array [ (v true) , (v true) , (v (object &#123; (kv &quot;etkidcfq&quot; : (v &quot;lHdchfpN6JDir&quot;)) , (kv &quot;agchz&quot; : (v 712473658.807744)) , (kv &quot;icqnhfdxhjhk&quot; : (v -220595219)) , (kv &quot;fbbfl&quot; : (v -505498113.7859371)) , (kv &quot;jmwbiqyfcsuz&quot; : (v &quot;KA&quot;)) , (kv &quot;xbvzb&quot; : (v &quot;gXgB1WZNqjU&quot;)) , (kv &quot;nwemkhg&quot; : (v false)) , (kv &quot;kjherkfm&quot; : (v true)) , (kv &quot;xnqsb&quot; : (v true)) , (kv &quot;lvsjlm&quot; : (v false)) &#125;)) ])) , (v (array [ (v (array [ (v &quot;buNwzYKD80YR&quot;) , (v true) , (v false) , (v false) , (v false) , (v -710038476.2972732) , (v -309936207) , (v &quot;paBE0&quot;) ])) , (v &quot;q2GA9trX5VnDm8&quot;) , (v -844643912) , (v false) ])) , (v (array [ (v -1377899387.3188415) , (v &quot;Pq5moaMvAdkM4rQ&quot;) , (v true) , (v true) ])) , (v -710012547.177507) , (v 673382921.5194938) , (v &quot;FHksVrkWHt3PO0U0b&quot;) ]))) , (kv &quot;jfzawdrwkga&quot; : (v -1072103664.4713615)) , (kv &quot;xqgaimtu&quot; : (v &quot;2RTdyzxFpbVQmuY&quot;)) , (kv &quot;jjkulht&quot; : (v &quot;GCEdY0WQgHN&quot;)) &#125;))) , (kv &quot;dnmlzfzvmidt&quot; : (v false)) , (kv &quot;rhcvcxuk&quot; : (v -1079046924.5961304)) , (kv &quot;yaktme&quot; : (v (array [ (v (object &#123; (kv &quot;diywncksn&quot; : (v (array [ (v true) , (v &quot;cGAmxIX7O0WTZ&quot;) , (v (array [ (v false) , (v 1564067145) , (v &quot;iW_vFxvuDE-A&quot;) , (v &quot;gZo3&quot;) , (v 1122587441) , (v true) , (v 2083853595) ])) , (v true) , (v 1860499142.0810177) , (v false) , (v false) , (v false) , (v 558491628) , (v (array [ (v &quot;sOYslU5FbQW6&quot;) , (v &quot;_Z9dSn&quot;) , (v true) ])) ]))) , (kv &quot;uxmuxkb&quot; : (v 553474645.1672876)) , (kv &quot;yhhsqrthzs&quot; : (v &quot;Z6hjxh_-8QDXpfB_lHc&quot;)) , (kv &quot;nhznkmw&quot; : (v (object &#123; (kv &quot;dlxblit&quot; : (v -1057613448.3847271)) , (kv &quot;ypush&quot; : (v 690139895)) , (kv &quot;cnjrimqsfmfi&quot; : (v &quot;sYV1jMW&quot;)) , (kv &quot;yoppewbiktn&quot; : (v 1209004459.892378)) , (kv &quot;wepojzvjmijt&quot; : (v -1466502462.9614203)) , (kv &quot;mrjponcdr&quot; : (v 1615448533.7058485)) , (kv &quot;upveq&quot; : (v (object &#123; (kv &quot;jjoynojpcx&quot; : (v &quot;Liy&quot;)) &#125;))) , (kv &quot;uhbrhfru&quot; : (v (array [ (v &quot;8JEkNS9XjGCuGxV-UYQr&quot;) , (v false) , (v &quot;WE1O1xKeDApdo1h&quot;) , (v &quot;0jGzqy2UL6jjel&quot;) , (v true) , (v -19734332) , (v -242040341) , (v -36045513.31575265) , (v true) ]))) , (kv &quot;zupetkvgd&quot; : (v (object &#123; (kv &quot;nwfja&quot; : (v &quot;rG&quot;)) , (kv &quot;oxtvcwrgzbc&quot; : (v &quot;jrGmsAV_7y8RGU&quot;)) , (kv &quot;geskyn&quot; : (v -1815196370)) , (kv &quot;fwbhfubc&quot; : (v -1370846829.5869296)) , (kv &quot;ylnkb&quot; : (v -511755975.7114426)) , (kv &quot;onpyyyoti&quot; : (v true)) &#125;))) &#125;))) &#125;)) , (v (object &#123; (kv &quot;kvprhn&quot; : (v &quot;1Ybfy76_3pVvA9xU3F&quot;)) , (kv &quot;mvbniporqrir&quot; : (v &quot;sFub&quot;)) , (kv &quot;umtteoyzzv&quot; : (v &quot;6_0DxfBfb3J40B2EL45&quot;)) , (kv &quot;jienbfqm&quot; : (v false)) , (kv &quot;wzduhawbdxh&quot; : (v (object &#123; (kv &quot;pzmcay&quot; : (v (object &#123; (kv &quot;jujqvgbspz&quot; : (v &quot;68_v&quot;)) , (kv &quot;fdiby&quot; : (v &quot;XGpGy_CNybTc8Kov-&quot;)) , (kv &quot;rfiwortnu&quot; : (v false)) , (kv &quot;pfeogfmv&quot; : (v -986394021.991955)) , (kv &quot;injpycoua&quot; : (v &quot;UhuULrD6YjpyPBgLot&quot;)) , (kv &quot;aportowxs&quot; : (v -301406610.412803)) , (kv &quot;vbpiffeqpsav&quot; : (v &quot;FbcFenbR&quot;)) , (kv &quot;evbkfj&quot; : (v -888951341)) , (kv &quot;qtfzemajl&quot; : (v &quot;iBp6pusTBjurx&quot;)) , (kv &quot;hkpxwoub&quot; : (v &quot;GYsZtov&quot;)) &#125;))) , (kv &quot;dflvr&quot; : (v (array [ (v &quot;2jVK4YED9bJwfpmeVMjB&quot;) , (v &quot;bUp6SgbV&quot;) , (v true) , (v &quot;o4hJF&quot;) , (v -910642896.9670054) , (v &quot;CC&quot;) ]))) , (kv &quot;razlmovqsiuc&quot; : (v 1343277490.3944185)) , (kv &quot;qhafjcift&quot; : (v -2092618184)) , (kv &quot;uwnzhv&quot; : (v (array [ (v false) , (v 2049897936.1204708) , (v -2102758834) , (v -546308487.584099) ]))) &#125;))) , (kv &quot;akwkkoda&quot; : (v (array [ (v true) , (v -1138132915) , (v 2066106072.8812897) , (v (array [ (v &quot;6jMXM2NHNPBIO9t7Tdd&quot;) , (v &quot;_xsk9Xqzj59IXUmIzg&quot;) , (v 349398901.40953594) , (v 1250083138) , (v &quot;itsea&quot;) , (v &quot;n&quot;) ])) , (v true) ]))) , (kv &quot;pedqmgazxwc&quot; : (v &quot;23vKSv5dHyONCQ0A&quot;)) , (kv &quot;kbtjil&quot; : (v (object &#123; (kv &quot;wddnd&quot; : (v 1957971779)) , (kv &quot;xbgel&quot; : (v (object &#123; (kv &quot;zuudlzhzlth&quot; : (v -282063310.2604387)) , (kv &quot;lwikuhlzixt&quot; : (v -820180212.3931726)) &#125;))) , (kv &quot;dizjuee&quot; : (v true)) &#125;))) , (kv &quot;jjhvhxucyt&quot; : (v (object &#123; (kv &quot;lxjwlnzgkcoq&quot; : (v false)) , (kv &quot;hazbbnknrt&quot; : (v (object &#123; (kv &quot;hjnuaaemr&quot; : (v &quot;M&quot;)) &#125;))) , (kv &quot;jcpsg&quot; : (v true)) , (kv &quot;hmfrqefj&quot; : (v (object &#123; (kv &quot;sstzntsmrhk&quot; : (v false)) , (kv &quot;ymufzyuumjxr&quot; : (v 1601488142)) , (kv &quot;pxllzni&quot; : (v -390280935.5047585)) , (kv &quot;nytye&quot; : (v true)) &#125;))) , (kv &quot;oyzsjztrltu&quot; : (v false)) , (kv &quot;qugxfiaemban&quot; : (v (object &#123; (kv &quot;blzzupbkbm&quot; : (v -2141244606)) , (kv &quot;clmhifbzfugt&quot; : (v -1407487167)) , (kv &quot;vrmkqosixcq&quot; : (v false)) , (kv &quot;lrifqtcpyk&quot; : (v -417542026.27023846)) &#125;))) , (kv &quot;aixnirite&quot; : (v false)) , (kv &quot;ghlpuzrc&quot; : (v 1478220491.0831888)) , (kv &quot;wlanv&quot; : (v -373831632.4243674)) , (kv &quot;mrogq&quot; : (v (object &#123; (kv &quot;osfyga&quot; : (v false)) , (kv &quot;aplxxftfj&quot; : (v -1834090421)) , (kv &quot;amxrdtsgt&quot; : (v &quot;Ve-y3_iQ07&quot;)) , (kv &quot;rejngucpw&quot; : (v 356119464)) , (kv &quot;nlwnnxs&quot; : (v true)) , (kv &quot;jjstbhtj&quot; : (v false)) &#125;))) &#125;))) , (kv &quot;xiuynavf&quot; : (v (object &#123; (kv &quot;kwtdk&quot; : (v &quot;8oJ&quot;)) , (kv &quot;podziuz&quot; : (v 375736466)) , (kv &quot;ejphlaxpuhs&quot; : (v (object &#123; (kv &quot;tupoha&quot; : (v 1145829112.756852)) , (kv &quot;rrxoc&quot; : (v &quot;M1g&quot;)) , (kv &quot;awawdsvhfx&quot; : (v &quot;3Z1QbWsL1&quot;)) , (kv &quot;dpfpvkhjl&quot; : (v true)) , (kv &quot;rtxhlsy&quot; : (v &quot;v5J5o&quot;)) , (kv &quot;nymoxuniym&quot; : (v &quot;i-brgNwzZ&quot;)) &#125;))) &#125;))) &#125;)) , (v &quot;tLyGkQ-Eoi6T2cJB7Xda&quot;) , (v true) , (v &quot;Nn2VG&quot;) , (v (object &#123; (kv &quot;cnngwkrou&quot; : (v 1906760023)) , (kv &quot;obbml&quot; : (v &quot;D&quot;)) , (kv &quot;mtjwjmkx&quot; : (v &quot;v14nSf6T42q0lmh6z3kb&quot;)) , (kv &quot;vgldrup&quot; : (v (object &#123; (kv &quot;apdsl&quot; : (v (object &#123; (kv &quot;cptovk&quot; : (v &quot;lPBzNP52ZPbhc&quot;)) , (kv &quot;ltgqrriay&quot; : (v &quot;fsHOoDK0f&quot;)) , (kv &quot;ikxknaj&quot; : (v true)) , (kv &quot;bmjogxhkkxk&quot; : (v true)) , (kv &quot;uwqdjqnav&quot; : (v true)) , (kv &quot;xkytyvkwmiyq&quot; : (v 1754520275.5236428)) , (kv &quot;rkdstbva&quot; : (v false)) , (kv &quot;awdnbxjxt&quot; : (v &quot;VSRA_3&quot;)) &#125;))) , (kv &quot;ynqhemulse&quot; : (v &quot;umYn&quot;)) , (kv &quot;qhsfmpmetk&quot; : (v &quot;6TokpvN&quot;)) , (kv &quot;tzfmbghtlc&quot; : (v (array [ (v true) , (v &quot;KMX4M8fY6O&quot;) , (v 912635995.4035354) , (v true) , (v false) , (v true) ]))) , (kv &quot;kkdozofvzevy&quot; : (v (array [ (v 1193743730) ]))) , (kv &quot;yzownwaqfbrx&quot; : (v -891364967)) , (kv &quot;ylohxwnsq&quot; : (v (object &#123; (kv &quot;okfnsbkeg&quot; : (v -1782592720)) , (kv &quot;yniav&quot; : (v &quot;P&quot;)) , (kv &quot;qdkwvlxbvfw&quot; : (v &quot;FiU2lFJqWwQ9Op&quot;)) , (kv &quot;hrztvz&quot; : (v &quot;7xY3WBSUfs7_0uynou07&quot;)) , (kv &quot;nbrkjlfhdbdo&quot; : (v true)) , (kv &quot;orlvxr&quot; : (v -1627651305)) , (kv &quot;umqrwzylbzu&quot; : (v -1833674567)) , (kv &quot;vsdoe&quot; : (v false)) &#125;))) , (kv &quot;mmvpuubkse&quot; : (v false)) &#125;))) , (kv &quot;cefldtbrdj&quot; : (v (array [ (v (array [ (v 1455050059) , (v -448469309) , (v &quot;P4BgnDkD6U-&quot;) , (v &quot;m38dpawqlpKyiJ5&quot;) , (v true) , (v -1822886985.4121122) , (v 1040331193) , (v 298184823.61547893) , (v &quot;1_J-itpqwMespEFs-EV&quot;) ])) , (v &quot;kuu_GrP6OV4&quot;) , (v &quot;0SWlGwTC&quot;) , (v false) , (v true) , (v (object &#123; (kv &quot;zitgiefkard&quot; : (v -988266938.0552318)) , (kv &quot;bnnjkcdsvxjx&quot; : (v 1255201311)) , (kv &quot;jyzfcqc&quot; : (v &quot;1NbeYTo-HftdWt1ixL&quot;)) , (kv &quot;yliigpfrr&quot; : (v false)) , (kv &quot;vtrgjhtqkmqd&quot; : (v false)) , (kv &quot;knbkxniy&quot; : (v &quot;L1shmB3uWym&quot;)) , (kv &quot;yzzrhu&quot; : (v -603055240.7698349)) , (kv &quot;iqjdp&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;bncwf&quot; : (v false)) , (kv &quot;uxaaythjsjh&quot; : (v -150293170.71045366)) , (kv &quot;kdqlfmbvfk&quot; : (v false)) , (kv &quot;baxbvtmqf&quot; : (v &quot;dU&quot;)) &#125;)) , (v (array [ (v -1713786130.764592) , (v false) , (v -1364927791.078211) , (v 1387141885.5667107) , (v &quot;oFATTbPr6cG4m6SVCD&quot;) , (v -2009087135) , (v 294071956) ])) ]))) &#125;)) , (v (array [ (v true) ])) ]))) , (kv &quot;vzaicd&quot; : (v (object &#123; (kv &quot;utpni&quot; : (v -16066763.353920365)) &#125;))) &#125;)) , (v 1077396070) , (v &quot;W01jK60jC&quot;) , (v (array [ (v false) , (v (object &#123; (kv &quot;cbqhfqnlej&quot; : (v true)) &#125;)) , (v -827310531.2640669) , (v &quot;7fP&quot;) , (v 556757334.8359073) , (v -38426244.86487788) , (v (object &#123; (kv &quot;budovqcdmn&quot; : (v (array [ (v (array [ (v -57389439) , (v (object &#123; (kv &quot;ptgfid&quot; : (v &quot;3KQB47aqHLNdaH2r&quot;)) &#125;)) , (v &quot;uG732oGEwMv9R0&quot;) , (v (array [ (v &quot;Vlrl3Yr61Gh-&quot;) , (v false) , (v &quot;U5-Xk9nhRyONv5PTge&quot;) , (v 1248817679) , (v true) , (v &quot;C42GNV-Z&quot;) , (v true) ])) , (v &quot;86ebzE_X3Iwxj4xCz&quot;) , (v -1633033609) , (v (object &#123; (kv &quot;zbbhid&quot; : (v &quot;xFGm3jj-CK6Y&quot;)) , (kv &quot;ibbbkfocaklk&quot; : (v 1249592427)) , (kv &quot;bmdpltxpvqfq&quot; : (v -1779057643)) , (kv &quot;eyoglejjgpr&quot; : (v -389184317)) , (kv &quot;mrlyllftspd&quot; : (v &quot;UzZsGh&quot;)) , (kv &quot;owywb&quot; : (v &quot;_JoBT&quot;)) , (kv &quot;xyimobonl&quot; : (v 1070667744)) , (kv &quot;fjdghnll&quot; : (v &quot;et8v14bi3&quot;)) , (kv &quot;fdjmgcyyj&quot; : (v true)) , (kv &quot;ygthooxnv&quot; : (v true)) &#125;)) ])) , (v (object &#123; (kv &quot;oqjhfr&quot; : (v (object &#123; (kv &quot;uazjlson&quot; : (v true)) , (kv &quot;nhywesq&quot; : (v &quot;g-zlYY_yQ5Lda&quot;)) &#125;))) , (kv &quot;irrlwt&quot; : (v -1985598547.1135154)) , (kv &quot;zxofsqqem&quot; : (v (object &#123; (kv &quot;ycozgli&quot; : (v &quot;ZzsK&quot;)) , (kv &quot;gxwqoy&quot; : (v 519428523)) , (kv &quot;bgamxbxp&quot; : (v 433974054.2914206)) , (kv &quot;xqgjrkyzagd&quot; : (v true)) , (kv &quot;wspgwktgr&quot; : (v false)) , (kv &quot;wezmgi&quot; : (v &quot;90QAFOLS&quot;)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;bqloryrfkopi&quot; : (v (object &#123; (kv &quot;keklzzpyjpfw&quot; : (v false)) , (kv &quot;caqulyqmprqg&quot; : (v &quot;3yUgtiLM&quot;)) , (kv &quot;yawwtntshwix&quot; : (v -1885992334)) , (kv &quot;jrepeyjfumx&quot; : (v -1224180243.4474022)) , (kv &quot;armowm&quot; : (v true)) , (kv &quot;iqxxgv&quot; : (v &quot;v&quot;)) , (kv &quot;onnbzzejd&quot; : (v -189138775)) &#125;))) , (kv &quot;hjorfosbd&quot; : (v (object &#123; (kv &quot;ntyjc&quot; : (v &quot;C5fW7ln8uCB5S&quot;)) , (kv &quot;bwqryc&quot; : (v false)) , (kv &quot;evjqaue&quot; : (v false)) , (kv &quot;ygurkh&quot; : (v &quot;HWvyD3MbgFn&quot;)) , (kv &quot;ksxml&quot; : (v 1021137441.607147)) , (kv &quot;vahxtquwlsen&quot; : (v -470432463.3972441)) , (kv &quot;yrredhr&quot; : (v &quot;61rWHK6J2GPYcEK&quot;)) , (kv &quot;vheen&quot; : (v true)) &#125;))) , (kv &quot;fsdarrsesige&quot; : (v (array [ (v &quot;O&quot;) , (v 1182592021) , (v &quot;O&quot;) ]))) , (kv &quot;ayfsyc&quot; : (v (object &#123; (kv &quot;lenwzltc&quot; : (v -941073757)) &#125;))) &#125;)) , (v false) ]))) , (kv &quot;hplplqcdzqal&quot; : (v (object &#123; (kv &quot;gbijemwbxet&quot; : (v (array [ (v &quot;NnLDAsNaOO08kxv&quot;) , (v (array [ (v false) , (v 556692365) , (v -1416645037) ])) , (v (array [ (v true) , (v &quot;hr6QhVZ&quot;) , (v 268262946.22777912) , (v 2104821327) , (v &quot;CGZ8j&quot;) ])) , (v (array [ (v 1210770221) , (v &quot;Z2gkUpO&quot;) , (v true) , (v &quot;nOfq903P_NL&quot;) ])) , (v (array [ (v &quot;nSCiLKZc&quot;) , (v -1198740564.2583942) , (v &quot;Y&quot;) , (v &quot;hf&quot;) , (v false) , (v 1251575349) , (v true) , (v true) , (v 1449034.7918200144) ])) , (v false) ]))) , (kv &quot;xpkdqexgmlbv&quot; : (v (object &#123; (kv &quot;soefhqpc&quot; : (v (object &#123; (kv &quot;kzhigadt&quot; : (v &quot;BuuYMytN9Vl&quot;)) , (kv &quot;wbeqlxjnzqzn&quot; : (v 165079385.2466143)) , (kv &quot;ohgkwkszcq&quot; : (v false)) , (kv &quot;clibxgxoitue&quot; : (v true)) , (kv &quot;bhwidjch&quot; : (v &quot;C2T76Ss&quot;)) &#125;))) , (kv &quot;utsskzgim&quot; : (v 2076412583.3556616)) , (kv &quot;yqqpyfzm&quot; : (v &quot;RUhRgiLHiVXFSn113hO1&quot;)) , (kv &quot;mkirpkxz&quot; : (v (object &#123; (kv &quot;uhwvbp&quot; : (v false)) , (kv &quot;nvsowsqvazhv&quot; : (v true)) , (kv &quot;djcyw&quot; : (v -1070645977.4664952)) , (kv &quot;ggkpn&quot; : (v &quot;1Omp&quot;)) , (kv &quot;gplkwtfkq&quot; : (v &quot;NiHeP&quot;)) , (kv &quot;hodqhwq&quot; : (v &quot;p75YxCkV89C_zZA1t9&quot;)) , (kv &quot;sujduaz&quot; : (v false)) , (kv &quot;kevghj&quot; : (v &quot;7uhNFz&quot;)) &#125;))) , (kv &quot;ngxqmczniy&quot; : (v (array [ (v false) , (v false) , (v true) , (v false) , (v false) , (v 146693885) , (v &quot;ztTgI6YI5CM&quot;) ]))) &#125;))) , (kv &quot;plaorotrach&quot; : (v (array [ (v &quot;GquEj0UXV-5zyVEFhR6&quot;) , (v false) , (v &quot;7YEyqych3SigTp&quot;) , (v &quot;F1mjfZPyz1vMBdC_&quot;) , (v &quot;S1G1jDcK6dkJkHK&quot;) , (v (array [ (v true) , (v -416776065.2971898) , (v &quot;cVD-JpAJLz91jiqXC&quot;) , (v false) , (v 1375847198) , (v &quot;xZosw&quot;) , (v &quot;i74upCH&quot;) , (v true) , (v false) , (v &quot;rccDj6U40rAbCu1K8k&quot;) ])) , (v (array [ (v true) , (v 1587478821) , (v &quot;c2E08p0CT9QMfdpJtE&quot;) , (v false) , (v 206551355.82749113) ])) , (v -1108683454) ]))) , (kv &quot;lmuow&quot; : (v &quot;_tshJZHGp_azi1Ot&quot;)) , (kv &quot;ofrqnleqtm&quot; : (v (array [ (v false) , (v (object &#123; (kv &quot;wephmoqcw&quot; : (v false)) , (kv &quot;reybjf&quot; : (v false)) , (kv &quot;xgajeqpnamr&quot; : (v false)) , (kv &quot;jvccgqcd&quot; : (v false)) , (kv &quot;waavqwacntn&quot; : (v -1152169988.9064116)) , (kv &quot;cjbrq&quot; : (v &quot;KX3sEswYrm&quot;)) , (kv &quot;nqpcnsmlnse&quot; : (v true)) , (kv &quot;vizoyko&quot; : (v false)) , (kv &quot;qneuvptfx&quot; : (v &quot;oHNt_fdTX_sq&quot;)) &#125;)) , (v true) , (v (object &#123; (kv &quot;wwgumlmzr&quot; : (v &quot;Tx_&quot;)) , (kv &quot;ojonzmrmghm&quot; : (v 568490381)) , (kv &quot;uibhwv&quot; : (v true)) , (kv &quot;mbjvlqre&quot; : (v &quot;oAZbEvm8a3J-eL&quot;)) , (kv &quot;fbvzekz&quot; : (v &quot;IeDqqze7jm1Ko&quot;)) , (kv &quot;wakjzfkeyr&quot; : (v false)) &#125;)) ]))) , (kv &quot;whouqjsku&quot; : (v (object &#123; (kv &quot;hmtixwqygp&quot; : (v (array [ (v -1284831823.7414596) , (v false) , (v 400621272) , (v -751044386) , (v false) ]))) , (kv &quot;dgccfywdt&quot; : (v &quot;g1S1sjeF-GJJdoqqfpA&quot;)) , (kv &quot;cmxaigbl&quot; : (v 1365826255.5225384)) , (kv &quot;dnzrxegamrpl&quot; : (v (object &#123; (kv &quot;cqgefysqdtrk&quot; : (v true)) , (kv &quot;yrhlat&quot; : (v &quot;6tnStQxFjfd&quot;)) , (kv &quot;yejgbnbpq&quot; : (v false)) , (kv &quot;kozzouxqi&quot; : (v false)) &#125;))) , (kv &quot;kglgtplx&quot; : (v false)) , (kv &quot;seonfkw&quot; : (v false)) , (kv &quot;guyyksbay&quot; : (v (array [ (v 1670129075.3426) , (v &quot;SjCzrprT&quot;) , (v -1735322052) , (v true) , (v -674811093.686591) , (v false) , (v false) ]))) &#125;))) , (kv &quot;vyatenhz&quot; : (v true)) , (kv &quot;egfslqsy&quot; : (v 1718713030.6296952)) , (kv &quot;gpeskzqkz&quot; : (v (array [ (v (array [ (v -60156127.02353801) , (v -1156142254) , (v &quot;258RagfH&quot;) , (v false) , (v 222823135) , (v false) , (v &quot;T88c&quot;) , (v true) ])) , (v &quot;ply1DGEuxKcisHgG&quot;) , (v false) , (v false) , (v 21823195) , (v false) , (v (array [ (v &quot;mpmsHwI0C&quot;) , (v true) , (v &quot;mQdAC2tJ8OzhRoiAez&quot;) , (v &quot;3atqInQvo7hoY&quot;) , (v -1091083781.7179978) , (v false) , (v false) ])) , (v false) , (v true) , (v 1220906796) ]))) , (kv &quot;nnoaolusj&quot; : (v (object &#123; (kv &quot;mcbylytfda&quot; : (v &quot;2mI3JlkNuVrmxIz&quot;)) , (kv &quot;nfcyklbted&quot; : (v (object &#123; (kv &quot;ogxsirswpu&quot; : (v &quot;Tpo&quot;)) , (kv &quot;tldslvl&quot; : (v false)) , (kv &quot;kfmiizr&quot; : (v &quot;THN9fpWfs3cGj8J&quot;)) , (kv &quot;oxlqyrrqatz&quot; : (v true)) , (kv &quot;fdmyjtklvcce&quot; : (v false)) , (kv &quot;utdlym&quot; : (v 1130696574)) , (kv &quot;ogprpoxdc&quot; : (v 1314471890.0004387)) , (kv &quot;xehhv&quot; : (v -1823524873.949718)) , (kv &quot;xjbyneoljr&quot; : (v &quot;jJoBK&quot;)) &#125;))) , (kv &quot;melrhi&quot; : (v true)) , (kv &quot;szdti&quot; : (v &quot;YzWZl0iPDU7D0l2-9VQM&quot;)) &#125;))) &#125;))) , (kv &quot;uyrsyzqrjn&quot; : (v true)) , (kv &quot;mmbabyw&quot; : (v (array [ (v &quot;-PDzWm_Qde4me&quot;) , (v (object &#123; (kv &quot;arobguyi&quot; : (v (object &#123; (kv &quot;ctcwt&quot; : (v true)) , (kv &quot;oobbpurhf&quot; : (v false)) , (kv &quot;oywkrncphnqt&quot; : (v true)) , (kv &quot;jicrxebpkf&quot; : (v false)) , (kv &quot;osjwsdfkgwwd&quot; : (v &quot;FjKsCAjSrUyBMU&quot;)) , (kv &quot;ugcdu&quot; : (v -1751628122.3069346)) , (kv &quot;kzqfmwz&quot; : (v 392802621.353155)) , (kv &quot;urckxyz&quot; : (v false)) , (kv &quot;rtcxhdr&quot; : (v true)) , (kv &quot;cxozzzrwu&quot; : (v 690611330)) &#125;))) &#125;)) , (v (object &#123; (kv &quot;uvhztpycb&quot; : (v (array [ (v false) , (v -304433342.9855737) , (v -1986253929.8862252) , (v -73607687) , (v &quot;kyzqt87osn5hyQR9HeRX&quot;) ]))) , (kv &quot;xgekwkvfayup&quot; : (v (object &#123; (kv &quot;xvyorm&quot; : (v 2045045163.3581913)) , (kv &quot;pqfrmhjvi&quot; : (v false)) , (kv &quot;kswvahn&quot; : (v 1089734225)) , (kv &quot;vuktsgzg&quot; : (v false)) , (kv &quot;mchuzoercdh&quot; : (v true)) , (kv &quot;rjjnnxcyx&quot; : (v true)) , (kv &quot;spthk&quot; : (v &quot;Q2YZx&quot;)) , (kv &quot;xorbqrjmf&quot; : (v true)) &#125;))) &#125;)) , (v (array [ (v false) , (v false) , (v true) , (v -475759322.3544179) , (v (array [ (v &quot;HI9Qx3IdOP7QQWig&quot;) , (v 1387099373.9838986) , (v &quot;5mHxhkqMcMa5Q&quot;) ])) , (v &quot;CEytjHH8sxNC4w&quot;) , (v (object &#123; (kv &quot;gdfuiagfdypl&quot; : (v -910792105.0630586)) , (kv &quot;mpjeyhtuvaag&quot; : (v -1318142963)) , (kv &quot;owngfvjsz&quot; : (v -469788864.5288309)) &#125;)) , (v (array [ (v &quot;f8ImiaW&quot;) , (v false) , (v 1853180246) ])) , (v (array [ (v &quot;IzdYW2uFt7TDjo&quot;) , (v true) , (v -573205362) , (v &quot;4OH3nWRKg3&quot;) , (v false) , (v &quot;dsMxjYE6I&quot;) , (v &quot;52LP3_fwGITbgW4&quot;) ])) , (v (object &#123; (kv &quot;ebhsaxl&quot; : (v -1913244253.2224777)) , (kv &quot;tliyeaa&quot; : (v -1240143201.3531358)) &#125;)) ])) , (v (object &#123; (kv &quot;wnvgkpsvx&quot; : (v &quot;gUrxc&quot;)) , (kv &quot;tyocbzcpard&quot; : (v &quot;eyts&quot;)) , (kv &quot;mepfh&quot; : (v &quot;nNc1zmeZXO&quot;)) , (kv &quot;fskaz&quot; : (v &quot;3kDCe2pvi0kpLbAz56R6&quot;)) , (kv &quot;zpevom&quot; : (v (array [ (v -1996751885.9953284) , (v &quot;I3hQ3kRNps&quot;) , (v false) , (v &quot;FvFqU2lxUe-&quot;) , (v &quot;n7jGEK177falIk&quot;) , (v -1470190804) , (v false) , (v &quot;fm1uO&quot;) ]))) , (kv &quot;tjvxbeszrqr&quot; : (v true)) &#125;)) , (v (array [ (v (array [ (v 1740178023) , (v &quot;uWgDlekQPurMw1O&quot;) , (v false) ])) , (v (array [ (v &quot;q2B9IP6e&quot;) , (v -81926863.60805717) , (v false) , (v true) , (v &quot;6TDt&quot;) , (v -80356296.84130147) , (v false) ])) , (v (object &#123; (kv &quot;wowwxpshbqzv&quot; : (v false)) , (kv &quot;koosyguunza&quot; : (v &quot;M3TN9D8_&quot;)) , (kv &quot;chqfpqsjxy&quot; : (v false)) , (kv &quot;bktornpi&quot; : (v true)) , (kv &quot;rphogpy&quot; : (v &quot;x9&quot;)) , (kv &quot;haujyaucxzei&quot; : (v false)) , (kv &quot;iwlcdg&quot; : (v -610753749.6952323)) , (kv &quot;kceybqeah&quot; : (v -1853805624.88945)) , (kv &quot;ybeyu&quot; : (v 1699710361.70739)) &#125;)) , (v (object &#123; (kv &quot;gnstbh&quot; : (v -737756022)) , (kv &quot;pilzbxk&quot; : (v 664143014)) &#125;)) ])) , (v false) , (v (array [ (v false) , (v false) , (v &quot;pLtn&quot;) , (v true) , (v false) , (v (object &#123; (kv &quot;gpmostloq&quot; : (v -865152099)) , (kv &quot;zafrmnmghkl&quot; : (v 218863841)) , (kv &quot;cmtsvjrvakan&quot; : (v -162135924)) , (kv &quot;muepjxz&quot; : (v &quot;sFfBgE8Bx0cobPV&quot;)) , (kv &quot;drcmqklwgct&quot; : (v false)) , (kv &quot;zmpsnm&quot; : (v false)) , (kv &quot;eauvud&quot; : (v false)) , (kv &quot;ryfwqqlmmd&quot; : (v false)) , (kv &quot;kwnoppbpnsmb&quot; : (v &quot;Mmjmd&quot;)) &#125;)) , (v (array [ (v false) , (v &quot;92uA7ai&quot;) , (v &quot;r&quot;) ])) ])) ]))) , (kv &quot;sayfqsfq&quot; : (v false)) , (kv &quot;fnbjr&quot; : (v &quot;QK6Hr70vh&quot;)) &#125;)) , (v false) , (v true) ])) , (v -472853662.4448299) , (v true) ]))) , (kv &quot;cxkhqrw&quot; : (v &quot;0nGMZPXIra&quot;)) &#125;))) , (kv &quot;imfuplhgiwhk&quot; : (v (object &#123; (kv &quot;qjhvib&quot; : (v &quot;8IyQoO&quot;)) , (kv &quot;orsrzxgtsb&quot; : (v 1292823399)) , (kv &quot;mbynbhot&quot; : (v (object &#123; (kv &quot;pyuli&quot; : (v false)) , (kv &quot;heqddbzbnyp&quot; : (v true)) , (kv &quot;wttmwcvzviy&quot; : (v (array [ (v &quot;Bp&quot;) , (v (array [ (v (object &#123; (kv &quot;jnchantot&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;dkptm&quot; : (v 354362032)) , (kv &quot;anturqnxcz&quot; : (v true)) , (kv &quot;gzigxkct&quot; : (v true)) , (kv &quot;olrwarm&quot; : (v &quot;RaRSSwTQbjZk_3&quot;)) , (kv &quot;kdexbf&quot; : (v -1134244493)) , (kv &quot;cfvjxfmer&quot; : (v false)) , (kv &quot;fiwjnl&quot; : (v 439148158.9310619)) , (kv &quot;etztrahkyo&quot; : (v (object &#123; (kv &quot;gmerwjgedjjp&quot; : (v (array [ (v -1538417527.5285602) ]))) , (kv &quot;ptotwujtafjw&quot; : (v &quot;nGUMOZukFDWlZndwX3Px&quot;)) , (kv &quot;vmtjndm&quot; : (v -1479864667.9845788)) , (kv &quot;vmocikpz&quot; : (v -1287967612.8102922)) &#125;))) &#125;)) , (v true) , (v (object &#123; (kv &quot;nxcdq&quot; : (v (array [ (v (array [ (v &quot;b&quot;) , (v 656668891) , (v &quot;DqpijPJrVDlettaC&quot;) , (v &quot;_o&quot;) , (v -1919447255) , (v true) ])) , (v -1617755327) ]))) , (kv &quot;kmdcansh&quot; : (v 1208614146)) , (kv &quot;zdyedhs&quot; : (v (array [ (v &quot;D215CQQhHgeToBnY5&quot;) , (v &quot;qpRT_ea9M2Y8dqHLB&quot;) ]))) , (kv &quot;hepxsrse&quot; : (v (array [ (v (array [ (v -1942979877.238561) , (v &quot;Ps&quot;) , (v true) , (v -375007148.0616856) , (v 1954411601) , (v false) , (v &quot;rxdRh4Ke0Jxy_7U&quot;) ])) , (v (array [ (v true) , (v -1390161506.4010656) , (v true) , (v &quot;zk75J&quot;) , (v &quot;PhGQjT9F&quot;) , (v 1105317246) , (v true) , (v &quot;av2Lyc41Jin1NVTHk&quot;) , (v 1662949484) , (v &quot;PDpMkpvt&quot;) ])) , (v (array [ (v -710870718.6919433) , (v &quot;_MpcASWA3El_OZvl&quot;) , (v &quot;UqwPY2G__A0ONRITdC&quot;) , (v &quot;2AK6YQvILMYW2rgMtIR0&quot;) , (v 46781308.50995451) , (v -1082934575.6245272) , (v &quot;-e&quot;) , (v false) , (v true) ])) , (v (array [ (v false) , (v 2134628024.4587543) , (v true) , (v &quot;jx8v&quot;) , (v false) , (v 1876930590) , (v false) , (v &quot;5KM2ugF9PI6J&quot;) ])) , (v false) , (v -107392713.44453588) , (v &quot;R6VUhikWLVMZm&quot;) ]))) &#125;)) , (v 1259697074.6462932) , (v (array [ (v (object &#123; (kv &quot;toglnt&quot; : (v (object &#123; (kv &quot;iwopo&quot; : (v &quot;89251xnQhx&quot;)) , (kv &quot;ktfzttpzwx&quot; : (v -2037447591)) , (kv &quot;awabvkytkjv&quot; : (v &quot;YLVCGCnrkBio-tw08&quot;)) &#125;))) , (kv &quot;iuynmtt&quot; : (v &quot;SjTUgd9cOctE3p&quot;)) , (kv &quot;wwuur&quot; : (v &quot;zoHNg&quot;)) , (kv &quot;naebrmmoqxy&quot; : (v true)) , (kv &quot;crqov&quot; : (v (object &#123; (kv &quot;rxpqw&quot; : (v &quot;ckVaikc&quot;)) , (kv &quot;megplgvw&quot; : (v -2044893926)) , (kv &quot;wngyaxjp&quot; : (v -1084465958.3196049)) , (kv &quot;fwbtypgo&quot; : (v false)) , (kv &quot;bbsev&quot; : (v &quot;H&quot;)) , (kv &quot;ybjakrcecaq&quot; : (v true)) &#125;))) , (kv &quot;onougn&quot; : (v false)) , (kv &quot;rvnkzpn&quot; : (v (object &#123; (kv &quot;nnhqip&quot; : (v &quot;kLn8_&quot;)) , (kv &quot;ypjkwlj&quot; : (v 312424844)) , (kv &quot;enlhpfmv&quot; : (v -1197259304.2705925)) , (kv &quot;bbbwj&quot; : (v -2103946056.6571527)) , (kv &quot;grspouef&quot; : (v true)) , (kv &quot;lftutyui&quot; : (v &quot;b0PuyT&quot;)) , (kv &quot;jgjmy&quot; : (v true)) &#125;))) , (kv &quot;pjnyqabebgj&quot; : (v -132314178)) , (kv &quot;ishqpf&quot; : (v (object &#123; (kv &quot;wvakwucx&quot; : (v -581471498)) &#125;))) , (kv &quot;gzugdiaiuzbm&quot; : (v &quot;zXkp&quot;)) &#125;)) , (v false) ])) , (v &quot;ndf5&quot;) , (v (array [ (v (object &#123; (kv &quot;rhhtwrmgxpm&quot; : (v &quot;G05e&quot;)) , (kv &quot;jlvvkykv&quot; : (v (array [ (v &quot;u1T32x5lX8&quot;) , (v -1723766686) , (v &quot;YcMY-5&quot;) , (v true) ]))) , (kv &quot;bchwdl&quot; : (v (array [ (v &quot;STwyDc9UBPpgP2&quot;) , (v 27612460.880995132) , (v -1652795712.0669658) , (v &quot;7&quot;) , (v false) , (v &quot;1&quot;) , (v &quot;tZbb52BQiOtetF2i5DC&quot;) ]))) , (kv &quot;rpjrt&quot; : (v (object &#123; (kv &quot;xinthorjjycb&quot; : (v &quot;_OH_v&quot;)) , (kv &quot;frluklvyhky&quot; : (v 830881421)) , (kv &quot;tmhcb&quot; : (v &quot;mxRhLgfO95eJr8KWu&quot;)) , (kv &quot;qqgub&quot; : (v false)) , (kv &quot;lamcddumvcdj&quot; : (v 772457539.076735)) &#125;))) , (kv &quot;rwcpyksy&quot; : (v true)) , (kv &quot;cnqrfff&quot; : (v -805142592)) &#125;)) , (v (array [ (v (array [ (v true) , (v true) , (v -1162363347) , (v &quot;KLmDqQ8JQdY_RMFU_Y6&quot;) , (v 1178945129) , (v 61689325) ])) , (v (array [ (v &quot;TbENO_SJGY1&quot;) ])) , (v false) , (v &quot;aTA0o&quot;) , (v true) ])) , (v -940004004.1262656) , (v &quot;2k03aErkURB35&quot;) , (v (object &#123; (kv &quot;kknkgfju&quot; : (v (array [ (v &quot;laBs&quot;) , (v &quot;vTFKxgam85NCqhAo8K&quot;) , (v -475924513) , (v 184668320) , (v false) ]))) , (kv &quot;aulnznc&quot; : (v 113528287)) , (kv &quot;tevgjxwb&quot; : (v &quot;9LxCWMVXgCcMF&quot;)) , (kv &quot;rtzdfm&quot; : (v &quot;-DmxhNABw&quot;)) , (kv &quot;embamnrk&quot; : (v &quot;mB1O-9o&quot;)) , (kv &quot;zpmgmpnwm&quot; : (v (array [ (v &quot;_5rVeU9QiHvDGhk&quot;) , (v -612755838) , (v 125373001.04389116) , (v &quot;5mPTgVVg7Bx1&quot;) , (v &quot;x8MHWsUH9jcGOsLRmp&quot;) , (v -15465413.268159417) ]))) , (kv &quot;yrpqz&quot; : (v (array [ (v &quot;-LIrzGi7fqt2UB&quot;) , (v 2033025113) , (v &quot;yC-M1CN81KVnoca&quot;) , (v -1106104252) , (v -135012063.9122812) , (v true) , (v -413068327) , (v &quot;H4Y4XgCeoOzeJUeQg8&quot;) , (v false) ]))) , (kv &quot;evzhnw&quot; : (v (object &#123; (kv &quot;zeysamvpz&quot; : (v &quot;Yw21jiAggY&quot;)) , (kv &quot;zyyjwubdxh&quot; : (v true)) , (kv &quot;xkgtwplyr&quot; : (v -57063511)) , (kv &quot;xtvbaeifqsmo&quot; : (v &quot;XFSdi2xc9qjBZbZ41&quot;)) , (kv &quot;wnadryw&quot; : (v 609575955.6189022)) , (kv &quot;vohkke&quot; : (v 582675731.4728001)) , (kv &quot;ffklqfuivwt&quot; : (v false)) , (kv &quot;ifllziw&quot; : (v -1177380009)) , (kv &quot;ypozo&quot; : (v &quot;sdkhyu7jc&quot;)) &#125;))) &#125;)) , (v 478423673.68756074) , (v &quot;B72BJ&quot;) , (v 829828879.8784968) , (v (object &#123; (kv &quot;kgkikoha&quot; : (v (object &#123; (kv &quot;bcwphdckdlwh&quot; : (v true)) , (kv &quot;emvvveoys&quot; : (v -2030390705)) , (kv &quot;xrxnryc&quot; : (v &quot;ebHwERrLsUWu0NxSot&quot;)) , (kv &quot;hrxndfq&quot; : (v -790783922.0827127)) , (kv &quot;wxfdmkqxpq&quot; : (v false)) , (kv &quot;ornjg&quot; : (v false)) &#125;))) , (kv &quot;cgqbbt&quot; : (v -1518335512.8801334)) , (kv &quot;quhfxhzsk&quot; : (v (array [ (v &quot;HzczrLh&quot;) ]))) &#125;)) ])) ])) , (v false) ]))) , (kv &quot;zcsetlfwxlnx&quot; : (v (array [ (v 1036878338.6690581) , (v false) , (v false) , (v true) , (v &quot;5aP1eI&quot;) , (v (array [ (v false) , (v true) , (v (array [ (v (array [ (v &quot;F&quot;) , (v 1532511229.641169) , (v (object &#123; (kv &quot;wizbakib&quot; : (v false)) , (kv &quot;xgaoizblpzr&quot; : (v &quot;eMbJwLH2nI6&quot;)) , (kv &quot;gpwxicl&quot; : (v false)) , (kv &quot;xelico&quot; : (v &quot;hHzceP4lmFNs3bTE&quot;)) , (kv &quot;yalkt&quot; : (v -203739565.87083414)) , (kv &quot;bvghrpukae&quot; : (v 219631202.77167004)) , (kv &quot;zdtumhfuj&quot; : (v -563301966)) , (kv &quot;nquwcxwwre&quot; : (v 2790463.0823330586)) , (kv &quot;itjqbgjahhzj&quot; : (v 751477177)) , (kv &quot;cpzfhpj&quot; : (v &quot;3CC800xm4LCDxgLbr&quot;)) &#125;)) , (v (array [ (v true) , (v &quot;4j342VV&quot;) , (v -2077186047.8497515) , (v 433417780.1889818) , (v &quot;4q74TZD&quot;) ])) ])) , (v (array [ (v (array [ (v &quot;SKPf5dW&quot;) , (v &quot;mODk2gOwrIszHbXUVHM&quot;) , (v -979092430.6236501) , (v false) , (v 1298694799.159157) , (v &quot;zadZW35S5_qot51A&quot;) , (v false) , (v &quot;4X1RI_EvY4PTNGer&quot;) , (v true) ])) , (v &quot;FGFpxHpdiyeRbsx&quot;) , (v &quot;WaWEADS1sZu7kHC&quot;) , (v (object &#123; (kv &quot;iervlaz&quot; : (v true)) , (kv &quot;cwlfmjqc&quot; : (v false)) , (kv &quot;mosmkbjfwxue&quot; : (v true)) &#125;)) , (v (object &#123; (kv &quot;gunkrlk&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;bdbydt&quot; : (v 810975758.0239561)) , (kv &quot;kkebtjhi&quot; : (v &quot;Qc3_YAYA&quot;)) , (kv &quot;zwnpqeuv&quot; : (v -1597741863.6257539)) , (kv &quot;ipvanzyzegfo&quot; : (v true)) , (kv &quot;pizmypnb&quot; : (v &quot;-Y8iN&quot;)) , (kv &quot;ddyzzitpecyl&quot; : (v false)) &#125;)) , (v (object &#123; (kv &quot;evguirlfrw&quot; : (v 6902238)) , (kv &quot;sniasfbuy&quot; : (v -1886034340)) , (kv &quot;poagxgzze&quot; : (v true)) , (kv &quot;vrgtwdhwdm&quot; : (v false)) , (kv &quot;itjifqxs&quot; : (v false)) , (kv &quot;tqgkcj&quot; : (v -1454367790.0141711)) , (kv &quot;utvdeilhkia&quot; : (v false)) , (kv &quot;aznyl&quot; : (v -794902496.7805009)) &#125;)) , (v &quot;HA&quot;) , (v &quot;64mLzi-irAC9&quot;) , (v (object &#123; (kv &quot;zcogirhp&quot; : (v false)) , (kv &quot;qcgciuaug&quot; : (v false)) , (kv &quot;fbyzzeeljlgx&quot; : (v -1660114409)) , (kv &quot;jtubxxouxm&quot; : (v &quot;ciEnWlu_nOQq2ST8DDNb&quot;)) , (kv &quot;czufm&quot; : (v 1410826284)) , (kv &quot;cmojidpsux&quot; : (v true)) , (kv &quot;bsuiz&quot; : (v false)) , (kv &quot;gwlwg&quot; : (v &quot;fT2VuDcYd&quot;)) , (kv &quot;utwalathu&quot; : (v false)) &#125;)) ])) , (v true) ])) , (v &quot;16Xuyxsvo98Xpr5&quot;) , (v (array [ (v (object &#123; (kv &quot;agatfvvzlnqd&quot; : (v false)) &#125;)) , (v &quot;ihf&quot;) , (v &quot;C7ajidJwC1k&quot;) ])) , (v &quot;P&quot;) , (v true) , (v &quot;2PP&quot;) , (v -1758883893.530147) , (v (object &#123; (kv &quot;gqjvcqbz&quot; : (v (object &#123; (kv &quot;ledqsixls&quot; : (v false)) , (kv &quot;cpordcfft&quot; : (v (object &#123; (kv &quot;qcvueckjkg&quot; : (v -1912923674.4505131)) , (kv &quot;cntoptj&quot; : (v 1246388686.2979558)) , (kv &quot;nzzdv&quot; : (v 1964609976.9675019)) , (kv &quot;mqlyzhf&quot; : (v &quot;BznBrvdJrDfyk4iIlKf&quot;)) , (kv &quot;ybnew&quot; : (v false)) , (kv &quot;aegjv&quot; : (v &quot;b5FnWeCt&quot;)) , (kv &quot;ertceb&quot; : (v false)) , (kv &quot;lfctgivmgmjq&quot; : (v false)) , (kv &quot;niyup&quot; : (v -1986763492)) &#125;))) , (kv &quot;tpoczjrid&quot; : (v &quot;3uunbkskIBR79N7&quot;)) , (kv &quot;vakbs&quot; : (v false)) &#125;))) &#125;)) ])) ]))) , (kv &quot;wlxgxjojeegi&quot; : (v &quot;7TusG-XZok2HFplW5hqC&quot;)) , (kv &quot;dfmsypja&quot; : (v (array [ (v (array [ (v &quot;h&quot;) , (v 263274239) , (v (object &#123; (kv &quot;mghfubmhcivc&quot; : (v &quot;YtZ2vi82RDul4-Mw0&quot;)) , (kv &quot;vfanmgmrp&quot; : (v 442896172.497882)) , (kv &quot;jkugariehmb&quot; : (v (array [ (v (object &#123; (kv &quot;nmxvdp&quot; : (v true)) , (kv &quot;gltsojvostq&quot; : (v 1550063322.9341767)) , (kv &quot;invhrepwod&quot; : (v false)) , (kv &quot;mwentmmhww&quot; : (v false)) , (kv &quot;kqcozqgrrcno&quot; : (v &quot;Zrpy&quot;)) &#125;)) , (v false) , (v false) , (v -1971785328.170233) , (v -2071173730.4198024) , (v (object &#123; (kv &quot;jrqeblzy&quot; : (v false)) , (kv &quot;fcjfyfz&quot; : (v 785019292)) , (kv &quot;yzatqgib&quot; : (v &quot;BWzF&quot;)) , (kv &quot;uygewmjxnm&quot; : (v &quot;uVyjIP&quot;)) , (kv &quot;gxmkxd&quot; : (v -860976350.3925823)) , (kv &quot;fxbihpq&quot; : (v &quot;JsS&quot;)) , (kv &quot;phkkf&quot; : (v false)) &#125;)) ]))) , (kv &quot;kaaohawstio&quot; : (v 201298083)) , (kv &quot;goicss&quot; : (v -653255185)) &#125;)) , (v true) , (v true) , (v true) , (v &quot;4bil-&quot;) ])) , (v (object &#123; (kv &quot;zsdsrbwbe&quot; : (v (object &#123; (kv &quot;xsrmhf&quot; : (v 1683366574.3039901)) , (kv &quot;rfhuzwc&quot; : (v true)) , (kv &quot;ovbwegarxku&quot; : (v 2125173230.9514544)) , (kv &quot;gwjpcxtzzwu&quot; : (v false)) , (kv &quot;abjxgq&quot; : (v &quot;RqF41LrVzx0-&quot;)) , (kv &quot;hkrbjn&quot; : (v (object &#123; (kv &quot;lmnbomjzsn&quot; : (v false)) , (kv &quot;chdalnkjiyw&quot; : (v (array [ (v &quot;ksvYQbXJI&quot;) , (v true) , (v &quot;p4oZyxWjj0la&quot;) , (v false) ]))) , (kv &quot;jhanewllpua&quot; : (v &quot;RVpCArjzU&quot;)) , (kv &quot;vpkbunqug&quot; : (v &quot;s6-NMf5XTbee6ffRz&quot;)) , (kv &quot;egmmsb&quot; : (v (object &#123; (kv &quot;erhzsjw&quot; : (v &quot;y9xYHj&quot;)) &#125;))) &#125;))) , (kv &quot;pettg&quot; : (v 993396776.5461912)) &#125;))) &#125;)) , (v &quot;m6&quot;) ]))) &#125;))) &#125;))) , (kv &quot;muqqk&quot; : (v &quot;hlvXeAS56cq2Tse9xWFO&quot;)) , (kv &quot;ceuamw&quot; : (v 1524060976)) &#125;))) &#125;))) , (kv &quot;iuzdaqhynbn&quot; : (v -370371371)) &#125;) &lt;EOF&gt;) &#123; &quot;jiblisca&quot;: true, &quot;untqhvhmvm&quot;: &quot;xgQwUW39uJ5ypfQpOKRY&quot;, &quot;jnjibur&quot;: 268757502, &quot;lqpfrifpio&quot;: [ &quot;NQRib805YL0XJn&quot;, [ [ false, [ -1580033815.1137862, [ &quot;yHv&quot;, false, &quot;udDTLXohYfPu-PyG&quot;, 1332240391 ], 518407756.13681334, &#123; &quot;ctuysyrz&quot;: [ true, &quot;0NFL&quot;, &quot;jec6pJw&quot;, &#123; &quot;cwqfrhum&quot;: -783147957.874186, &quot;xtubtlfckuao&quot;: -368517848.71591294, &quot;ywrahr&quot;: &quot;MIR&quot;, &quot;jfaehyg&quot;: true, &quot;fbzoxj&quot;: &quot;2ntMW&quot; &#125;, 172065695, [ false, -1637596578, &#123; &quot;iwxowaesjgo&quot;: [ &quot;k-zAI&quot;, 2057666098, &quot;zWQEyHPRNR8vuy-zN&quot;, false, -1106132231.291643, true, true ], &quot;zcohkx&quot;: -1858649698.353925, &quot;rnwnjtlpwbmr&quot;: -1975656507.3243446, &quot;nhirxtpj&quot;: [ true, &quot;Y&quot;, &quot;z6YpDrySLrmdCp2HmJg&quot;, &quot;8w&quot;, 1445567342, true, 93210936.93854937, false, true, true ], &quot;yszjc&quot;: &quot;HdN9_KP3tONwG&quot; &#125;, &#123; &quot;uwnxwxsu&quot;: [ 201196508, 291579062 ], &quot;wstwlmtelch&quot;: -398145147, &quot;ofbncxfxtv&quot;: false, &quot;wtpznvkz&quot;: &quot;gVjYLVfaUhKzH&quot;, &quot;cavizm&quot;: -962506056, &quot;tqxbvlrj&quot;: true, &quot;bkscbyjpvvxv&quot;: &quot;ePDg&quot;, &quot;ehjnbj&quot;: &quot;OAq&quot;, &quot;aahdlcb&quot;: [ 1525086695.729831 ] &#125;, &quot;v&quot;, &quot;63h1&quot;, 803121240.8479614 ], &quot;KRzBaY&quot;, true ], &quot;ymzew&quot;: -1558737088, &quot;nuzkphun&quot;: true, &quot;dmnasuc&quot;: 625973610.6807092, &quot;ziawhxcnji&quot;: [ 572866483 ], &quot;yxfkhyze&quot;: [ 815113315.8538294, -2129300018.6161578 ], &quot;pmszful&quot;: true, &quot;xngtw&quot;: true, &quot;eujepvqlv&quot;: &#123; &quot;lspcfzthqdnt&quot;: [ false, &#123; &quot;dthfxdx&quot;: false, &quot;noxfk&quot;: &quot;tJ&quot;, &quot;yiditdjduxgf&quot;: 1004394045.6336272, &quot;qcrcgr&quot;: [ -1267017025.0959017, false, &quot;klMrb2Y39rWkr9DJ&quot;, &quot;NuR-M1USRv4w75MUbf&quot; ], &quot;akmiakh&quot;: &quot;VRyHYn2Ro-RjXK&quot;, &quot;ecjfyqg&quot;: &quot;6B-oZO6N9rrIe&quot;, &quot;dirvsino&quot;: true, &quot;szvdicetf&quot;: &quot;WfHXmN9FzD&quot;, &quot;wfynw&quot;: &quot;xaL&quot;, &quot;jjcblbklo&quot;: -1107045875 &#125;, -765645410 ], &quot;hzqdqjvikdnw&quot;: [ 1256577984.9352612, &quot;DS&quot;, &quot;R_7TYx1AUChH&quot;, &quot;E9KOhaCLscFOF4clmR&quot;, &quot;H0lI3&quot;, 610691776, -663230838, -1898258501.1059694, &#123; &quot;lcqglazzgh&quot;: 1662343864.886904, &quot;jncbdhbq&quot;: [ -49003190.47029225, &quot;TAjz2-nQwbKCiOdyY&quot;, false, true ], &quot;rkxio&quot;: &quot;X3MUIWd2i&quot;, &quot;yeizypbptk&quot;: &#123; &quot;wbpsmoblfpqe&quot;: 1471474993, &quot;eqfji&quot;: false &#125;, &quot;kawpokrxba&quot;: &#123; &quot;mtstcu&quot;: true, &quot;ckzjwty&quot;: false, &quot;cawmkcykq&quot;: &quot;ZD-1Fw&quot;, &quot;rfsjii&quot;: -645766911.695778, &quot;vomilk&quot;: true, &quot;ciyaq&quot;: &quot;1yDUk4icGIGEc8K3BrV&quot;, &quot;ztaclc&quot;: false, &quot;uymrarwyedn&quot;: &quot;voTvbsP-&quot;, &quot;xupizdfxume&quot;: -1307890946.6241786 &#125;, &quot;wdiyepddnnvx&quot;: &quot;uQ&quot;, &quot;yzkhc&quot;: &#123; &quot;mnonwq&quot;: true, &quot;qurwnvmj&quot;: -1632566694, &quot;uttimeumn&quot;: true, &quot;fkquaxdszzj&quot;: false, &quot;dvgooxczock&quot;: false, &quot;znzlahdch&quot;: &quot;EyVdBdJnuxv0jWLT_E&quot;, &quot;lynmveaeze&quot;: true, &quot;qcnqohu&quot;: &quot;95uLav3ofxkF&quot;, &quot;vsephhopgqjs&quot;: &quot;IPqxrwtQWzYNAaq&quot;, &quot;jekejmmktn&quot;: true &#125;, &quot;pqliuno&quot;: [ &quot;SMx_OFql6pfYbRpD4&quot;, -2037343674, 1745220421.0971427, true ], &quot;bmonpddi&quot;: true, &quot;kxkyymmje&quot;: 620374657 &#125; ], &quot;zrhvmxdyyjh&quot;: &#123; &quot;vzgdb&quot;: &quot;fQ2&quot;, &quot;dkkjfan&quot;: 2093289195.6157095, &quot;hxilf&quot;: &quot;15wq_4A88P-q6abYokW&quot;, &quot;ztwygkl&quot;: [ &#123; &quot;yilav&quot;: 295047340, &quot;pkrkp&quot;: false, &quot;rywas&quot;: &quot;QAq5V&quot;, &quot;uipzrbdkksk&quot;: true, &quot;tktlhhhduv&quot;: &quot;5hLUAGKF3O7&quot;, &quot;ruzukp&quot;: 783216430.8641344, &quot;tjldf&quot;: &quot;K&quot;, &quot;myjbnf&quot;: false &#125;, &quot;cg_6&quot;, [ &quot;xquwXCnMV&quot;, true, &quot;6_fSikQUx6pc3i62&quot;, &quot;mmt07av8&quot;, true, &quot;oaoqX9eH6nC1&quot;, false ], &quot;brCwv2S98_7wwo&quot;, false, false, &#123; &quot;qvbgrnkmi&quot;: false, &quot;mqnnvbrt&quot;: true, &quot;begfthdohs&quot;: -230310597.31990305, &quot;gdegfp&quot;: false &#125;, &quot;rJg5&quot;, [ &quot;IRJsoCgVm&quot;, &quot;QsZ79UIkJX5I&quot;, 1277666032.555033, false, &quot;0Pi8Vb75nuJo9i5Kx&quot; ], &quot;2fWQ&quot; ], &quot;gdplat&quot;: &#123; &quot;zdwwkejjdegs&quot;: &#123; &quot;kjyhiaw&quot;: &quot;S&quot;, &quot;hzcejeqddbm&quot;: 1782552098, &quot;twqqtdjr&quot;: false, &quot;mjvfelcjco&quot;: true &#125;, &quot;bjilbcvg&quot;: &quot;yi22px&quot;, &quot;pqanpuep&quot;: &quot;JuTxsd&quot;, &quot;kwtoarc&quot;: &#123; &quot;mqpwehfex&quot;: false, &quot;nyatqfpf&quot;: -81214563, &quot;wemrjgsu&quot;: 1186467801.6164417, &quot;qlukyu&quot;: &quot;Q89w4U&quot; &#125;, &quot;ydhacbl&quot;: &quot;7_cNUVl-8xm7eO&quot;, &quot;bwclbjew&quot;: true, &quot;strtrchvyi&quot;: &#123; &quot;bhrmamzzk&quot;: -1741870274, &quot;ieyjnxxzo&quot;: &quot;GnLM&quot;, &quot;vhrkkfvpbu&quot;: true, &quot;hwnyrvvyc&quot;: 18148794, &quot;yygbbosckcpj&quot;: false, &quot;vmlbef&quot;: &quot;mx7kKizeTbV6UAgM&quot;, &quot;llfdpofuyc&quot;: &quot;SI&quot; &#125;, &quot;araoghzad&quot;: &quot;vh5bpGHVrRFHe6jkslA4&quot; &#125;, &quot;ewxetvji&quot;: -1915194954.9288518, &quot;vygteulutuia&quot;: -687082470.461731, &quot;sylvtbpyxpv&quot;: [ true, &quot;Bd1Lbo9HrsosJz&quot;, true, 1661056706.9351947, &#123; &quot;napojkmbmtnb&quot;: &quot;K8qhBgVf2&quot; &#125;, &#123; &quot;tdwgduamqzjr&quot;: &quot;5soO7VdYymt&quot; &#125;, [ &quot;ZT6Lu6v5sA6sxm5Jgc&quot;, true, false, -1331227053, true, -1626944534.757287, &quot;E081lwl_F&quot;, &quot;AY1X5J&quot; ], &quot;Mqwrzvv3-4f&quot;, true ], &quot;cjewk&quot;: &#123; &quot;jyegnpvxongm&quot;: [ &quot;du-JO_h3ha-cL&quot;, true, 2119526563.8454704, &quot;vQlj-_bKKSg&quot;, true, -1855657706, &quot;shPIK0Qd3kKw&quot;, -1840121992, &quot;MC4bIFkG&quot;, false ], &quot;nlwdkmaqrow&quot;: &#123; &quot;wlbqzzaid&quot;: false, &quot;pxnkojphosvs&quot;: false, &quot;ruhfnxziqfqc&quot;: false, &quot;addalck&quot;: false, &quot;ljlprzknucu&quot;: 1753085112.9196386, &quot;wltodjniw&quot;: &quot;j7&quot;, &quot;wnzvrm&quot;: -1637888671, &quot;vvxjzie&quot;: false &#125; &#125;, &quot;szpmjnzv&quot;: &quot;wdGmYh6EvoX0NgFkCrkD&quot; &#125;, &quot;mxihkwltfsbo&quot;: [ &#123; &quot;lbcxcgmi&quot;: &#123; &quot;kyhwprnlaykk&quot;: -1654721763, &quot;bekokzcfci&quot;: -2006218079.6375644 &#125;, &quot;xfyzqnzj&quot;: -1101032517.9761262, &quot;cqjrtvyqk&quot;: 1963190051, &quot;wyunlrkugl&quot;: -18149228, &quot;rizbrtqhgp&quot;: -327426495.8731129, &quot;ugwabes&quot;: &#123; &quot;iydrlbh&quot;: true, &quot;uuexfax&quot;: false, &quot;iycxiey&quot;: false, &quot;tctxoyuqud&quot;: true, &quot;hwxdp&quot;: 1436591181, &quot;kqtofejlzqk&quot;: true, &quot;nxkhgpt&quot;: true, &quot;kshhle&quot;: &quot;D-7d3SjgYxwe&quot;, &quot;pyonwhiwxs&quot;: &quot;UwDWYhFLAmE&quot;, &quot;hnzptg&quot;: 17851658.762328025 &#125;, &quot;pvwjohqqv&quot;: &#123; &quot;bskechbkgsj&quot;: false, &quot;vmondcksu&quot;: true, &quot;zzzqwthqz&quot;: true, &quot;qtvwjxgi&quot;: 735586632.2417802, &quot;tpeszlntwc&quot;: &quot;nfMhA&quot;, &quot;vducyzcxr&quot;: 1258096315.6944892, &quot;qubdbxmj&quot;: false, &quot;ggjdqysfbl&quot;: true, &quot;yfszvziw&quot;: false &#125;, &quot;ijjmzrikfod&quot;: true, &quot;jzlbbzu&quot;: [ 1263784951.5696201 ] &#125;, &#123; &quot;nmcfopyjjgek&quot;: &quot;VmV4m2XTbl2Q&quot;, &quot;rahbuqez&quot;: &quot;VG5zjBMUrlYSiE1Q&quot;, &quot;gjmgvfxy&quot;: -1098931132, &quot;rlxmdruhfa&quot;: -1566201025, &quot;bypbzzlkdda&quot;: 794168717, &quot;sseovyfgmim&quot;: 1625400066 &#125;, [ [ false ], &quot;7s&quot;, false, -1792686772 ], &quot;LcQMp&quot;, &#123; &quot;eyskoaiclyrp&quot;: true, &quot;ykvckqzt&quot;: [ true, 456824446.2293131, false, -194213144, &quot;-0FK8cZ&quot;, &quot;Vs9pqD&quot;, 40955994.64801259, &quot;22O_pduKVdJNjK&quot; ], &quot;pbcwlrrd&quot;: [ &quot;7CIUVS&quot;, 830635977, &quot;zQgvevNKzJu4J7G1QOD&quot;, &quot;Fy587cYzxdGeHp&quot;, true, false, false, &quot;jHHEiRm1XDip812ay&quot;, &quot;QnJEnGKRWbV2UfV1W2&quot;, false ], &quot;zycngzbnkhjy&quot;: &#123; &quot;qveirmselnlr&quot;: false, &quot;evxpwcjqewr&quot;: -1036352108, &quot;vsdyhn&quot;: 1812991518, &quot;sfbamr&quot;: 823258991.8101388, &quot;ecdbxut&quot;: 628749189, &quot;kstdpuardsp&quot;: false, &quot;wvzjhks&quot;: &quot;ft-8wgPHQBUAdH&quot;, &quot;kubndyydkez&quot;: false &#125;, &quot;ukaira&quot;: &quot;drHL&quot;, &quot;vubyzwj&quot;: &#123; &quot;vyfvwnrhbrx&quot;: true, &quot;tsctapcrvsr&quot;: -1542183906, &quot;wdhbubeacsxq&quot;: &quot;F8F26oXlr-sWjbo8d8sL&quot;, &quot;zxzfhcpdvkld&quot;: false, &quot;mhbbn&quot;: false, &quot;lpqsvxjy&quot;: true, &quot;jvumeskjakwo&quot;: &quot;9t8TDE1cRD&quot;, &quot;hcxjdwthfx&quot;: -2123335432.551466, &quot;kcnrcjvcg&quot;: &quot;HsOu&quot;, &quot;vnbdjdormw&quot;: &quot;pZlFuTOHYPun0PBquau&quot; &#125;, &quot;jvpcmje&quot;: [ -1287661073.8969119, -1746956894.5312994, false, false, -545292372, 301226574.6635491, &quot;mZmwhtjFKAmjbc0H&quot;, true, 1243514255.4264624, &quot;CIlmMi3_OpKE&quot; ], &quot;bardgjjvw&quot;: &#123; &quot;owoutcbzxw&quot;: true, &quot;helht&quot;: -2029186276, &quot;ndiege&quot;: -1770369600.9380581, &quot;ocfmcz&quot;: &quot;UG0EKrZj8OHvj&quot;, &quot;bkrdqcwrsy&quot;: false &#125;, &quot;tayncq&quot;: -54301328.77438324, &quot;qklilfdlqxe&quot;: &#123; &quot;ocslcoybsgw&quot;: true, &quot;whdqqqkzk&quot;: &quot;GGNYDPm6mG&quot;, &quot;wbfyotuusoxl&quot;: 638734799 &#125; &#125;, &#123; &quot;disbiih&quot;: false, &quot;filrn&quot;: true, &quot;knoyfaafb&quot;: -95015850.7195931, &quot;snfohgsazpbm&quot;: &#123; &quot;aomgjb&quot;: &quot;-T9VijaYOtERd2or2&quot;, &quot;lriqgm&quot;: &quot;UBjV&quot;, &quot;srdrt&quot;: false, &quot;hjylsqnvnrtx&quot;: 1329372693, &quot;reiabljj&quot;: false &#125;, &quot;fdyrtpjx&quot;: [ false, 729402067 ] &#125;, &#123; &quot;rwamjrihx&quot;: [ &quot;mze0hyu&quot; ], &quot;vcupnfbzrvt&quot;: &quot;PIfgD&quot;, &quot;dasvddzwmy&quot;: &quot;yeqIvyBzrV&quot;, &quot;sbnqmmiieuo&quot;: [ &quot;KEP6ZemQnPJLO_&quot;, -213839080.27558124, true, -778141096.7149704, -511285001, true, true, -1409391923.8947365, true, false ], &quot;dtdrecwqgx&quot;: &quot;YTxIK6tkL&quot;, &quot;recwbj&quot;: 180381864, &quot;jtriyomlywu&quot;: &quot;_z&quot;, &quot;rlbzpfilgom&quot;: 1892960222.0466895, &quot;saaharnhz&quot;: &#123; &quot;qfqlbiqbetwt&quot;: &quot;2KEKdjOK&quot;, &quot;ijabzieic&quot;: &quot;V8PHcdPI30XMnB&quot;, &quot;sjkjh&quot;: -1883729491.4951746, &quot;trqvcpo&quot;: false, &quot;nzkvqmu&quot;: true, &quot;yscdg&quot;: 231881939, &quot;elikaopxgf&quot;: -360707300.6376251 &#125;, &quot;wtuznwkbuw&quot;: true &#125;, &#123; &quot;jthninrugrt&quot;: -554168391, &quot;glmua&quot;: &#123; &quot;vjrluklddk&quot;: 63540986, &quot;jomqpysixg&quot;: false, &quot;nqbfunvcrr&quot;: true, &quot;gsvuhfyacz&quot;: false, &quot;lreqv&quot;: -165167614.71331477, &quot;trrnmzgccql&quot;: 492353243, &quot;rdfjuaulma&quot;: false, &quot;ifcehyrig&quot;: -1934268518.2169318, &quot;pwmvpwjtxvfi&quot;: &quot;1gr3v3UsM-7daf3gjn&quot; &#125;, &quot;uzgkoqf&quot;: &quot;R5UxS&quot;, &quot;eajujwab&quot;: [ true, &quot;V2sCG41NhOk2FqCW3ydN&quot;, 772174639.8927528, &quot;CF8DA&quot;, &quot;4&quot; ] &#125;, &quot;O&quot;, [ [ &quot;lbV&quot;, false, 1761418502, &quot;J5o&quot;, &quot;lFlfxQ6eti20Sn46Im&quot; ], false ] ], &quot;aapkn&quot;: &quot;FS&quot;, &quot;yakzjr&quot;: &quot;tYFqG_4p&quot;, &quot;ydipfdn&quot;: [ &quot;X126_Lh_GrVm_9BjjQn&quot;, 1982430595.9558337 ], &quot;dgnugtfz&quot;: &#123; &quot;cnsymzwrbzs&quot;: [ [ &quot;FuoQUHG&quot;, -1965512875, &quot;UN-Qe7TPH6XQ&quot; ], -994417255, -1894175665, [ &quot;_0vHi7-&quot;, &quot;IP&quot;, &quot;G-ZwEtL_Swukzbss&quot; ], -72472922, [ true, true ], [ 595142552 ], [ &quot;_dNzcv0Ye6JmRw5-kmm&quot;, false, 803637134 ], [ 403663563, false, false, true, 1539934510, false ] ] &#125;, &quot;vyozbnytgq&quot;: false, &quot;vmjfnbxgzqy&quot;: &#123; &quot;btfeibdi&quot;: [ true, true, &quot;AC&quot;, &#123; &quot;bynbgimwepl&quot;: false, &quot;lhjyzo&quot;: false, &quot;zixvof&quot;: true, &quot;klzndhe&quot;: &quot;Co6lO5eIUqC&quot;, &quot;yprrdryjihf&quot;: 484385304.78962207, &quot;rexzifyeguus&quot;: false, &quot;dhozwsytvyct&quot;: true &#125;, true, 27404723 ] &#125; &#125; &#125;, 158972698.9406029 ], &quot;Mr6rqIFaH17EnLvu&quot;, 1338384529.814062, -1636767176, &#123; &quot;pzkjyu&quot;: false, &quot;ueubzcmqh&quot;: &#123; &quot;biuipaxhanzb&quot;: false, &quot;kbserqp&quot;: &#123; &quot;oydasspqt&quot;: [ [ &quot;CQ5iiFKtfc1l&quot;, &quot;_K1bMqx&quot;, &#123; &quot;ljprmrcjyo&quot;: &quot;ihOplWOF&quot; &#125;, -1964518653 ], &quot;dcfjFjlHnYDT&quot;, false, 1174820705, 122437011, [ true, -1449565413, true, false, &quot;s7y_buobO&quot;, true ], [ true, &quot;TWtB&quot;, &#123; &quot;vbskgcgc&quot;: true, &quot;ecxzbqzjoisp&quot;: true &#125;, &quot;I0vBXudksTxYYdGrX&quot;, &quot;cGHh91NLPq2&quot; ], &#123; &quot;sncqalbxjo&quot;: false, &quot;qxayehqxvwtj&quot;: true, &quot;fvzbcsddcrhj&quot;: 895435215, &quot;xyaiodw&quot;: &#123; &quot;yeltzzrqsu&quot;: -341870729.76989406, &quot;dygnwsse&quot;: -1970524495.648176, &quot;rwcnfhvgeev&quot;: 567814262.1028857, &quot;lsdxckjtn&quot;: &quot;KwESkLiT&quot;, &quot;wgqqtvvsyl&quot;: -145830435, &quot;svgfuyw&quot;: &quot;ql7fCJ8qiQ3kwFRmxTt0&quot; &#125; &#125; ] &#125;, &quot;xkdzgn&quot;: &quot;3Fj&quot; &#125;, &quot;axjuu&quot;: [ &quot;L6mLO6&quot;, -984167684, &quot;r8d5irHpRTUGlgZFBV&quot;, &quot;aBs&quot;, &quot;nC9vCHizPaEpFIN&quot;, &#123; &quot;dvaddzrssd&quot;: -332596958.5065037, &quot;jvuvcggsiuz&quot;: [ &quot;iEpMrVrAh5&quot;, true, &#123; &quot;miaqwko&quot;: [ true, -425357929, -718503805, true ], &quot;aacsmj&quot;: &quot;gZR&quot;, &quot;wsbpvzryqs&quot;: false, &quot;hogonno&quot;: false, &quot;udbss&quot;: &#123; &quot;pjfbfxplyub&quot;: false &#125;, &quot;tgagmd&quot;: true, &quot;aygjxes&quot;: -943541326, &quot;zxsalzbtll&quot;: -1074059072.7494488, &quot;nxtnbmx&quot;: [ true, 1326456217.8351061, 1908692479, &quot;i5ynrh-DkeNbo2B&quot;, true ], &quot;lscjmbl&quot;: 603502062 &#125;, &#123; &quot;xoujsra&quot;: &#123; &quot;hyqhknbwym&quot;: 1767784907.1715238, &quot;gqmsf&quot;: true, &quot;pnfqie&quot;: true, &quot;nyztyfdxjvpi&quot;: &quot;Q55TNjWjG3LxuNdk&quot;, &quot;ivsawtxvi&quot;: &quot;NVWQq&quot;, &quot;rnnspuv&quot;: &quot;i7iuwnYdGXRStQ7GV&quot;, &quot;qxwbp&quot;: &quot;e7Dr&quot; &#125;, &quot;dqcwa&quot;: false, &quot;dpaxxlta&quot;: &quot;ZXHSJ&quot;, &quot;yzyoounvkcka&quot;: &quot;utuPPU_5t9zQeWXup6&quot;, &quot;ahxdyvawbq&quot;: false, &quot;cnnezrdjrhzq&quot;: [ false, true, &quot;K-5EW0Zor4&quot;, -845220584.7628871, false, &quot;YeEnz2&quot;, false ] &#125;, true ], &quot;hjtwdnosi&quot;: [ &#123; &quot;jdtgbqfq&quot;: 517958728.23404163, &quot;klhihmk&quot;: &#123; &quot;osmezf&quot;: -766134215.4151874 &#125;, &quot;wzkmsjtekvn&quot;: &quot;bh1AwJpPzCqBQ&quot; &#125; ], &quot;wlxhccizmnut&quot;: 1969942335, &quot;qkdtuuhd&quot;: -1811752052.4570003, &quot;elfpdyaon&quot;: [ true, false, &#123; &quot;fdchdjvjyodw&quot;: &#123; &quot;oralim&quot;: &quot;9M2Pa2l-Q&quot;, &quot;gpwpbvam&quot;: 494893201, &quot;wqyac&quot;: 77549214, &quot;pychhvs&quot;: true &#125;, &quot;okiolaiit&quot;: 2007046929, &quot;zeeagtzix&quot;: &quot;7-t&quot;, &quot;lbcmjkzt&quot;: -1140684548.1196556, &quot;stkwdr&quot;: [ -1895721210, &quot;-ZlAi_NLXQzx-SC&quot; ], &quot;bkjdr&quot;: -1296869073, &quot;cwwazppmd&quot;: &quot;t6cN&quot;, &quot;qqntqvcnlvu&quot;: &quot;VZLtmUX&quot; &#125;, [ [ &quot;BJFdD&quot;, false, &quot;230Sh-o6qSTHSpU&quot;, &quot;mdq&quot;, true, -238599023, &quot;NpYLonTALC2ry-po3O&quot;, &quot;HuMixBZzUNdV7yfr0r&quot;, false, 1124954267.4665008 ], &#123; &quot;rhevoja&quot;: 842369568.7730334, &quot;aebclq&quot;: &quot;mhwa_Wz4Mjppt&quot;, &quot;jcggtyupxv&quot;: 508271088, &quot;bkfzoy&quot;: true, &quot;stmjeifimow&quot;: &quot;0-&quot;, &quot;otwbs&quot;: &quot;crDswkDn7&quot;, &quot;jfzjjhhqdd&quot;: true, &quot;xoymz&quot;: 1900874218.7417052 &#125;, &#123; &quot;szyzuzf&quot;: false, &quot;fxgjp&quot;: &quot;joyOj15y6M0T&quot; &#125;, -1452828620, true, false, [ &quot;ctfp0fihku9zAsWc_&quot; ] ], &#123; &quot;guwclyincg&quot;: [ true, -1217454902.6520271, true, -648358208, true, false ], &quot;armydhvhw&quot;: &#123; &quot;snfjlkvjop&quot;: 725387053.5577027, &quot;dayajp&quot;: -748339341.6063951, &quot;akyvnyunjt&quot;: &quot;PqPpsm&quot;, &quot;wqrwdw&quot;: true, &quot;xnvmwjysszn&quot;: &quot;EvY5GpX&quot; &#125;, &quot;bfecyzscbczk&quot;: [ -1639613318, true, true, &quot;bNvz6rOIZ&quot;, 2089236185.921759, &quot;4ELy466&quot; ], &quot;ofbuk&quot;: 1449933815.0459795, &quot;ruxsrt&quot;: [ -1976758461, &quot;_ZF&quot;, 714248652, &quot;W&quot;, &quot;p-3Wp4G_UZGWoK3&quot;, 1258556787, true ], &quot;tndcfmcqdx&quot;: &quot;K&quot; &#125;, false ], &quot;hlmuizwob&quot;: &#123; &quot;yaowq&quot;: -1786397961.4578035, &quot;kcwoetn&quot;: &#123; &quot;nmozc&quot;: [ &quot;2E8cXJ41pTj_N&quot;, &quot;xdv--kVvJ9N11q&quot;, -538635596, true ], &quot;wezpvmjejzi&quot;: [ true, true, 1288583316.9998584, false, 153036486 ], &quot;lhjtfiycpu&quot;: [ 231703163.15602082, -1348377166.3101032, true, &quot;fpgmgOrz&quot;, false, true, -1949734625, &quot;_YoH7Pt1r2I4EH&quot;, &quot;ncMol&quot;, &quot;PNE7A-aA4ZMbnlvjmZ3&quot; ], &quot;hjemkcivclk&quot;: true, &quot;wfmgj&quot;: 1819818165.573923 &#125;, &quot;ykngsqgret&quot;: [ 653782882.5065004, [ &quot;ik38S5Fjpmw3tqLmOUq&quot;, true, &quot;XW5iomVzGT03aM&quot;, 171795291.3036271, -536213500.7132387, 2016044858, true, &quot;67k5HcM8MvrG4W3g&quot;, false ], [ &quot;WUT&quot;, -1129141369.7042432 ], true, true, true ], &quot;wewhrodks&quot;: &quot;pZq9-igQ8duez-2ljx&quot; &#125;, &quot;gtqsa&quot;: &#123; &quot;jmvxdhijcto&quot;: false, &quot;lcmda&quot;: &quot;WjOrJ2LYfzKQGJo5&quot;, &quot;wfalxb&quot;: &#123; &quot;ughqdafcs&quot;: -9495910, &quot;brlppwzlnmgg&quot;: 402164226.45842004, &quot;ropwwyjawgzz&quot;: &quot;iik70xIeU&quot;, &quot;aszjnb&quot;: 1956944183, &quot;yvbqnnbcwrd&quot;: -1321431854.5694437, &quot;szaksjoreg&quot;: -1762152526.1502628, &quot;xwbexpijou&quot;: -76361776, &quot;qllee&quot;: [ &quot;7a369Qx4&quot;, &quot;eaiH3&quot;, -1463573779.8968208, 1859529275, true, &quot;Wc_PmMxb-VjHxPF&quot;, -1394802728.9850135 ] &#125;, &quot;hyrgp&quot;: [ [ false, true, true, false, 1600525728.510348, 1477670049.6301804, -1408927035.2439978 ] ], &quot;ekmzpr&quot;: 947171221 &#125; &#125;, true, true, &#123; &quot;hfbnayomqxb&quot;: &quot;-tEG9L_MT-lVxhAp4o2h&quot;, &quot;ttnwbajxwmid&quot;: [ [ &quot;SLOITZF8LLfe&quot;, &quot;rEZwSKxZVl6M1fTnIfGw&quot;, &#123; &quot;oeury&quot;: false, &quot;txlxscs&quot;: true &#125;, &#123; &quot;yylyftlwcv&quot;: false, &quot;scfkla&quot;: 1112458523, &quot;lkkni&quot;: &quot;tw&quot; &#125;, true, [ 1721570529.5780563 ], [ &quot;UnaDzaQWp1Hp&quot;, &quot;HC55U8kL9R77jPE2E8&quot;, -31553003.19174124, -1776708183.9907858, false ], [ 740509758.3785872, &quot;myszDs6&quot;, &quot;nY7KhaNOOU7WKBc&quot;, &quot;5Aad&quot;, &quot;RcPhKjHEOl1dmv_&quot; ], &#123; &quot;rzxyelmc&quot;: true, &quot;orfoytwdmg&quot;: -1804838882, &quot;iobeqrngumas&quot;: &quot;BIMsvb-hJ6X2hdu&quot;, &quot;esxrchfadzoq&quot;: -249608084.84166723, &quot;cxerxqunemc&quot;: true &#125; ], -1646832468.5599566, -1764572259.4452567, 1988156300.5752835, 1666583997.4309957, true, [ &#123; &quot;ampbux&quot;: &quot;OJmVnnfy&quot;, &quot;rlutd&quot;: false, &quot;bdwfmqvh&quot;: &quot;bMx840MVei&quot;, &quot;abfqowxspnc&quot;: -1293686463 &#125;, true ] ], &quot;waubayani&quot;: &quot;mWUmNyQ-NLiWnxFKH&quot;, &quot;xeezilvjywzs&quot;: [ &quot;ulnCAb4OH9l&quot;, [ -1664174944.4062052 ] ], &quot;xjjsm&quot;: -102469492, &quot;uzheaxk&quot;: &quot;jKoaTZNvx4TMw&quot; &#125;, [ -911939157, -302078829 ] ] &#125; ], &quot;iVaLppCSz&quot;, -1142231380.7056024, &#123; &quot;usvvvhc&quot;: &#123; &quot;fqzkuz&quot;: [ &#123; &quot;pzlnvdwu&quot;: &quot;hzFIgAK&quot;, &quot;olymzwfwvtt&quot;: [ -266530806.77854586, 1833340364.8589609, [ false, 276067264, -782030817.2674904, &quot;f_pgkvk-&quot;, [ &quot;9Xf&quot;, true ] ], -596590212.4880091, [ &quot;VmouSaZPJd&quot;, 2012501615, [ &quot;K5Q0NTy-I5&quot;, -1812848914.9299462, 2138029277.70359, false, -457066934.88024026, true, -1623167784.2607136, false, &quot;EhfGlbMmjlVBx3mjJls&quot;, &quot;u3shbj0cF&quot; ], false, -953170684.1374441, true, &quot;NNmzk-HUBFZWs&quot;, &quot;4DRdfhexuYiWS08FjRdn&quot;, 1838005167.2895813, true ], -782348539.4130992, [ [ 1522396998, true, &quot;XG5lZSp8B&quot;, -201812936.45375398, &quot;5RQ3&quot; ], true, [ &quot;FZ&quot;, -1768876312.0571415, &quot;z7fvJ9f8JC2WkvO1Aucz&quot; ], 283632164.9722192, false, &#123; &quot;duyrblc&quot;: -1820386759, &quot;nkgixl&quot;: &quot;yr5rcS9FF3LXKaUr&quot;, &quot;tmioklyyupt&quot;: &quot;jpDzAd6i&quot;, &quot;kxswmphsw&quot;: &quot;rt6Xw&quot;, &quot;wdrqcaqdvin&quot;: &quot;Dq0qja1WuOGG5wA&quot;, &quot;jnbwuaqxalyo&quot;: &quot;3ed&quot;, &quot;wyuweibddof&quot;: false, &quot;bwkzkmnjqx&quot;: &quot;e_xakKp&quot;, &quot;thpqrdhxevkx&quot;: &quot;lHjkQwI2&quot; &#125; ], 1125496477.5141318 ], &quot;prlxvt&quot;: 1938487863, &quot;wwjiarxv&quot;: [ &quot;JAN-2CCVY&quot; ], &quot;wgsbtd&quot;: -1127624748.385507, &quot;ipmup&quot;: 1600003972.0067897, &quot;reijfcfevbn&quot;: &quot;r&quot; &#125;, &quot;SJTEA000f&quot;, &#123; &quot;hkrfgfnrgzz&quot;: false, &quot;qklxjqbc&quot;: false, &quot;ksgpypwfiy&quot;: [ 1288517438, &quot;nwqy3CA&quot;, &quot;aauQ8QZ8n&quot;, &#123; &quot;yfykqslkwxs&quot;: &quot;bd&quot;, &quot;skzwhhffzbgc&quot;: [ false, false, &quot;IYi3RznNg&quot;, -122348317, &quot;h8QhT0&quot;, -1314250165, 415753574.6413267, 1431208413.0203135 ], &quot;taesxczxf&quot;: true, &quot;kejqi&quot;: &quot;zO-jDFolY1OiTE3&quot; &#125; ], &quot;nskvtkjdftjf&quot;: &quot;Irld7TQYyeh8ZNU&quot;, &quot;oapspw&quot;: &#123; &quot;uupdm&quot;: true, &quot;nllunbvd&quot;: [ false, [ -1834695793.3633256, -1624924054, &quot;1&quot;, false, false, false, -1939064287 ], &#123; &quot;dfwwkshyv&quot;: -1411531788.586073, &quot;zofniwaf&quot;: true, &quot;wfgbkb&quot;: -1555546596 &#125;, &#123; &quot;lvgiefsbbt&quot;: -1736935206.7722793, &quot;eyhvomnrl&quot;: -809972012, &quot;feuvewffnqzn&quot;: -1505000750.5516632, &quot;empkpk&quot;: true, &quot;boklfpzimof&quot;: true, &quot;qdrvqqrb&quot;: &quot;u2ypVMht7ohG&quot; &#125; ], &quot;tuzweotgx&quot;: 1388990284, &quot;rqejjy&quot;: 2043367539, &quot;xyelmlvi&quot;: false, &quot;vwzotukl&quot;: &quot;ShzdGkF&quot;, &quot;gxuefkg&quot;: &quot;I0n&quot;, &quot;pgqxejuoysiq&quot;: -736508110.7389425 &#125;, &quot;amnhqiiisvpg&quot;: [ false, [ 28287444, 1343029431.5755444, &quot;tWXCIjq3I&quot;, [ &quot;Im6xjbxPc&quot;, &quot;EnAI&quot; ], true, -1133952647, [ false ], [ 1858642134.4409337, &quot;XWn_4Ld-7jo&quot;, 179514941.64881298, 1510684272, -1808707697.2660255, &quot;0-TEQlXKIlVJQLcth&quot; ], &#123; &quot;bmjtfov&quot;: true, &quot;cwcxjngupmqd&quot;: 29782138.571137372, &quot;zmmxy&quot;: -569505818, &quot;puagc&quot;: true, &quot;wevlsnbmbfja&quot;: 1534321337.5022151, &quot;mfyaxj&quot;: false, &quot;rzoztndxrihr&quot;: &quot;WW&quot;, &quot;geyoyfq&quot;: &quot;ax&quot;, &quot;azdwhljwvda&quot;: &quot;dYIz4RvrB2sNNP&quot;, &quot;tvrnagirx&quot;: 60971197 &#125; ], &quot;rQfMgL4ZQ-wGV1iku35v&quot; ], &quot;qingyq&quot;: 1762803120.143789 &#125;, &#123; &quot;dmvawgr&quot;: false, &quot;udzqpqcl&quot;: [ &quot;y5aWH4qlX&quot;, 565590808.165537, &#123; &quot;vvtzutc&quot;: true, &quot;qxhcbunra&quot;: &#123; &quot;sdbybtqn&quot;: &quot;mFBaz9buWRkmjdew&quot;, &quot;nhvcmghbm&quot;: true, &quot;mzffm&quot;: &quot;B4utuXdW&quot;, &quot;ouwro&quot;: false &#125;, &quot;ceqoowzve&quot;: [ &quot;x91CDIq-9C1ozreobKu&quot; ] &#125; ], &quot;goybpdntid&quot;: false, &quot;orhketzzarug&quot;: &quot;2J6KB-y8f6C1&quot;, &quot;zpqubfmr&quot;: &#123; &quot;hnyjjhs&quot;: &#123; &quot;xjonatlcldo&quot;: &#123; &quot;tlsuxnllejc&quot;: false &#125;, &quot;ulmndwqx&quot;: true &#125;, &quot;pygtbupvhji&quot;: [ false, true, &quot;a&quot;, true, &#123; &quot;voowytwqolr&quot;: -1247701554.1297677, &quot;ryxyvkvsh&quot;: true, &quot;bbktpkspax&quot;: false, &quot;ayzzgja&quot;: 1905564178 &#125; ], &quot;kfyowyelgmt&quot;: &#123; &quot;fmcuq&quot;: -1579449653.3019078, &quot;degzr&quot;: -800372906.2981399, &quot;dtwerzx&quot;: &quot;Wp8mQMlmUPqhP&quot;, &quot;gmvubk&quot;: &#123; &quot;kebbpxilwfb&quot;: 1895470768.2458827, &quot;wtagbpyjybn&quot;: true, &quot;prktuuffw&quot;: false, &quot;foywhoyy&quot;: 97265018.89559394, &quot;bkizy&quot;: &quot;IdYg80No408CXB&quot;, &quot;miknac&quot;: false, &quot;aqksp&quot;: -1849963173, &quot;nbvruldc&quot;: &quot;MKRGQCOnIESj_W0A&quot;, &quot;ihlpbtxlyqu&quot;: &quot;WwbXb&quot;, &quot;dxlevjbcozl&quot;: &quot;cqwd13CqR0-zIeJGCw&quot; &#125;, &quot;ixqcrlahohe&quot;: false, &quot;rbqppk&quot;: 21028962.3474731, &quot;yytaazpbqmvc&quot;: [ 1323188036, &quot;6W1y-jyOtQ&quot;, true, false, -618331288.0945133, 1669605770.178974 ], &quot;xmovhvrrtg&quot;: true, &quot;focljncxdmlr&quot;: 1309317027.4259272 &#125;, &quot;kbykymuhama&quot;: false, &quot;clfxbxcygz&quot;: false, &quot;ytgkzfwrv&quot;: &quot;rfSshhH_kiaXvelhGo&quot;, &quot;bgbakxabisgu&quot;: &#123; &quot;pkvsz&quot;: &quot;egaMuGBa8Qfa5I&quot; &#125;, &quot;holjctzbqel&quot;: 1651434988.270569 &#125;, &quot;hqpxanby&quot;: &quot;r37u1IP&quot;, &quot;yxkttnpxwaox&quot;: -1863554173.0387821 &#125;, &#123; &quot;ctgkv&quot;: true, &quot;qputjogv&quot;: &quot;-sxb2nsWb0sQC0Rc&quot;, &quot;madfxlfuq&quot;: &quot;sPcX-SN8&quot;, &quot;ezoahwnyylh&quot;: &#123; &quot;mzyapdgprmu&quot;: &#123; &quot;evwgwfvrzp&quot;: 932445348, &quot;ytszegqwb&quot;: [ &quot;G&quot; ], &quot;cmsfarxyrev&quot;: [ &quot;C8qR1m&quot;, false, false ], &quot;xiuasy&quot;: &#123; &quot;bvoisakdm&quot;: true, &quot;ayavjwsb&quot;: 1278232255.2951758, &quot;dxyyvtny&quot;: false, &quot;ugrjjvmxq&quot;: &quot;tPj3SrDB0IF6qCZ&quot; &#125;, &quot;srvuhe&quot;: [ &quot;qo-ZtMhsK4v5s&quot;, &quot;GFyW&quot;, -123351802.83050978, -1368455574, 1139927106.920848, 47683931.04126628 ], &quot;oelfrw&quot;: -166850612, &quot;iufibiyc&quot;: false, &quot;vpqlp&quot;: true, &quot;ndfibkxmz&quot;: 156483043, &quot;gfemgvho&quot;: 838081767 &#125;, &quot;vxjidsoyps&quot;: &quot;PGb5G_1W32Gr1OcbQ&quot;, &quot;rgapait&quot;: &quot;Ig_fXHvw_XQfwq7A&quot; &#125;, &quot;sxbstkhmvx&quot;: -601966274.7765642 &#125;, true ], &quot;xxxxilq&quot;: false, &quot;azaxaqohjwmt&quot;: 1386916826.7485476 &#125;, &quot;ufnsksfmugc&quot;: [ [ &#123; &quot;egeiifo&quot;: 1059812245, &quot;alhfcrc&quot;: -1565288040.0016382 &#125;, &#123; &quot;lstxmbc&quot;: &#123; &quot;hvnxgruzukz&quot;: &#123; &quot;ymdvclcta&quot;: -799970865, &quot;gpeykkfuspq&quot;: true, &quot;nincpakwr&quot;: [ &quot;bqVlhUg&quot;, -114950637.80423953, false ], &quot;vwiuerby&quot;: false, &quot;hcpsqijyxwl&quot;: [ &quot;_LmxO-PGsd-GVgaKvrAM&quot;, &quot;mdHhyjwFR8E&quot;, &quot;29uKxRcQ7J&quot;, true ], &quot;sjhsk&quot;: &quot;VOkxfZpvMv&quot;, &quot;tmmle&quot;: &#123; &quot;zomltioly&quot;: 342659797, &quot;nlpovewuqmmp&quot;: true, &quot;iioma&quot;: 508432360, &quot;qfeodjgla&quot;: &quot;Nhd9Oa24X&quot;, &quot;nhmcokhelqqj&quot;: 1357286345.2177863, &quot;jagktor&quot;: &quot;xXIZjtVVVzwe_opnE&quot;, &quot;rhetwomhtd&quot;: &quot;bR1lB&quot;, &quot;whhlkyvml&quot;: false, &quot;sptyga&quot;: &quot;58&quot; &#125; &#125;, &quot;bcyespjpngip&quot;: [ &quot;Xa0-sRSJVzz&quot;, &quot;dP0bSw-D&quot;, -846722323, &#123; &quot;jqdwsxpdw&quot;: false, &quot;odqdgkhvm&quot;: &quot;kFN9XcS4FB&quot; &#125;, 2056245345, [ &quot;tgFXPN4_19rdn&quot; ], &quot;M&quot;, -1470809164.7869449, &#123; &quot;ufhegw&quot;: true, &quot;iazkqhvtoq&quot;: &quot;afnqo6mDeP2Xsxq83Ab&quot;, &quot;wavqh&quot;: &quot;SlfEs5u&quot;, &quot;eqzczxdcck&quot;: -1380453940.3618248, &quot;xnahyqovk&quot;: false, &quot;vimhaam&quot;: true, &quot;zaidgqslv&quot;: &quot;Rse2&quot;, &quot;uakqnpwkev&quot;: false &#125;, true ], &quot;byijcggxyeb&quot;: false, &quot;frrra&quot;: [ 1273321882.546601, &#123; &quot;bkdtsfpjzy&quot;: 1353578293, &quot;rqfykyl&quot;: false, &quot;zvtat&quot;: true, &quot;tbtiqgvrqnc&quot;: true, &quot;oaiwertwn&quot;: 381394347, &quot;cdpayscr&quot;: false, &quot;caskly&quot;: &quot;ov&quot;, &quot;qqctqbssi&quot;: -174402819, &quot;fmmnjju&quot;: false &#125;, &#123; &quot;jwrnyx&quot;: 1540108149, &quot;llawzkyebhy&quot;: 550464134, &quot;aocen&quot;: &quot;9&quot;, &quot;tbugwy&quot;: -785657559.0930029, &quot;soyelakldgqv&quot;: &quot;aaV&quot; &#125; ], &quot;snkqlthypi&quot;: &#123; &quot;lgqphwlv&quot;: &quot;5e&quot;, &quot;pgwort&quot;: [ &quot;9q2GDxjj6EA0&quot;, true, &quot;IQq20&quot;, &quot;NHziSgT7tXC&quot;, &quot;jOvmpnP45APMj6VSupAS&quot;, &quot;BYMiNR1TRCc933--jWB&quot;, -1324989878, true, 202601235.2834469 ] &#125;, &quot;jynodrxs&quot;: -229028908, &quot;kfhdb&quot;: [ [ false, &quot;HMUrYf6IGF4Q0EnSOm&quot;, 1788715909.1798944, 1002720161, false, 1813446997 ] ], &quot;lyjub&quot;: &quot;AVLk91kJfcOkQ&quot; &#125;, &quot;azukickdmzi&quot;: &quot;hgUoSBFSHwfwf&quot; &#125;, true, [ -1830050411.707309, &quot;V2pbDFO&quot;, 2136923622.426689, &quot;YiH-Sa&quot;, 42986518.777260296, &#123; &quot;itexzdasgzb&quot;: &#123; &quot;qpqhr&quot;: &#123; &quot;zbtbpe&quot;: true, &quot;lfkwatuqgbtj&quot;: -1714369248, &quot;irfvaosk&quot;: &quot;iN7jE-&quot;, &quot;kvllcp&quot;: true, &quot;fhfoo&quot;: true, &quot;xvjvz&quot;: -1454793156, &quot;lyubjax&quot;: false, &quot;ckome&quot;: -1412675725, &quot;jsvlgwg&quot;: false, &quot;kurkdvgyo&quot;: &quot;hHurh&quot; &#125;, &quot;vvlghgxnxsn&quot;: true &#125;, &quot;mcwfzdkyq&quot;: false, &quot;adeoyomffc&quot;: 1548960367, &quot;owttxei&quot;: [ true, false, [ &quot;wWJazDa6WAaegP&quot;, 545967908.4459687, &quot;0QysTlzpxu&quot;, 1640572288.6534097, &quot;k5zXkSkCut5ZCq&quot; ], &quot;hF8K&quot;, 2018777646, false ], &quot;tffvcumpi&quot;: 1498011014.6961753, &quot;rdboodqnzju&quot;: [ 156522948.53122738, &quot;p9I7ba&quot;, true, &quot;5fm2A2FH0dvAd8c&quot;, &quot;DrQQlYn5AlzdUzwx&quot;, [ false, &quot;NQIGd&quot;, 218207687, true, false, &quot;lEkh7&quot;, false ], false, &quot;_ZOzwWOLAw0FAx&quot;, &quot;v67dsKoEDmqSC&quot;, 1687700076 ], &quot;cpipaikzft&quot;: 538825608.0691938, &quot;uvvvyuvmff&quot;: 642661858, &quot;vxlreufxgl&quot;: [ -255202773.76708487, [ &quot;CDFfvQuhrDE&quot;, &quot;fOj8IX&quot;, &quot;P1Md5i&quot;, &quot;KCttk&quot;, 1720484967 ], [ false, false, false, &quot;glOQ7CC3Rq&quot;, &quot;ZeysOm8Xrcuh4&quot;, &quot;CTnfQDT2CnUR&quot; ], true, 1584066022.3255289, 810670081.4445043 ] &#125;, true, 854302211.0162857 ], 437006145.3470045, &#123; &quot;ofciakb&quot;: -174610721, &quot;jgiiaqh&quot;: &quot;g7oWIJ&quot;, &quot;rahwlhedy&quot;: &quot;XshbHeI6q0ByspizkDyu&quot;, &quot;tloyn&quot;: &quot;QaCYk65&quot;, &quot;xrrimsvafkqb&quot;: &quot;2&quot;, &quot;gndyhheqourq&quot;: &quot;ncTWjBzT&quot;, &quot;fqxffwalaysp&quot;: -1220649343.3438647, &quot;hilcqrvttzf&quot;: [ &#123; &quot;xyxuqicjid&quot;: [ -686442259, true, &quot;2xgSE&quot;, true, false, false ], &quot;vcrswrmkrrxq&quot;: &#123; &quot;avwpliogx&quot;: &quot;OIUJn2g8&quot;, &quot;pesizs&quot;: &quot;NMS&quot;, &quot;pdhqei&quot;: &quot;io&quot;, &quot;lksoed&quot;: &quot;Ci2gyuNoyhoFGy34-E&quot;, &quot;bsgvthoxwew&quot;: -583559162.235261, &quot;utaeahobmm&quot;: -864692808, &quot;xamweuvefgsb&quot;: &quot;ATIL&quot;, &quot;vigxzuglhf&quot;: -427564725.84841317, &quot;xrmkarvoxktz&quot;: -1336149298.6769412 &#125;, &quot;hldzsw&quot;: [ true, 1363062430.8286984 ], &quot;decsandn&quot;: &quot;QNnvs8GHi_&quot;, &quot;kwjez&quot;: [ &quot;vxgr_39Y5iefRpJrRu8z&quot;, false, 1547917335, false, false, &quot;HhPfgHwQ7Gu-&quot; ], &quot;tmhdhzzoenbm&quot;: [ false ], &quot;gbyohmhpbde&quot;: false, &quot;mtfnj&quot;: [ -1699702608, 985332408, -1815034078, -1413622309.8855631, -2085717593.4400523, 1407784160.48939 ], &quot;ergefuqaunl&quot;: &quot;8CENOQt3VEkU1P-JB6Tb&quot;, &quot;pnfjtwagjl&quot;: &quot;isLLGRDsqKLLuPL&quot; &#125;, &#123; &quot;jfnvnzjrvas&quot;: -587565188.3387564, &quot;taqrkae&quot;: &quot;C_94_KfHv&quot;, &quot;kpvdasjlv&quot;: true, &quot;rjtzonifh&quot;: &#123; &quot;vctwsgao&quot;: &quot;xdQSkHmlHKlY4-il&quot;, &quot;yifopp&quot;: 1406234035.787533, &quot;auvpebfqq&quot;: &quot;HLLn&quot;, &quot;flhvpumykx&quot;: false, &quot;xzywwymvn&quot;: 1653270283, &quot;upxnp&quot;: true, &quot;ifkmnr&quot;: false, &quot;nkxswbbwqy&quot;: -1627803020, &quot;whegc&quot;: false, &quot;qrfyepxtesps&quot;: 1517334209.7266629 &#125;, &quot;uuidntxmgctz&quot;: 1107173297.2634706, &quot;fynzmbl&quot;: &#123; &quot;oucehooes&quot;: true, &quot;wigldikwgq&quot;: -2062754791, &quot;cdkshxakjrd&quot;: -2071869785.565263, &quot;swfwn&quot;: &quot;OtQ0uaz6KX7AtkKL&quot;, &quot;hvjejhhf&quot;: -2036255945, &quot;owzivlf&quot;: -1975368684, &quot;moouubve&quot;: 1454759009, &quot;mgpvcbpmj&quot;: &quot;dDSwnk-q&quot; &#125; &#125;, [ true ], &quot;GIeXKf4YI9N&quot;, -1716528085, &quot;dL986fxNicw&quot; ], &quot;nrzjrgcivno&quot;: [ &quot;zxJy&quot;, &#123; &quot;flekwokf&quot;: &#123; &quot;chrzxtx&quot;: false, &quot;tlaypitrxrcg&quot;: true, &quot;rqovrbh&quot;: &quot;rSGtS&quot;, &quot;cwxqet&quot;: 498858192, &quot;uolbpvycxhje&quot;: &quot;DN9hNwEYX&quot;, &quot;usdclspoyzm&quot;: -501600594, &quot;hkqho&quot;: true, &quot;rgexemxrjs&quot;: &quot;JYToGeHgVHBez&quot;, &quot;tablq&quot;: -761106229 &#125;, &quot;kgsseatvemrz&quot;: false, &quot;jfsjxqvyr&quot;: &quot;rQc-LzndacPTFET&quot; &#125;, [ &#123; &quot;pxkuzi&quot;: 155012834, &quot;rjebalsjayqa&quot;: &quot;HtPrksIN7v&quot; &#125; ], -38828973.82330755, true, &#123; &quot;qltnluhelm&quot;: false, &quot;awocxhtybq&quot;: -1147863638.496814, &quot;rnple&quot;: false, &quot;hgspdpidju&quot;: [ -707962268.7103155, false, false, false, true, false, -1703293578 ] &#125;, &quot;HUdE9z63A3LoAOi1&quot;, false, -1874697115, &quot;5QsgUXTu5Do3gjONN6R&quot; ], &quot;ivljitunpban&quot;: [ &quot;u&quot;, 172763108, &quot;Wv&quot;, &#123; &quot;suplycjurouc&quot;: &quot;BxUKVizfXs7qmWNxnF&quot;, &quot;gcctzcd&quot;: &#123; &quot;aywdjhgw&quot;: -1358459504.777664, &quot;jqiwjd&quot;: -301889543, &quot;cffdnzjgjvwp&quot;: true, &quot;odxhcuuv&quot;: false, &quot;rpmxmjfggbki&quot;: true, &quot;goerbw&quot;: &quot;vbDUol5SzjLE&quot;, &quot;icsmd&quot;: 1180498061.2653542 &#125;, &quot;wjdczsoeuhj&quot;: &#123; &quot;gfousxhraqn&quot;: &quot;TNViA&quot; &#125;, &quot;btjtdnxp&quot;: false, &quot;gxvvecbba&quot;: 1312169211.2258654 &#125; ] &#125;, [ true, [ &#123; &quot;vtetekbagto&quot;: &#123; &quot;edznxylsm&quot;: &quot;kNxwwsdvAInKPYWip0U&quot;, &quot;hjpaslu&quot;: &quot;ZhmDrjY7ioU&quot;, &quot;mjxbopj&quot;: -2065787595, &quot;xsfxftjs&quot;: false, &quot;gfhygsfm&quot;: true, &quot;qgmdk&quot;: 827018739 &#125;, &quot;xjaksz&quot;: false, &quot;nzmlpamehmu&quot;: 735253786.4510173, &quot;daxfd&quot;: &quot;VB4PsY&quot;, &quot;buvqtwddn&quot;: [ 2098135094, &quot;PHLKCITfw&quot; ], &quot;udflozzlkyg&quot;: [ 1961779952.5347717, 1785170000, &quot;uqw3nxatTxu36F&quot;, &quot;CFKrC8kCiEuUT&quot;, false ] &#125;, false ], &#123; &quot;kqxmcle&quot;: &quot;X8BA11NXhb&quot;, &quot;qewgdmmowuu&quot;: &quot;Q&quot;, &quot;gkseon&quot;: [ [ -1603302651, true, &quot;Wf2110MvCqcjTOh3v&quot; ], &#123; &quot;umuyq&quot;: false, &quot;locnaoewb&quot;: true, &quot;iwvujfs&quot;: false, &quot;wmmjmhleazfq&quot;: false, &quot;opajytbtcdm&quot;: &quot;TyxATiSOvShV5af-&quot;, &quot;zfckxgk&quot;: 350224266 &#125;, true, false, &#123; &quot;awtsoveqz&quot;: 1134185262, &quot;ncodth&quot;: &quot;gaky7tuPqEE0C&quot; &#125;, &quot;DSqtgTHuNfWi7&quot; ], &quot;xtuopoolnj&quot;: false, &quot;xgowkwczwjv&quot;: &quot;-9uOjEDl0O4gX&quot;, &quot;wdnlav&quot;: [ &#123; &quot;tpgohoctng&quot;: &quot;Y46LStph&quot;, &quot;widgle&quot;: &quot;Ngb4LzVfY&quot;, &quot;flzprcgveboh&quot;: &quot;2dMreZNPc5Q&quot;, &quot;euiyic&quot;: 757084534.4392618, &quot;rborrfq&quot;: &quot;9YZH&quot;, &quot;mudkvx&quot;: true, &quot;uhkhesmnaiob&quot;: &quot;7vg95u2z57M1Q25C-M&quot; &#125;, &#123; &quot;gnczqzvjo&quot;: -1891773607, &quot;giknkeeuf&quot;: &quot;D6ZeuWMNjlEGSjJ&quot;, &quot;ugypzkizrld&quot;: &quot;94Pzm6l-lf&quot;, &quot;bfvyofbn&quot;: 76276623, &quot;cedymruvgjf&quot;: -532730165, &quot;avgcykyxuwk&quot;: -1061464690, &quot;xbusnelkecy&quot;: -651789297.1341338, &quot;ndhqgjwwxldo&quot;: &quot;hNXqDlGLEFaTu9f_&quot; &#125;, [ &quot;gWSAJs6-CGZ56gAg_Y&quot;, &quot;BPAfpx3e2n0&quot;, &quot;NABtxE6GLd-qka&quot;, &quot;p1qdw0N6r5rD&quot;, &quot;MtVItBGsAhR&quot;, false, false, &quot;ARlvMx&quot;, &quot;jp5WSWtCQrfP&quot;, &quot;lGua4WWpxu7QECDUmrEb&quot; ], &quot;2&quot;, -44631012.89008953, &#123; &quot;ykgmxa&quot;: &quot;7A7zpaE6DfqW81ODsnV1&quot;, &quot;rxazfwoptzh&quot;: -314219665.38402504, &quot;gnyiyaqmnyc&quot;: &quot;ret-gAGMPDX1&quot;, &quot;krmuhffwvxew&quot;: -827107678 &#125;, 1951560197, &quot;I2q41pZlE9D5GJM9Ti&quot;, &quot;UHwvhh&quot; ], &quot;fconiontxfdn&quot;: &quot;wPGj-k9r7Gsw9m-lorOr&quot;, &quot;horfk&quot;: -986402277.1490486, &quot;byrfwyebr&quot;: true &#125;, &#123; &quot;jkawcat&quot;: [ &#123; &quot;eiwsojacsq&quot;: 1676112449, &quot;jgekmpdhsj&quot;: true, &quot;kxzjfsr&quot;: false, &quot;zoxmobvqq&quot;: -1025819360.89981, &quot;oxpxptidr&quot;: &quot;8Jw&quot;, &quot;myumz&quot;: 2062684081.3193998, &quot;ajiapeku&quot;: true &#125; ], &quot;sxjjcmxdqbdz&quot;: &quot;bFq2QpiS3Wv&quot;, &quot;mxidhsade&quot;: &quot;KBmZGynEl&quot;, &quot;gogjwvyl&quot;: &#123; &quot;osblktbs&quot;: false, &quot;mbjpwu&quot;: &#123; &quot;fovbzafybwit&quot;: &quot;cor6Yj84WMYZZVdj0gR&quot;, &quot;kufslrcds&quot;: true, &quot;aedavebnby&quot;: -1008775510, &quot;akozzffzo&quot;: &quot;kuv_U&quot;, &quot;zyjtlrlhyi&quot;: &quot;gTiMoPevyTHG&quot;, &quot;kiutts&quot;: -1869528574 &#125;, &quot;snpymey&quot;: -1405478994.7553291, &quot;yydbdmay&quot;: &quot;UJDkJA8UnpYBifEGR7A&quot;, &quot;ydbwea&quot;: &quot;mb3&quot;, &quot;npmhuprqm&quot;: 1345924656, &quot;jwqvtfyi&quot;: &quot;Vv-zGw1KE5K4KmL4&quot;, &quot;dzhwkqbkbvdd&quot;: 409088616.6203143, &quot;iccnidhljlv&quot;: true &#125; &#125;, &quot;eBpw8c5&quot;, &quot;fv0FygNy&quot;, &#123; &quot;dparw&quot;: [ [ &quot;64UujJ_a&quot;, false, -1319664683.701457, true ], 343007839.0356881, &quot;1ssduUoG3NU&quot;, -230863137.02555355, &#123; &quot;agyvksvk&quot;: 1224923770, &quot;qkmvsy&quot;: false &#125;, [ false ], &quot;7TRBmb&quot;, [ false ] ], &quot;mjtol&quot;: &quot;Ewvi&quot;, &quot;pmduvkbvdjew&quot;: &quot;mDz-fviuNzDx0&quot;, &quot;dgauwepluvu&quot;: [ &quot;cFayhU5PCb&quot; ], &quot;ljsisniuv&quot;: &quot;-e9Bw0fykhHnQoTNtK&quot;, &quot;pvwoizptzx&quot;: -1044962708.4456303, &quot;vzdmw&quot;: 1739167092, &quot;zostl&quot;: [ [ &quot;QMXU&quot;, false, &quot;v&quot;, -1531678963, &quot;Ld&quot;, -915392466.0197387, true, true ], -419754185.52356327, &quot;H&quot;, &#123; &quot;oojizut&quot;: &quot;B1&quot;, &quot;zxfcorphhpc&quot;: true, &quot;yeeusktu&quot;: true, &quot;eofwvez&quot;: &quot;JDfBxoS&quot;, &quot;ykniglx&quot;: 894496872.6096759, &quot;vfmudpukpts&quot;: 52724179, &quot;tefrfckeznj&quot;: false, &quot;sphgz&quot;: -348481428.2368012, &quot;kdgletzzod&quot;: -192619065 &#125; ] &#125; ], &quot;soLc3ycyACp4J_E&quot;, [ true, [ 698327156.9576945, &quot;58-IwRp6vSMoGd&quot;, [ &quot;lBQcZ5&quot; ] ], [ &#123; &quot;vrimflr&quot;: &quot;fmqZnUDIcG6HtrwMYzh&quot;, &quot;fqeyl&quot;: [ &quot;oslrVT4aPI&quot;, false, true, true ], &quot;wjqgoc&quot;: false, &quot;bbxvpx&quot;: -1588328944, &quot;kcacsgkzbhsm&quot;: 1823753277, &quot;dtnexmkn&quot;: &#123; &quot;mtlopmxnlljh&quot;: &quot;qevx7HX5o&quot;, &quot;vzippqhu&quot;: -83660442.98092143, &quot;ctockzclcchc&quot;: &quot;72L&quot;, &quot;fntbektlg&quot;: false, &quot;zzbwmvpkg&quot;: false, &quot;womcvvuq&quot;: -1374331395.6846483, &quot;biigdjgtvzw&quot;: false, &quot;yzsokcz&quot;: -1864378177.8145332 &#125;, &quot;qnwdg&quot;: [ true, &quot;BGA&quot; ], &quot;iaphtsnw&quot;: &#123; &quot;nzmuozxm&quot;: true, &quot;bvrzv&quot;: -1951734142.2764938, &quot;jrgdwxvmhuz&quot;: &quot;uhTgCYksgDExQTZrn&quot;, &quot;otapzat&quot;: &quot;amDDWs2BNkNyqMvvsOQ&quot; &#125;, &quot;apbdjrqoqih&quot;: &#123; &quot;bihgijjmug&quot;: 1578062139, &quot;hbahgngaqdgj&quot;: -463244010.35605156, &quot;xzbyvefdxagh&quot;: &quot;COEUoP&quot; &#125; &#125;, false, [ true, [ &quot;74kweLE&quot;, &quot;L4jwyZJenG&quot;, 2078429203, false, &quot;jnbMtD9f0l05rPo9wKb&quot;, 869401191.1674111, -764084235, &quot;lneU2WKax7TEpaEM&quot;, 971814952.9628687 ] ], true, -1565998836 ], true, true, [ &#123; &quot;exoerrwjv&quot;: &#123; &quot;gmowcou&quot;: true, &quot;kecvbhxcpe&quot;: true, &quot;xrwmphhr&quot;: true, &quot;cumgpwughusb&quot;: 2050389757.2037556, &quot;aazqnpi&quot;: &quot;8G9jVSuuoudZS&quot;, &quot;viuaicdqcs&quot;: true, &quot;njbeccdcoger&quot;: -108041845 &#125;, &quot;wfhpwozki&quot;: [ true, true, false, &quot;J9pThE&quot;, &quot;bj56bo33JtcAuVtFH-&quot;, &quot;tuTSxut5hG&quot;, true, false, true, true ], &quot;wnmuxly&quot;: false, &quot;dnefxymgxusr&quot;: -1732480955, &quot;atzsq&quot;: &quot;sAV5u7AglE024AASW_W&quot;, &quot;qxkxwl&quot;: false, &quot;gedlckhckywi&quot;: [ &quot;r4j9iixHwlytAQu9&quot;, &quot;F2j9MQ1kOE&quot;, &quot;0tBcbsKdKSTKMiL&quot;, false, &quot;zduEc_cuOqg&quot;, true, true, true, true ], &quot;scwmxl&quot;: false, &quot;lohjxobrc&quot;: 1387867700, &quot;lnzgcv&quot;: &quot;tvO-&quot; &#125;, &quot;gPuBaN0&quot;, &quot;Td&quot;, false, -1810221717, 26261587.327259026 ], 587226643.9908946, [ true, [ &#123; &quot;sstsyzjvjcc&quot;: true, &quot;iydpcko&quot;: -660241731, &quot;cuinwrkagfnf&quot;: -1511733569.0501897, &quot;miugqwhluq&quot;: -1153831005.8297157 &#125; ], [ true ], true, &#123; &quot;xwtgdypuuoip&quot;: &#123; &quot;jfdmjy&quot;: false, &quot;uxzmpo&quot;: 1897582818.237855 &#125;, &quot;kbtar&quot;: &quot;sfCPlz0Dw&quot;, &quot;cchfun&quot;: &quot;z4k&quot;, &quot;buviuffu&quot;: -1541101613.0841894, &quot;awmerqx&quot;: &#123; &quot;tmmscngs&quot;: -1457687961, &quot;hyzgfrzhkq&quot;: true, &quot;groauuimfff&quot;: true, &quot;bfknyfu&quot;: true, &quot;cuvamo&quot;: true, &quot;faknxnyyyo&quot;: &quot;KfjeiDi8x&quot; &#125;, &quot;dgxbdhvwz&quot;: false, &quot;tuxmoobswc&quot;: false, &quot;mqyye&quot;: -1420559132.8642693, &quot;cwepngen&quot;: &quot;vD2nC-CzhxOCrEe&quot;, &quot;fsfkaeygzakb&quot;: true &#125;, -135748470, &quot;6&quot; ], 900941300 ], [ -1025637874.2588499, [ [ false, &#123; &quot;gklfiz&quot;: true, &quot;tjtyzgefhdd&quot;: -582853363.0086337, &quot;osfgdnauftk&quot;: &quot;Vl3EqlA7OKiAlIjw&quot;, &quot;bzidnf&quot;: true, &quot;wdpicjspsl&quot;: true, &quot;rkeddbrws&quot;: &quot;pMYedEiTgONmh&quot;, &quot;xerpbflz&quot;: 758419376, &quot;gilbjkg&quot;: &quot;UyyvO&quot; &#125;, &#123; &quot;xoltj&quot;: &quot;o4gD1a80AUIP8ppL&quot;, &quot;cyhvvey&quot;: true, &quot;nfilawa&quot;: &quot;uoyzlCjrGOVh848s&quot;, &quot;kuzeng&quot;: &quot;NZtEzPtn5Lrt&quot;, &quot;mdplgzrqprbk&quot;: -1088587722, &quot;gishhkef&quot;: true, &quot;myphkklb&quot;: false, &quot;wiikvhyaeo&quot;: &quot;ON&quot;, &quot;brinalpoac&quot;: &quot;cUQcPCbVl40IEIhpoiq&quot; &#125;, &quot;m-89eKmeXXiAncvW&quot;, [ -680112778.9736067, 681158006.8874329 ] ] ], -1924960368.6434278, -1037694580 ] ], true, true, -1708300594.5945342, true ], &quot;xhenye&quot;: &#123; &quot;kemzofsdxy&quot;: [ -1713931968, [ -805035427.518543, -869517642, 1087071941.8443158, &#123; &quot;wgpwldezn&quot;: false, &quot;wlxpboidk&quot;: 1098127049.5216, &quot;ksbsgwowzwel&quot;: -60523137.21947116, &quot;sigyfdoize&quot;: -1639786919, &quot;stkxya&quot;: [ &#123; &quot;tcbjdawezee&quot;: 1503065519.4656055 &#125;, 212498625, &#123; &quot;omcernksme&quot;: false, &quot;mephnqtasows&quot;: -1877881674.7753944, &quot;yparxi&quot;: false, &quot;anvfifj&quot;: &quot;xDPd4N&quot;, &quot;tsbpyhtkt&quot;: &quot;YC4LfaxY62Ki8&quot;, &quot;ebvohotbw&quot;: &quot;vTE2YTprZ&quot;, &quot;dhfcmbhyg&quot;: false, &quot;lqkjefon&quot;: &quot;nKiFRhv2jrSonP&quot;, &quot;emkwdzynylwt&quot;: &quot;Nw7OSW&quot;, &quot;snephpktpam&quot;: &quot;Y8j_Z0&quot; &#125;, &quot;njufIeTs0jwWkhmsw&quot;, 1526070883, &#123; &quot;reqebzgpz&quot;: -112549694, &quot;lyyoavlqsb&quot;: true, &quot;grigtdofeoez&quot;: -2103438349.1102376, &quot;lnxlrkl&quot;: &quot;jRMpG&quot;, &quot;enubd&quot;: &quot;s&quot;, &quot;zfeektqqyp&quot;: &quot;yJ06uHs&quot;, &quot;rycqya&quot;: 2065122808.7950985 &#125;, -43811785.0890918 ], &quot;gobhbw&quot;: [ true, &quot;cj2FXZuCS0nEBHOLS&quot;, 1161769059, 950471239.4319127, [ true, false, &quot;TGh-nycPTRZ22D-NQ_o4&quot;, 1879746423, -1876361804.542124, -1254490223.1645222, false, 925658823, &quot;HohOH5&quot; ], 951874358, [ &quot;CoK54yZH1M&quot;, -2136020746.5936499, &quot;u1FpY9ocUf6mkX&quot; ], false ] &#125;, &#123; &quot;dfoclqw&quot;: &quot;NODCfR359C7M_&quot;, &quot;nsjko&quot;: &quot;v6uuOpD&quot;, &quot;lfeupzcqmpk&quot;: false, &quot;ypyzeid&quot;: &quot;zklVHAI1JkTrYBCSlMu&quot;, &quot;uvtppjgprezb&quot;: &quot;nvjJyMbGqua4fTcRWfaX&quot;, &quot;enpchum&quot;: true, &quot;jlvise&quot;: -1635524437.4004927, &quot;yzygqpc&quot;: [ 919260239.0778828, false, true, &quot;divak2ET&quot;, 631651870.7437193, &quot;6c43tow5bgTZwalPi3&quot;, &#123; &quot;onzidfdhjvn&quot;: false, &quot;hoikkswnfo&quot;: false, &quot;gcjwd&quot;: true, &quot;dsjfmtbjfkf&quot;: true, &quot;wzorkob&quot;: &quot;NgMYbSVqgUkzF9JDnrGc&quot;, &quot;zgfrfx&quot;: &quot;lRSUTBYtkk&quot;, &quot;gxkvcgvjhrjy&quot;: true &#125;, &#123; &quot;mgrtkrixa&quot;: 1371923484, &quot;nnvtjmx&quot;: &quot;YjulmwcbzFHNCjlEK&quot;, &quot;tqbrrnahao&quot;: true, &quot;ltqihfo&quot;: -1121423677.0131004, &quot;jyuohu&quot;: &quot;UmNpZAav-gZC9&quot;, &quot;wjycdsilfq&quot;: false &#125;, [ false, false ] ], &quot;tmqrlqn&quot;: &quot;_irJ&quot;, &quot;ythdpzeyfzx&quot;: true &#125;, [ &#123; &quot;awyrscv&quot;: 1292780261.5250838, &quot;qdlqnvxa&quot;: [ &quot;L&quot;, -353702928, 192952383.1282911, &quot;hQ&quot;, false ], &quot;varhial&quot;: &#123; &quot;xexbq&quot;: false, &quot;rwmadniztrgr&quot;: true, &quot;unadilf&quot;: &quot;UH7GtJNx_vmXxyUCzIk&quot;, &quot;xdkzfafcg&quot;: &quot;bKgInz8LfRnIiwgU1K8&quot; &#125;, &quot;hfboeiy&quot;: &quot;6CqK9frOn&quot; &#125;, &#123; &quot;zfnkvjt&quot;: [ -1253032068, -728221895.5465573, false, 2032637908.5663962, &quot;yyjjD_rA8CVE&quot; ], &quot;rtcpgukulhb&quot;: 1968728972.8089237 &#125;, &quot;BT2VYUTpEb5Cjqnw&quot;, &quot;xLSFRK4I&quot;, false ], [ 1515070620.1010866, false, &quot;A2iiSSi&quot;, [ 937788248.1172682, &#123; &quot;vnone&quot;: 1000593445.688209, &quot;wkzrmmqhmxn&quot;: 109353062.87504955, &quot;ljobzqcl&quot;: -1305573497.3978724, &quot;vbdvvgkvnbz&quot;: 1681311307, &quot;jokojizfo&quot;: -624502743.2195749, &quot;nlgeakc&quot;: false, &quot;eafzbbc&quot;: -1600168674, &quot;daldy&quot;: true, &quot;nffxijzispp&quot;: -1340518226.6470952 &#125;, true, &#123; &quot;vmxlik&quot;: -1099209302.919163, &quot;hzwmoypchkb&quot;: true, &quot;tgeup&quot;: true, &quot;ckriw&quot;: &quot;8ktRRoIRCJ-Zspy&quot;, &quot;tjofribrztg&quot;: 1531989934, &quot;dpyobifthft&quot;: &quot;Yes4k&quot;, &quot;qqhrac&quot;: -1250147402.9694977, &quot;mnnvxiqx&quot;: 354940954.2023201 &#125;, [ &quot;3Kk&quot;, true, &quot;OegGtq&quot; ], &#123; &quot;dznuwqekx&quot;: true, &quot;pszamqn&quot;: true, &quot;rcdhqdm&quot;: false, &quot;deimsggq&quot;: -1359990668, &quot;fzdhcqlvkwz&quot;: false, &quot;coezuvymrwq&quot;: true, &quot;ndwhvjwdmpz&quot;: 1133737449.8011916, &quot;jriqcqqfntzc&quot;: false &#125;, true ], &#123; &quot;fslaxrik&quot;: false, &quot;lqlwk&quot;: true, &quot;orezefygfs&quot;: -384506863.7335491, &quot;pupujtozydhb&quot;: &#123; &quot;akmugk&quot;: 1298074756.0830932, &quot;nuherbzi&quot;: 620762501, &quot;ztztrjzflxzy&quot;: 207627657.13165218 &#125;, &quot;fkhaz&quot;: -843406251.23525 &#125;, &quot;4imZzm7iFV1VHJCXg&quot;, &#123; &quot;etsfrmszqo&quot;: &quot;kliPKjln&quot;, &quot;ltrbd&quot;: &#123; &quot;ncvvtkh&quot;: -816505512.1692358, &quot;lgiwvwk&quot;: 363142221.68780464, &quot;bhaizaze&quot;: -900522473.784486, &quot;fwlzzerdngk&quot;: &quot;hY&quot;, &quot;zlvcoery&quot;: false, &quot;beirwfg&quot;: -1425768084, &quot;knkmc&quot;: &quot;k6&quot;, &quot;tnabfypju&quot;: &quot;j_0I0a&quot;, &quot;nsntcxlceva&quot;: &quot;75coqfV&quot; &#125;, &quot;bkafiqd&quot;: &quot;yBKcIFotKhSp&quot; &#125;, &#123; &quot;sbtnn&quot;: 592441966.4201996, &quot;vaarlun&quot;: false, &quot;odzfk&quot;: -1135987808.335956, &quot;qwrruiurzvkk&quot;: 1742165528, &quot;inxjx&quot;: &quot;S2_thA_3-NNCY31gGT1T&quot;, &quot;nxrrxumkkr&quot;: false, &quot;kvrbgdlej&quot;: 583298432, &quot;gkoaeizts&quot;: &quot;q3&quot;, &quot;toixqytpfs&quot;: &#123; &quot;lygaokqo&quot;: false &#125;, &quot;hcuozupeotwn&quot;: &quot;OxYpQGiuidTV-MArY_&quot; &#125;, true ], true, 951251792.4160668 ], true, false, &#123; &quot;lgpdzpgjpx&quot;: &quot;7wP3NVNKzy-MB25jeir&quot;, &quot;hdnflqsvmny&quot;: false, &quot;tnbwgwfs&quot;: &quot;1RGUKMbrEA6Ihghi&quot;, &quot;efwxvbpr&quot;: true, &quot;apcjsvc&quot;: &quot;tgnFEuP&quot; &#125;, [ &quot;fibVHn0&quot;, -1355452961.8300054 ], -763636159.0354669, &quot;45&quot;, &#123; &quot;egleu&quot;: false &#125; ] &#125;, &quot;wyflumxx&quot;: 606853676.8559177, &quot;xfrfs&quot;: &#123; &quot;bpmmre&quot;: -699035788.1210531 &#125;, &quot;astjsmkrgfl&quot;: true, &quot;vtdbsxzbrp&quot;: [ &quot;1jr1jrHCCxX0k8u7v&quot;, [ 561744.5374090297, &#123; &quot;qocslunn&quot;: -1236546869.1413891, &quot;uajwiy&quot;: &#123; &quot;gbdfahkx&quot;: &quot;WoT6CAbAkcIW&quot;, &quot;cboasttcgo&quot;: &#123; &quot;qgmezcgvnn&quot;: &#123; &quot;akpfwxcg&quot;: &quot;Yp&quot;, &quot;hiaodfs&quot;: true, &quot;uihrnqe&quot;: &quot;fww0o0M_9FZOup&quot;, &quot;zpouvy&quot;: &quot;0eD&quot;, &quot;ghrzcndjz&quot;: -570933190.062901 &#125;, &quot;njeqvwtsqwpp&quot;: &quot;PJWbPOqcZ-FytU&quot;, &quot;nzmogoyk&quot;: [ true, true, false, &quot;9FkCYsQq9TrnH_dnFQ&quot;, &quot;Ficgqseqb_U&quot;, true, -1941578162, true, true, 1506648943 ], &quot;wjbsmmgbl&quot;: &quot;VBVa6elwD&quot;, &quot;txityj&quot;: [ false, -1925291825.7742538, &quot;k7MRGhftWwpnDN0&quot;, true, &quot;JJlSfDuz3UWrQoE&quot;, false, &quot;8xdxWhnbhmPN_KB3OWXF&quot;, -1269897173 ], &quot;xfewjrmanegv&quot;: 1592995213.1564643, &quot;fvosshqzogej&quot;: 185009600, &quot;pbwhd&quot;: [ -1760380269.8625515, &quot;awu511SC9Md&quot;, &quot;Jt_E&quot;, true, &quot;mp_tGG-T9V&quot;, &quot;YkRm3Rx9zfUQHS0QH-&quot;, 212218763, &quot;QLEYD0QJescPx9&quot;, -1273082687.541183 ] &#125; &#125;, &quot;nbqdwg&quot;: &#123; &quot;sexkplynokqd&quot;: &quot;niQlORKBhnnlFC&quot;, &quot;rclcgw&quot;: &#123; &quot;rdffsor&quot;: [ &quot;N6X--z88Fnbe&quot;, &quot;_Ir_HVKHuk0Rt3S&quot;, &quot;PQEOnICemO7maPrhCojI&quot;, &quot;XJz&quot; ], &quot;gmnrusskm&quot;: false, &quot;yssqtqw&quot;: [ false, &quot;LqeoL4zcCFtJ&quot;, &quot;w6a&quot;, &quot;BrxFIwRASm-NJre&quot; ], &quot;fekusikau&quot;: [ &quot;l&quot;, false, &quot;HUtsC0vgdMouv4cYg9a&quot;, &quot;yXwZunKBou7y&quot;, &quot;BpN9Jyo_K-I8&quot;, &quot;gb1Ud72In&quot;, false, true, true ], &quot;jecveapqju&quot;: &#123; &quot;jvscquwuv&quot;: -395093179.77329963, &quot;xqzqje&quot;: false, &quot;alvtrd&quot;: &quot;FOUKJj&quot;, &quot;jpjucwmkj&quot;: &quot;Ak74yG&quot;, &quot;tylxotikf&quot;: false, &quot;kqvmlgcygg&quot;: 244130615.79503688, &quot;wcjbdzwa&quot;: 500287767.6856092, &quot;kvzyms&quot;: &quot;jjt1Ke&quot; &#125;, &quot;kryqgjeoece&quot;: &quot;YVyZcPu&quot;, &quot;mpmxzopptusc&quot;: true, &quot;uyarzrmja&quot;: true &#125;, &quot;tukitmlig&quot;: [ 389513860 ], &quot;kjczl&quot;: 1795259296.5039878, &quot;wybdsosyzcha&quot;: -1290623776.184505 &#125;, &quot;tpjlykcz&quot;: false, &quot;ygjosauo&quot;: true, &quot;cumkci&quot;: &#123; &quot;dylgur&quot;: &quot;vFLo5yzkUM6UO&quot;, &quot;jaibsrqo&quot;: &quot;gux8fEqYsbxyDs&quot;, &quot;agfyveq&quot;: -1597233399, &quot;kcwihvc&quot;: [ &#123; &quot;tfkioivxg&quot;: &quot;fpKwZ3982rwZ&quot;, &quot;ixzpspa&quot;: false, &quot;vzpfevtxupda&quot;: &quot;d3&quot;, &quot;keoceyx&quot;: &quot;VV246o0k1&quot; &#125;, false, false ], &quot;bhnylkf&quot;: -791060771, &quot;ztumv&quot;: true, &quot;wsgjuxhmkq&quot;: [ -1676766713, -1537104182.010321, false, &quot;W&quot;, false ], &quot;luxuouaiafks&quot;: false, &quot;lumoeigwphr&quot;: &quot;18xmBvOSPeC8azShirG&quot; &#125; &#125;, [ false, -802997708.7600138, [ -2053605394, [ [ -1399814510.7030656, 977135150.16729, 192789963 ], false, true, -1150809483, 870594874.543454, -349754105.96800435, &quot;uXDHWbTUZ6w3mef&quot;, &quot;b7&quot; ], &quot;orfu_NuA3PULBFvt&quot;, &quot;rMQgHO7qp_iEQtYRhI&quot;, [ true, &quot;VArbiT7&quot;, &#123; &quot;ugybni&quot;: &quot;tppWs4TDciQA&quot; &#125;, &#123; &quot;mbtwxuiw&quot;: 2007589536.1571848, &quot;eyggegpd&quot;: &quot;AYUXBDRQwp7bLRi3dorR&quot;, &quot;ajqnjvonyzj&quot;: 584606137, &quot;krqxfzymxdhi&quot;: false, &quot;rsewnnoeu&quot;: &quot;RNFJ&quot;, &quot;dvpynxqkhny&quot;: true, &quot;fqalezvvugs&quot;: &quot;4acA2cG0&quot;, &quot;nikiirsvj&quot;: true &#125;, &quot;1Mc&quot; ], -1573848105.4230146, &quot;SKiwY-9YeY_hPRmWFWIT&quot;, false, [ &quot;HNinq-l&quot;, [ &quot;H&quot;, false, -441521083.9283443, &quot;Z_8ZCGG8lrV1&quot;, true, true, &quot;Q-e&quot; ], -116020140.1204658, [ false, &quot;3ZEu7c7zJKB&quot;, &quot;fKIq_dNpbcxxNy-sORG6&quot;, 293709833.5096803, true, true, &quot;tqp-eB&quot;, false ] ], false ], &quot;fAvqf0aMIECKiDSrk&quot;, &quot;EGQCCS&quot;, [ 1425411792.9755037, [ [ true, &quot;Fdhp&quot; ], 105232888, false, true, &#123; &quot;xqgbtiqmhey&quot;: -106846587 &#125;, [ true, 1006096276, &quot;5WCyPiTJsXj&quot;, &quot;9GHK&quot;, &quot;6XNJL_xKyP0OyEbNVJF&quot;, true ], 29964889.205074985, &#123; &quot;eyfebw&quot;: 1032894485.2535043, &quot;qtwexefmcxe&quot;: 328388067, &quot;qjxmrqn&quot;: 1410429136.1468182, &quot;gyqlgbgm&quot;: 42956826.78513192, &quot;spvsoitnwsvt&quot;: -907252368.4503814, &quot;awqktjufcadd&quot;: true, &quot;byekartjnn&quot;: false, &quot;afzuxwogfevn&quot;: &quot;sH_tdB&quot;, &quot;wjigflls&quot;: true &#125; ] ], &#123; &quot;dciduftzpd&quot;: &#123; &quot;zybiggjjth&quot;: [ &quot;-eW&quot;, -1749116727.1662536, -1805132480, true, &quot;mUG-Kz&quot;, 592646268.447506 ], &quot;tzdjwzontahh&quot;: &#123; &quot;pfcwvgyfg&quot;: &quot;FRQU&quot; &#125;, &quot;ygzvbonzwtj&quot;: &#123; &quot;fskrfxpk&quot;: false &#125;, &quot;uqrrz&quot;: &quot;f5OnXaoFbhbCBJA&quot;, &quot;rodqmxzelk&quot;: [ &quot;6eYX_&quot;, false, 1599473240, true, false, false ] &#125;, &quot;ozkrzb&quot;: [ false, false, true, &quot;3lupCUGZAL2Re&quot;, -991088956, false, [ false, &quot;0Ll6v86z&quot;, &quot;V&quot;, 676772777, -1714910506.345465, -17895074.62039487, -1787194802, false, &quot;9KUleV_UtVK7X&quot;, false ], &#123; &quot;blkymot&quot;: 1561878291, &quot;dfsjexi&quot;: false, &quot;fjuwryhskukl&quot;: -2017954572.5434089, &quot;uhbjdyxmoq&quot;: &quot;HBzUOXH&quot;, &quot;qignwtxsgtx&quot;: &quot;i-kKQjuksT&quot;, &quot;juccofewjq&quot;: true, &quot;zndmvljdwu&quot;: -223870705.86433518, &quot;xkwkq&quot;: &quot;uH&quot; &#125; ] &#125;, &#123; &quot;qlututwete&quot;: true, &quot;adhcbteqsfzz&quot;: true, &quot;veflfjbjnjy&quot;: &#123; &quot;htrpocyvqy&quot;: 349697001, &quot;wrztntsfss&quot;: [ true, &quot;CW2vaEa7&quot;, true, &quot;lq_&quot;, true, 735024535 ], &quot;lqwyvb&quot;: false, &quot;itxzlrk&quot;: -347041377, &quot;lyvjzhag&quot;: true &#125;, &quot;znuyqb&quot;: &quot;GggEy&quot; &#125;, 887667842, false ], [ &#123; &quot;bmlgtqc&quot;: [ false, &quot;rqMMUo&quot; ], &quot;euqgr&quot;: &#123; &quot;dymouqh&quot;: true, &quot;orfbvtq&quot;: &#123; &quot;iejmjdyrs&quot;: &quot;V85icpm_ijqUg&quot;, &quot;vbrvfuqjpcfm&quot;: true &#125;, &quot;cbimevfc&quot;: &#123; &quot;builaeezns&quot;: &quot;Df-FqGrIuenzif2yuY&quot;, &quot;emenwqmmhov&quot;: false, &quot;clvpjlh&quot;: 1092852226, &quot;hvocpqlfrqsk&quot;: &quot;lbfwg&quot;, &quot;yxpgfpxrvruj&quot;: true, &quot;tetvli&quot;: -1680553264.5893738, &quot;jbqeqk&quot;: true &#125; &#125;, &quot;ctqrrbyaaqhr&quot;: true &#125;, [ &#123; &quot;bimrwghswo&quot;: [ false, -1164119898.5468001, false, true, &quot;wby-NKerV58i&quot;, &quot;Yom5xxJlUS6y&quot; ], &quot;libtxdvwhj&quot;: -1980565219, &quot;rxkxzgemfkhz&quot;: false, &quot;vzpncd&quot;: 453388184 &#125;, &quot;fg4x7JY6TEYPwNyd&quot;, [ &quot;SGMMXIDILo_FbbQwOx6j&quot;, &#123; &quot;kjuersyzccgx&quot;: true, &quot;kbjrbqpvhjq&quot;: &quot;x5lQpiEDR5wKZ&quot;, &quot;xvfuz&quot;: 327749931.6296166, &quot;pdceqod&quot;: &quot;NJd&quot; &#125; ], &#123; &quot;ybzaahpuqjh&quot;: &#123; &quot;rqehh&quot;: false, &quot;cpbzshh&quot;: 474891438, &quot;xsttzxrlsvwi&quot;: &quot;tEQvPHpktpk78tcJNV&quot; &#125;, &quot;bmdmbwatgluo&quot;: &#123; &quot;tngdbtfwfjtr&quot;: true, &quot;husdsu&quot;: true &#125;, &quot;iisdly&quot;: true, &quot;lausvjta&quot;: -1051639134, &quot;ofltnwrxwvtu&quot;: false, &quot;mautqg&quot;: [ true ] &#125;, &#123; &quot;pfwvqeg&quot;: &quot;iCwbtXG1jJE&quot;, &quot;fxfezdbjhlpe&quot;: &#123; &quot;ovxtj&quot;: 1080202809 &#125;, &quot;zzrnxa&quot;: true, &quot;rcjwgxcqes&quot;: &#123; &quot;ehzuxhctq&quot;: &quot;1wnzwzgnZD&quot;, &quot;gpohoalgwj&quot;: 1939205415 &#125;, &quot;lhvslswxzwf&quot;: true, &quot;rqmne&quot;: &quot;7OR0gCLkAOxPb8zn&quot;, &quot;knklginsn&quot;: true, &quot;ilscwraz&quot;: &#123; &quot;bgcjkzdykmv&quot;: -2087115871.6244044, &quot;cdtmzlvlad&quot;: false, &quot;ibqikxxf&quot;: &quot;LB_&quot;, &quot;uenygcjpcc&quot;: &quot;-Q9&quot;, &quot;zsrzwnuz&quot;: &quot;CZ31U92hEH6D1ZvvKl&quot; &#125;, &quot;kavbxa&quot;: [ -571391870, 1359112810, &quot;0P6Fi5XxY6Gt&quot;, &quot;x0RFlz2_NfLL&quot;, true, &quot;hUcVjSk8&quot;, 1481727538 ] &#125;, false ], [ -92991441.58020832 ] ], &quot;oGeqskhAUrLi-K9GMly&quot;, -1008876839, &quot;d6sH0xEbHC6hBpA3P&quot;, &quot;hL28NZJpr&quot;, -846574898 ] ], &quot;ewxjjyuo&quot;: [ &#123; &quot;wlskfio&quot;: [ false, true, [ &quot;4&quot;, &quot;7qZYZKZxT&quot;, [ &quot;bCVyvkYz_HK5&quot;, [ 302098255.8934899, 1823035976, &quot;_Gf1-lyJA&quot;, &quot;D3X58Uiu&quot; ], &#123; &quot;enmdwv&quot;: -2086951943.2325172 &#125;, &quot;Mhi5mNoQNN-vk&quot;, &#123; &quot;ovoldmoq&quot;: &quot;ypNy2&quot;, &quot;vyttyofwdeu&quot;: &quot;iu13Jozou&quot;, &quot;kyrsackwkwcv&quot;: 1702607487, &quot;baosyvlbwokk&quot;: 827733957.3994164, &quot;pwwrfysifrf&quot;: &quot;9rZS&quot;, &quot;daxwsjv&quot;: 330954118, &quot;tdqnt&quot;: &quot;WDHV_NY&quot;, &quot;sahsrmijujm&quot;: &quot;XCMv0QPB7hp&quot; &#125;, &#123; &quot;meymmbpch&quot;: &quot;qQ&quot; &#125;, &quot;UC0l&quot;, [ &quot;mQ89vi&quot;, true, 1807380904.4068377, true, &quot;LWT8otFgdN-2&quot;, true, true ] ], [ [ false, &quot;r_iaSOjDJizgWfKTVLv&quot;, &quot;7WgYK0ds3p_&quot;, &quot;sR0AzZ2nh&quot;, &quot;IfkootTtt66AYmx8&quot;, 432874271.3492509, &quot;V2p2AkKLcQSoW&quot;, &quot;VqEXrh5PpdEXW&quot;, -250522174.4528205, 1881293682 ], &quot;pL&quot;, [ true, 1597087752, -479340988.3343571, false ], 1362746135, true, -984937760, &quot;D9&quot;, 1802679211.0451655, &quot;U&quot; ], &#123; &quot;vfewicpzsd&quot;: &#123; &quot;lnptk&quot;: true, &quot;mphanqkvg&quot;: &quot;7rt3cs97e8FcZaNwv&quot;, &quot;myriihbc&quot;: true, &quot;jwdadczhu&quot;: &quot;k6YiieH5A2AfeMX&quot;, &quot;hhsyocbay&quot;: 2088565662.8026524, &quot;ppocyjhnyfw&quot;: -1285977432.0531442, &quot;qxrzorvip&quot;: &quot;7KNiE&quot; &#125;, &quot;dleyysswc&quot;: &#123; &quot;lnkzk&quot;: false, &quot;wxuxwyjx&quot;: &quot;AuvXjDV1b71yVR4dq&quot;, &quot;nemwjgg&quot;: 203990540.5535996, &quot;cwqpqxa&quot;: &quot;gOfc_6fgF&quot;, &quot;qregtsefat&quot;: true, &quot;vjklnndaw&quot;: -922256624.7759064, &quot;yesgdekxdkr&quot;: -1242756045, &quot;iyznnbg&quot;: 816397031 &#125;, &quot;dfprffw&quot;: &#123; &quot;otokfvj&quot;: true, &quot;wobsu&quot;: &quot;sImH&quot;, &quot;ptxxmrcjyp&quot;: -504203914.2462589 &#125;, &quot;hropaxwuvg&quot;: &quot;Vl4KOyqYLmbLlF&quot;, &quot;hapxq&quot;: true, &quot;ycqqonwjjqe&quot;: false, &quot;nxpfremqescb&quot;: -979478208.0100743, &quot;ovcbynvqqzs&quot;: &quot;p2yMkTIozYAquwD0BXyz&quot;, &quot;obibivinxzi&quot;: -76109536.15975918, &quot;mhxfot&quot;: &#123; &quot;zpjur&quot;: true, &quot;qgfechzs&quot;: &quot;cFj3MFm9&quot;, &quot;numso&quot;: &quot;oT5J_cBc&quot;, &quot;vhonktbrouof&quot;: &quot;yml_N&quot;, &quot;zvaveqjsfg&quot;: -718891526, &quot;ujiwxt&quot;: &quot;PeDPk7QKYLsaB_oX&quot;, &quot;yuxpnqmksu&quot;: &quot;tAekGFlr4ZF_O&quot;, &quot;pqmgegatlpo&quot;: true, &quot;wqwbnjk&quot;: &quot;xssZU97dKX&quot;, &quot;dgkqcdv&quot;: -1802763662 &#125; &#125;, &#123; &quot;rzwkqxpljy&quot;: &quot;r4LxKg0pkUXeVgd&quot;, &quot;clgmypzgz&quot;: [ -194264292.15141857, &quot;rPvjgi&quot;, &quot;ggDs2j&quot;, true, true, true, false, &quot;ARc8Z&quot;, 255432289.78754443 ], &quot;ygqpbazzh&quot;: &quot;3Vl34a&quot;, &quot;uybnutkchsqz&quot;: &quot;qDXXxx7NE6A_vj7&quot;, &quot;lgvto&quot;: &quot;L4edBdWMt&quot;, &quot;krurwyolxxmx&quot;: &quot;AG5jwr4kzbcLu&quot;, &quot;ajjhoro&quot;: &quot;P&quot;, &quot;rblwkrerpdlu&quot;: [ false, false, -48073830, &quot;64LykBwj3KxV36lV&quot;, &quot;WjA&quot;, true, false, true, false ], &quot;gmwtvemdj&quot;: &#123; &quot;ponkn&quot;: true, &quot;xryznoh&quot;: true, &quot;wiuwyypaoo&quot;: &quot;Z&quot;, &quot;knimef&quot;: &quot;xK&quot; &#125; &#125;, &quot;nHR&quot;, -402066793, [ &#123; &quot;fqkalsaxm&quot;: 1029874193.7218463, &quot;pxusjwwlpid&quot;: -408158064, &quot;eieiq&quot;: &quot;f6HYII&quot;, &quot;ynxnclsnmhg&quot;: -1799101665, &quot;gwjpdizskxi&quot;: &quot;s7Hfy9&quot;, &quot;qxurnvewvaeb&quot;: 1614058216.6136463, &quot;eoccdktvyyoq&quot;: &quot;SkA4XMaUrqQ&quot;, &quot;bpeuarsexpr&quot;: 1632296444.7840831, &quot;iuzzdbdstmv&quot;: -1290213224.113266 &#125;, -235477017, -1355490881.169675, false ], &#123; &quot;fliwevcm&quot;: &quot;5YU0&quot;, &quot;yaeqxg&quot;: [ false ], &quot;ncbhivtwqybs&quot;: true, &quot;nmfehzstbrq&quot;: 347018696, &quot;zxtkgl&quot;: &quot;M&quot;, &quot;oxbbrsoiojq&quot;: [ false, -1471193267 ], &quot;wkfgroymz&quot;: -1174030722, &quot;hdkqrzujjzcl&quot;: [ -1566230641.9768677, -524062138.16113025, 374913053.5746212, &quot;2JWXVC&quot;, &quot;eFrbzsdYyyxKIXPOVH54&quot;, 665258485, 904542319.709816, false, &quot;GgTN-hu_4dbJj-n3u&quot;, -982305335 ], &quot;myxwmmki&quot;: [ true, true, 1656980713.0403624 ], &quot;zmsxpqac&quot;: false &#125; ], 757917705.8162723, -1739166167, &quot;CtA1Ro&quot;, [ -683679780, [ true, false, false, -590813035 ], &#123; &quot;hifhjhidsrb&quot;: [ true, false, -516065053, -339008091, true ], &quot;kxvkurqrors&quot;: [ &quot;hbqQuvWgNQZS2Fa2yj&quot;, true, &quot;6dQ9XtUHebZ4kwPAl-7w&quot; ], &quot;htsmjiz&quot;: [ -698199182.2113508, false, -1664814329, 2069733558.4444075, -234710634, true, -2126970710.6003466 ], &quot;qltnsgwvb&quot;: 621766196.008857, &quot;abcrfwsgc&quot;: &quot;9FhGT1orFI&quot;, &quot;byddsksb&quot;: &#123; &quot;ppegqosqm&quot;: &quot;8fmi&quot;, &quot;pqhvs&quot;: &quot;6x1ltJesWPuN&quot;, &quot;wsjvpcmrjq&quot;: true, &quot;daxgxroity&quot;: &quot;e_9jwxk4XUNL&quot;, &quot;xdydofs&quot;: &quot;OXYfXTn-mb&quot;, &quot;cpisa&quot;: &quot;mxNYG-g_fd&quot;, &quot;ksefvgagbgat&quot;: false &#125;, &quot;wyfxopkxv&quot;: false, &quot;lgzzqgsxu&quot;: -1678218765.086281 &#125; ], false ], &quot;mcldtqgzhc&quot;: &#123; &quot;jujcds&quot;: &quot;wfEyQUp7kAeuL0J&quot;, &quot;qszahak&quot;: 786216426, &quot;ytjazh&quot;: [ [ &#123; &quot;uopqxeaup&quot;: &quot;w&quot;, &quot;khyzbkfy&quot;: true, &quot;qutgyd&quot;: false, &quot;wdlbmfkwcfc&quot;: &quot;EQWiY_9YgFJOhb2&quot;, &quot;vvbmdc&quot;: &quot;WQjh&quot;, &quot;hhskku&quot;: false, &quot;pzueectvbiox&quot;: -441144534.4889692 &#125; ], &#123; &quot;piafs&quot;: [ -1559226766, true ], &quot;vgqueqvjzrzj&quot;: &quot;Fbv-qDgliLklax9&quot;, &quot;fejnumt&quot;: [ &quot;Is2&quot;, &quot;-qQcA4MLNdMWrJUW1vs&quot;, -1137924841, false, 1996164626, &quot;4gBrRzFq5z&quot; ], &quot;yrphkqocw&quot;: &quot;YpRgL3-z5J79bVK&quot;, &quot;jchlcd&quot;: -1295730314, &quot;fuylitdjsbpp&quot;: [ true ] &#125;, true, [ [ true, true, &quot;n0z&quot;, 1316135786, 516124673.01366377, 1150613976.6446474, false, -1168540718.826539, false, -1788242240.514571 ], [ &quot;-3n-oYv4h&quot;, 904275476, &quot;XD_uHM&quot;, &quot;Ic-&quot;, true, true, &quot;VxfdtS1ynpZC&quot; ], -774382468.2206059, &quot;h_Akv&quot;, 1894939886.4613366 ] ], &quot;hdjml&quot;: [ [ -1906715167.7154028, &#123; &quot;exivmlldeh&quot;: &quot;Pca2PCoVWGy&quot;, &quot;vietfbkhww&quot;: &quot;jb_tksEAr-&quot;, &quot;kxvbyxtx&quot;: -748366235.5526559, &quot;eaggdsbhka&quot;: 1259366349.96522, &quot;minol&quot;: false &#125;, &quot;8y&quot; ], false ] &#125; &#125;, &quot;D5b8aep2rHs_4&quot;, &quot;tuttnY2hP8CBhIR&quot;, &#123; &quot;uzxmdzxwwz&quot;: true, &quot;pyyrilpawpn&quot;: 886193335, &quot;jfbfmuz&quot;: &quot;IAU6NF5W7E93o2_ZW&quot;, &quot;hygtvkfdz&quot;: &quot;49e&quot;, &quot;ocvvng&quot;: &#123; &quot;aqdjrp&quot;: 1581318894.6392348, &quot;gdlgkskwsn&quot;: [ [ true, [ &quot;ZsztPEP98me6k_N&quot;, &quot;C2cRo&quot;, 964092523.9734194, &quot;0KJbTpm&quot;, 1096984743.970191, true, -816526325.4639177, 2111817927.3652468, true, &quot;PwYiFPI0jaL4e&quot; ], &quot;4SB38X95Y&quot;, true, -757378637, 140114379, false ], &#123; &quot;hmenefwzhjbr&quot;: &quot;cXrZluwpNqkKM91EBaM&quot;, &quot;jnjdcw&quot;: &quot;gjwSSP&quot;, &quot;exzmqek&quot;: false &#125;, 529739277.27264667 ], &quot;ujohexrcdqfv&quot;: &#123; &quot;urqpe&quot;: &#123; &quot;zqqmdwftzzq&quot;: [ 144356748, true, -62844341.87803153, false, -1492676543, 97010809.25408071, true ], &quot;btctsujjv&quot;: -849921904, &quot;unyqzdgzfkp&quot;: 1064333977 &#125;, &quot;vmzmeifi&quot;: &quot;yj4g&quot;, &quot;otyqujvhdxvl&quot;: &#123; &quot;joxcoh&quot;: &#123; &quot;erzwfbas&quot;: true, &quot;iwzvqlaubyt&quot;: false, &quot;xbigiit&quot;: -1106906916.8232164, &quot;emsddn&quot;: false, &quot;dbxkfjl&quot;: true, &quot;ijtlnuxfjwiw&quot;: 723367848, &quot;ffiinqj&quot;: &quot;euxnlAR--BNLYK4UP&quot;, &quot;flcnp&quot;: &quot;OagU&quot; &#125;, &quot;biwxeez&quot;: &quot;7S8ASWD4DKbfStl&quot;, &quot;vocdts&quot;: [ &quot;ZZYJ9joTaJ-nEo&quot;, &quot;w4I4w_O5JDA&quot; ], &quot;rqpdoefh&quot;: false, &quot;bijnkvo&quot;: &quot;D-kWzO&quot;, &quot;crwwpytvetyx&quot;: &#123; &quot;oifzvrlvqv&quot;: &quot;Ww69GzTD3Au&quot; &#125; &#125; &#125;, &quot;dvaihcflbf&quot;: true, &quot;nbmcbsrl&quot;: 55649510, &quot;yvcxd&quot;: &#123; &quot;pbtbmgzqknkg&quot;: [ &#123; &quot;hsvpce&quot;: true, &quot;zuaico&quot;: false, &quot;jfmwzcx&quot;: true, &quot;ygdjtc&quot;: true, &quot;bcwklaujgh&quot;: &quot;h9juu-URKtV&quot;, &quot;epnmjflsw&quot;: 1095034813.787303 &#125;, &quot;V8Wv0zxHA&quot;, 1991477397.2298384, &#123; &quot;actindo&quot;: -1386946732, &quot;dsnvxcbvaidg&quot;: -1322518166, &quot;qspwoqbgbkf&quot;: true, &quot;xgrfltt&quot;: true, &quot;hrmmrt&quot;: false, &quot;rocrirdytq&quot;: true, &quot;wlhkdmj&quot;: &quot;7CaT9wVudV&quot;, &quot;cmmll&quot;: -10348053, &quot;nnqrql&quot;: false, &quot;yzsyxyyn&quot;: &quot;HdCdqVVLgef1&quot; &#125;, &#123; &quot;qpigw&quot;: true, &quot;hjztccuuj&quot;: false, &quot;ghbvt&quot;: false, &quot;guphstikpu&quot;: -703630790.7987573, &quot;pcuur&quot;: false, &quot;dfufdqniyrln&quot;: false &#125; ], &quot;nyyjphus&quot;: &#123; &quot;vtgtquuvuwvm&quot;: [ false, false, false, false, true, &quot;B&quot;, &quot;U9IwTbzcy3Zp6RqEt&quot;, &quot;ydYKPeWa1JIB&quot;, false ], &quot;mleucqkvoydy&quot;: &#123; &quot;cumdcmornviw&quot;: false, &quot;yqgrm&quot;: -1596228354.0448751, &quot;erhgaahsotc&quot;: -1101538965, &quot;gjbhzzddqfp&quot;: -853032076.6797427, &quot;hjjscd&quot;: false &#125;, &quot;xwajfngcka&quot;: false, &quot;frrnvrqji&quot;: &#123; &quot;bhpdajlem&quot;: 627763190, &quot;eepzqlapcfl&quot;: &quot;MJvCbR&quot;, &quot;virba&quot;: &quot;RIMk5wD&quot;, &quot;pffoox&quot;: 1641514859, &quot;qwsbvwjrk&quot;: true, &quot;ffbibogtwzv&quot;: &quot;IoZc2w4Epxh6N3y4He&quot;, &quot;bxcvv&quot;: &quot;5C86t83PTfnQlpaaV&quot;, &quot;zlvapztcg&quot;: 932477427.4998753, &quot;wtjteo&quot;: true, &quot;apimss&quot;: 1308708692 &#125;, &quot;djfvg&quot;: false, &quot;tdcmuid&quot;: &#123; &quot;ktdqimljmq&quot;: -2134717210.4028487, &quot;ykryhohp&quot;: true, &quot;qyjxm&quot;: false, &quot;thufqdtvkf&quot;: -351874524.3639772, &quot;ezaajf&quot;: 1952725419.4566972 &#125;, &quot;pmwiun&quot;: true, &quot;urafxu&quot;: &#123; &quot;cppchinkwla&quot;: true, &quot;ypdfayqej&quot;: &quot;e&quot; &#125;, &quot;zpafysv&quot;: -1843351676.4220238, &quot;khwnisjic&quot;: [ -1321500873, true, &quot;OdSUmeR&quot;, true, true, false, -1469078394.0145407, true, &quot;MxgA4rxEqKeo1S&quot;, &quot;FOd3_02txpAK4e6F83&quot; ] &#125;, &quot;uofyt&quot;: &quot;AYXhcj_beQtNfVHRIz&quot;, &quot;fpajxq&quot;: &quot;5TCPSkFdAzZ&quot;, &quot;lqfbtrzvqmec&quot;: &quot;a7NgMhplqo852YhI&quot;, &quot;cjfyemggpcbh&quot;: [ true, -1697479909, &quot;bDQYjxc&quot;, [ false, &quot;GXe1HXDFHNyE6y&quot;, false, 662478893.071877, 896710804, true, false ], -323751803, [ &quot;UaRMKAi74o&quot;, &quot;pvXocIx0HgL7I&quot;, false, &quot;qC-&quot;, -84034391, false, false ] ], &quot;nkqas&quot;: &#123; &quot;vpfhut&quot;: &#123; &quot;vvimqbf&quot;: true, &quot;qwrvoo&quot;: true, &quot;lraaluyslp&quot;: &quot;TOa-MN5&quot;, &quot;ytexzrlnc&quot;: false, &quot;lxkoakr&quot;: false, &quot;sadoghsmopw&quot;: &quot;IvuO6LBdb&quot; &#125;, &quot;ozyyhoe&quot;: [ &quot;9WT4y4PU&quot;, &quot;nuZ5nwVhbw_8HSJU4KS4&quot;, &quot;RsJMYHP&quot; ], &quot;zjyymdftxkhn&quot;: 1177104596.9635024, &quot;zcdrqr&quot;: [ &quot;ZEDZTsUJsEzwl2_EYg&quot;, &quot;YHba2G&quot;, 714998063.8911437, false, &quot;LXXk69&quot;, 2072565414.68213, &quot;jdCv0dmPu-dj-RmRV&quot;, &quot;R4FssgbPL0XavpqyYx&quot; ] &#125;, &quot;natbxbghrhs&quot;: [ &#123; &quot;lsxdolpzvg&quot;: &quot;UBpes42EFW-G6Frt&quot;, &quot;jplnir&quot;: &quot;sA2rF4UEcuGhLfREL&quot; &#125;, &quot;DgDmNxgGmy&quot;, &#123; &quot;fxdow&quot;: true, &quot;mdkklxu&quot;: -833464483.6372155, &quot;pofdpnvs&quot;: true, &quot;uzoehhii&quot;: false &#125;, [ &quot;OrfsMP-&quot;, -1932683014.0949554 ] ], &quot;eojsep&quot;: &quot;_4r5YZKVLc_&quot; &#125; &#125; &#125; ], &quot;ktmvgrxpsppv&quot;: false &#125; ], &quot;AyCOf&quot;, 1037567253.0805973, -1252882131.4680645, true, &#123; &quot;xaitrnxfvw&quot;: &#123; &quot;nwgjmr&quot;: &quot;pKVnueXWV&quot;, &quot;gdvpvjt&quot;: &quot;uPsA-iMYPH4rZOSC&quot;, &quot;mdlsov&quot;: [ &quot;fnS_W-r-Ts&quot;, &quot;GH1JBoLKbS8UZ&quot;, true, 74408454.32561278, &#123; &quot;vmaeogwofia&quot;: &#123; &quot;ipuzqxt&quot;: 665408851.2694653, &quot;kzuzrpryce&quot;: -937327654, &quot;tkxqer&quot;: &#123; &quot;fyxqvguanpn&quot;: &quot;ba&quot;, &quot;cgfaldkqrkru&quot;: &quot;-UDJp65e&quot;, &quot;nauxavect&quot;: [ &#123; &quot;sfiyhuxsumq&quot;: 2008216037.4933994, &quot;tdemqbspwop&quot;: 228013618.26449654, &quot;wcoqgwhss&quot;: false, &quot;cadwgw&quot;: &quot;jwR&quot;, &quot;vckdkr&quot;: true, &quot;sbibvslyeyp&quot;: &quot;y2mGH3&quot; &#125;, true ], &quot;ztizbieqm&quot;: &quot;uP1ot-CXhrZrcDLEzno&quot;, &quot;duvsmv&quot;: false, &quot;exrzpl&quot;: 1917425767, &quot;cboayo&quot;: &#123; &quot;kysneor&quot;: [ &quot;0tyWNfGAKIPkm3O4&quot;, &quot;Vi0RmMEAqF&quot;, &quot;nO3y0az__9O2&quot;, false, false, true, -783708593.2980149, true, 809154590.0862904 ], &quot;tkltoff&quot;: &#123; &quot;ymmizcfb&quot;: true, &quot;ugytqyclqdu&quot;: true, &quot;luaditwcrco&quot;: 419106966, &quot;ugwbgbgiqxor&quot;: true, &quot;uvhbn&quot;: &quot;z6WQi&quot;, &quot;dwfwtk&quot;: 372214359.85793847, &quot;pikwq&quot;: true &#125;, &quot;xktiwoai&quot;: true, &quot;ojcjccg&quot;: 1925714307.607916, &quot;quvitvvwisb&quot;: true, &quot;xvwzmfzkzum&quot;: [ true, true, 130780451.96412788, 598921339.3154116, false, 1723692770.2819989, &quot;aBAua-5u-Tpg&quot;, &quot;0IXCiXjS9yGW0BG3m&quot; ], &quot;aigupwnb&quot;: [ true, false, true, -1882527666, &quot;i0X-xn0mWxz9u5-TriLO&quot;, &quot;0Aj41Tnsb&quot; ], &quot;juckmwgwcb&quot;: &#123; &quot;idavqp&quot;: false, &quot;vcwarugu&quot;: -1469597156 &#125;, &quot;xinpen&quot;: [ &quot;tPyEk9c1syndc3&quot;, false, &quot;THB98AvSqzKcHEBn&quot;, false ] &#125;, &quot;punnwnmdciie&quot;: &quot;lv5jELCtrUO52o-KJ&quot;, &quot;oawbjhktyij&quot;: -1291719047 &#125;, &quot;crgbbqcxy&quot;: &#123; &quot;lsalwrwswux&quot;: &quot;4vS-yM&quot;, &quot;hqachm&quot;: [ -1247013279, true ], &quot;rdksj&quot;: &#123; &quot;dlbizx&quot;: false &#125;, &quot;bltpbf&quot;: true, &quot;wetdrf&quot;: [ false, true, &#123; &quot;njnmixrv&quot;: 42996778.67090652, &quot;zhbodmpzs&quot;: -962959328.7427077, &quot;zhxlz&quot;: &quot;GOAzM-Vm9&quot; &#125;, [ 702672969.9366589, 779897125.0527567, -1882619161.545962, 1962396605.138651, 317912394.07081777, false ], [ &quot;94&quot;, &quot;Mtaq&quot;, &quot;UDhtPSzQ4&quot;, false, -1044773190 ], true, [ &quot;-fsZ9pb5VOQC&quot;, &quot;lINBW2V5U&quot;, true, false, &quot;ifHuRX&quot;, false, &quot;_W8t&quot; ], true, [ &quot;cieOlUtKRnuT&quot;, true ] ], &quot;akhdodevaash&quot;: &quot;lkP&quot; &#125;, &quot;tqobirb&quot;: 1495570939.5241272, &quot;biqgpgmqjwwq&quot;: -1813608887, &quot;nderigfnlv&quot;: &quot;39JVSNIVACz&quot;, &quot;vqjzp&quot;: true, &quot;vwhvd&quot;: [ -2132325901.2181122, 208570528, 1424864018, &#123; &quot;crimmugzqek&quot;: [ &quot;5GrAglNTYfxFX&quot;, -43915189.08423189, &quot;-qXpJQf2NsCPXePUE6&quot;, 889818545, &quot;80DSaPlDpslc9P5kuO&quot;, false, &quot;ex1OsiVF6bWW&quot; ], &quot;dcxiajo&quot;: &quot;TdhE&quot;, &quot;ixerbgwxbo&quot;: true, &quot;eimphyvig&quot;: true, &quot;ikqtwf&quot;: &#123; &quot;legmvolpfekw&quot;: true, &quot;vhaboipfs&quot;: &quot;Wv&quot;, &quot;mnvjyxhn&quot;: &quot;dexlv8Q&quot;, &quot;qvcsf&quot;: &quot;Ln_McgAU&quot;, &quot;chfuipb&quot;: true, &quot;vmejnnyctt&quot;: &quot;iT42ZvyHzOXetdrK&quot;, &quot;nzkwiscf&quot;: &quot;ncZdyHAnZ2UhKXmhJObP&quot;, &quot;zycnyzmprzh&quot;: true &#125; &#125;, [ &#123; &quot;tqujsinaseya&quot;: 1130899582, &quot;akfdz&quot;: 1347778477.8603253, &quot;zomiksqpjke&quot;: false, &quot;vsakhu&quot;: &quot;MxElHC8yR&quot;, &quot;llovrj&quot;: -529440494.98601544, &quot;akdgqov&quot;: &quot;99i&quot; &#125;, &#123; &quot;jjulgvgi&quot;: 370210260 &#125;, 1680941987.5654912, &#123; &quot;isdcpqwxsggu&quot;: -1311623569, &quot;wkedmnqtsm&quot;: false, &quot;ogwnn&quot;: false, &quot;fbiuahdsf&quot;: &quot;f4miqUjeBGt3w5iPEx&quot;, &quot;jergw&quot;: -514005093, &quot;uqptvn&quot;: &quot;C&quot;, &quot;pekdfhpsfpe&quot;: &quot;ZHSkEGF&quot;, &quot;rkhmqntbgu&quot;: -463204898, &quot;hcvjy&quot;: &quot;z&quot; &#125;, true, &quot;dMzND9hwPw&quot;, false, [ -172298609, &quot;0yMvw9k5dcC5D3tx5&quot;, &quot;LjJQLd&quot; ] ], &#123; &quot;xiikqoz&quot;: 6173870, &quot;fxbdfex&quot;: &quot;pO0Fq_cyI&quot;, &quot;wldszsxvsmz&quot;: [ &quot;XfymyHk0h9uUqbBkCTb&quot; ], &quot;yktfxybqdgot&quot;: 1080248968.2307198, &quot;tiuxncu&quot;: -1123876297, &quot;cjqjbzc&quot;: &#123; &quot;gcelcngawmn&quot;: true, &quot;veuzupn&quot;: 1515198042, &quot;hvocmpbb&quot;: true, &quot;ajgprb&quot;: &quot;UZLjc9zLIeA&quot; &#125; &#125;, false, &#123; &quot;leuzclxdr&quot;: [ &quot;tY_q3R&quot;, 1177404898.563247, true, true ], &quot;sfvloovh&quot;: true, &quot;zpvwvumebnk&quot;: &#123; &quot;klaho&quot;: &quot;sR-R5eF4I00OJF&quot;, &quot;rmxwaomhq&quot;: &quot;3wsI5sCXJ0bO5UTKvGj&quot;, &quot;xwvmblnbcye&quot;: &quot;Mm4Zm&quot;, &quot;mhpwxooe&quot;: &quot;fZRe4I2HCv&quot;, &quot;ljqtzqpno&quot;: &quot;hDUp2Y&quot;, &quot;ydyzsyzmxtjl&quot;: &quot;FmQIuazO1ud8Cg5A8&quot;, &quot;vvnvimxw&quot;: false, &quot;spmitz&quot;: true, &quot;tpgxea&quot;: &quot;kKXnnFrqwKmNAsQmakcV&quot; &#125;, &quot;dsjkfcy&quot;: false, &quot;lflwioj&quot;: [ &quot;Wrd-pr3KuOG4lZMY6dju&quot;, &quot;mgczMGF8c8jsWZOrO&quot;, true, &quot;WrFoP&quot;, true, &quot;X&quot;, &quot;SwE0x4a1BC3c8YXEoK&quot;, false, -268756878.93164307 ], &quot;erukdrpm&quot;: [ 542123994, &quot;02XaSvbpV&quot;, &quot;iluAYY&quot;, false, -721305034.5615451 ] &#125;, false ] &#125;, &quot;gvrysjncyvt&quot;: [ 1933814086, true, [ false, -1998462860, -1753193031.6921995, 1277621131.847381, &quot;FD6CYFJ_zX&quot;, 966918327, false, true, &quot;otAq0Aq2GEPf&quot; ], &#123; &quot;egioeulhvqih&quot;: [ false, &#123; &quot;zjtukvzcv&quot;: &quot;0RZM&quot;, &quot;iahcr&quot;: 1856060910.0138543, &quot;wpzeus&quot;: 1841749390.9825985, &quot;dvekwvpws&quot;: &quot;Z3zqrI&quot;, &quot;thofliozmss&quot;: false &#125; ], &quot;wsoustdrzjc&quot;: &quot;fxzDMVrJdSmrpa&quot;, &quot;hfmzcznrdc&quot;: &quot;drv4c5Kd&quot; &#125;, &#123; &quot;ffonk&quot;: &#123; &quot;gcnveb&quot;: &#123; &quot;abrsddzwabvs&quot;: &quot;VdH&quot;, &quot;wufifns&quot;: &quot;yh2bNEH-6MDuw&quot;, &quot;jvgoik&quot;: -343291111.24708116, &quot;dhauhjsksg&quot;: &quot;vSragp1ZkOyHPI-&quot;, &quot;zelznmwts&quot;: false, &quot;vafaottx&quot;: -1500223981, &quot;ledflcxoehkp&quot;: 71251486.1832187, &quot;kszxlkiyjyv&quot;: &quot;N4bFCE1j8v&quot; &#125;, &quot;tkegmmk&quot;: &quot;7p6sJe9D6MN&quot;, &quot;btxtaxojfj&quot;: [ true, -1444023301.5188413 ] &#125;, &quot;vtfxmbdsina&quot;: &quot;CfoQwAP&quot;, &quot;lzdjoduld&quot;: &#123; &quot;gtovzii&quot;: [ &quot;8stOHqU9H&quot;, &quot;z1lFmFRa&quot;, -525981145.12686515, 244010675, -526438903.3560455, true, 2006357312, 115730732.30066715 ], &quot;mcozxjqiswx&quot;: &#123; &quot;fqdnyiycce&quot;: -2078795136, &quot;bxznqjtwuecc&quot;: &quot;7NCuYEyBP_jtdlL&quot; &#125; &#125;, &quot;grweow&quot;: 1327601283.0796964 &#125;, true, &quot;ytSJb&quot;, 1289937196, &#123; &quot;nsjfaqtozdiq&quot;: [ 1348251724, -2073776674.9959857, &quot;yscEon&quot; ], &quot;mtajujqcjhbi&quot;: &quot;NVkVnnhxrLd9D3bUxzFG&quot;, &quot;csmttzbju&quot;: [ &#123; &quot;uicda&quot;: &quot;0g-A4hRiJTBx&quot;, &quot;yhkgperv&quot;: &quot;6okbTRhoFRlg3&quot;, &quot;vgiotooyspmz&quot;: true &#125;, -8320402.341022304, [ &quot;Fojw-yk&quot;, -2117892031, &quot;6y-5SXj1WsZWMfDx&quot;, -133903523.65406267, -743256906 ], false, true, &#123; &quot;edjtyrkndj&quot;: false, &quot;vquvp&quot;: false, &quot;buvmt&quot;: &quot;vKhhL2YgbMB5&quot;, &quot;comfclpaviq&quot;: &quot;5CYbjxcDl&quot;, &quot;mylfrot&quot;: true, &quot;dhukpm&quot;: true, &quot;caudyywms&quot;: &quot;cin&quot;, &quot;lxxomkwlsw&quot;: true, &quot;ygzfcjwl&quot;: -84334868 &#125; ] &#125; ] &#125; ], &quot;sycer&quot;: &quot;i1HF-wId8QzvgqK3FA&quot;, &quot;vhmghdmuui&quot;: &quot;llUmv7pH1AyiHHzvhWwD&quot;, &quot;fgijoenp&quot;: 1558325042, &quot;ykolpeo&quot;: [ &quot;88PS56UZulx-inCG&quot;, true, &#123; &quot;fgfntzqwrl&quot;: &quot;PasaHKVAYZH1qz8&quot;, &quot;libqze&quot;: 1223365768.3000464, &quot;ovmzujoerw&quot;: &#123; &quot;lxorfhwdepn&quot;: false, &quot;damivyfbnvb&quot;: true, &quot;jkisoikdnnn&quot;: &quot;WXkOGqTGIjjDlKaLZSS&quot;, &quot;mfhfuqxxs&quot;: [ &#123; &quot;ylpqsbar&quot;: &quot;JLqNwIP9&quot;, &quot;jliqdjcs&quot;: &quot;d-xpY35BSvsbVTsbhky&quot;, &quot;bylytt&quot;: -1977813527.9998777 &#125;, [ &#123; &quot;achslfrmy&quot;: -1619523244, &quot;egakdwl&quot;: false, &quot;okuczsx&quot;: &quot;yPK4R&quot;, &quot;hvshjusz&quot;: 1888707639, &quot;rsmwcjwixwq&quot;: false, &quot;qztzczybq&quot;: true, &quot;hmnrxaxg&quot;: true, &quot;ajslgzzg&quot;: 346037474 &#125;, 428389414.2818284, 1820291183 ], false, false, &quot;KThFH8&quot;, [ -1362611154, -1782482339, &#123; &quot;kripj&quot;: true, &quot;hleij&quot;: true, &quot;efjqd&quot;: false &#125;, &#123; &quot;qakdpnaavj&quot;: &quot;Fser3cuOMY&quot;, &quot;cohczheg&quot;: -1395581718.8152132, &quot;zoosbosdad&quot;: &quot;fXb9WkG69&quot;, &quot;dwvaqmt&quot;: -1209329041, &quot;jxwogwotjte&quot;: &quot;Ec&quot;, &quot;ryadgxte&quot;: -1619639352.0624394, &quot;pysip&quot;: &quot;rak2hlB5r&quot;, &quot;qvmivczz&quot;: &quot;YAoSBMaIsTq&quot;, &quot;pyskjgobi&quot;: -220426541, &quot;ncsqooescr&quot;: 42231826.02604102 &#125;, false ], &#123; &quot;exgtpnsb&quot;: false, &quot;lmmfjqbktj&quot;: true, &quot;oebit&quot;: false, &quot;vkubvnjc&quot;: [ true, true, false ], &quot;kfaqn&quot;: -97139896.9271268, &quot;hirlfp&quot;: &quot;-zBgX2Il0Lp&quot;, &quot;yiuiivasqorj&quot;: false &#125;, [ false, 622217944, [ &quot;coL0Id&quot;, &quot;hWUlEIoZs3O9StE65&quot;, 1652165275.062476, -984403703.8521897, &quot;fdW8Q0&quot;, &quot;vI1-1OOQvgoiDy8y&quot;, 1642042642, 40142986 ], -532192500.50051343, -631464246, [ true, false, -1321535133, true, false, true ], [ true, 1189081854.6000803, &quot;G&quot; ], &quot;D0V8t&quot;, -1373645174.969025 ], true, true ], &quot;coezxqikvfb&quot;: [ [ &quot;TJ&quot;, false, &#123; &quot;qejgvqw&quot;: -1175428489, &quot;vlookl&quot;: -23580035.57871896, &quot;xwchrs&quot;: true, &quot;yxjibfi&quot;: -1161161506.0811968 &#125;, -631235238.5539757, &quot;TfOa9bv-jU&quot; ], [ [ 531397625, -801203347.1844071, -2058039786, 420272857, false, -627030855, true, &quot;XAdqcfCr6MhHaGFIgP&quot;, -324396190.9126076 ], &#123; &quot;wrkndtkzezf&quot;: 1685206454.1314747, &quot;waagoicnyf&quot;: -550574854, &quot;habgnvxjr&quot;: &quot;ViMdI&quot;, &quot;ndhluxfw&quot;: &quot;Ot8XtMUdcpREZif&quot;, &quot;axugtu&quot;: 2126366783 &#125;, &#123; &quot;gjugtqivi&quot;: &quot;FBjW3KtBUF9CDt&quot;, &quot;hljkyb&quot;: &quot;v8m&quot;, &quot;lhgcfacqb&quot;: &quot;RXZ7oZpRqMqQkXL9&quot; &#125;, &#123; &quot;gvgze&quot;: &quot;9PPlxSmtn&quot;, &quot;ftpnejealy&quot;: 386140924, &quot;hvaqkrhu&quot;: 1146501964, &quot;vqeetpx&quot;: false, &quot;afpdgdul&quot;: &quot;1Nd-df6rtAHcrTUmP0&quot;, &quot;rmwwflnqwoby&quot;: -1653117054.804914, &quot;fhxpvdgt&quot;: -1724282527, &quot;opknvvmocs&quot;: 584295467.4330444, &quot;qkpqtux&quot;: false, &quot;woqzc&quot;: true &#125; ], &quot;7txRuWSRra&quot;, 1276752681, false, &#123; &quot;ujtingovsree&quot;: &quot;d5&quot;, &quot;dbsgzw&quot;: &quot;DhJ_R&quot;, &quot;yoisrwf&quot;: false, &quot;fpklqd&quot;: [ &quot;BTFJTuRG&quot;, &quot;Wa5HE4iq_P2&quot; ], &quot;bdcsrtni&quot;: [ true, -860576137.4352238, false, true ] &#125; ], &quot;esqbyf&quot;: &quot;Ri8i0kOQBINnk&quot;, &quot;poaosu&quot;: &quot;wRXmFzV&quot; &#125;, &quot;hudlnngxoxvv&quot;: [ &#123; &quot;hbgmvgvdzp&quot;: &quot;k&quot; &#125;, false, &#123; &quot;dymzmp&quot;: &#123; &quot;elwyiqujdby&quot;: false, &quot;neikbicwjj&quot;: &quot;WJrMffS&quot;, &quot;vzrqsd&quot;: 718763689, &quot;yhomc&quot;: &#123; &quot;zrkhzfmyeak&quot;: 2121909918.0496738, &quot;upiisnhbml&quot;: &quot;5aK8Nzem7xwtm&quot;, &quot;tobdfqewlbp&quot;: true, &quot;yssrjmzhv&quot;: &quot;yLrwTb&quot; &#125;, &quot;wmnitbq&quot;: &#123; &quot;ddeftcdgzdu&quot;: &quot;wi88ZHNIadWT0Prf_Whz&quot;, &quot;ukvmjku&quot;: -381847229.7375061, &quot;uqeqg&quot;: 890415691.2828615, &quot;orziloh&quot;: &quot;iIw&quot;, &quot;xqgoilebws&quot;: 1916144411, &quot;vfpxxhh&quot;: false, &quot;nstfnjnr&quot;: &quot;p64uOoKt6KXdvivAv1s&quot; &#125; &#125;, &quot;jilvdomyxv&quot;: false, &quot;ceuqyypj&quot;: 1110767780.539967, &quot;goxtrtfaxvry&quot;: 207587263, &quot;tlccpqucg&quot;: 334426003, &quot;zjsdtq&quot;: &quot;HjNAEENv&quot;, &quot;tzuuhiogkce&quot;: &#123; &quot;mevmkwwvjnb&quot;: &#123; &quot;ioosbvjb&quot;: false, &quot;djgobkaiikjf&quot;: &quot;HE03adnL2I&quot;, &quot;qnljxkbnerj&quot;: 541163549.8000541, &quot;hnqvz&quot;: false, &quot;aeehbdv&quot;: -1976737778 &#125;, &quot;tmxhfjcbnepf&quot;: &#123; &quot;brslusqcde&quot;: true, &quot;npkmb&quot;: &quot;NPlR&quot;, &quot;tvopmpt&quot;: 462169666.2405092, &quot;ewsljrvfg&quot;: false, &quot;nzgdgnqvcdf&quot;: 1342954174.1982095, &quot;pozmtpven&quot;: true, &quot;nkisjrvv&quot;: &quot;oPLZZ8LE0ku-q7iQ9b&quot;, &quot;wcujnozihxt&quot;: &quot;EddIW1p1XgmyJPdipXV&quot; &#125;, &quot;rcomqypba&quot;: 462840377.43369365, &quot;uyftgfhdiq&quot;: &quot;eg_jk0PqESIQj9wX&quot;, &quot;cqgmdzetmdq&quot;: &#123; &quot;sfmiozvnda&quot;: &quot;up&quot;, &quot;ryscdso&quot;: &quot;1s6rXl7Ei3z86RWsE&quot;, &quot;cmuovfe&quot;: 1821479204, &quot;uirasazog&quot;: &quot;K4d31hN6vXoF3JabO&quot;, &quot;daokpf&quot;: 1789880138, &quot;yqkmiuychj&quot;: false &#125;, &quot;gbgmwquaa&quot;: true, &quot;ebrndy&quot;: &quot;0ljLwN7RtA5aud90&quot; &#125;, &quot;kyrhia&quot;: true, &quot;ywqokscmmm&quot;: &quot;y0iBz6SCfhSx6qr3rch&quot; &#125;, &quot;cmj&quot;, &#123; &quot;xzyndotshh&quot;: -1281975182, &quot;nrabunreo&quot;: 1954812880.5355344 &#125;, &#123; &quot;qjambnlpx&quot;: &#123; &quot;xygxwacsupec&quot;: [ 340391043 ], &quot;nheujfelpqcj&quot;: -932395202.0291632, &quot;jghxkwz&quot;: &quot;W0&quot;, &quot;vovicezopgsk&quot;: &quot;SwMFPrkM&quot;, &quot;vgzpb&quot;: [ true, true, true, -1624666979, true, -567706336.3549725, -633739921.4671117 ], &quot;rlbcossoyp&quot;: true, &quot;fzencfm&quot;: &quot;X8Mybnsr&quot;, &quot;lnupvnoenvd&quot;: false, &quot;gdsdpbt&quot;: -848647087.6559281, &quot;sliqaurbahrz&quot;: &#123; &quot;wxynemd&quot;: 634898877, &quot;srgfo&quot;: &quot;vWlvX&quot;, &quot;pfswnhm&quot;: &quot;Z6pa_ppPlnDg&quot;, &quot;xfgypxcgvy&quot;: &quot;kJi1zL3_Ds3XKmxPLAd&quot; &#125; &#125;, &quot;azvwyprlv&quot;: [ 1799632225, &#123; &quot;bqouuuoz&quot;: &quot;ggYxS9zRHdF-&quot;, &quot;cfrji&quot;: 1967226922, &quot;qbydbrpaljk&quot;: 333891598.4598398, &quot;uakvpkibgtx&quot;: &quot;un3pO&quot;, &quot;xjpywrjaadww&quot;: 1137214531, &quot;kewzuzq&quot;: -1765992900, &quot;ichvjf&quot;: true, &quot;ixqtoq&quot;: 1117983701.6031604, &quot;rmfzttl&quot;: false &#125;, false, [ true ], [ -1652605109, true ], &#123; &quot;gxluujjwgc&quot;: &quot;jTCXYNl&quot;, &quot;zzqiudvgagti&quot;: true, &quot;ycxjt&quot;: &quot;iE&quot;, &quot;aznlzskruj&quot;: true, &quot;pdbxi&quot;: &quot;K-O_dzi&quot;, &quot;icwwrcabfxi&quot;: -32971801 &#125;, [ false, true, &quot;oO0Rx&quot;, true, &quot;nMwURukvCAKHAqA&quot;, 1095355233, -1386656049.5323694 ], [ &quot;-ZQgXzn-p&quot;, &quot;pt&quot;, false, &quot;g-WXAHWjOHCpMfA&quot;, &quot;JvboHKFgqqZbOC20D&quot;, -1056842207.8321831, &quot;eA3H&quot;, false, &quot;b3iw_&quot; ] ], &quot;tpzvzkafjc&quot;: &quot;CRP9YzwvFQWE6BN&quot;, &quot;heplvvpgw&quot;: &quot;85OvTowA&quot;, &quot;nbufeanahk&quot;: &#123; &quot;idaas&quot;: &quot;_Nn&quot;, &quot;aryad&quot;: [ &quot;djX6edd_fb3hYQ&quot;, true, 1590515175.1057904, -2093542758.903518, &quot;WW_F0a&quot;, true ], &quot;xqdbyficc&quot;: [ false ], &quot;brywbe&quot;: true, &quot;ocbqh&quot;: &#123; &quot;xsummkvn&quot;: -1817109006.5547726 &#125;, &quot;rdcothbjb&quot;: false, &quot;qcttxxxxi&quot;: [ -818807583, true, true, false ], &quot;efahpqzj&quot;: &quot;R57sOOr9Za2Wd&quot;, &quot;eeapyckpew&quot;: [ false, -1856407735, false, true, &quot;J_O_y&quot;, &quot;pm10TfTvUteKT2RXE&quot;, &quot;bFHxsj&quot;, false ], &quot;ytcynrrietaq&quot;: -1527475417 &#125; &#125; ], &quot;wmjzmwhqlbc&quot;: [ &#123; &quot;mxvsuj&quot;: &quot;8c&quot;, &quot;neihw&quot;: 431366429.63239086, &quot;bnkrqpzgkdz&quot;: [ [ &quot;i&quot;, false, -1095187386, &quot;odozRxO&quot;, -1132872641 ], &#123; &quot;qirbi&quot;: true, &quot;znsyvcnvh&quot;: &quot;F&quot;, &quot;vpezjkitzafj&quot;: 1400705265.7485986, &quot;afvfegfyo&quot;: &quot;NrM-N&quot;, &quot;brvusyqqzefz&quot;: true, &quot;nbrxcwajbw&quot;: &quot;KF7Bh4wrSrYi&quot;, &quot;azwleqebe&quot;: &quot;JKvo&quot; &#125;, &quot;ZNDoK_wen6ogHhqJWk&quot; ], &quot;kdbmren&quot;: &quot;34v68XnTiO-7T&quot;, &quot;atfpsjwsdsqy&quot;: &quot;hj7uVZcfk&quot;, &quot;qxpfhutkhl&quot;: -399152168, &quot;grthyenomao&quot;: false, &quot;kojtpqup&quot;: &quot;_7&quot;, &quot;cbtfxj&quot;: -265427838 &#125;, &#123; &quot;sbuoeltvd&quot;: -2024066120.4197364, &quot;bnfusny&quot;: -629230922, &quot;qbycq&quot;: true, &quot;arskzeskrw&quot;: [ &quot;t-PtDdanvq8z30J16a_3&quot;, false, &quot;71nvF15asdFdoXH8XYR&quot;, &#123; &quot;cozcmhwzau&quot;: true, &quot;uzijguinqd&quot;: true, &quot;tzhbstt&quot;: false, &quot;gvfnewieev&quot;: true, &quot;dszopgrhnsqu&quot;: false, &quot;ulzbcau&quot;: &quot;J-a3aeQP&quot; &#125; ], &quot;ueowwvdhg&quot;: false, &quot;dmphkwb&quot;: &quot;TI5Vn&quot;, &quot;pcnqqsmxsl&quot;: true &#125; ], &quot;akwznb&quot;: true, &quot;elkgkvp&quot;: [ &quot;413oFyiM5dL&quot;, true, &quot;Q9t&quot;, false, &#123; &quot;yyhdnoslf&quot;: &quot;Jw5Tn&quot; &#125;, [ &#123; &quot;uupxbttrujqz&quot;: [ 1225838384, true, -1837761.2741319232, true ], &quot;ojxvk&quot;: &quot;Sl7oeePz&quot;, &quot;cslhzweo&quot;: false &#125; ], &#123; &quot;wurxwq&quot;: &quot;x&quot;, &quot;rwidbbpdi&quot;: 95229170, &quot;ohqsfyv&quot;: false, &quot;cqvvjhmhhwi&quot;: &#123; &quot;ghggmqazmtph&quot;: &quot;KiKT&quot;, &quot;izmtvfpfoakz&quot;: &quot;9&quot;, &quot;qmartopbcoy&quot;: false, &quot;eoowpew&quot;: 864986508, &quot;zweftgkzbb&quot;: &#123; &quot;wqaextgahy&quot;: 83561984.3406899, &quot;ovcgjwtyugg&quot;: -708383028, &quot;pawhiadrjg&quot;: &quot;lxR6bQceFWYUdrBV&quot;, &quot;ahschcfz&quot;: 2713669.1460380233, &quot;msqjv&quot;: true &#125; &#125;, &quot;ypktjhlfn&quot;: -1904703131, &quot;jzzaenwz&quot;: -1042249631.5948138, &quot;jbzmnf&quot;: true &#125;, &#123; &quot;tnfbdeozeg&quot;: [ &quot;t&quot;, &#123; &quot;chzuel&quot;: -1399189474, &quot;qgrydtn&quot;: &quot;HtGAAMFmsSmfC&quot;, &quot;cryrsgddqm&quot;: 143644766.18056485, &quot;rflltq&quot;: 2113402702, &quot;pgplp&quot;: false, &quot;toldsj&quot;: -1091630692.6403463, &quot;sumcy&quot;: 2099404124 &#125; ], &quot;shdocmbbhmgl&quot;: false, &quot;jvxyauzs&quot;: -277293084, &quot;pkabavqtko&quot;: [ &#123; &quot;efxqqui&quot;: false, &quot;opzrx&quot;: -1693810093, &quot;eumbfglwm&quot;: &quot;2jVmWV&quot;, &quot;iialimusx&quot;: false, &quot;isqfjlfbo&quot;: &quot;Rlb7pvn2E07hT&quot;, &quot;fbxkrgzpmrv&quot;: -877809374.2971884 &#125;, false ], &quot;zyhed&quot;: &quot;SM53xJ7LZwg3fdmUyuB&quot;, &quot;gltlw&quot;: &quot;MMQ4MkU0&quot;, &quot;vfmfchwhg&quot;: true, &quot;oliasrs&quot;: -1492099131.2639546, &quot;krbak&quot;: &quot;uxcYBTYQUpUOf8voOc&quot;, &quot;fyxmavfgawr&quot;: &#123; &quot;keiagk&quot;: [ &quot;9W1oi4vy&quot;, false, true, &quot;MA4mkG6&quot; ], &quot;imfneflt&quot;: &quot;99v_daTjffSSYQy6c&quot;, &quot;ipxtfprcegle&quot;: 862644594.1910795, &quot;seicjcfqub&quot;: [ false, false, false, 1335980611, false ], &quot;qsifcfucd&quot;: 732207890.6455723, &quot;joedqpbcsm&quot;: &quot;m1RA03onfSASN_7pfJwo&quot;, &quot;bnswqv&quot;: &quot;zHezJLfgWHZyymyPo&quot;, &quot;ndwwubfmue&quot;: &#123; &quot;nmuys&quot;: &quot;x08LXCqDFmnQxF&quot; &#125;, &quot;zwaiymlva&quot;: &quot;ZVfU&quot;, &quot;ljfctv&quot;: -566532982 &#125; &#125;, &#123; &quot;grgufqd&quot;: &quot;2LnoQPQwX6x1PAT5&quot;, &quot;rqqxr&quot;: true, &quot;ztwegwwb&quot;: &quot;JfBFQN1sEzCG9lThUD_&quot;, &quot;jzdtcszbjsh&quot;: &#123; &quot;szjgwrfeqbwq&quot;: true, &quot;kwlyydwjlb&quot;: &#123; &quot;xeguokwplh&quot;: 1082138701, &quot;xfwfnjwu&quot;: &quot;zd3GTnX2rO3HsE03e7d&quot;, &quot;qsmeptikol&quot;: 1739352283.968711 &#125;, &quot;ntofmaixubge&quot;: &quot;w&quot;, &quot;pgvwgseaw&quot;: false &#125;, &quot;uurtfnqs&quot;: &#123; &quot;ktgqagztsghp&quot;: &#123; &quot;okrbo&quot;: &quot;0_hzBAZ&quot;, &quot;nwlxstco&quot;: &quot;_iFB8HLYBjE&quot;, &quot;xivlfsd&quot;: 941292043.7375271 &#125;, &quot;hsjnnasdskn&quot;: &quot;RXt6Knc6ncddU99wQJE&quot;, &quot;vgzlbkpdpef&quot;: 2059991665, &quot;abutkp&quot;: &#123; &quot;izskxbf&quot;: &quot;_MQ8&quot;, &quot;doqopq&quot;: -1072073099.9893911, &quot;udiwnd&quot;: &quot;-uU0qBwQgznG&quot;, &quot;ygmugf&quot;: &quot;rEWGZNUsA9j3zXJ1&quot; &#125; &#125;, &quot;syxthvudru&quot;: &quot;HFT42glSkDnrm8XxByn&quot; &#125; ] &#125;, &#123; &quot;khqer&quot;: [ false, &#123; &quot;tcdang&quot;: true, &quot;wcrtt&quot;: [ &quot;IUdsS7AP5YuIGiPLcux&quot;, true, &#123; &quot;iszogjghqdme&quot;: &quot;mOvQ&quot;, &quot;erqwcrllirgp&quot;: &quot;LCEUXKWW6&quot;, &quot;ppuwv&quot;: -1638069480 &#125;, [ &quot;xbwqUPy2CqmaKGzjYGgj&quot;, true ] ], &quot;xuqvvpjgu&quot;: 587748282, &quot;yoerecjfp&quot;: &quot;TcSF6V71QM9qDc&quot;, &quot;hkinpwpjtya&quot;: -1235207403, &quot;lmpytjkua&quot;: &#123; &quot;qeayzy&quot;: 1609681803, &quot;skupvgxfgmj&quot;: true, &quot;wsgrqmolddb&quot;: false &#125;, &quot;xapacidrjwci&quot;: false, &quot;vewlqfya&quot;: -1505822609, &quot;hptnmqyi&quot;: 1964458605 &#125;, false, false, [ false, [ &quot;ZKvoa&quot;, [ false, true, &quot;iP_zNQmJr9YODGRrE&quot;, false, -862573801.5205334, 470704924.4933845, true, true ], [ &quot;vlRr73Z9yKQ&quot;, &quot;QekOKcTWF&quot;, &quot;g9&quot;, &quot;tK1AsGuebPcq5gT&quot;, 744815156.0114157, &quot;F563lnnyDh7JBB&quot;, -1091586509, true, &quot;X4DnB7brSTeAVZ0nPl&quot; ], &#123; &quot;qroqaekrqci&quot;: -988886156, &quot;hlxrw&quot;: false, &quot;jtbrxuds&quot;: -196812410, &quot;mazjezda&quot;: 1149832522, &quot;ktuhey&quot;: false &#125;, 1747534196, false, &#123; &quot;lnlzbenhuxbs&quot;: true, &quot;mzobwlmkx&quot;: &quot;CHoTm&quot;, &quot;cgxvchsjj&quot;: &quot;j3GzXyRAtK&quot;, &quot;uvpgjrxhums&quot;: 46883908.35847041, &quot;vyzbxcwjhcuf&quot;: -262415858.2344973, &quot;dmhrsss&quot;: 980331266.1202828, &quot;isobj&quot;: false, &quot;diqwig&quot;: -1662428453.0488622, &quot;cnrtgscjh&quot;: &quot;5P&quot; &#125; ], &quot;x0D_T0gStehqg&quot;, 2038449666 ], &quot;--&quot;, -257452405 ], &quot;xhdjhvbbzi&quot;: [ &quot;thlkqORxHYSrq6&quot; ], &quot;qgjsd&quot;: &#123; &quot;hefrnkcuhukg&quot;: 1414682479, &quot;dzgabuqiqkeu&quot;: &quot;_OC&quot;, &quot;raylmoi&quot;: [ [ 1261750707.9350622, [ true, true, true, &quot;dM7SKVbVIlN9kkbAt-&quot;, -1688606776.865353 ], [ -1974516927, 778046617, false, 1660585964.6766663 ], [ 1437608012, false, &quot;ekFL1QAz539v&quot; ], [ -965784674, 917444701.599134, &quot;hobzLlT077ffsmjyVJza&quot;, &quot;jku&quot;, true, 1269961638.8205886, &quot;begBiXJD8GVRt5&quot;, 1981243353.2825513 ] ] ], &quot;mwqhhxi&quot;: 1224280321, &quot;vyvwzyrhlmij&quot;: &#123; &quot;tvfedfwiydi&quot;: true, &quot;ubvshvar&quot;: 357853522.94037277, &quot;ifsanjhmlan&quot;: true, &quot;xzpfnkpuseeu&quot;: -1437887099.366021, &quot;blzblzfipzsb&quot;: [ &#123; &quot;mtlld&quot;: 606806810.5353504 &#125;, 513242589, [ &quot;4PPUSOh&quot; ], &quot;o7gyErrUF_OO&quot;, 779910928.9457561, 725403731.5453243, [ &quot;Mwuep_vs3NICxzyVg&quot;, &quot;EcGddf3x-s9B&quot;, -114166931.70836346, false ], &#123; &quot;tzrqz&quot;: &quot;wZCbblJStx&quot;, &quot;irxgfi&quot;: -840824075, &quot;ainkogqiw&quot;: &quot;lVzO_a3K4rJbQlZz3cKz&quot;, &quot;zzwlcpuax&quot;: -351879049.34823805, &quot;nuvjwhkor&quot;: -976311756.2356169, &quot;jnigghuee&quot;: &quot;ZhUW1OdR&quot;, &quot;vbklz&quot;: 102928883, &quot;cxdvfe&quot;: &quot;CMV6qey&quot; &#125; ], &quot;tnnfl&quot;: [ &#123; &quot;fiyepmng&quot;: true, &quot;gruwflcpi&quot;: 2061722071.3332555, &quot;gzidhmz&quot;: &quot;ZARldKlcrNDSPtM-BcX5&quot;, &quot;squojhvm&quot;: 1319158712.813816, &quot;iraaurvtcwxp&quot;: 1703367132.1705606, &quot;tmhfj&quot;: true, &quot;ledoer&quot;: &quot;wgjcoqcqfr&quot; &#125;, &#123; &quot;ymjgzviomn&quot;: -799748891, &quot;zqfrdk&quot;: &quot;F&quot;, &quot;hiwsih&quot;: false, &quot;uxglwwb&quot;: &quot;3XnTvoXo3&quot;, &quot;sjonftbvmi&quot;: &quot;NSQSV5TUTZ&quot;, &quot;tyvjdbowtuqd&quot;: false, &quot;vyfbbzusfim&quot;: -2026203141.9014688, &quot;ftlsdid&quot;: -1010682756.7113624, &quot;rfrwmn&quot;: false, &quot;pfdileg&quot;: &quot;dSk9egdB6e_&quot; &#125; ], &quot;gdodt&quot;: [ &#123; &quot;vmyzm&quot;: -439700837, &quot;zwdidxwnspkd&quot;: &quot;NHAM9_r&quot;, &quot;cyvbaurmgmln&quot;: -1667505671.8765008, &quot;tjoislquuxvv&quot;: -63911009, &quot;ixiuvashmkr&quot;: &quot;gVuv&quot;, &quot;wwnjrivcvjn&quot;: &quot;zTL1r--ymAZ&quot;, &quot;wgepehgd&quot;: true &#125;, &quot;zjWW&quot; ] &#125;, &quot;sajbvpb&quot;: &#123; &quot;qcloywiur&quot;: &#123; &quot;yhorytusuz&quot;: -1379688463.1455112, &quot;hogkfsgzpamu&quot;: -666842903, &quot;lsayekkqs&quot;: -994958780.7773955, &quot;oadgsdrnp&quot;: &quot;ygmT11y92&quot;, &quot;xitnxkvvjgq&quot;: &#123; &quot;ncnxktnpkad&quot;: &quot;bMSH40DQ3SHl6&quot;, &quot;wtnqywvrsxet&quot;: true, &quot;odopv&quot;: 1704202652.1402304, &quot;nbcjnxzfhou&quot;: true, &quot;dslwgdpgrij&quot;: false, &quot;izhysr&quot;: 75853655.80537708 &#125;, &quot;mbogqtxbincw&quot;: -816104583.1152381, &quot;gyclsmz&quot;: &quot;I2mIXBLLCBQTI2sk&quot; &#125;, &quot;uvohdkkwtpnx&quot;: &#123; &quot;bkqpxl&quot;: true, &quot;qrbhv&quot;: [ &quot;v&quot; ], &quot;skjxpncfrge&quot;: false, &quot;usovgpr&quot;: [ &quot;P1wmVlh-&quot;, -1518359520, true, false, true ], &quot;bsjydwu&quot;: [ true, &quot;Y&quot;, &quot;LSYKAv1gDE5OSCOc&quot;, &quot;4RaIKjGY1jaPr6cn&quot; ] &#125;, &quot;hnigy&quot;: true, &quot;fpogrokuqj&quot;: false, &quot;hdbkrl&quot;: [ 956507853, &#123; &quot;bjmwhvgc&quot;: true, &quot;vpxthxybwm&quot;: true, &quot;vfkka&quot;: &quot;WnXCcABs20V4P9ZwxF&quot;, &quot;gpertrf&quot;: false, &quot;fjnfovsgng&quot;: &quot;NR6z37bwW8Ydil&quot;, &quot;cewpd&quot;: &quot;Augz4JjvyTZiFH&quot; &#125;, [ &quot;0vADm5fHM311Dqms&quot;, &quot;Ywus1q&quot;, &quot;l3R7oY-YstdhC&quot;, true ], [ false, true, true ] ], &quot;oqhhnjphghbf&quot;: -1990764709, &quot;bqroyt&quot;: &quot;zbS9zKmLyi&quot;, &quot;mxswvycxk&quot;: &#123; &quot;ecuukhnx&quot;: [ -1031661410, &quot;gxxDR2UrsB6FX7EsK&quot;, &quot;W5UeCms_pG1XKnQiGnC1&quot;, true, 1279258678, &quot;haXr&quot;, &quot;b&quot;, -859144426, false ], &quot;ooyjsehuley&quot;: -260638973.93744504, &quot;okzzvy&quot;: &#123; &quot;zdwuti&quot;: &quot;nmULtLEpRm&quot;, &quot;rbmylisp&quot;: true, &quot;iqqxy&quot;: &quot;A0R1JNBNg&quot;, &quot;htmsh&quot;: true, &quot;olyfzrwa&quot;: false &#125;, &quot;djlddewcp&quot;: false, &quot;dteztss&quot;: &#123; &quot;vjdksmwy&quot;: true, &quot;rnrmvweunet&quot;: -1554963459.8263817, &quot;cwuyrr&quot;: -1539560369, &quot;nfbmvdqhbn&quot;: true, &quot;wscnr&quot;: &quot;-QL4jvEip3kIjD3X_HqX&quot;, &quot;fqhytiab&quot;: &quot;7HgHf-t-nDE&quot;, &quot;sdrxhigfwyz&quot;: &quot;6L2iCph7cik&quot; &#125; &#125;, &quot;wpkzvs&quot;: [ true, [ -824736981.3011173, &quot;NLLHrW6FdWbYXy5&quot;, 1772019627.6826005, -1237801588.9772856, true, 1699988814, -670454594 ], [ &quot;zHk-3vfEyqWJAzHN6E&quot;, 298547097, -306906116, true, &quot;yORZJB-gJy5i&quot;, -1577708022, true ], false ] &#125;, &quot;neixga&quot;: true, &quot;oqrmbmjmjwc&quot;: false, &quot;xggut&quot;: &quot;aLLbZ0_fLQFJSn7vbQ-N&quot;, &quot;wphmqzbwpp&quot;: [ -988844865 ] &#125;, &quot;qkerwnf&quot;: &quot;I3Ehd9v8O&quot; &#125;, true, &quot;vKMrzQC0DwPZTqXEEo&quot;, &quot;FlSpCCj0JjXQ&quot;, -262821999, &quot;uyGwNgotAHeKb8tXF6&quot;, &quot;juP-aqqitcx0MLKNtv&quot; ], &quot;rkdzkji&quot;: &#123; &quot;opmnqsbrql&quot;: false &#125;, &quot;xboipcso&quot;: true &#125;, &quot;sqvizokcr&quot;: &quot;lg2WCWuOOKblGEvuJxry&quot;, &quot;yphghvuatif&quot;: [ &quot;KHX&quot;, &#123; &quot;gcempqa&quot;: -435758201, &quot;pfkjlnucldzt&quot;: [ &quot;4B2QBgFw1&quot;, &#123; &quot;clfmgbpylozu&quot;: [ &#123; &quot;wykkewfsvkfx&quot;: true &#125;, [ true ], false ], &quot;gkpjmwde&quot;: false, &quot;wfbmk&quot;: &#123; &quot;hjhwydqlgck&quot;: false, &quot;zntpb&quot;: 1426698482.2730246, &quot;pfhvvwf&quot;: [ true, false, true, &#123; &quot;ymtwgdp&quot;: -1610821698.0233555, &quot;fxotjx&quot;: -982010626, &quot;fakcosl&quot;: false &#125;, &#123; &quot;taetdp&quot;: true, &quot;zlxtouucw&quot;: true, &quot;dopar&quot;: 2133262238.939302, &quot;zacsyzzafhyz&quot;: &quot;5H6koXgeSJjFM1-A&quot;, &quot;ilxfap&quot;: -6357516, &quot;zwmwa&quot;: &quot;220X8A7o75Qip&quot;, &quot;pdavucrzogah&quot;: false &#125;, &#123; &quot;lfeqc&quot;: 622047750.3004048, &quot;baveivifz&quot;: 955086141.1868833, &quot;upqtrzh&quot;: &quot;eV17ZNGeu3jF4xs&quot;, &quot;qfyiaui&quot;: &quot;h&quot;, &quot;srkxtfqvou&quot;: 950475571.8482186, &quot;snyqzwvcr&quot;: 1997060590.3469007, &quot;ketvuoitkaj&quot;: false, &quot;dyicvmuxonvc&quot;: 1238057345.405381, &quot;xzhtg&quot;: 1081780473.5438356 &#125;, -43776949.58843712, -1066018084 ], &quot;lmnfdiycp&quot;: [ false, &quot;wybvLjnvWah&quot;, &#123; &quot;oqwixwsv&quot;: -349342221, &quot;liufgx&quot;: true, &quot;orwbmcephb&quot;: true, &quot;pqvumndiu&quot;: 719429786, &quot;qsqybtshm&quot;: false, &quot;kuunxjf&quot;: &quot;kfQ4Ms&quot;, &quot;hofhyeiz&quot;: &quot;11Vg1Zxz-2o1qAd&quot;, &quot;kocnrvu&quot;: -2121340188.659414 &#125;, [ 868650456, true, false, &quot;ytP2qezeqTj9bX5MipJ&quot;, -1684183822.181116, false, false, true ], &quot;sd-0&quot;, &quot;buxK0y0Lg34Ha&quot; ], &quot;bqivwbovyok&quot;: &quot;y87Ga3RoThgm4zQoW&quot;, &quot;vmcnod&quot;: [ [ false, &quot;P7PwFdKQE2Nv5EHAWyR&quot;, false ] ], &quot;zixdwj&quot;: &#123; &quot;gcelk&quot;: &#123; &quot;ccdvni&quot;: &quot;qjfoGTlqW1SK0XE&quot;, &quot;aivxcz&quot;: &quot;hWaXUzPF5KHXhD24&quot;, &quot;wbvjmchlsnhz&quot;: &quot;ayxY4K8yfSqLWJDKNyl&quot;, &quot;wvaodhthpkq&quot;: 1824810533, &quot;ohxnd&quot;: -1558047131 &#125;, &quot;rylhvguawz&quot;: 1026463459 &#125; &#125;, &quot;qduvuqqjgd&quot;: false, &quot;voeaxmnswjmu&quot;: &#123; &quot;ecjpiovrveko&quot;: &quot;hGin1d3EvmP-7IL2&quot;, &quot;weapu&quot;: [ false, [ -343302248, &quot;1b_gbcshP4l&quot; ], [ false, true, &quot;HOQGH25Sh-_q6HlMBA&quot; ], &#123; &quot;ampaeupvlcpv&quot;: &quot;8cv-88-&quot;, &quot;soidbtehv&quot;: &quot;xreI&quot; &#125;, [ &quot;MEIC1fse&quot;, true, &quot;nmQuAHdLVa&quot; ], &#123; &quot;qgmacn&quot;: true, &quot;xafonjd&quot;: -1511285736, &quot;qvvvofsfnalt&quot;: false, &quot;amzwr&quot;: 520195117.50623035, &quot;lsuud&quot;: 1627220284, &quot;ulaym&quot;: true &#125;, false, -1951910240.1517031, &quot;TxN5qnk&quot;, -1508050847 ], &quot;lluecptqhplu&quot;: &#123; &quot;qpsvw&quot;: -1383734218.1532288, &quot;nhswnlx&quot;: -1411487489.4017806 &#125;, &quot;hpqmxcqc&quot;: &#123; &quot;uwcontr&quot;: &#123; &quot;kmmglniuqrzz&quot;: &quot;FYd&quot;, &quot;qaxcmqw&quot;: -4716927, &quot;pyxeoansbdur&quot;: true, &quot;fhpepladgkc&quot;: &quot;DWjeMHlYwyxB&quot;, &quot;xsfcnf&quot;: true, &quot;scldwjzv&quot;: 605622367.263732, &quot;vdcisfkg&quot;: true, &quot;ymerdawujuvm&quot;: 1522284921, &quot;gjebutthrq&quot;: &quot;BsN7FuQWdhFMo2vxGLV&quot; &#125;, &quot;gzlbgdswtg&quot;: false, &quot;xylhbzlljel&quot;: false, &quot;vgrabym&quot;: &#123; &quot;ldexyhoxiw&quot;: false, &quot;ixvucs&quot;: &quot;O155cd6C&quot;, &quot;yxlpdwxss&quot;: true, &quot;lwfgdnncrbb&quot;: false, &quot;nspmy&quot;: true, &quot;ofgnuvr&quot;: &quot;CNkm&quot;, &quot;cvzjz&quot;: false, &quot;mtbbanavmqku&quot;: 634785919.1245813, &quot;mdfalo&quot;: false &#125;, &quot;znqqoxwz&quot;: &#123; &quot;sssdvxyg&quot;: false, &quot;yqtacvdtumm&quot;: -843524312.9739331, &quot;jlltvpgblk&quot;: 474917399.0235441, &quot;gzizhlcnthiu&quot;: &quot;FpozppFyAy9THKziJkj6&quot; &#125;, &quot;kjxvglgtpyts&quot;: 1288059843.9959335, &quot;mxstyhruj&quot;: &quot;BHq&quot;, &quot;kgpkvsl&quot;: &quot;t&quot; &#125; &#125;, &quot;pyqceyga&quot;: &quot;l2_GqR6sjpIP8t&quot; &#125;, -903701859, false, false, 1728992263 ] &#125;, false, -672356226.957377, 1035684588, &quot;8&quot;, &#123; &quot;bxxvoj&quot;: &quot;TBN3W2JlXE3Og2od7&quot;, &quot;myathmkth&quot;: [ [ [ &#123; &quot;bkywset&quot;: &#123; &quot;ibfwzvemftqr&quot;: -1079506988.3973684, &quot;bzjin&quot;: &quot;ZQ&quot;, &quot;spssumdxtlk&quot;: false, &quot;heaed&quot;: false, &quot;ckopwart&quot;: true, &quot;shbkunked&quot;: 1771550310, &quot;qebraekrkv&quot;: &quot;hvKAFeR&quot;, &quot;seofjkg&quot;: &quot;oBA0&quot;, &quot;ivpoo&quot;: -1519804200.870205 &#125;, &quot;zkzhszvy&quot;: false, &quot;cbpfigkqg&quot;: &#123; &quot;txfljrmef&quot;: &quot;UlIEg1D_XBPmJLtjYX&quot;, &quot;blduuxkg&quot;: false, &quot;pubxki&quot;: false, &quot;fkdaajcdr&quot;: true &#125;, &quot;eatzilo&quot;: &quot;3Js9qlvLgmIN5Jx&quot;, &quot;cvouqqqfbmhd&quot;: 171988647, &quot;duotchdxw&quot;: true, &quot;hjadhohlk&quot;: &quot;ezA6qurjYaJ&quot; &#125;, &quot;aN1mtSa&quot;, 2029903438, true, [ [ false, true, -2128210644, -250665377.27768734, true ], &quot;x&quot;, true, false, &quot;smIG&quot;, &quot;CoLs&quot;, false ], &quot;s2p&quot;, [ &#123; &quot;nbtzzsrfkb&quot;: 642071068.7049124 &#125;, -971868225, false, &#123; &quot;vdrhibk&quot;: 623425684, &quot;pdhsilahxqpo&quot;: &quot;7ieoVifxJkddsXt&quot;, &quot;vvuzpopy&quot;: false, &quot;eybdmglrj&quot;: false, &quot;bkhtv&quot;: -1661861702.5063853, &quot;emwsrutts&quot;: &quot;eA52oBr&quot;, &quot;pwlsjkoidkmk&quot;: &quot;G6juG2OWs1d9&quot;, &quot;rkqnp&quot;: -1741937058, &quot;efqrfia&quot;: true, &quot;kumjec&quot;: false &#125;, [ 648097805.0335655, true, -2112661578.3023882, -1146653657, &quot;dir8&quot;, true, true ], true, false, &quot;9P3&quot; ], -1334820002, 595712603.0936697 ], -281537918 ], &quot;Uvg3Y3oFHNUxEp30&quot;, &#123; &quot;hgyzdkdy&quot;: [ &quot;9Uie314BMftima&quot;, true, &#123; &quot;sotct&quot;: true &#125;, &quot;59U3b8i&quot; ], &quot;yokbdhwh&quot;: false, &quot;eynjbrwb&quot;: true, &quot;oabxvq&quot;: &quot;2DoHvk857a_lrfklT4&quot; &#125;, &#123; &quot;osygtmx&quot;: [ false, &#123; &quot;nsfddvwp&quot;: &quot;idKBQd3lZ29Tjgfe1y&quot;, &quot;spsgmhntf&quot;: 330631670, &quot;nibycsnme&quot;: &quot;Dw8cBUziw8En&quot; &#125;, &quot;Nv&quot;, &quot;1joRrD&quot; ], &quot;lnuqzcushd&quot;: -1676899906.901859 &#125;, false, &quot;g-8UktsAr06Eh0L2Poo0&quot;, false ] &#125; ] &#125;, -213332158.27588025 ], &quot;nbnggrygoy&quot;: &quot;yp&quot;, &quot;ycumlxwikgr&quot;: &#123; &quot;iyubzkip&quot;: false, &quot;offnsfcl&quot;: true, &quot;ksyweaa&quot;: &#123; &quot;uxtvieoit&quot;: false &#125; &#125;, &quot;rgvqdwb&quot;: &#123; &quot;jybsltnvy&quot;: &#123; &quot;xlppzktcs&quot;: &quot;J1JdsVwVyJdrQa649K3&quot;, &quot;bwavtox&quot;: &quot;QtHHotgt-L&quot;, &quot;urjtvql&quot;: [ &quot;7KC-uxYUw8zX&quot;, true, [ true, false, &#123; &quot;ukqypkmyvorz&quot;: &#123; &quot;fsbkh&quot;: [ true, -396259340, [ &quot;5-ve18wqKWFnnT&quot;, [ &quot;oqaPSB9Ry&quot;, &quot;AiIg3ixsCel&quot; ], true, &#123; &quot;tvris&quot;: 98702793, &quot;kqeprkrsqczh&quot;: false, &quot;cznzkycnpr&quot;: -1884812888.907853, &quot;prgxikvoqufx&quot;: false, &quot;ifubqotxloo&quot;: false, &quot;zrofrgar&quot;: false, &quot;jxpcv&quot;: -2070201681.387905 &#125;, 1214036958.5357575 ], true, &quot;SsWiQyfqVjwX&quot;, &quot;EE&quot;, -110675921.80617763 ], &quot;eupxdds&quot;: true &#125;, &quot;wobzbzsqtg&quot;: false, &quot;okngdfyyrcr&quot;: -1464983761, &quot;vmtnsjlalehh&quot;: &quot;sTugHHf8XIxWo0eHD&quot;, &quot;rzuntodsepbs&quot;: &quot;4&quot;, &quot;wdvvsb&quot;: [ [ &#123; &quot;tpjeqsmkt&quot;: false, &quot;cbqzndrzjjsj&quot;: &#123; &quot;nviisdo&quot;: -1521429533.4565473, &quot;nobssdwar&quot;: 1343226861.2757792, &quot;gqwlsrfzwf&quot;: &quot;3iaxwkt0RM&quot;, &quot;gakijsy&quot;: &quot;lE1mFr&quot;, &quot;zgdmkv&quot;: 556129813.9012625, &quot;ywzfvk&quot;: false, &quot;tuvnyjygk&quot;: &quot;7Pt5vC3T6fUwiF&quot; &#125;, &quot;httjvpcosyfh&quot;: false, &quot;lercx&quot;: [ &quot;ScvOCA&quot; ], &quot;mxuisw&quot;: &#123; &quot;cebidi&quot;: true, &quot;nmaumyfw&quot;: false, &quot;qirrf&quot;: true, &quot;hapgodsohrev&quot;: false, &quot;uuyqhluhdd&quot;: 1225244835.6137476, &quot;btcboshxj&quot;: -1726960766.593483, &quot;bmjdmvjgyct&quot;: false, &quot;zipprm&quot;: &quot;1-4uLH4Nd4&quot;, &quot;rweybknzrjw&quot;: false &#125;, &quot;gfldjngmcetb&quot;: &quot;Xwi1Is-Wae5Mh&quot;, &quot;dbkbytfqqfu&quot;: &quot;XrYFgqcwWf&quot;, &quot;lzmomz&quot;: 1210828284.458338 &#125;, &#123; &quot;qofgjsbpa&quot;: &quot;lPe3YVp3tkUzZN&quot;, &quot;hatcsniudmii&quot;: [ &quot;B7_&quot;, &quot;NyV_Jonz2OAyY6ltALj1&quot;, 634956320.1239021, false, &quot;_pTUM4JspaI5O865ma9&quot;, &quot;cRngbJYyKXRVbLuhL&quot;, &quot;Rv&quot;, &quot;R&quot;, true ], &quot;kacunnn&quot;: 1399556841.028177, &quot;iupsnyhoiiq&quot;: [ -1972922641.9374359, &quot;s&quot; ], &quot;aymyrxrmi&quot;: -741296721, &quot;tsmyxkhr&quot;: 1085629646.5417953, &quot;nvgkuv&quot;: true, &quot;xtbheqtcbapi&quot;: true &#125;, &quot;Ydke&quot; ], &quot;zpt3ABbbdSt0B-&quot;, &#123; &quot;omgtdid&quot;: &quot;U8Z&quot;, &quot;osvqnbs&quot;: [ false, [ true, false ], &#123; &quot;edpuszxim&quot;: false, &quot;pifkmxdrsur&quot;: false, &quot;xvqkqkdnolxm&quot;: 978118458.574277, &quot;xpoccptq&quot;: 47526341, &quot;evinetjp&quot;: &quot;kjPIsTJFZlp5xHYu&quot;, &quot;lzapr&quot;: &quot;VRgwazYF&quot;, &quot;kadxwpgbkhp&quot;: false, &quot;srazywmgm&quot;: 602758167.3839445, &quot;tcxutxugzqcq&quot;: 1452428179.1749983, &quot;dultxrq&quot;: -1007461906 &#125;, [ &quot;8b-Pr7Kn&quot;, -487416787.86377096, &quot;U2_Zrf82MYOPzu1snwH&quot;, &quot;F&quot; ] ], &quot;wmxwqd&quot;: &quot;tgk&quot;, &quot;arwnqyja&quot;: [ &#123; &quot;jqovvdluiyrv&quot;: -213492824, &quot;wgdgghkon&quot;: -1134931908, &quot;jtpzqudrwvr&quot;: false, &quot;wdjtsriuflz&quot;: &quot;9TR2fwOU8bJK6YiHMd1W&quot;, &quot;rksrbxhf&quot;: -1687481301, &quot;bqmerjt&quot;: &quot;O8&quot;, &quot;gggrphsuu&quot;: true, &quot;ueafywvz&quot;: true &#125;, &#123; &quot;eahupohevotx&quot;: &quot;80x3KZ&quot; &#125;, true ] &#125;, true, &quot;JdyIX2-Hn4OEk&quot;, &quot;STde89a7noAlPR&quot;, &quot;dBq21b8vjY4mlsICX&quot; ] &#125;, [ &quot;h8hocFCh&quot;, false, [ [ &quot;JrZEt5&quot;, &quot;2K3NMgoO4gV&quot; ], true, [ [ &#123; &quot;ppxflqzqraah&quot;: &quot;iQQHa&quot;, &quot;epixkvau&quot;: 758653854 &#125;, [ false, &quot;eypg&quot; ], [ -1380729948.803885, 2126935865, 2000434995, false, &quot;-zAki_NR-7rJ-DTA1KX&quot;, true ] ], 1062605677.5219938, 1675845058.2376373, false ], &quot;G-Yr5hdfY4P3LZjlpi&quot;, &#123; &quot;pjfwt&quot;: 2129191539, &quot;lxltli&quot;: 1789733854.3638878, &quot;wfxtvbczg&quot;: true, &quot;usglsqvortk&quot;: [ &quot;vhy-S1Q2&quot;, [ -2031983774, &quot;NNqZ&quot;, -1504365382.5674405, &quot;JhSjhaU3x6vi&quot;, true, true, 579475293.7172605, true ], &#123; &quot;ibjpvhriglff&quot;: 305281416, &quot;yiywlzqv&quot;: &quot;gLyGVouaO4GoWmP3qWm&quot; &#125; ], &quot;kaaatkapwnzp&quot;: &quot;5tMN-IW97lr00LpdCeA&quot;, &quot;ascnhrajahp&quot;: &#123; &quot;bywiqnht&quot;: &#123; &quot;pwwfzfxuusf&quot;: 1826516450.1429155, &quot;lrkstk&quot;: -1130208890.5220625, &quot;mjftwpi&quot;: &quot;JKzfI07UlayAB0Y&quot;, &quot;guzpwj&quot;: &quot;cyGnOg_AA2nD5u&quot;, &quot;yivfdxujl&quot;: -895183558.2281595 &#125;, &quot;ftahhhqvq&quot;: &quot;-e0ij7e6SwR2P&quot;, &quot;rfios&quot;: 260283669.05151594, &quot;wkgxf&quot;: 480514597.7402332, &quot;trsngyfa&quot;: true, &quot;iutgxh&quot;: &#123; &quot;xgaxfzhzo&quot;: -1296950418, &quot;oynzdakxa&quot;: -176407622, &quot;jmetjzvg&quot;: &quot;QZyqbP&quot;, &quot;bdsubbxgke&quot;: 479590449.7327938, &quot;gbguyurx&quot;: &quot;k_JYavggr&quot;, &quot;dcgjgkyxoi&quot;: 111545634.56584488, &quot;kxmgnp&quot;: false, &quot;fadnjmiuya&quot;: false, &quot;pntppjqr&quot;: -7989414.3503097715 &#125;, &quot;rtrfsa&quot;: [ true ] &#125;, &quot;woaczhsg&quot;: &#123; &quot;oebom&quot;: [ &quot;EDFJM-lf3QtlY_pHqj&quot;, &quot;w&quot; ], &quot;phkuygxtxei&quot;: -1307045192.5497377, &quot;nzjtrerixro&quot;: &#123; &quot;zzcgiwj&quot;: true, &quot;wzkrztkuwyw&quot;: 749644112.278047, &quot;viygguukb&quot;: true, &quot;kmqinxavcydb&quot;: -154275871, &quot;tdciknezbmsj&quot;: -1583677231.0414896, &quot;qxywny&quot;: &quot;Zhm_duX1K813n39f&quot;, &quot;dmmgas&quot;: &quot;99YGwgK&quot;, &quot;bxlxri&quot;: 624666521 &#125;, &quot;joqygfz&quot;: &quot;Ekernz1wS&quot;, &quot;btmnwww&quot;: -1057462085, &quot;fjkkogenlrg&quot;: &quot;JaUfKQ-rmTsH&quot;, &quot;czxgbb&quot;: [ &quot;d94e&quot;, &quot;tFHwH&quot;, -1999864211, &quot;9qcTd&quot;, -273132748.6449169, 877566785.3296286, &quot;XnOqV2RJlwW0uce&quot;, false ], &quot;hjzjpy&quot;: &#123; &quot;fgopruspo&quot;: true, &quot;qbxsmxzuayhl&quot;: true, &quot;jqcqu&quot;: false, &quot;jepkrnjpvwc&quot;: 529790938, &quot;bsfzzfplxn&quot;: -136154324.43923798, &quot;lprmnmu&quot;: &quot;_V7TWr3V_JSasIrO&quot;, &quot;hfrrnq&quot;: &quot;9QMc&quot;, &quot;fszhlid&quot;: &quot;VyQUrXWG&quot; &#125;, &quot;tjebnm&quot;: &quot;VyKVNxgu99oXT&quot;, &quot;qvnfpidlla&quot;: &quot;ezbxu25zTodYRTpZ4e&quot; &#125; &#125;, 1282576622.419129, 582364215.0738711 ], [ &#123; &quot;vxanjrgqi&quot;: &quot;5L&quot;, &quot;drmfrdy&quot;: &quot;V3yZ19vMCwFTKS&quot;, &quot;urbkobqrmmln&quot;: [ [ &quot;gLPGoPvAz5a&quot;, 1521034207.1729093, true ], &#123; &quot;rbjhjirux&quot;: false, &quot;unwnojgevj&quot;: &quot;TZvuYvGEjt50HZP&quot;, &quot;cluhihroygc&quot;: false, &quot;ezvwld&quot;: false, &quot;ytvdsty&quot;: false, &quot;ongckhpo&quot;: &quot;iBorLz&quot;, &quot;fyjdodv&quot;: true, &quot;kussreacf&quot;: &quot;asCAhF9cu&quot;, &quot;ogruag&quot;: true &#125;, [ 1011116435, false, 1485289377.634779 ], &#123; &quot;aplfilhrtjjx&quot;: true, &quot;eihtnlrwwzxb&quot;: true, &quot;rzoztu&quot;: 1095829320, &quot;lytof&quot;: false, &quot;sxcahhyzr&quot;: true, &quot;gzlprjzgbpdk&quot;: false &#125;, false, false, &#123; &quot;rugpoixexacg&quot;: true, &quot;bvygqkqcgc&quot;: &quot;P5FZ&quot;, &quot;mhmzd&quot;: -1466907616, &quot;aqbayw&quot;: &quot;MqA7Neo6B38Ku&quot;, &quot;vbtpdxqfk&quot;: &quot;I&quot;, &quot;upuadtl&quot;: 80394027.89645492, &quot;bjysln&quot;: &quot;U4Rny9BW&quot;, &quot;zkipgelsd&quot;: false, &quot;aixmzrmby&quot;: &quot;gt5pk&quot;, &quot;yduplhuvgmi&quot;: false &#125;, -307605855, &#123; &quot;ezuajerq&quot;: false, &quot;vhkbpsqfmit&quot;: 1968884069 &#125;, &#123; &quot;ntdwc&quot;: &quot;Xjd3XSRfRTSK1&quot;, &quot;wceydxoioh&quot;: 1965027804.2400434, &quot;xxiaudqian&quot;: -1997821084, &quot;jxihtwhvthf&quot;: &quot;jebasp7IEo&quot;, &quot;ulrkflp&quot;: &quot;DsDwmqlHe2CqtePX8&quot;, &quot;ayaiumowny&quot;: -1009840586.3308966, &quot;xqzdft&quot;: -665041725, &quot;uwmgab&quot;: &quot;0HY-QpTeR7cqLH3R&quot;, &quot;dyzdmyohvu&quot;: &quot;TJL1_wTnzt6lavK6&quot; &#125; ], &quot;hyoqnafola&quot;: &#123; &quot;pwhkipsgz&quot;: [ &quot;BSRRArMhL7xak1M31&quot;, true, 757226289.2586085, false, -501488775.6009502 ], &quot;xnehiwtkc&quot;: false, &quot;ugyuiaife&quot;: 439819996, &quot;qoviscvhth&quot;: &#123; &quot;yrmaynayeij&quot;: true, &quot;tmeozoxvbfa&quot;: &quot;V11MPCnwVpN2-J5Ou&quot; &#125;, &quot;eqfap&quot;: false &#125;, &quot;qoqdvxulp&quot;: &quot;3our4wWe2d3eEvIt4Sa&quot;, &quot;pkgatdqqfwrp&quot;: -196209564.13036972, &quot;osdumghoylle&quot;: [ 1611788818, false, [ &quot;O&quot;, true, true, &quot;-FRchYxwjwqw5E6&quot; ] ], &quot;lguesgpxu&quot;: &quot;nAMf4fNwxeBLOqKPfj&quot; &#125;, 1090543472 ], [ [ false, true ], true, -941485381, [ [ &quot;0n-42O__G1z&quot; ], true ], &#123; &quot;zgcmj&quot;: &quot;HtaNd9fGSL&quot;, &quot;rtqht&quot;: [ -824540812.8593875, 660363567.1515678, &#123; &quot;nrqclovx&quot;: true, &quot;desvin&quot;: true, &quot;qbgarpxmjee&quot;: true, &quot;pwquqr&quot;: -520766202.2372695, &quot;evcrtodq&quot;: &quot;NFNGSQ2mv9I33U&quot; &#125;, true, -1495767378.5317547, &quot;0GYeM&quot;, &#123; &quot;cipvprhghcud&quot;: -781186501.119179, &quot;ucahxszlo&quot;: &quot;--kXBRT2q7lvCNQf&quot;, &quot;esghfvf&quot;: -1967794274.5454607, &quot;plsbnwziqql&quot;: &quot;AwYqNyGlsT-&quot;, &quot;qdhis&quot;: &quot;LVC_&quot;, &quot;jfifn&quot;: &quot;ep&quot;, &quot;ajqypvgdf&quot;: false, &quot;nzcksivfrz&quot;: -836485434, &quot;brfxkuh&quot;: -778236244 &#125;, -216954925 ], &quot;nzvhy&quot;: &quot;jH&quot;, &quot;ukllw&quot;: &quot;iA5&quot;, &quot;mojlxj&quot;: [ &#123; &quot;wpztutyupo&quot;: -338843594.4339943, &quot;zodofh&quot;: 1523937168.7352705 &#125;, &quot;iTikYWHkhRF46nuHGbG&quot;, &#123; &quot;yjizlvyztm&quot;: &quot;rCeofY3Uo3msby8-&quot;, &quot;pqguwcscw&quot;: &quot;f2n-Vg1lXIpYjdl&quot;, &quot;ziwwftnb&quot;: false, &quot;jdunfl&quot;: true, &quot;wgrsxovefz&quot;: false, &quot;rmfmr&quot;: -1203824748.6801581 &#125;, -767556187, false ], &quot;nqntey&quot;: &quot;XmKsO7JoUS&quot;, &quot;edzduh&quot;: true, &quot;fsxahg&quot;: [ &quot;WGJAk_bVHfv&quot;, false, &#123; &quot;jjilv&quot;: 789428308.424335 &#125;, true, &#123; &quot;lczojeami&quot;: 1004841634, &quot;rpjett&quot;: &quot;JPcL0dB&quot;, &quot;urttiphnwi&quot;: false, &quot;cnnuagwpk&quot;: false &#125;, [ -755107435, true ], 1383079708, 838205861 ], &quot;xmfcccwn&quot;: 1235369070, &quot;exocsfeahsly&quot;: false &#125;, &quot;pfPQ7bUvXQwFBfI1Z&quot;, &#123; &quot;vcoiofawgu&quot;: [ [ true, &quot;-&quot;, false, &quot;MiLGOXZT5KjgtxbR&quot;, -1227980006, true, &quot;M6hA6AfvaBer&quot; ] ], &quot;lujwrmzs&quot;: true, &quot;dpjdjbi&quot;: &#123; &quot;isvatttpdje&quot;: &#123; &quot;violsvosfmxa&quot;: false, &quot;pfsxuzszx&quot;: true, &quot;akyyailt&quot;: 40326686.00178264, &quot;avmlhwr&quot;: false, &quot;wvmlkv&quot;: &quot;ZRdrVDeTcXB&quot;, &quot;txcgatdp&quot;: false, &quot;wzwdlio&quot;: true, &quot;lgnpzi&quot;: 826279485.8329575, &quot;blowaixo&quot;: true, &quot;tlvjpvlr&quot;: -1104323009 &#125;, &quot;xidqngh&quot;: &#123; &quot;plxlnpsuy&quot;: -136412828.46290082, &quot;oyxqf&quot;: &quot;slHZmXREf5IRy&quot;, &quot;hjieskfa&quot;: true &#125;, &quot;qogsqpetclu&quot;: &#123; &quot;pxefltrmw&quot;: true, &quot;xhvgo&quot;: false, &quot;plytsqcpmkak&quot;: &quot;oQOzYu8fp__ZZzspf&quot;, &quot;siqsjmzcz&quot;: 1383803960, &quot;gqatsrxw&quot;: -891877637, &quot;jlrxxmfrd&quot;: false, &quot;punnhvkqgac&quot;: &quot;Vm1gbb5ao&quot;, &quot;nvcgb&quot;: true, &quot;zotzvmdcp&quot;: false &#125; &#125;, &quot;mdibv&quot;: [ true, [ -1920264690, &quot;KkgopGyRuR&quot;, false, false, -1181246202, &quot;lLMcq7wT0u6aZLx1XCS&quot; ], 1171184833.0889344, -920898457.9398856, [ true, true, &quot;wjvObeS9eH&quot;, true ], [ &quot;r89vOJSkrrfGYNGU&quot;, 1423639620, false, false, -2118872242 ], [ &quot;WZp-jdVNe9WUwKyG0ne&quot;, &quot;hdJR&quot;, 762229991, &quot;NNrmgK1gc&quot;, false, 645298371 ], true, [ true, true, &quot;OiqeOXDN&quot;, true ] ], &quot;gljtxygmgnoq&quot;: -485413025.0423097, &quot;tifqxq&quot;: &quot;PNKzLbjwza41QHN7gfg&quot;, &quot;usxgfwssv&quot;: false, &quot;ysggaphttbu&quot;: -1434779242.503896, &quot;jguyfdarj&quot;: false, &quot;ljsnzpmvc&quot;: [ [ true, false, -888245601, &quot;DtjmbUbk-Y&quot;, true, &quot;NUivd0O_964hQZAaCM2R&quot; ], true, &quot;4FRIjSJEd&quot;, [ &quot;Y5Da&quot;, &quot;1Df_BHi2ppyn&quot;, &quot;8lJLj91VcyZl&quot;, true, &quot;1dVqAY1jjCNk4_YCm_RA&quot;, true, &quot;Ufv6Un&quot;, &quot;1yXm&quot;, &quot;C6G8d9LjKWX3&quot;, &quot;Urh9Opm0r&quot; ], true, [ false, -691112049, false ], &#123; &quot;lvcepeefsiik&quot;: 2111693983.8375793, &quot;isveyzpwkn&quot;: &quot;Ygu3&quot;, &quot;vtfphso&quot;: true &#125; ] &#125;, &quot;FgREOo5h2k7VG&quot; ], &quot;9Gimy_iH&quot;, -1846879668, &quot;WX&quot; ], false, &#123; &quot;phpuw&quot;: [ [ &#123; &quot;raibbewtjz&quot;: -1220581968.5143535, &quot;jbrvt&quot;: 400707980, &quot;nrzfutgbch&quot;: &quot;up1IdlFMyt&quot;, &quot;mgymfulzmjm&quot;: &#123; &quot;mzoznw&quot;: false, &quot;nxuhkromgyrq&quot;: -468163948, &quot;ihqawepduqge&quot;: false, &quot;enanlwabhlnq&quot;: false, &quot;vwniulyrxqq&quot;: 2006513682 &#125;, &quot;qygtv&quot;: [ 712827304 ], &quot;plqoj&quot;: 196752168.14052448 &#125;, 1530826049, true ], &#123; &quot;hoewcxak&quot;: -529285862.78081095, &quot;rdkjktsbm&quot;: [ [ false, true, 2089688925, &quot;_xygmhNWhs2CG2Ws&quot;, false, &quot;z5Hes4K&quot;, &quot;-yXCohP014GZh&quot;, 1851605383.7822597, true, 1408456384.3299663 ], &quot;fW&quot;, true, &quot;GVUyAs70GJW-2Ku&quot;, &quot;Na9s-kGMlq7l3dp0gC&quot; ], &quot;fcbdr&quot;: 648098158.2295865, &quot;fapgflckukv&quot;: &#123; &quot;shnbvkvjud&quot;: true, &quot;sidkmqd&quot;: &#123; &quot;vfhpq&quot;: -438938499.9046679, &quot;vfdfwfuizkkb&quot;: false, &quot;ymmiv&quot;: &quot;K9ekHXWSppvvW&quot;, &quot;eavvh&quot;: &quot;a&quot;, &quot;cmgeoyntxfb&quot;: false &#125;, &quot;kepvkp&quot;: &#123; &quot;pbwwksrua&quot;: &quot;HSJUVpOTiOLCoSdE9i8h&quot;, &quot;ppshv&quot;: false, &quot;qdmeyoov&quot;: &quot;7m&quot;, &quot;koxkdaxj&quot;: &quot;r30Hy0P6&quot;, &quot;izbuq&quot;: &quot;HE&quot;, &quot;ebmsipwqjf&quot;: false, &quot;xzsutnv&quot;: true, &quot;yseailigdpu&quot;: &quot;_Oe1Mb&quot; &#125;, &quot;jilmpjqmebqu&quot;: true, &quot;mmqtk&quot;: &#123; &quot;jiqswgbidkcz&quot;: -600289668.1997764, &quot;pozrxlwnicmj&quot;: -1938116520, &quot;ysjtzvqcbtka&quot;: false, &quot;wlfoh&quot;: true, &quot;crdmlo&quot;: -775185645.335729, &quot;rymnpnt&quot;: &quot;67CWTuoSS-HCBSnsT&quot;, &quot;jrqjvpjy&quot;: &quot;5vA-6&quot; &#125; &#125; &#125;, &#123; &quot;iqfwdhvxt&quot;: [ [ &quot;cDc74anahW&quot;, 81284520, &quot;-GKYIedyE&quot;, &quot;Ce&quot;, -988655852.0732201, false, &quot;VRJHPX&quot;, true, &quot;cgDGx9u&quot;, &quot;2S&quot; ], &#123; &quot;kwdtjnwyqh&quot;: true, &quot;nfsic&quot;: &quot;60jcx&quot;, &quot;mecwggrteesl&quot;: -1139375608, &quot;gqxlrsdtwk&quot;: 598344409, &quot;ssrzcdmuivk&quot;: false, &quot;bunpzghb&quot;: false, &quot;ghepmqqgprxb&quot;: &quot;8VRKt-wDZHpQ3zFr&quot;, &quot;qppaluod&quot;: &quot;5R-HdOFV&quot;, &quot;okawvhmkx&quot;: &quot;kjeBjAHvp_NP5&quot;, &quot;txntwypns&quot;: 685414976.153466 &#125;, [ 1739772069.7531114, true, &quot;XaGgqy&quot;, &quot;RwGOtKq-1XA3kGHxSxj&quot;, true, 641014644.867056, -808749567.2080882, &quot;uI&quot;, false ], -408962742.8051345, &quot;CgHySm29GsrPLL&quot;, &#123; &quot;mlmye&quot;: true, &quot;hjdtoyy&quot;: &quot;xjhyCe8jp7&quot;, &quot;tqrdoqwjkek&quot;: 836131928.1066666, &quot;idajceyj&quot;: 1186855296.3268478 &#125; ], &quot;uabkdzydas&quot;: [ &#123; &quot;ndggdrnriq&quot;: &quot;5s498r6QO5f4O21&quot;, &quot;iybijqnqu&quot;: &quot;nvELVQoajllij&quot;, &quot;rnubwnfd&quot;: true &#125;, -135278750.97632736, &quot;0-&quot;, [ 861257612, &quot;YSt&quot; ], [ &quot;Hriq_i8O&quot;, true, &quot;2WyD5sM2kJ6tk8saK&quot;, &quot;-pYRzho&quot;, &quot;OywpZGYH&quot;, true, &quot;TGVsRxHuDESYPJX&quot;, false, true, true ], false, [ false, &quot;FZZMk3hxTGyFIZf&quot;, &quot;840ukL&quot; ], &quot;4cBYOiZS5T687&quot; ], &quot;wcblckswrwgx&quot;: 1691134642.1109512, &quot;imiyna&quot;: &quot;y2obPNr&quot; &#125;, &#123; &quot;hzsnvp&quot;: [ true, &#123; &quot;mvvptanvzlv&quot;: 1235246065.646934, &quot;ispkrfaefd&quot;: &quot;o7jyOqBNz-sp5&quot; &#125; ], &quot;fbwnal&quot;: false, &quot;dmyhpklcgjpz&quot;: &#123; &quot;evuyme&quot;: &quot;VGTLhrsgB3tG&quot;, &quot;irsvzpkrrs&quot;: &#123; &quot;htcvmq&quot;: 1643584917.6512115, &quot;kpvfd&quot;: -1377834402, &quot;nvotaaj&quot;: &quot;ZSQJklJxCP&quot;, &quot;esfolj&quot;: &quot;toKuUYfZ&quot; &#125;, &quot;zsmjcbtlqn&quot;: 629882819, &quot;xlmcltjykzn&quot;: &quot;8QotloMb3Bl73WVjn7&quot;, &quot;mhapclfrxs&quot;: 1028717782, &quot;cxqqhtko&quot;: false, &quot;wiyuy&quot;: &quot;PzzXnXU5PPnPW9z&quot;, &quot;ixdetedk&quot;: -1124814436.5608842, &quot;wqzmq&quot;: [ true, &quot;SRb3jdXAyC6nKc-_zw7&quot;, true, true ], &quot;cbqsa&quot;: &quot;C&quot; &#125;, &quot;ijdvphas&quot;: [ &#123; &quot;sousu&quot;: 1832542641.4012554, &quot;tpcnhwrccrg&quot;: -2064401096, &quot;hoolqinb&quot;: -1849626143.48401, &quot;yribmyatzdpx&quot;: true, &quot;cmsqnvrn&quot;: false, &quot;qegvonsx&quot;: true, &quot;gvpxrrsg&quot;: -470037709.29599655 &#125;, 1780541435.6086545, &quot;2WH45mLOypsCrtyWjI&quot; ], &quot;brznzoa&quot;: &#123; &quot;yskyrbx&quot;: false, &quot;pnlhlxjujkef&quot;: &quot;bOa6&quot;, &quot;iyvplfxfia&quot;: true, &quot;vwvlvwtxyhfj&quot;: &quot;N93v0&quot;, &quot;yedkmanvi&quot;: [ false, 322287198.0058443, -2137145925.7176564, false, -1862343833 ], &quot;mutvvihn&quot;: 1914305547, &quot;hrgevkwio&quot;: true &#125;, &quot;bphxtjilrubc&quot;: &#123; &quot;oljlt&quot;: [ &quot;Cdja2cH2kJPDxV&quot;, false, &quot;JqDgQgoz5&quot;, -1924686300, &quot;1z-ffRR&quot;, -975594968.6513255, 1351202255.9644172, -83283900.85926154, &quot;UiqLAWnoR8_-&quot; ], &quot;fhfkdg&quot;: &quot;AoxpLG0MnCxRin8qpN&quot;, &quot;noynicwlt&quot;: &#123; &quot;asaczkb&quot;: true, &quot;xqnvdzjoaga&quot;: -121663039, &quot;moekjcd&quot;: &quot;axOlNW&quot;, &quot;jjivbsd&quot;: &quot;r6&quot;, &quot;vxxxyqf&quot;: true, &quot;vzygsjgygkwc&quot;: &quot;F&quot;, &quot;ybnvrci&quot;: &quot;lsCcA0emGlFbRK-0Y5r&quot;, &quot;uvchzg&quot;: -1294386589.0755918, &quot;tcxske&quot;: false &#125;, &quot;ksdknwbv&quot;: 1542149459 &#125;, &quot;cpspsyg&quot;: &quot;old4MF&quot;, &quot;tiyhssqn&quot;: false, &quot;ldury&quot;: -2137708872.0328448 &#125;, &#123; &quot;uvbayhisyau&quot;: false, &quot;fbdcl&quot;: [ false ], &quot;ilipavyawcwt&quot;: [ false, -2045197450, [ &quot;OQWt9&quot;, false, true, &quot;NiLrcY92VJf0iefLZwg&quot; ], &#123; &quot;xcsnqderihp&quot;: &quot;pS_3_A6DziH&quot;, &quot;cmvxao&quot;: true, &quot;hlmbjxhrqas&quot;: true &#125; ], &quot;synpgy&quot;: -986091799, &quot;lvumkb&quot;: &quot;RU6FR1NOba1YjH1&quot; &#125;, false, true ], &quot;tynezwj&quot;: &#123; &quot;mhsjy&quot;: 1067132576, &quot;azwzs&quot;: -55742754, &quot;ymgots&quot;: true, &quot;ewhppxkutkts&quot;: [ 527907098.9250864, 1892161595, false, &#123; &quot;fsdyrxoquq&quot;: 745891887.899272, &quot;xvrfjphm&quot;: &#123; &quot;kgvsflndweqt&quot;: &quot;SUD&quot;, &quot;vrvcsvgr&quot;: false, &quot;wpvuwif&quot;: false, &quot;ftxbkgziqdc&quot;: &quot;B&quot;, &quot;nmbvmziwdc&quot;: &quot;1cM&quot;, &quot;annfksy&quot;: 848087104.0004258, &quot;zksdebbbkveq&quot;: 2007092837, &quot;ggcchlgwt&quot;: 26860668.38137573, &quot;fvfvk&quot;: true &#125;, &quot;nrjmook&quot;: false, &quot;xxewpss&quot;: false, &quot;yiyrzpaoj&quot;: &quot;1BtrWrePoIWrpkudhX&quot; &#125;, &quot;MhqFhSDsoiZCbs&quot;, -1962448143.37587, &quot;JHiJtLt-0PV&quot;, -848857355, &quot;MRj0q3&quot; ], &quot;rijrkwvr&quot;: true, &quot;pnmllj&quot;: 1122358779.127721, &quot;pgslfn&quot;: [ &#123; &quot;yrdudea&quot;: &quot;MY7kvGHCZr9Kzg&quot;, &quot;qqycz&quot;: [ &quot;3EePfhnF-pz1P5f5L1c&quot;, true, &quot;ALUO_TrBhOAau7&quot;, &quot;o&quot;, false, false ], &quot;ggdaewjpdxn&quot;: 43629698, &quot;aaeykjqyuwv&quot;: [ 7708036, &quot;3LaRVqg1v6z48GT2N5&quot;, &quot;u3_N_yT&quot;, -941937619.7056336, true, &quot;jOAWu80H22KqLb&quot;, &quot;lkEitOoWKpUj1dFrcS&quot;, &quot;pGHWYfPt6&quot; ], &quot;fzxsvhmj&quot;: &#123; &quot;xezjomecr&quot;: &quot;AgAqyZIQyboQj&quot; &#125;, &quot;wixxk&quot;: 972492071.1440042, &quot;vzllenlwss&quot;: true, &quot;lrdnw&quot;: true, &quot;osbmvcdln&quot;: -99838667.00018373 &#125;, true, [ -1156729928.6033874, &quot;RQ2Ddf3m&quot;, &quot;tBLZLWI&quot;, &quot;t&quot;, &#123; &quot;awjkkoqbm&quot;: 514900056.4981093, &quot;nbcdkmlmksj&quot;: 546112394, &quot;mgyhnwvdfxm&quot;: -962693348.4544209 &#125;, &#123; &quot;ulkmuvuzsms&quot;: -916021827, &quot;kcfrccqkckw&quot;: 2011197419.3960195, &quot;wdwcfnc&quot;: -329734869.0126096 &#125;, -1267535808 ], -444607644.5187344 ] &#125;, &quot;zailmdcer&quot;: [ true, &#123; &quot;qhjwptdlpln&quot;: &#123; &quot;ohcdtvwvstwx&quot;: &#123; &quot;rcspfos&quot;: &quot;A1Dk1UpauJXvX9k&quot;, &quot;glkbaffy&quot;: true, &quot;mnelbrmrt&quot;: 112804143.37796865, &quot;qdsgvsw&quot;: true, &quot;fsxjpyvw&quot;: &quot;_HuByYd&quot; &#125;, &quot;kfznxtpub&quot;: false, &quot;ofemihcvnwn&quot;: &#123; &quot;ylbvhdqfoyui&quot;: &quot;-RKVqKpB-R5TisiMbWnI&quot;, &quot;bpoomkqufn&quot;: &quot;PEdcpgwubbyM6lBINEkU&quot;, &quot;hnlnv&quot;: 124374927, &quot;vfqzpvgccqsd&quot;: 1250199480.562264, &quot;ekfazrxics&quot;: true, &quot;iovjqhuw&quot;: true, &quot;xatkt&quot;: &quot;hZ-f&quot;, &quot;ltotrchgpdxy&quot;: false, &quot;tksjv&quot;: 321121533, &quot;pqupavhjgb&quot;: 602017169 &#125;, &quot;aychomumdpm&quot;: true, &quot;uywocbg&quot;: -1340353830.8160665 &#125;, &quot;nsvmmtzffyi&quot;: &quot;snOsd3LX&quot;, &quot;rinhb&quot;: 744708339, &quot;hwcszmejvzow&quot;: &#123; &quot;jxqyosu&quot;: 497375279.6818433, &quot;hhbbwqh&quot;: true, &quot;rwejxwoqvyg&quot;: false, &quot;lxlpcsnxev&quot;: &quot;cvZ1&quot; &#125;, &quot;nfjwuxgz&quot;: -205472971.4876565, &quot;yexcq&quot;: [ &quot;xCJ3l&quot;, [ 2142794310, &quot;YD9&quot;, 1041074376, false, false, true ], &#123; &quot;nrjyrjy&quot;: false, &quot;scybwd&quot;: false, &quot;buboehn&quot;: true, &quot;mtbdgt&quot;: true &#125;, -555213888 ], &quot;rgmsxkvxe&quot;: false &#125; ], &quot;xqodyvquaqk&quot;: &#123; &quot;tlwbalafs&quot;: &quot;P11VyUVgEJDBLnfTBXW&quot;, &quot;bwxxsdvbejyj&quot;: false, &quot;sqixnooxi&quot;: false, &quot;ktegqrv&quot;: &#123; &quot;uzxuwoxxz&quot;: &quot;kCXkDF&quot;, &quot;nxyxwdsox&quot;: [ -1728493142.145594, -1561089932, false, &#123; &quot;qalgexoqmec&quot;: 1265040040.7056124, &quot;qjxkymosrtfl&quot;: 362528080.91682416, &quot;uyooswivc&quot;: -2044499441, &quot;effancqxpu&quot;: false, &quot;iqkfcx&quot;: -1148395558.362454, &quot;njrrjmktjpwx&quot;: &quot;LZ&quot;, &quot;wqusenwc&quot;: -1117229386.9430377, &quot;sjbwosrsmpss&quot;: -686080485.4933355, &quot;rhavtoocclud&quot;: -1203546311, &quot;wqatpzwmre&quot;: &quot;Qz8iNjQfh_OC1&quot; &#125;, false, [ &quot;x7Pl&quot;, 1352206425, &quot;DlQW4MIpCg&quot;, true, &quot;aQNozs&quot;, 263610904.8397138, &quot;Qhc3c4Vh5ksc&quot;, false ], &quot;C9&quot;, &#123; &quot;jmjwwqfrquof&quot;: -921098144.7482386, &quot;nzqzi&quot;: &quot;LyWG&quot;, &quot;hzicitfhylcq&quot;: false, &quot;yyhdtfualcg&quot;: &quot;411pRUYZ&quot;, &quot;erpmbuucfv&quot;: &quot;4-lsO0Ln4F9ICyaffi94&quot;, &quot;wjdfwodqqjh&quot;: 1845939237, &quot;woficflha&quot;: &quot;R8DMlnDFzfh1-MoViEB&quot; &#125; ], &quot;myzhandzdy&quot;: [ false, -118610442, &quot;Bprb_a-aR&quot;, &quot;Jw9oewLB51H3d9fr1_U&quot;, true, &#123; &quot;htwvzax&quot;: &quot;moCFEdcSc1fA&quot;, &quot;dkmrfqrq&quot;: &quot;99hr&quot;, &quot;bltsputcmprx&quot;: &quot;dwLUtu&quot;, &quot;fhntywcb&quot;: false, &quot;gqpjbpmp&quot;: 1619105248.3625658 &#125;, true, [ 653762948, &quot;X1QOlNfVvU&quot;, false, &quot;_Fjg6U-NrrOBv0BMny&quot;, true, &quot;owS9j47lQuPjQLAA&quot; ], -635964171 ], &quot;qcwaaot&quot;: false, &quot;nhqlxfhgztcs&quot;: &#123; &quot;tpltmbqkqtw&quot;: &quot;kqzyLHJeavq&quot;, &quot;bhvmuytmnh&quot;: 514166948, &quot;rqbjvcu&quot;: 362096038, &quot;ohqcrbnvbq&quot;: [ -12337413, true, true, 2048459193.417751, &quot;y2FmUh1EwZqM-f&quot;, true, &quot;aQsDFy0975Fx3hZcVb&quot;, true ], &quot;ygrkbf&quot;: [ -954464231.8863583, false, &quot;YPRoJ&quot;, -665388063 ], &quot;tcrveopu&quot;: [ &quot;ynm9g_LkpS46x3KoGCzg&quot;, 1223992785.9131525, &quot;Z3cP&quot;, &quot;-Ta&quot;, &quot;1vX15_xgYuFJVJcCAY5&quot;, true, &quot;LmB&quot; ], &quot;ejldgvvkemyw&quot;: &quot;k2rlJK2CnrascHYx4mL&quot;, &quot;iyhgxvl&quot;: [ &quot;VvNtf6h-&quot;, false, &quot;uALIjfikazNCCS0&quot;, &quot;jorcn2IuT1Ir8h_Ve9&quot;, 1294510970, 1075791699, -1453510649 ], &quot;wpjzzljo&quot;: &quot;cE62kGEH8HTj&quot;, &quot;kqhfx&quot;: [ 1628421507.6120474, -1474741674, 1557154500.7193115, &quot;f_Y98t&quot;, true, false, -1301617840 ] &#125;, &quot;zdovecpiahyz&quot;: &#123; &quot;ltupxfnh&quot;: 2093809642.9200048, &quot;fxteaf&quot;: &quot;hxdYxLMepEB2qYd&quot;, &quot;ncuxca&quot;: &#123; &quot;jjixdw&quot;: 170293395, &quot;kyvuzj&quot;: true, &quot;gvbtnfyn&quot;: false, &quot;bopeavpzvt&quot;: &quot;4&quot;, &quot;yiufa&quot;: &quot;OwGFajXMMs54jbd&quot;, &quot;vxfuuzfo&quot;: true, &quot;pmsrorsxilu&quot;: &quot;vFJPkmlcnvYSUWIYn&quot;, &quot;noikw&quot;: false &#125; &#125;, &quot;rcihvgacfpqo&quot;: [ false, 1463749411, false, &#123; &quot;zaifbuaeew&quot;: &quot;ejObiDfCR6bx-evuh9&quot;, &quot;myuzlsbrw&quot;: -1870480788, &quot;ibhfvndtg&quot;: -1148483894.446386, &quot;jweqnj&quot;: 669003129.2767447, &quot;fcdyrkk&quot;: 2085526436.2747927 &#125;, &quot;cAn&quot;, &quot;QCu2W&quot;, [ false, -1865418814.6994572, 1694073013.129531, false, &quot;J_iAqF98wgJrP&quot;, &quot;jwXPdyZ6PT0aIqUz&quot;, -959408941, &quot;WT8A2KKDj9JjjcaT&quot;, true, true ], false, &quot;b3i&quot; ], &quot;ddblff&quot;: [ [ &quot;9uxFIdq8RhB8mWL&quot;, true, 1988094303 ], &#123; &quot;efqirhszudz&quot;: false, &quot;jyskyzxm&quot;: 1329926014, &quot;kobioghsdtc&quot;: &quot;USVCW&quot;, &quot;ryqwshdmw&quot;: &quot;LF5QaVOa&quot;, &quot;uupdatjptuvr&quot;: &quot;ORw76yFFzdZ0C3w_5&quot;, &quot;dahnbudw&quot;: &quot;YdB&quot;, &quot;qfnvalw&quot;: true, &quot;mziolg&quot;: 953290145, &quot;ypsyh&quot;: -699497270 &#125;, &quot;Q0lrqPC7at8g&quot;, true, &quot;tca6egLJo8XVCrO7WIy&quot;, -1037565328.9697363, [ &quot;6rBa6a_hrj&quot;, 1685089684.3163245, &quot;FG2&quot;, &quot;Yw&quot;, 1262160201, 1216789119, false, false ] ], &quot;gftpmxyyux&quot;: -1934447629.6346464, &quot;auwpxgwhmud&quot;: false &#125;, &quot;apxrvvats&quot;: &quot;Zcnx4qoueeYYR_V2pYBC&quot; &#125; &#125;, 1393668854.5378907 ], [ true, &#123; &quot;jniiammtrvh&quot;: [ &#123; &quot;mvvpuwdwsvk&quot;: 1896626739, &quot;mgpfgu&quot;: &#123; &quot;wrhcb&quot;: false, &quot;pcrnx&quot;: [ false, true ], &quot;tjqkdjqsqxw&quot;: false, &quot;rrhzbkttk&quot;: true, &quot;admmbmftyrnd&quot;: true, &quot;ogfmylz&quot;: &#123; &quot;jjhfnzixtuta&quot;: &quot;OhGIGVSXB-gBnnyssop&quot; &#125;, &quot;mbmclipip&quot;: &quot;GC6wfdV9Pceq&quot;, &quot;cctetq&quot;: false &#125;, &quot;prhdduxx&quot;: -1548791816.1863751, &quot;takzcm&quot;: &quot;8a_QSI&quot;, &quot;ufcje&quot;: &quot;M7sdHwXkzi_OV-F&quot;, &quot;efjglvw&quot;: [ [ true, true, -1608494638.2646492, false ], &#123; &quot;cpuhkiklfyap&quot;: -752399298.0508018, &quot;fozrewalc&quot;: &quot;iZ751GLXd&quot; &#125;, 763091849 ], &quot;wtopazjgo&quot;: -737149764, &quot;xxhmwduj&quot;: &#123; &quot;vxulqgsacxxf&quot;: &#123; &quot;hjjlytnanoll&quot;: 2130711664, &quot;kpswzbwad&quot;: 788365059.7536508, &quot;dwyjfdhnt&quot;: -449660438, &quot;hbovhw&quot;: true, &quot;atcfunzxztm&quot;: 659791201.3745784, &quot;hvbhsbgpzd&quot;: true &#125; &#125;, &quot;mhgjuc&quot;: &#123; &quot;ghysasaagd&quot;: &#123; &quot;sajlbhu&quot;: false, &quot;tvlugo&quot;: true, &quot;aqpwkyoy&quot;: &quot;jPSSEh-WOftErGA8-&quot;, &quot;efhwwjsjjgsg&quot;: true, &quot;etwtftioabzo&quot;: true, &quot;vfkddwamjxw&quot;: 2126698548, &quot;wvntlvb&quot;: -1866904988, &quot;ahcmuac&quot;: &quot;-oxmlGdLsoH&quot;, &quot;xokodsuzzec&quot;: -1954642857, &quot;jpeqigxce&quot;: true &#125;, &quot;ktjik&quot;: [ 296215686, true, false ], &quot;pmjfkcvk&quot;: &#123; &quot;mbmucjxz&quot;: &quot;0vrm&quot;, &quot;pclxgxtubhmc&quot;: &quot;tD4o&quot;, &quot;vlksej&quot;: -175231836, &quot;ghpki&quot;: &quot;F7p_WKvzAN5iOhC3o&quot;, &quot;bozomyvosp&quot;: &quot;CSclbwm&quot;, &quot;fjfukyjt&quot;: true, &quot;grjvvj&quot;: &quot;rI&quot;, &quot;njlkaw&quot;: 126601870 &#125;, &quot;bgydh&quot;: 238702224, &quot;xkkmnpwius&quot;: [ true, 602126973.4586275, false, -2099514570 ], &quot;sgrouw&quot;: false &#125; &#125;, 1904329721.0161448, true, [ false, &quot;G35V&quot;, &#123; &quot;gbbexruig&quot;: &quot;e&quot;, &quot;rcdffshtx&quot;: true, &quot;qkkvzzrqmrc&quot;: &quot;QzRXEart&quot;, &quot;iwhgrxvrutj&quot;: &#123; &quot;dqzrmiamfe&quot;: 5338367, &quot;fwnvhjwyjn&quot;: &quot;cBuKgd--OCRWGMpQWm&quot;, &quot;fsvlekwmasq&quot;: 699200148, &quot;jrxhsvbc&quot;: -483164045.0900765, &quot;cmqnz&quot;: &quot;MPbfVMlO7K&quot;, &quot;swwvqixfxg&quot;: true, &quot;cjlenicb&quot;: &quot;_RiN-hxANau06d&quot;, &quot;myauaesu&quot;: -237651078.23778957, &quot;gxgnxrmjwd&quot;: -800057586.983838 &#125;, &quot;bexshbqykkd&quot;: false, &quot;dgvxkxpvmp&quot;: &#123; &quot;sliao&quot;: &quot;EFh&quot;, &quot;hnkanlmqluf&quot;: &quot;cQpxGxo06hZo&quot;, &quot;lqfgaynbjt&quot;: 934444396.8198074, &quot;lzpracwzul&quot;: -1892061636, &quot;laiwssjmvu&quot;: 1897981532, &quot;nndsymtnkd&quot;: &quot;VC&quot;, &quot;ezqkcunsfmby&quot;: -277793116 &#125;, &quot;mbwjvtdy&quot;: &quot;tH9nXzEcBN&quot;, &quot;zvhxjuvq&quot;: &#123; &quot;vtlomhnp&quot;: false, &quot;ehzkxyktwrf&quot;: &quot;szZ2OD95wjNcMPGI&quot; &#125; &#125; ], &#123; &quot;curgpbccjop&quot;: &quot;N24pjsPzpSjGlN9OQMjz&quot;, &quot;bgbgvif&quot;: &quot;mDy1jjc1j0Wx8kN&quot;, &quot;qbhmjdrfo&quot;: &quot;qb62bZW9&quot;, &quot;dbykj&quot;: &#123; &quot;auzkmnzxjapz&quot;: 1667514137, &quot;puqnd&quot;: [ &quot;0CQ2LcEz&quot;, &quot;tOU4&quot;, true, false ], &quot;xoegtcmq&quot;: true, &quot;gnhikinkynjd&quot;: &#123; &quot;jgcwndaskbil&quot;: true, &quot;vhdpljdcot&quot;: &quot;Nqy1Sw7HuqSdQMh&quot;, &quot;rakkbwhvqghl&quot;: true, &quot;qrqnx&quot;: 845268718, &quot;qpgue&quot;: false, &quot;kwwtzuqpgy&quot;: true, &quot;myeacnfgsk&quot;: false, &quot;ixvpdp&quot;: -1400331300.3967977, &quot;ykmdoup&quot;: 1544908603, &quot;xtnvvepj&quot;: &quot;Toes9E-_mmm1hIEIf3v&quot; &#125;, &quot;sijtzlcewxv&quot;: [ &quot;mgTG&quot;, -1312622706.0005493, -748071872.9063215, &quot;k5HRQ5YkWH&quot;, &quot;Z2koh&quot;, -1601009741.181673, false, true ], &quot;vswjrsxcc&quot;: [ -1781510486.6382377, 738261088.4060149, false ] &#125;, &quot;wgygkoujeg&quot;: &#123; &quot;decksh&quot;: [ &quot;L3mZbob3cw01NixLlo5&quot;, &quot;x731RwliBKfGSt0&quot;, &quot;tG&quot;, &quot;MnJPRnV&quot;, -1758605267, &quot;ag4&quot;, &quot;QEITkzmwz&quot;, &quot;HdFWevpiRqxeVz5fwLh&quot;, false, &quot;FNo8JwpsyCif08IODE&quot; ], &quot;ioduo&quot;: &#123; &quot;uflngzw&quot;: -1852810563.9251583, &quot;goiqqzcn&quot;: &quot;Z56lv5_HC&quot;, &quot;csywikg&quot;: true &#125;, &quot;rnqgsjwwe&quot;: -774072143 &#125;, &quot;tejdvsk&quot;: 1001278416, &quot;tyxekzdovvi&quot;: [ false, false, false, [ -236543921.39379314, -218223095.06218123, 2024458747.6611235, 811219365, 1874311562.6366107, &quot;5OeI7FUMWuG3Z&quot;, false, -1089151101.8916988, &quot;Sb6rZny&quot;, true ], true ], &quot;pbuacempyqc&quot;: [ [ 367384543, true, 75013920.66130935, false ], &#123; &quot;tdztxdwmoac&quot;: true, &quot;wkufkebkpxld&quot;: 1821757583.0949125 &#125;, -1671201456, -13804822, true ] &#125;, 123218945.75887775, 1404339664.8457758, -185387580 ], &quot;wfxxhuopmim&quot;: &quot;o&quot;, &quot;thlluaecv&quot;: [ &#123; &quot;jqylqw&quot;: 858899554.5139351, &quot;wyaxfgej&quot;: [ [ false, 2146352084.1838827, 897904204.9450395, &quot;fCyRLl8&quot;, &quot;FsZ&quot;, &quot;pez&quot;, &quot;vPDYf&quot; ], 1029640518.8229874, [ &quot;bS8H&quot;, false, &quot;VgbMbDwvIx3&quot;, &quot;VpogD&quot;, false, true, &quot;65MgTmyuEc9qhn&quot;, &quot;ohZaQT-Te&quot;, &quot;Sb_yHdC&quot; ], [ false, &quot;zWd-heUqu7TY&quot;, -1415954974.5944912, &quot;XVfjamolrzF_0J-MNON&quot;, 1217890143, false, true, &quot;L&quot;, &quot;4YKDBuAW7K&quot;, &quot;V&quot; ], true, 1879580067.000942, false, -1654839801, 100052159, -800557284.0829028 ], &quot;nukzrbzjkir&quot;: [ 258533839, false, 213444138.73006603, true, &#123; &quot;wamgajbsfmn&quot;: 1014574950.7713586, &quot;rhppvf&quot;: true &#125;, 1687657363.011777, 656166339, &#123; &quot;qodhrxoozlui&quot;: 773350455.8654208, &quot;fzxlwnmvso&quot;: false &#125;, &#123; &quot;amxmmhaatwi&quot;: &quot;w4Iq0dh76AwL6rF794&quot;, &quot;jdytudkv&quot;: &quot;Y-EfiosyEMlaRPTp&quot;, &quot;cxtnekqlzw&quot;: 400003200, &quot;plralpu&quot;: true, &quot;pejnuyfnjbl&quot;: false, &quot;hhuaisozovi&quot;: false, &quot;pseyarlgnk&quot;: &quot;CpVc8&quot;, &quot;bydduv&quot;: &quot;BIEj&quot;, &quot;ydecuydn&quot;: true, &quot;gofashwjae&quot;: true &#125;, false ], &quot;zbwpjqk&quot;: -1838182697.1353338, &quot;tiytaujw&quot;: true, &quot;jbywktlgkk&quot;: true, &quot;cqebwqv&quot;: [ &quot;zZKgvSnimrcGR&quot;, false ], &quot;imbcwcqyc&quot;: &quot;AnyBg57Kmk&quot;, &quot;fwjmsokyr&quot;: false &#125;, [ [ &quot;WCuK_qLgOsxn4BMsnDaz&quot;, &quot;xfi&quot;, &quot;q&quot;, true ], [ -748211176.155107, true, -1401010966.5864644, [ false, 2021869653, true ], &#123; &quot;cotgmplpyhln&quot;: &quot;bpFT8lpuaJKZcoaKRJl&quot;, &quot;pzeyy&quot;: 1930716822.8471415, &quot;yytlawbnur&quot;: -2074115774, &quot;scgzdmgpfpsb&quot;: &quot;H&quot;, &quot;qkpaxjqh&quot;: -378880434.1711195, &quot;yjnbykz&quot;: &quot;EeMLOw&quot;, &quot;lwamhujh&quot;: &quot;yLFHgWnhZtyZQPp7c&quot;, &quot;zdslfzis&quot;: -1136508944.5711713 &#125;, [ &quot;j_wou9M&quot; ] ], &#123; &quot;ixozxwi&quot;: &quot;q&quot;, &quot;qbuctkyregs&quot;: false, &quot;fqksdag&quot;: -85523788, &quot;hhdzzwng&quot;: false, &quot;uczxinozzdl&quot;: &quot;rBOZkBxD-&quot;, &quot;xxumgxoy&quot;: false &#125;, [ true, -50400980.76733317, [ false ], -358240810, 1918005033, [ -1111099668.4828126, false, true, false, false, false, -767809010.557472, -512038665 ], &quot;Bijq3eom6YtjA1muZ&quot; ], false, [ &#123; &quot;afrilsa&quot;: 746200788 &#125;, -1753507973, false, [ false, &quot;esKJNd5dF9gOXmtCqmH&quot;, -1523271154 ], &#123; &quot;jgpewpzwoow&quot;: true, &quot;tipks&quot;: false, &quot;kxyczl&quot;: 410494353 &#125;, &quot;qtLE8BoZUES3VC5wH&quot; ], -1283908529 ], false, [ &quot;w_5&quot;, &quot;yoYoJ4lJQyZJceGGDfP&quot;, -1342247946.4252052, false ], -1258133438, [ &#123; &quot;dznrdltba&quot;: false, &quot;iqjobzn&quot;: &quot;alqGLwf&quot;, &quot;jfbyehkaebv&quot;: &#123; &quot;mnstnkdjvtoq&quot;: -1251476420, &quot;yjrummqkn&quot;: true, &quot;ahuatvir&quot;: &quot;0&quot;, &quot;sasckoghgs&quot;: &quot;O3qWnVu7XVnjWAPstQ&quot;, &quot;hqdssn&quot;: &quot;zcGIZ8WW-ETpeMWe&quot;, &quot;gixjuitz&quot;: &quot;P-9wp8V5k0AjA&quot; &#125;, &quot;sryrfu&quot;: 2059684846.8308434 &#125;, &quot;1IiKLm-ZLO6ST5&quot;, &quot;Io8SN3N1Va&quot;, [ [ false, true, true, true, -590360750.2010583, &quot;GrJn&quot;, 1548376817.9896882, 545919761.9998952, false, -1016944141 ], false, [ false, 257016788, -182507392.0127049 ], 1574580550.7959564, -2066992856, 354829285, false ], &#123; &quot;edzqm&quot;: &quot;0n0fh__zbqfIjYvS&quot;, &quot;wbctu&quot;: -1314199540, &quot;pofbcl&quot;: &#123; &quot;gxbdleekzv&quot;: true, &quot;ikiutqcwjkv&quot;: 1520872176.5736573, &quot;nzjdgoih&quot;: true, &quot;wqfxij&quot;: -1586063938.1858013, &quot;euutcsikp&quot;: false, &quot;blffitza&quot;: &quot;tc&quot;, &quot;rhquzmynvm&quot;: -365100281.4269022, &quot;hrqjquepkvk&quot;: -1861705526.114913 &#125;, &quot;hazdi&quot;: true &#125;, -1124751440.8444362, true, [ [ &quot;KKAtG5VK7K40i0&quot;, -563064267.2614653, true, &quot;vgRiOICLB4PTs6lo&quot;, &quot;C18_pTNweX9qiHO8bVr5&quot;, -408766011, true, &quot;ftTpxZQwC&quot;, 1894079196.3602607 ] ] ], [ [ true ], [ true, -805819753, &quot;-F&quot;, &quot;L&quot;, [ 1333877086, 831431100, &quot;oXEGuI&quot;, &quot;EwoSumf&quot;, &quot;0aqeG&quot;, &quot;R_Lydo2Pcr8T4Iy45Vs&quot;, false, &quot;bMxfO40XBb&quot; ], &quot;jR9d7hIdXMR1nuyfYk&quot;, false, [ &quot;sGDxU&quot;, &quot;_l&quot;, false, &quot;JMnM7NZM7QdLxisf&quot;, true, &quot;tn&quot;, &quot;Rv36Jim&quot;, 690415519.3377113, &quot;sgLDRwqUuApnK7SzN&quot;, false ], &quot;E8y&quot; ], false, &quot;cfQTKFFBJV8Kf&quot;, &quot;ZkoPhvR1fop_kH&quot;, 586966110, [ &quot;Ga&quot;, &quot;k6-OsZvJ-MpKBaoETU&quot;, [ true, &quot;W4Kem28FRT4zc7&quot;, true, false, &quot;LXH4lUxbJ9&quot;, -579480971.3091834, -965329135.0661935, 745098321.8406487, &quot;O7eD04&quot;, 256803763 ], -729923167, &#123; &quot;fgdxclqyqsq&quot;: &quot;EkB&quot;, &quot;tkjtxdqdi&quot;: -1331031678.9067976, &quot;kkfyselgk&quot;: 912068528, &quot;kjhcbkbrrd&quot;: true, &quot;ykikpcsxida&quot;: true, &quot;sqwaoixa&quot;: -385379550.47864807, &quot;techbeiwmprm&quot;: false, &quot;dfubtugd&quot;: &quot;eLQUEApzgyYkpSPV&quot;, &quot;fonxdl&quot;: &quot;M9A9Hlvw2L&quot; &#125;, &quot;Emc2MBR58&quot;, &#123; &quot;uzefwwfa&quot;: -1123906836.8169978, &quot;hyafx&quot;: true, &quot;wlhryfosjwfe&quot;: &quot;pk&quot;, &quot;bfusa&quot;: false, &quot;aqvgwpu&quot;: -1695858446.6201096, &quot;gxohmh&quot;: false, &quot;ldbcad&quot;: true &#125;, 1768243012, [ true, &quot;qliHrZe-bZRfnvUxu&quot;, &quot;vjQFTDuWzdvRZB2Q&quot;, true, true, false, true, &quot;i&quot;, true ], true ] ], [ &#123; &quot;bgdvey&quot;: [ -344534268.0866078, &quot;Irfa&quot;, true, false ] &#125; ] ], &quot;botwups&quot;: &#123; &quot;yxfydzutdu&quot;: -141152099, &quot;beynbuc&quot;: [ [ &quot;ZkqIea&quot; ], false, true, true, &quot;oAN5Mf&quot;, &quot;zQIs&quot;, &quot;6__Z4B0iSlUvSzaSZx&quot; ], &quot;dhqpvs&quot;: false, &quot;oxwussmmkyct&quot;: 1303875127, &quot;mdydgv&quot;: &#123; &quot;kksoktt&quot;: -1391672346.5872455, &quot;sbtzf&quot;: &quot;WVEO2YvR8QuTW6P0Jgt&quot;, &quot;tjqpa&quot;: 1977149411.4250703, &quot;ywhttbtmt&quot;: &quot;wjTdln8LEDkNdvqxf8&quot;, &quot;lhgjxzonxf&quot;: false, &quot;zctzg&quot;: &#123; &quot;scajelqhgrr&quot;: false, &quot;kvtcfbyy&quot;: [ &quot;AfUTZ4gKSF&quot;, 317001390, &quot;ryYWZiy3FtF2&quot; ], &quot;rtyket&quot;: [ -1036114681.7964913, &quot;tf0QitbR8O9xtvGf5&quot;, 1332982502.2638862, false, true, &quot;TZA_&quot;, -652603928, true, 1390574689, false ], &quot;qejie&quot;: &#123; &quot;smqufrfb&quot;: false, &quot;gtoqbjpclfw&quot;: 1638916118, &quot;pfyir&quot;: -29443720.445729908, &quot;hhebrxce&quot;: -1152653643.070923, &quot;pzrapinkph&quot;: false &#125;, &quot;acokxnk&quot;: &#123; &quot;whnhxuyrcmxj&quot;: true, &quot;ysxivdlxwccj&quot;: -549543202, &quot;grlqnxsenwo&quot;: -1605091218.0205402, &quot;ysgfppcgxa&quot;: true, &quot;okelikbpaunk&quot;: false, &quot;aghvdwc&quot;: 1959686221 &#125;, &quot;gvmlkcbarl&quot;: &quot;VC2ie&quot; &#125;, &quot;yvmssbloycci&quot;: &quot;xlG-utO3W&quot;, &quot;kilumeuixpra&quot;: &#123; &quot;mngaffwwt&quot;: &quot;7aOygJbtcuCxqT8by&quot;, &quot;qdgdooapvhf&quot;: true &#125;, &quot;lrcbzd&quot;: 1998026347 &#125;, &quot;wuzfuuengn&quot;: false, &quot;ittarmczyec&quot;: &quot;tIL4PPbTrV&quot; &#125;, &quot;fcmdqmo&quot;: 978735650.1124437, &quot;bkddvpsiqn&quot;: &#123; &quot;rmabbbeyed&quot;: &#123; &quot;gjktmbx&quot;: [ &quot;4E&quot;, true, &quot;AW&quot;, [ true ], &quot;zQ6Cie7ojjgNUU&quot; ], &quot;wpnnax&quot;: [ [ false, &quot;PMKDVXUM&quot; ], [ false, 227281685, -1517772604.7362504, &quot;2&quot;, false, true, &quot;C-tl1e&quot; ], &#123; &quot;zxstvmldpnj&quot;: -16494832.358713515, &quot;zqlqltedv&quot;: true, &quot;ptfoj&quot;: true, &quot;hcbbgtpw&quot;: true, &quot;saugkioob&quot;: &quot;fW1ewgZWKxUeVxg&quot;, &quot;lwvymi&quot;: 635029332.4375454, &quot;kbspxye&quot;: -2016408272 &#125;, [ false, &quot;h&quot;, -1577976928.3655305, -1974299206.3429081, &quot;ZWWXHem3kxH4RNg&quot;, &quot;eNSb5&quot; ], &quot;lZ7O&quot;, 1297433422 ] &#125;, &quot;vvtarlzpih&quot;: false, &quot;ttzfakmiafi&quot;: [ &quot;l-W&quot;, false, true, [ -1336747042.387207, [ true, &quot;9hfXIEnntiVG7&quot;, true, &quot;9VmkgVyw_hUhOAP&quot;, true, -407482117, &quot;tiDFMS1pWL&quot;, true, -163574502.27217305 ] ] ], &quot;hvoatumqpjsm&quot;: false &#125;, &quot;gplkqplz&quot;: [ true, [ &quot;Mc_3N0TBZDPcgX&quot; ] ], &quot;vrqlereq&quot;: &quot;mhsE5tR&quot;, &quot;thtnmsn&quot;: &#123; &quot;ydlvtzanz&quot;: -1414888863, &quot;yyiuoipbttz&quot;: 32543798.583942864, &quot;xmvrjckyl&quot;: [ -965711726 ], &quot;qtuwqtd&quot;: [ -1984464781, &quot;gZkyycZ&quot;, true, false, &quot;YHmhP6Ttr1Ned0VTc8&quot;, -999563241.2870336, [ [ false, 1172700925.1223257, &quot;c&quot;, 1639958201.7030485, 955475634, -369295868.619293, false, &quot;fWykK9sVv1R&quot; ], &quot;7aXa&quot;, 1816539149, true, -1487024995.0384936, 1089482526, [ false, true ], &#123; &quot;fmuxmxyqkwe&quot;: &quot;S2JX8CKlBVS8&quot;, &quot;avfmikc&quot;: -45035359, &quot;snhxbwwjzjk&quot;: false, &quot;gufsln&quot;: false, &quot;aipyd&quot;: -720019848.9478672, &quot;iiarzjgssxf&quot;: &quot;YVP49F-l8bF2q0m_&quot; &#125; ], [ [ 591432138, true, &quot;YyrpeF-EXmcmPTGk-d&quot;, &quot;emcP&quot;, -290019325.4129753, -1912570370.784024, true, &quot;OxC_4A&quot;, &quot;yQbThou_8YdKWeqWyAPI&quot; ], [ false, true, true ], -1636293799, 1976637394.5380754, true ], [ &#123; &quot;spzamyd&quot;: &quot;7C&quot;, &quot;gclgdvwuzita&quot;: false, &quot;ldgeomyo&quot;: &quot;YJfGWg&quot;, &quot;eicdnjt&quot;: -263779788.12014225, &quot;kfvae&quot;: &quot;19wJcs6BF8&quot;, &quot;fmydqdiazrfw&quot;: -1828122547, &quot;mljeevnzbcbl&quot;: 856273652 &#125;, &#123; &quot;izaxgf&quot;: false, &quot;xhhfwsx&quot;: 1775964568.0527732, &quot;ifzdyxiiems&quot;: true, &quot;eupiq&quot;: true, &quot;oevjpjeqjduz&quot;: true, &quot;esnwkr&quot;: 1715470666, &quot;hrhrf&quot;: 1451902245, &quot;zgtxhstq&quot;: true, &quot;ypidcpiwwpyt&quot;: -917126816.3725044 &#125; ] ] &#125; &#125;, &#123; &quot;aqodokqkhg&quot;: &quot;Zuwljed&quot;, &quot;cwunjk&quot;: &#123; &quot;vbotghamd&quot;: &#123; &quot;jmepdy&quot;: &quot;q&quot;, &quot;xuxswruytv&quot;: false, &quot;ndcdokr&quot;: &quot;WbUtxYV2l_ouqu&quot;, &quot;mgizyrvhxpts&quot;: &quot;q&quot;, &quot;scaanv&quot;: &#123; &quot;mktyvadr&quot;: 1109020019, &quot;vugerrcpxhql&quot;: false, &quot;vtmmxjoci&quot;: &#123; &quot;ncaacoxpm&quot;: 1494489988.383974, &quot;qxhdxfldwl&quot;: &quot;S3KmDC1TFrOQ39&quot; &#125; &#125;, &quot;ensshllzbgeh&quot;: &quot;3D&quot;, &quot;znwaofjldbpu&quot;: -154842680, &quot;guypzmczdt&quot;: false &#125;, &quot;fvwaau&quot;: [ &#123; &quot;tsngbvpx&quot;: true, &quot;eakhxyaegy&quot;: &quot;BFPt&quot;, &quot;gmbxrlft&quot;: false, &quot;xqgeyarvdsrx&quot;: &quot;R8bR35kB9J96yl9aVz&quot;, &quot;xsszczg&quot;: -829493280, &quot;jsbhx&quot;: &quot;uhc9vnLNxrp&quot;, &quot;hhyfkmj&quot;: &quot;H&quot;, &quot;bllvii&quot;: &quot;k1t1P6KXdoGlx&quot; &#125;, [ &#123; &quot;ptccx&quot;: &quot;lfZzuhjAgdoeszztdy&quot;, &quot;bkwefymlntg&quot;: &quot;PyQnMyFCEUrWzjXsSm4g&quot;, &quot;xfmesjx&quot;: &quot;-4DDE6hPZBOz8uacIs&quot;, &quot;jokesohwhy&quot;: &quot;zXV2ZiJC5bebS&quot; &#125;, [ &quot;G8UgU7p&quot;, true, -2127904687, &quot;Nu-PJlWElM&quot;, true, &quot;s6qXUkl3jLOD_pc&quot;, &quot;Wxnfgt&quot;, &quot;D5klK1CBaxRBK-DPDexg&quot;, &quot;xkZeTIMgD8Ws6&quot; ], &quot;CoF5lUe&quot;, 1937123170 ], &quot;BHWgFisFGYVw&quot;, true, &quot;BgZOfFqfWfe&quot;, &quot;EFPl&quot;, true, 1037155095.8092796, true ], &quot;xfdatb&quot;: &quot;WNSSfr_aW2flUKzRCzn8&quot; &#125;, &quot;xusne&quot;: [ [ 159001374.62753832, false, &quot;zSl8BgFsW_G1cmznFPCz&quot;, &#123; &quot;mdatkyo&quot;: 1527570384.7669864, &quot;xbitixviegbx&quot;: [ true, -1848097938, &quot;7Joyk7PRrOns&quot; ], &quot;edwrpdsrvch&quot;: [ -552911668, 1645951924.689196, &quot;IZzx&quot;, true, &quot;xlXpfZVO5&quot;, 839412569.866161, false ], &quot;hachxgwnpjzz&quot;: -1436594422, &quot;ybwdvfi&quot;: &#123; &quot;kuvgdtpw&quot;: &quot;0z&quot;, &quot;hfsqbjixs&quot;: false, &quot;cbtmoyfr&quot;: -1194184635, &quot;sheruaykeat&quot;: -1567110698.7025378, &quot;txkjxsk&quot;: &quot;XZL7G&quot;, &quot;jpjkcsgsek&quot;: 43304917, &quot;iieavlkrprbg&quot;: &quot;LwQSe8DO7xe2rCbbU&quot;, &quot;dsboooa&quot;: -393666520.97452974, &quot;vndzqxsqg&quot;: true, &quot;nsagjbmdb&quot;: 48834587.35983275 &#125;, &quot;vlclwslfhskz&quot;: [ false, &quot;SXjGCaiTTclDmLrT6F&quot;, false, 1043105482, 2097301784, &quot;4nKmbf&quot;, false, 69831396 ], &quot;osdtk&quot;: -208396821, &quot;qlmuqhuzp&quot;: &#123; &quot;usnssurcdr&quot;: -574185213.4452506, &quot;pltuqsnq&quot;: &quot;0uB7KLhla7WL&quot;, &quot;nndskrvoog&quot;: -1367986628, &quot;tofdvdh&quot;: &quot;tPBDW54rX0&quot;, &quot;kgfcciovi&quot;: -1885874500.3966577, &quot;edzhv&quot;: &quot;LhJo7NIPH&quot;, &quot;jzldueqompc&quot;: &quot;fzJ7f7arKc&quot;, &quot;qgloxhjw&quot;: 2080025119, &quot;brcfgh&quot;: false &#125; &#125;, true, true, [ &#123; &quot;flpyfhswfved&quot;: true, &quot;pyiolxqydog&quot;: &quot;ny5FOm36yHm5I6-6JxK8&quot;, &quot;dbllpwmpn&quot;: false, &quot;qkyuhqn&quot;: false, &quot;mdxbnvba&quot;: -889388673.516174 &#125;, false, false, -120281594.42272925, 1687573020, &#123; &quot;akryajepml&quot;: -214721453.71072343, &quot;zifcjs&quot;: &quot;YFbPFMdGskdp_T0&quot;, &quot;pqebnq&quot;: true, &quot;elaamzzz&quot;: 1655404318, &quot;ymlxovroz&quot;: &quot;22&quot;, &quot;amofr&quot;: 1210476055 &#125; ], [ &#123; &quot;xioxpdef&quot;: true, &quot;nwrnxblzgy&quot;: true, &quot;kkxlv&quot;: true, &quot;vkyblcyj&quot;: &quot;r&quot;, &quot;etypmghiuz&quot;: 1221139522, &quot;mmbfoxbmc&quot;: 1715298681 &#125;, [ &quot;hrpBTNBPMlBHYgtz&quot;, &quot;01lFi-_mz5G&quot;, -75683411 ], -372350659, [ true, -1744224698, -314964517, false, false, true, -336477158.931942 ] ], 1835082196.4508193, true ], [ false, &#123; &quot;clpkqu&quot;: &#123; &quot;fulgxpyuk&quot;: 702470186.2025743, &quot;ftijxzvtcahg&quot;: &quot;yZUiDfUuWRcbeWKn&quot; &#125; &#125;, &#123; &quot;tzviwlju&quot;: [ false, -1410925691.7032757, 1770238795, false, &quot;LeusV3QI2S&quot;, true ], &quot;skasbkydclr&quot;: 1851422214, &quot;acfmrib&quot;: &quot;3g5jstz1o73&quot;, &quot;xpwjhkgwq&quot;: true, &quot;twemfo&quot;: &#123; &quot;kvwnwqjln&quot;: false, &quot;edzeemddl&quot;: false, &quot;nqkcvouhsi&quot;: &quot;EOcTpEHD&quot;, &quot;nfrukradtkgz&quot;: -1138249926, &quot;wwslfndbjth&quot;: 1376666525.6238637, &quot;mglmsgfi&quot;: true, &quot;uazuuft&quot;: true, &quot;rpfrwaox&quot;: 169389405.60048518, &quot;ogghkla&quot;: false, &quot;ymbmzhdgv&quot;: &quot;s4_iUfV2TT6sI1TE7Q&quot; &#125; &#125;, &quot;xNh-&quot;, true, &quot;InBfFsXd&quot;, &#123; &quot;ntcih&quot;: 1429314832, &quot;nvopbqaf&quot;: false, &quot;isymgdnp&quot;: [ 2127520059, &quot;Vu&quot;, &quot;fzNynh5lZrwynoyZjkU&quot;, &quot;4VjUK6&quot; ], &quot;bnuimydawl&quot;: [ true, &quot;uh5&quot;, &quot;a&quot;, false, 1557105429, -1283217851, &quot;740ZE6Cfka&quot;, &quot;8&quot;, &quot;-Ah7g&quot;, &quot;Um-EqrR&quot; ] &#125;, -266838979.80874255, &#123; &quot;nxkfmkrddfgg&quot;: [ false ], &quot;sxqsti&quot;: &quot;9hKjgSAf&quot;, &quot;trlvjragcorp&quot;: false, &quot;klqvjahdxfpf&quot;: &quot;y2Gkwg6zp3oYxq&quot;, &quot;znnqfvzllr&quot;: true, &quot;xavezxjtwmif&quot;: -2065045681, &quot;uytczusfkl&quot;: -1767757264, &quot;vspwvbetc&quot;: &#123; &quot;qugreofhxe&quot;: &quot;ldTH9mCs8W-_IRRIZUIU&quot;, &quot;uhvuvtm&quot;: &quot;XBfTLUpprqb9i3nSe&quot;, &quot;rinspvbhxv&quot;: 1025589038.8803321, &quot;bjpazv&quot;: &quot;J2lQWuGgXRw&quot; &#125;, &quot;vhablr&quot;: &#123; &quot;wjitko&quot;: &quot;KUM&quot;, &quot;hjegpced&quot;: &quot;Qqs6g1dgXhxpEN&quot;, &quot;txkqlveuv&quot;: 230362113.51992226, &quot;yshaztmyhyk&quot;: 783503651.9441766, &quot;zzsjxf&quot;: -1792742449.880724, &quot;avrsqlfkz&quot;: false, &quot;zbgxhyo&quot;: false, &quot;iyuwgoey&quot;: true &#125; &#125;, false ], [ &#123; &quot;ozxvrkv&quot;: &#123; &quot;pgamc&quot;: false, &quot;saxnwqrch&quot;: &quot;o8GQLravXKJD6KR3RJwG&quot;, &quot;qvjqwpxd&quot;: -124149443.38860717, &quot;myabwpwkag&quot;: true, &quot;onqichz&quot;: &quot;aZMXwVeG&quot;, &quot;fyabsaqlw&quot;: false, &quot;epxbw&quot;: false, &quot;eqehuocmi&quot;: &quot;PdPexw6e_ybrNr7e1&quot;, &quot;kqswherw&quot;: &quot;mfk2&quot; &#125;, &quot;rrbpuwrwfn&quot;: [ true, -2032913462.575437, &quot;d9_kT&quot;, -1535246190.54071, true ], &quot;ugxzlfffnc&quot;: -1699340109.979918 &#125;, &#123; &quot;dwaxpfrune&quot;: false &#125;, &quot;kDS8_kR4lk0&quot;, -301772859, &#123; &quot;qbixfwynlt&quot;: true &#125;, -1741110702, &quot;aPWb&quot;, &quot;E74CdAtMvoDtb33o&quot;, -643343114 ], [ [ &#123; &quot;xgawotdioqs&quot;: 1001952480, &quot;wmnkz&quot;: -1924782901.6016426, &quot;alohrdkf&quot;: false, &quot;ylfxzrd&quot;: -800189854.276272, &quot;wbfan&quot;: -1781709246, &quot;qjdgrosfl&quot;: true, &quot;ardwbubahkg&quot;: &quot;a0sq2nmqkZinl91EBkaV&quot; &#125;, false, &quot;gHTHxplIfuVj5g6i&quot;, &#123; &quot;eggxa&quot;: true, &quot;oyefuyf&quot;: &quot;igYxzCUGU&quot; &#125;, &quot;R&quot; ] ], &quot;ugcd2p1qF3uCdCe&quot;, &quot;rWMWxGWxkLUhs&quot;, -733461829, false, &#123; &quot;kquvuns&quot;: &#123; &quot;myvwrwjqgh&quot;: &#123; &quot;dqijvjqc&quot;: true, &quot;lseierbiq&quot;: true, &quot;vjydbvnjksk&quot;: false, &quot;gjsbllijj&quot;: true, &quot;hbyya&quot;: 1965007814.767449, &quot;gvomqit&quot;: -220849628.9049218, &quot;adsuklcfux&quot;: false &#125;, &quot;dyaiazkrn&quot;: true, &quot;ukabijrhj&quot;: &quot;-2zJymU4aM2CO7hn9_&quot;, &quot;qhcuikiyzb&quot;: &quot;T-6uinTm4N&quot;, &quot;cjclyauxmg&quot;: -1283596205, &quot;bonpye&quot;: &quot;da3FKs_NVPk&quot; &#125;, &quot;twqbfrsurulc&quot;: &quot;yd4oEMiYe115x&quot;, &quot;jcjxr&quot;: [ &quot;dzULzi_LR9&quot;, &quot;R5u&quot;, 1248162729.6331239 ], &quot;zapte&quot;: &#123; &quot;axihjnv&quot;: true &#125;, &quot;ehzsex&quot;: &#123; &quot;vchltrfmbx&quot;: &quot;ZY0QkmdwSz9o5&quot;, &quot;uwhayyekh&quot;: [ false, &quot;GrsCC9Ic&quot;, true, false, false, -2068134293, &quot;bFL92dKKAVPPv&quot;, true, &quot;yoB&quot; ], &quot;hjmofnzrs&quot;: [ &quot;NX3Cuz5cv5txC&quot;, true, 1247043235, &quot;csM2vSg&quot;, &quot;nf18GjPLOu&quot;, false, &quot;kuTFyfn1NmLuX&quot;, true, false, &quot;zeTsOtggOL&quot; ], &quot;kioldgejm&quot;: 1495107089, &quot;ibprzzv&quot;: 1949031559.894761, &quot;yykagzc&quot;: 1731468648, &quot;kmtixgjaxmuw&quot;: &#123; &quot;bndvhyixs&quot;: 1981313999.1262317, &quot;cctkza&quot;: false, &quot;yonve&quot;: -1270129901, &quot;ugxwqviage&quot;: false, &quot;jlzjezjmozt&quot;: 741976859.6743804, &quot;sevsmthy&quot;: &quot;GS&quot;, &quot;gjlwhsmy&quot;: true, &quot;jaopgdbyvg&quot;: &quot;EyIEip2&quot;, &quot;loriay&quot;: true &#125; &#125;, &quot;nhxfedlxr&quot;: &quot;lTRz0N10VzouzfEHFZ7Y&quot; &#125; ], &quot;ynljyo&quot;: &#123; &quot;uxancdm&quot;: [ [ [ &quot;_Q&quot;, false, true, 206904565, -822973653.1527957, true, -1350683442.167704, false ], [ -1596875876.1549363, false, false, -1238012415, -137848010.68573704, 470340449.6492439, &quot;ueV&quot;, &quot;pJseAL2&quot;, &quot;Ddj&quot; ], &#123; &quot;ndokpnncjhr&quot;: 336590575, &quot;fyxblnelpycw&quot;: -2000012939, &quot;eacsllkotep&quot;: true, &quot;fzzipybwjrj&quot;: &quot;eQ8E-5LW&quot; &#125;, &quot;UX9ckX__RQxHUpcWe&quot;, false, &quot;V8_fY&quot;, &quot;KLJPTHF&quot; ], &#123; &quot;nwvprgnejo&quot;: [ &quot;1eFczhGfNak8XzhFrU4P&quot;, &quot;npufjdvfN1qVxWs6QT&quot;, true, false, 2089311084 ], &quot;xqiscnyeaszu&quot;: &quot;NXACMMHpfOt3zUD-i-c4&quot;, &quot;eacpubqaezkx&quot;: true, &quot;ypmdfegxfa&quot;: &quot;6vGsrDlfRFoCDE&quot;, &quot;agpbbjhkw&quot;: &#123; &quot;quzcrqccjil&quot;: true, &quot;cncogxofher&quot;: -488366710, &quot;ckvnedwsn&quot;: &quot;ZisifVoJdyXQMWKv&quot;, &quot;yupbpo&quot;: &quot;rI4EbA&quot;, &quot;dhodomjhlw&quot;: &quot;Ik3-P&quot; &#125; &#125;, &#123; &quot;qodkjxmln&quot;: true, &quot;rxtqszfvj&quot;: &quot;E6DtfGYllUAg&quot;, &quot;odcrgsf&quot;: &#123; &quot;vlovspvtetoc&quot;: -1192897874.0416543, &quot;hkawoboi&quot;: &quot;DWqRBOLpicQA&quot; &#125; &#125; ], &quot;kzyzwvlzgv&quot;: &quot;cUjK4x97BL-Ynrz1&quot;, &quot;hqvqu&quot;: true, &quot;hzsyqskdbeiv&quot;: &quot;e&quot;, &quot;kzaxjhypvjgl&quot;: &#123; &quot;jxsivexkzo&quot;: &#123; &quot;vqrdau&quot;: &#123; &quot;wvqtv&quot;: &quot;icEdevVzd1_cNyg4dLpd&quot;, &quot;xdscbuuxbp&quot;: 55980602.317599505, &quot;cynwh&quot;: &quot;DNkVnXR&quot;, &quot;ymaxnylujjix&quot;: true &#125;, &quot;zchxxebmbloq&quot;: true, &quot;sycxm&quot;: [ &quot;9fqFa4nbH&quot;, 1437249377, 322273775, &quot;PYFTG5_SAlK_z9LqFGI&quot;, false ], &quot;ywdzieiipr&quot;: &#123; &quot;cgszdsgaofr&quot;: false, &quot;uplsenrjl&quot;: false, &quot;fmsaqw&quot;: 574140967.0779312, &quot;ragmhba&quot;: false, &quot;uukxupjebdt&quot;: -861913050.194706, &quot;idpdzxu&quot;: false, &quot;ljodrzis&quot;: -122362803.07739404, &quot;caqmi&quot;: -1386917475.509559, &quot;abgqni&quot;: &quot;-BGc7D&quot;, &quot;ocvaluxbmy&quot;: true &#125;, &quot;isqlorcefbay&quot;: false, &quot;xrjydeqvvgp&quot;: [ &quot;5SExZUPVC&quot;, &quot;S1BrzW8UIe_kMh7ck&quot;, &quot;Mennkgnk_-&quot;, true ], &quot;ojoegl&quot;: true, &quot;bgwktztm&quot;: &quot;zJYQF9kPfEi64yMmJFV&quot;, &quot;dtawwflo&quot;: &#123; &quot;prmbytntnpfk&quot;: true, &quot;whskbvygqyu&quot;: true &#125; &#125;, &quot;upzzon&quot;: &#123; &quot;wiwapzyuvm&quot;: false &#125;, &quot;npjmxeyvdyn&quot;: &#123; &quot;alrliza&quot;: &quot;KvVRCFmdDucSZGGsl2Y1&quot; &#125;, &quot;ugwyh&quot;: &quot;cz9zI4CYznzR7pRxQT&quot;, &quot;ispmp&quot;: -1161070595.7346845, &quot;iyhooyrzxvko&quot;: [ true, [ 2135292444, false ] ], &quot;lzzlxwpf&quot;: &quot;vrs&quot;, &quot;hgdhigwag&quot;: &quot;3vR1&quot;, &quot;anunptwmn&quot;: 490868286.9516456 &#125; &#125;, &quot;kmykwxplkahy&quot;: &quot;gINDXm9hJPvk&quot;, &quot;xrzwdmizsw&quot;: &#123; &quot;dlejpvizcs&quot;: false, &quot;hybzmau&quot;: false, &quot;fbzuzbsstihj&quot;: false, &quot;vyrgcnmchu&quot;: &#123; &quot;hexnep&quot;: 86903566.58689654, &quot;ciqamo&quot;: 755997746.0583944, &quot;lphybnxhckce&quot;: -883659286, &quot;kntjlyol&quot;: &quot;j0XLHor4GyIVaM9m&quot;, &quot;dmhuzlzd&quot;: &#123; &quot;hwmyyrnoxp&quot;: -78199546.92589629, &quot;uyesnb&quot;: &quot;0l1fTDEwzaIDl&quot;, &quot;eyzswqhfow&quot;: &quot;LHNyog9l5kMHvEntcCl&quot;, &quot;mrbjtx&quot;: [ 2068123096.8389452, -1122873532, true, -1687160541 ] &#125;, &quot;emtgkzxrz&quot;: &#123; &quot;tkwfj&quot;: &quot;oQDQmp9K&quot;, &quot;ioikrn&quot;: true, &quot;fsbjvqg&quot;: &quot;uJvncDYLevxLNh40BCA&quot;, &quot;vinppxfvo&quot;: 984126216.2380406, &quot;lfhsacupql&quot;: -655363689, &quot;lwivvwd&quot;: -505121060, &quot;hxmrmljumk&quot;: &quot;gXq2r&quot; &#125;, &quot;kpahjj&quot;: false, &quot;vgpxio&quot;: &#123; &quot;iemjgmvlqyt&quot;: 1066597696.7110366 &#125;, &quot;ohoener&quot;: 526984296.8950104 &#125;, &quot;pcyevvhbhm&quot;: true, &quot;pnhgmmqbwqo&quot;: [ [ -384813210.9348735, &quot;jTqisOJcYxEfnrWZ&quot;, [ true, &quot;ai&quot;, false ], &#123; &quot;mlksmc&quot;: 544904991.4771177, &quot;gmxzqfxpqkw&quot;: 615676560, &quot;emfgtkyhmja&quot;: false, &quot;kenyn&quot;: -1539863832.219621, &quot;iflsjh&quot;: &quot;55j&quot;, &quot;tklxqhi&quot;: false, &quot;kpcidrr&quot;: &quot;WKpQUvLACTatNvZK&quot; &#125;, &#123; &quot;dczutjqjr&quot;: &quot;HJ&quot;, &quot;imgynm&quot;: 1722370622, &quot;cbmgmufuzsag&quot;: true, &quot;qbqbvidcedo&quot;: true &#125;, &#123; &quot;zgkpjsze&quot;: -716901705, &quot;fgliz&quot;: &quot;lKqCKibL5MZjuLKmeVc&quot;, &quot;bynowlr&quot;: false, &quot;ntmvbn&quot;: true, &quot;ndmthnmkfkjs&quot;: true, &quot;qurxp&quot;: -1980876521, &quot;fazfpdetljo&quot;: -553444748.7876408 &#125;, &#123; &quot;qivjrpvo&quot;: &quot;R4ck9l&quot; &#125;, &#123; &quot;ixqli&quot;: -1487102848, &quot;lexxapiibh&quot;: -831838419.8794407, &quot;rpbgwjqqxe&quot;: -1663625459, &quot;gnbvdmqker&quot;: &quot;uvk&quot;, &quot;ehltigmts&quot;: 1691388418, &quot;pgopduq&quot;: &quot;7l_UxK4Bn71LBN&quot; &#125; ], false, 1551494899.4984019, &#123; &quot;jvkkz&quot;: 2099344304.4488883, &quot;emeorwe&quot;: [ -264081947, -652584782 ], &quot;udhbqkggcni&quot;: [ false, &quot;xaQ&quot;, 150251933, 232395191, true, -2080094576.9647558, &quot;0VeV5Zmcr2atC&quot;, -744445166.7022103 ], &quot;wnjall&quot;: 119736873.5140159, &quot;ciuodjtggcms&quot;: 1500276770 &#125;, -132045146, -1263155526.3798172, [ true, true, -1845403816, true, &#123; &quot;rnwpeqftieb&quot;: &quot;wa1VJra&quot;, &quot;fumvqby&quot;: 220179072, &quot;crlzriky&quot;: 1363270212, &quot;ilazxjy&quot;: &quot;Q-cEaE3a9WdARtVPyV&quot;, &quot;ouujzqowyh&quot;: &quot;Cu0bxi43yU&quot;, &quot;vtwqtblpvrnm&quot;: &quot;KqiON&quot;, &quot;mpefsnkgb&quot;: &quot;CKa53nUGCnm1jLl&quot;, &quot;fqhslaxbt&quot;: false &#125;, [ &quot;CZ5zxBFI-yr-&quot;, 996837579, &quot;z-VqI-GM&quot; ] ], 1157774392, &#123; &quot;wqgxbeyyk&quot;: &quot;KNGZo&quot;, &quot;mqaednfivtz&quot;: &quot;QFbimE&quot;, &quot;dkwclt&quot;: 585258470, &quot;degnvo&quot;: [ 1870087074.8581982, true, false, 441697875.81590813, -1276310408, false ], &quot;xbpranxmhka&quot;: true, &quot;rbsuykf&quot;: true &#125;, true ], &quot;waympjyig&quot;: &quot;O-72qWIt4mw8Q&quot;, &quot;pjbtl&quot;: &#123; &quot;txrizmeda&quot;: true, &quot;rzbrbcf&quot;: false &#125;, &quot;jbapeir&quot;: -243415972.33070758 &#125;, &quot;iqucwmblli&quot;: &quot;_MC8cU7Q&quot;, &quot;grvedrylrgu&quot;: true, &quot;zvxjb&quot;: [ false ], &quot;oeefhcro&quot;: true &#125;, &quot;woQ3WQ&quot;, 1530398094.1663196, true, -279892369.4923342 ], &#123; &quot;odvuqxuzhl&quot;: &quot;If-zPw3ewhHUUjsH&quot;, &quot;oglccq&quot;: [ &quot;sQH&quot; ], &quot;mdkudahvztnq&quot;: [ &#123; &quot;kjlowpyomn&quot;: [ false, true, &#123; &quot;wkjby&quot;: &#123; &quot;lrrvnnhcj&quot;: -597187784.59663, &quot;yywtc&quot;: &quot;ZUg0OSBYpNmCi-HJ&quot;, &quot;quligcqk&quot;: false, &quot;nzayretnbgp&quot;: 771615638, &quot;hepvuchdzhr&quot;: true, &quot;wmuwvbgs&quot;: -1661929412, &quot;bvcgrh&quot;: true, &quot;fcolev&quot;: &quot;ib1ZAccT7&quot; &#125;, &quot;uhkuialjybc&quot;: -14902463.998066813 &#125;, &quot;5yVg6b2wQ6nml&quot;, 2051546008.6361074, &quot;h9LELDcwm49&quot;, true, &quot;bZhRfo&quot;, &quot;bViI_T1gpNo3U&quot;, [ 1842507010, 1603058847.1101403, &quot;h32X4c1jt6j_rd17aZra&quot;, &#123; &quot;kqiaznxcx&quot;: -822081272.285945, &quot;nuzdsq&quot;: 568732383 &#125;, true, [ &quot;2sOuwh80Wxs&quot;, &quot;6on3D0yF&quot;, -854462434.1293364, -2124315756.7335777 ], &#123; &quot;mlyvkndhd&quot;: true, &quot;eyvafhniacy&quot;: 241247842.76918954, &quot;xwlziuuqdds&quot;: &quot;z4z8FOVVEeCkZEWx&quot;, &quot;xiqhvn&quot;: &quot;evZjue8Et&quot;, &quot;zwcvw&quot;: &quot;Wnft0NExLogAy5eCy&quot; &#125; ] ], &quot;wlwfypvkbqc&quot;: [ 922183981.4838742, [ [ 1794356284.0645318, &quot;Z7Wmm3GD-FN&quot;, &quot;HiDdKiB3hb&quot;, true, 892854136.1338383, false, &quot;GA-Gaz&quot;, -640930912, false ], [ &quot;L&quot;, &quot;QeEG_sXs&quot;, false ], &quot;AUNyT5rpQ-Qf&quot;, -71341847, &#123; &quot;firdp&quot;: 106244713.97600336, &quot;pathgey&quot;: -1346476106.4747205, &quot;bhxcvparkfg&quot;: 1718368904.871837, &quot;gcgmintv&quot;: false, &quot;auejzqxhgu&quot;: 1750672087.5233943, &quot;zuazpqqbcrxc&quot;: false, &quot;edzsayx&quot;: &quot;EdUp&quot;, &quot;wwlestkbocmr&quot;: true, &quot;qxsfddepbl&quot;: true, &quot;gixozce&quot;: &quot;98Hf7gmq2c&quot; &#125;, &quot;EgZIB&quot;, &#123; &quot;fqspfjaarn&quot;: -1935998473.5881822, &quot;apqmesw&quot;: &quot;gUU_RPY6w-9ha&quot;, &quot;wzvixkd&quot;: true, &quot;zhwsr&quot;: false, &quot;wtozt&quot;: 211868485.97610435, &quot;utbpvgpk&quot;: 2053670032.0998983, &quot;dvnedtwysu&quot;: false &#125;, [ -1384320196, &quot;ZTsvgoKO1TZHvm9D&quot;, false, -1128740495, &quot;w&quot; ], &#123; &quot;vjyfomunn&quot;: 37993385, &quot;tqnzktdt&quot;: &quot;Y&quot;, &quot;fgusab&quot;: true, &quot;twrjqzgmjt&quot;: true, &quot;repbtawxpu&quot;: 367001586, &quot;jmnblxzfgjf&quot;: -537387394.5935857, &quot;pxodfcoi&quot;: &quot;gTG-7KABxBCESf&quot;, &quot;pmfcmkagluq&quot;: true &#125;, -630904128 ], &quot;uftKFI1EwsGR0MXSDfQ_&quot;, &#123; &quot;gclbibixw&quot;: false, &quot;gqixue&quot;: [ &quot;t_KdrZUuaPJoX93FBz0&quot;, false, &quot;uxhY22&quot;, &quot;Et-VerCo5qnoVwq0fH&quot;, &quot;b_E&quot;, &quot;6sFU2c9dNH3Kc08&quot; ], &quot;xqqjyz&quot;: 1188578083, &quot;ptlmuxz&quot;: &quot;YP26pG3dESj6&quot;, &quot;jkmhpmbuoq&quot;: [ 2063372609, &quot;hkKDEZAvNE2aW&quot;, false, 1860339991, false ], &quot;pllsykftspw&quot;: &quot;o-r4_P&quot;, &quot;ecyeljvee&quot;: [ &quot;Nxnp0EVAGns&quot;, 828997780, -1847355517.9817019, false ], &quot;hjpxyenayzm&quot;: -416048100.40616274, &quot;otwneuo&quot;: &#123; &quot;zqovovzcfqik&quot;: true, &quot;ltudfmakch&quot;: true, &quot;icehxi&quot;: false, &quot;qdwuvidygy&quot;: 1179111266, &quot;gtjpicblqktg&quot;: false, &quot;mmzcmr&quot;: true, &quot;zmpovgn&quot;: true, &quot;auhkoryxkcny&quot;: 182036208, &quot;fkewudbrw&quot;: &quot;00q9dwqYYhqyXXIA&quot; &#125;, &quot;xlakvqqbigiu&quot;: false &#125;, -857113616, &#123; &quot;vrwtyvh&quot;: 911387766.3383918, &quot;ajutwfblrp&quot;: [ true, &quot;z8vcWpRKxC_DCD8&quot;, 1072868669.4918188, true, &quot;R&quot; ], &quot;jktgkworia&quot;: &quot;qvpzK&quot;, &quot;nqdmrugju&quot;: false, &quot;rtkgdgtqaaqw&quot;: &#123; &quot;wabghwpsr&quot;: &quot;IGe9&quot;, &quot;qhdqgntifm&quot;: 1842147985.444476, &quot;twjbcvrye&quot;: 1998954074, &quot;nynshtox&quot;: &quot;TDoCjO&quot;, &quot;lqnpvvu&quot;: true &#125;, &quot;baegrfgzhc&quot;: &quot;rKbeiZmSky3q5uTi&quot;, &quot;msxjsrhttn&quot;: &#123; &quot;raobvwsbvfe&quot;: false, &quot;ozphznq&quot;: false, &quot;wnsjdxqzxj&quot;: false, &quot;yfakzn&quot;: 2083793047.1078691 &#125;, &quot;arabznkte&quot;: [ -1111525965.4567053, 2086314289, &quot;ufHOWqrqu0O2mbId&quot;, &quot;by1T&quot;, -1207850630, false, -314330286.5802073, true, 210890979 ], &quot;rfcsm&quot;: &#123; &quot;wrdlxhvxgt&quot;: true &#125; &#125;, true ], &quot;xdtjpcbylx&quot;: true, &quot;shpbryeut&quot;: false, &quot;kyqjyrqwym&quot;: &quot;L0QVSwydE_Y&quot;, &quot;ewmoyyj&quot;: &#123; &quot;zadopxgucpil&quot;: &quot;V_USUB_&quot;, &quot;iyoiefhpssid&quot;: &quot;CvND&quot; &#125;, &quot;grvwrxrbzbl&quot;: 94063996.10756856, &quot;fagfarby&quot;: 1246771448.791895, &quot;kyjgnddxslrl&quot;: [ &#123; &quot;hyvcg&quot;: 1859610399, &quot;cfqxkdhiui&quot;: &#123; &quot;lnfmnd&quot;: true, &quot;cpmhm&quot;: 284545930, &quot;ayadpbqmxogn&quot;: &quot;8BWlefOz&quot;, &quot;epabqwb&quot;: false, &quot;gdewpspxo&quot;: &quot;bJILk_Pted5dsWBE8qcE&quot;, &quot;nwhrpjo&quot;: true, &quot;ubdjjnzt&quot;: true &#125;, &quot;pinbyriw&quot;: -575547423, &quot;slhflesfk&quot;: true &#125;, &quot;Bkv&quot;, &quot;KgIhdSq7&quot;, 1075129330.8661218, &#123; &quot;rwbnoo&quot;: &#123; &quot;qkdwazhxjxeu&quot;: 1624289328, &quot;fmraq&quot;: true, &quot;rqlzgfx&quot;: true, &quot;ofvfpbpxeauq&quot;: 1154866821.5273783, &quot;xojwacgmzsm&quot;: &quot;pvs-SgrRTvRmlO&quot;, &quot;birkleuw&quot;: true &#125;, &quot;pspasnokata&quot;: [ true ], &quot;dklqho&quot;: &#123; &quot;xurkfic&quot;: &quot;BnJIewAi&quot;, &quot;qemznpexj&quot;: true, &quot;gpngwlecic&quot;: &quot;RMlpy670x6&quot;, &quot;wzaugmnzakh&quot;: false, &quot;wrfiwcnwy&quot;: -404620742.5787289, &quot;nfogne&quot;: -1859446324.790002, &quot;ngpykisz&quot;: 1650711905, &quot;zdgtipyzg&quot;: &quot;o&quot;, &quot;nckeuwfi&quot;: &quot;9aJW&quot; &#125;, &quot;ppsshdzhom&quot;: &#123; &quot;xcpoa&quot;: -771878662, &quot;ptzmh&quot;: 1323150221.3855224, &quot;fzbwjscjat&quot;: -400460354, &quot;wjjmhsbumbt&quot;: 949078607.2381575, &quot;oujxpneom&quot;: 1272716310 &#125;, &quot;rjnuznkzz&quot;: 1776044145, &quot;cnjadns&quot;: true, &quot;ueqcnc&quot;: [ &quot;cnM7_Kun0Zx&quot; ], &quot;mmpzqkuyl&quot;: &#123; &quot;jmxxlkvjyck&quot;: true, &quot;pvhhkvizn&quot;: &quot;0wCCH-IIK2pIt&quot;, &quot;sqhjli&quot;: 818836712, &quot;odquix&quot;: true, &quot;dhfeamip&quot;: false, &quot;pdxvgncm&quot;: false, &quot;kgewnpmxyjj&quot;: &quot;xlybv&quot; &#125;, &quot;ykxcfwt&quot;: 392585739.15162206 &#125;, &quot;_hHI&quot;, false, -2146364348, &#123; &quot;tnwah&quot;: false, &quot;mtjla&quot;: false, &quot;hkeatyji&quot;: [ 1033359561, 911652864.0812898, false, false, false ], &quot;qzlmosxl&quot;: &#123; &quot;zhgeyz&quot;: false, &quot;cchor&quot;: &quot;Xjf5XfKHz1saJ1IHvi&quot;, &quot;wprytraiq&quot;: &quot;n_4WBZ7i5CaWNF9wdp3U&quot;, &quot;xveydzjo&quot;: false &#125;, &quot;isbhm&quot;: true, &quot;oiliduo&quot;: &quot;_PZ6&quot; &#125; ] &#125;, &#123; &quot;ckwzgapo&quot;: [ &#123; &quot;nnivocdtuxl&quot;: -19291974, &quot;sabkrhrs&quot;: -2094136152.4094925 &#125;, [ &#123; &quot;ylbyiwick&quot;: &quot;x&quot;, &quot;fgzyjvxgwfv&quot;: -2134161617, &quot;pqteqryrzakm&quot;: 1204361735, &quot;mdvijdl&quot;: false, &quot;pvjtlhkh&quot;: &quot;SfD29&quot;, &quot;ivzvaaabmfe&quot;: false, &quot;efshdneleg&quot;: -849875506 &#125;, &quot;seqhsAcIrnAHMQ&quot;, &quot;Whk36U6P7DeSML&quot;, &quot;O&quot;, -256156753, &#123; &quot;mhktfiet&quot;: true, &quot;pdjsew&quot;: &quot;3SAFXIssz&quot;, &quot;hhyorkbrs&quot;: -1207251906 &#125;, 415307174, [ false, 552989141, -1385835760, true, true ] ], [ &quot;EYddk4DIKPw&quot;, &quot;xxy1EsCfUgLc8-b&quot;, [ &quot;_FLcs&quot;, 1363548051.5409355, -301676940.00810796, 228483168.44451946, -1077860736, &quot;-fzDjs2ObYAG6mfeGj_J&quot; ], [ false, true, true ], false ], -2077073598, -2046589380, &quot;CaSYSzOW&quot; ], &quot;lpzotealkm&quot;: [ &quot;SI5nxNmXbG&quot;, [ false ], &#123; &quot;xtzbk&quot;: false, &quot;nstakx&quot;: &#123; &quot;glrzav&quot;: true, &quot;ojnfxi&quot;: 160112773, &quot;yaixkpytnvs&quot;: true &#125;, &quot;ckxwacwoau&quot;: &#123; &quot;juennbwumh&quot;: false, &quot;pecryyztzx&quot;: 590879351.09255, &quot;whkyc&quot;: &quot;daqaT&quot; &#125;, &quot;fcquywl&quot;: &#123; &quot;dqkgcpdw&quot;: &quot;5HUvgQttOk0Fi5tu&quot; &#125;, &quot;nwbqckojbnl&quot;: false, &quot;ldxoxn&quot;: [ -1211923637, false, false, true, -63271166.44183385, &quot;oPaYFpyq6gT0&quot;, false ], &quot;ceqqpwtv&quot;: &#123; &quot;heimssuemmzw&quot;: true, &quot;zccbmmfhkzmn&quot;: -1094357860.1518207, &quot;pfmys&quot;: &quot;Yqkj03db&quot;, &quot;wbrpvqzebuz&quot;: -2018648370.895539, &quot;ffsnfajyc&quot;: 553648116, &quot;ryatsfgt&quot;: 259819060.7299535, &quot;ccedgptz&quot;: true, &quot;sdyjgsm&quot;: true &#125;, &quot;cafbneqhzh&quot;: &quot;0yYuLXa2b6QfIvmqjR&quot; &#125;, true, false ], &quot;osctkxhztsfq&quot;: false, &quot;rnwednidppx&quot;: &#123; &quot;jvnpd&quot;: false, &quot;cltlrwuzp&quot;: &quot;jnKw0hw4f2Qpzs&quot;, &quot;xqvjhgcdb&quot;: [ [ &quot;Kydz&quot;, &quot;S2lJpQ9K0_0KzDR&quot;, false, false, 434825082.54542595, &quot;0kxWw7vYJv&quot;, 1417623756.2870884, -671843208.2472482 ], false, &#123; &quot;figllxnwvoz&quot;: 1079024476, &quot;zybulhqpy&quot;: 1830461882.9305499 &#125;, &quot;C_zB8BN4rJ1qUGz&quot;, [ 791961608.4049592, &quot;TNUWl1OfPAr7&quot;, false, false ], [ -1493840201.4146216, &quot;tnd6PSkv0FQuLn&quot;, true, false, -447967588, 1030571001 ], false, true, true, &#123; &quot;wtzkpoio&quot;: -2059407859, &quot;oagxsuymimu&quot;: &quot;2h4QsOsNtMiIoZT&quot;, &quot;kbblveccj&quot;: true, &quot;nfsnt&quot;: -1789370203.2844539, &quot;klxavnzg&quot;: true, &quot;cvxvlldl&quot;: 1545196262.230724, &quot;sotqmp&quot;: 1186329623, &quot;vasrjee&quot;: true &#125; ], &quot;zdhoap&quot;: -193588543, &quot;xbkneu&quot;: 478378165, &quot;hmcplrquyp&quot;: false &#125;, &quot;kcyjofy&quot;: &#123; &quot;htqrm&quot;: 1846774732.6980772, &quot;yirrnszaf&quot;: [ &#123; &quot;erilxfbdlv&quot;: 542262304.2889605, &quot;yopwrjtayph&quot;: 731282239.9035488, &quot;xskaibx&quot;: &quot;amLXhcK&quot;, &quot;ftbykwjrtkg&quot;: false, &quot;elvtpjteh&quot;: &quot;20&quot; &#125;, &#123; &quot;ervks&quot;: -357130040, &quot;jixclhxu&quot;: false, &quot;mhmrct&quot;: 1665623649, &quot;mpsifqei&quot;: &quot;kFi8Bg&quot; &#125;, [ &quot;CU&quot;, &quot;g&quot;, true, &quot;P6VIV1HJFlywzjc&quot;, false, &quot;u_UQJ&quot;, 216107226, -564010953.9462562, true ], &#123; &quot;fjgsqafcai&quot;: true, &quot;olvoqkeptj&quot;: -934591917.5274441, &quot;pnjzqyunfbsf&quot;: &quot;f&quot;, &quot;npclkqskchlu&quot;: true, &quot;friydskivp&quot;: &quot;0VVAsk0JU2P34A&quot; &#125;, -1513672000.6946142, -1351068498.4718838, [ false, true, 2022882115, false, 1912320851, true, false, &quot;nYpITzI3lLGF-E0_ROdb&quot; ], &#123; &quot;etapc&quot;: &quot;M0&quot;, &quot;ahjaulcquxx&quot;: -46720148.68160956, &quot;bxlzoh&quot;: -1294903924.5851634, &quot;gujnngazy&quot;: 27472619 &#125;, true ], &quot;ngkwgj&quot;: true &#125;, &quot;txvpojferzzn&quot;: -494084553.08683705, &quot;ehbzzitx&quot;: true &#125;, -1501383589, [ &#123; &quot;tjkmyxzzrqya&quot;: [ [ -1652453215, false, true, false, &quot;0K5SKb6&quot;, true, false, true, -497658930 ], &quot;sHrD4vVN&quot;, &quot;VQYUGWFtDb&quot;, -860698228, &quot;YHud7MqAJJHpXW7HTJHp&quot;, &quot;N3SEVlHZqGXS&quot; ] &#125;, [ 932063913 ], -363089538.6711561, -1523290545 ], [ 1446672740, &#123; &quot;iothjmvzeh&quot;: -1242537951, &quot;ihhot&quot;: [ &quot;s78NIkI&quot;, [ 1647053130, &quot;2Wjn&quot;, -1306690771, &quot;ddFBxOAVa3PAHHg4CKiE&quot;, &quot;KTpqkj&quot;, false, false, &quot;CpOo-_sxce&quot; ], [ -1636092903, &quot;mPxQOtGQmJ&quot;, &quot;AH4CnH&quot;, true ], &#123; &quot;gwobic&quot;: -403181897, &quot;wswtxcvfgys&quot;: false, &quot;myftubvhn&quot;: &quot;SzOlEiSmLsiF&quot;, &quot;gflhmi&quot;: false, &quot;qcaogsoou&quot;: &quot;RffU8rZ_BOTooh&quot;, &quot;gtfkfpbcd&quot;: &quot;WPnkqeyO&quot;, &quot;xlluzryjzeww&quot;: &quot;tOATwtSQqc&quot;, &quot;pfbjfs&quot;: 559311144.1839422, &quot;vgyrmepmmiwa&quot;: -371798911, &quot;xwhxacfh&quot;: &quot;vgdoVoqH&quot; &#125;, [ 682530683.7960426, &quot;_ZQONJwSnyWsI7JBE&quot;, &quot;2Xkij&quot;, true, &quot;0x&quot;, &quot;I2W&quot;, true, &quot;45FqPHuqIeB_bC&quot;, &quot;3Sz&quot;, &quot;uOFooZ&quot; ], 1633662757, &#123; &quot;qziis&quot;: &quot;zRyxpM5I-c&quot;, &quot;jsznraaqt&quot;: -2070295768, &quot;nrhzahy&quot;: true, &quot;wrekmegkd&quot;: -887932026, &quot;rnooniws&quot;: false, &quot;esbvpzcf&quot;: true &#125;, &#123; &quot;oaiosezl&quot;: &quot;EiqBEX&quot;, &quot;zlqquujcwrt&quot;: -1740094710, &quot;serqndsnavq&quot;: true, &quot;rqvxophxhr&quot;: -155598511.60553136 &#125;, [ 1242812936, &quot;uo5VaeBzyJnP35p&quot;, -1795797045.4796348, &quot;BU9NRN1D1&quot;, -121147141, false, &quot;UeLp7rWGu4incvaTi&quot; ], [ -582860810, false ] ], &quot;gxljzi&quot;: 1930641502, &quot;nukzcjcfvsdr&quot;: true, &quot;thyjfciw&quot;: &quot;Ijg3AeBAlyc&quot;, &quot;nyffgwq&quot;: &#123; &quot;hnsilhtoptne&quot;: -334043203, &quot;hioyreiwdzre&quot;: &quot;uuJkz9iPE-k&quot;, &quot;mbxwkyfgvmu&quot;: &#123; &quot;gduass&quot;: true, &quot;ethdshvmjc&quot;: &quot;C5Kbjt&quot;, &quot;zkehxvu&quot;: &quot;q&quot;, &quot;glrtzejolew&quot;: 503692200, &quot;ykftxkqrai&quot;: false, &quot;iheadqq&quot;: false &#125;, &quot;lnopzefyzr&quot;: &quot;foHnA&quot;, &quot;rtrqnfmg&quot;: &quot;PKoAIXFIAbNw0Rqcqc&quot;, &quot;ujgkwbxlf&quot;: &quot;Cyg1UWqDUn41Hu0&quot;, &quot;fcbwm&quot;: false, &quot;ypzpgljon&quot;: &#123; &quot;qygwxbgfpsja&quot;: &quot;NB8P7TUQjag6DjB7gF&quot;, &quot;zutjikjeshe&quot;: &quot;EfeMMX0yZ3xLoU&quot;, &quot;ecyrigrynd&quot;: &quot;oCy&quot;, &quot;fdbgoexnqo&quot;: -1349577994.2950504, &quot;xonanqlrnbvy&quot;: true, &quot;rbeneurawt&quot;: &quot;FAbFncXJhjF&quot;, &quot;xtuelgmpxc&quot;: &quot;c2H4Nx&quot;, &quot;zbwhoul&quot;: true, &quot;tlfkp&quot;: false &#125;, &quot;gcedhw&quot;: true &#125;, &quot;iwaymz&quot;: -1589133269.1797109, &quot;ixpeyahkicl&quot;: &quot;m_4boP&quot; &#125;, &quot;X-w4O&quot; ] ], &quot;vfdhdgxsbz&quot;: true, &quot;uxvlwnbeu&quot;: false, &quot;vqnempqmiu&quot;: &quot;C&quot;, &quot;cjsrbwef&quot;: &#123; &quot;zehsel&quot;: 1214876828.638907, &quot;jizzqrgmz&quot;: &#123; &quot;etgrch&quot;: &#123; &quot;hlaumnf&quot;: [ false, [ &quot;wBbU-5s8f&quot;, false, 189722248, &quot;kiJ3Lyv17dVq9_l&quot;, -2078357948, 2048651257.7050533, true, 1281723554.5830126 ], &quot;nMn&quot;, &#123; &quot;zmejepad&quot;: false, &quot;dlvhsvutptg&quot;: -482612548, &quot;cygpfqsgbuxu&quot;: &quot;zmqC6KeoPsX503&quot;, &quot;mfbefymunng&quot;: &quot;-mepVI_WAeD1J&quot;, &quot;mkbctjjqijc&quot;: true, &quot;lmhqc&quot;: false, &quot;bqktp&quot;: 1748609852, &quot;lfelvsf&quot;: &quot;QQ&quot;, &quot;uabfoccpc&quot;: &quot;mA49c213FyPQl98x&quot;, &quot;hzfipgxms&quot;: true &#125;, &quot;hvQ&quot;, &quot;rLtkNmPeubnTnnVfkvG-&quot;, [ true, &quot;VuCpaR9zm-bcHWatQqH&quot;, false, true, &quot;ckBH_oig3D&quot;, true, 125055648, true ], &quot;WC1nN81xWZcnXvnP5F&quot; ], &quot;nxuoqxpnah&quot;: [ &quot;2h5jHzxq&quot;, -1234794731, false, &#123; &quot;ltxmflm&quot;: -1672856336.746026, &quot;sepyc&quot;: &quot;jpEO&quot; &#125;, &quot;b61ROO-t1D85eclOhG&quot;, [ 115812554, &quot;5bxQIjf&quot;, false, 878286566, false, true, -14508498.947033664 ], &#123; &quot;qpqylrujgiz&quot;: false, &quot;fyxrahgp&quot;: false &#125;, [ true, -261410808.79169464, &quot;huh5FHCU&quot;, true ], 1389881693, true ] &#125; &#125;, &quot;kvngw&quot;: &#123; &quot;lucpftqpwdr&quot;: -1958193229.7286963, &quot;ergze&quot;: &#123; &quot;qyrehutu&quot;: &quot;NfyElhYuWz3Q1&quot;, &quot;riffcwazr&quot;: [ &quot;g4b&quot;, false, [ -577110258.0933784, false, false, &quot;Vn0EmZX11&quot; ], &quot;ZVaeK1&quot;, &#123; &quot;zlkjbu&quot;: 1525177545.0048928, &quot;zpvogjvi&quot;: 599129682.3267891, &quot;vdrwcdhfhx&quot;: false, &quot;uhxii&quot;: &quot;2xGv&quot;, &quot;qnjaluxmxgi&quot;: 8635651.015067456, &quot;ngcexgised&quot;: 593625433.229349, &quot;sugrikhkabcd&quot;: 1107572218.4620044, &quot;tmbgsh&quot;: 1566856544, &quot;lblxce&quot;: &quot;y1qC9sW4zKYHg&quot;, &quot;gqovtuc&quot;: &quot;J7APtfabul&quot; &#125; ], &quot;oaocntr&quot;: 655663099, &quot;utidomvetnis&quot;: false, &quot;jmyflkp&quot;: &quot;SPbz63P55jJ&quot;, &quot;yrmpo&quot;: [ [ 1820033838, &quot;5OJoz6OuF2&quot;, 1340558773.3276293, 77016921.81585987, false, &quot;Qrp22dEd6xS4fzJ664d&quot;, 1586178319, true, &quot;nFGjHBIJO&quot;, -2136178925 ], false, [ &quot;0Cxd&quot;, &quot;fXk3CpZg7-l&quot;, true, &quot;-ZOOAqSj5WASO&quot;, false ], [ &quot;l3n&quot;, -1216257253, &quot;6_90o4uFRjv4MG49dEF&quot;, -1705658898.1871893, &quot;nCnMM3V1YN199izJdVO6&quot;, &quot;bQ0q33tIbdxVt&quot;, &quot;jC-_byN&quot; ], [ 2003610700, true, -1584401438.5794482, true, true, false ], &#123; &quot;kjmmhvpi&quot;: 1779886039.2909331, &quot;dcjopuqntyjh&quot;: true &#125; ], &quot;luurnuvsrd&quot;: true &#125;, &quot;fzlxhkyc&quot;: &#123; &quot;vlfxvun&quot;: &quot;HgL-YeE2YA&quot;, &quot;modau&quot;: &#123; &quot;wwtfjzfi&quot;: 1303957161.6379359, &quot;stiixj&quot;: [ &quot;_IPY9d9Jx6Q&quot; ], &quot;fwgzca&quot;: [ true, 1404412818.0726027, -1531993346.712324, true ], &quot;vsibooi&quot;: 758666341.1362634, &quot;qjvxskqi&quot;: &quot;rLO6RJ7p4TZ9Ny&quot;, &quot;tuwnkatkybeo&quot;: [ &quot;rCzvB3aTsenjca5FRd&quot;, true, 1463150210.0156615, true, -72426857, -686836968.1115445, true, true, -513349585.6607685 ], &quot;romgfqx&quot;: &#123; &quot;zpzwheur&quot;: 2119676820.6873093 &#125; &#125;, &quot;cmstmesveb&quot;: -792668551.5628307, &quot;ugfsip&quot;: &#123; &quot;moqfj&quot;: 917998779, &quot;jsjveqd&quot;: &quot;Gt_gd94li&quot;, &quot;bgvqnglc&quot;: false &#125;, &quot;hfuhrjxfqrf&quot;: &quot;_Qc6ORKESQfQjW6B7&quot;, &quot;dpfbhnlwkvec&quot;: -1634534127 &#125; &#125;, &quot;ocporkkblb&quot;: &#123; &quot;anvxhzj&quot;: -569596606.1740342, &quot;wulenfzyu&quot;: 1359951712, &quot;dzxjd&quot;: &quot;Dz9lKL7G58&quot;, &quot;lqdvsb&quot;: 1509836248.9729517, &quot;wgfrxncyon&quot;: &#123; &quot;hdvdspnhwug&quot;: 1183081748 &#125;, &quot;zgeculpuh&quot;: &quot;c76qPi&quot; &#125; &#125;, &quot;misqskvuffjt&quot;: true, &quot;ryeocbbkft&quot;: true, &quot;cbanyonlxdwz&quot;: &#123; &quot;msibskdjp&quot;: &#123; &quot;mjtqanrpnken&quot;: &quot;l&quot;, &quot;cnnyxihzlmt&quot;: -473256434.73792195, &quot;qqkvcdoxiso&quot;: false, &quot;yrshypxofete&quot;: &#123; &quot;uoejhx&quot;: [ &quot;5vW&quot;, [ &quot;wmoT&quot; ] ], &quot;molahchjs&quot;: [ [ false, false, -1481543225.207373, true, true, -497168023.61265916 ], [ &quot;sbXlO_qZy4ZDHnSQp&quot;, true, 978998136.2120172, true ], &quot;5SI5rBbDWZAa9sVC-H&quot; ] &#125;, &quot;mriek&quot;: 602478010 &#125;, &quot;fhsbywbwbnu&quot;: &quot;Qlao752&quot;, &quot;iiwppd&quot;: &#123; &quot;ubnsolwefmpv&quot;: 299669847.04656774, &quot;znabhudytwhu&quot;: [ &#123; &quot;myxqgifowzk&quot;: [ false, true, -113964898 ] &#125;, [ true, &#123; &quot;gjfeldaze&quot;: true, &quot;nhxjsqk&quot;: true, &quot;ukeicttwu&quot;: true &#125;, [ 253524511.7091248, -1561804342.9927227, &quot;8qlJ2tMc2lPmMf1C-d&quot;, true, &quot;bI7F21nHFF6&quot;, -580546013.4570572 ], 1058457335, &quot;23AZ&quot;, 1853383791 ], &#123; &quot;swechudy&quot;: -1411283805.3118782, &quot;vidtotmqlhg&quot;: -587971172, &quot;qotuvy&quot;: [ true, false ], &quot;gudvzl&quot;: &#123; &quot;apsxqlzdav&quot;: true, &quot;flqqqq&quot;: &quot;HQyguHI5oojr0TmSF&quot;, &quot;bagaolodhiq&quot;: -1245033283.7643337, &quot;kqgmuoevkb&quot;: false, &quot;aizxr&quot;: &quot;SI-&quot;, &quot;djxosoeh&quot;: &quot;c4JMh4oDfYa6&quot;, &quot;nnwjoymlqsjs&quot;: -1008859979, &quot;ogfonkl&quot;: false &#125;, &quot;czmwavjhwx&quot;: &#123; &quot;dexqaq&quot;: -542532142, &quot;fyinyx&quot;: &quot;JuxVyUdnvrpbWe&quot; &#125; &#125;, 1057570833.6622553, [ &quot;j3Sg1imsnr&quot;, -2115393853.7811105, [ -627990941.5141704, 1816430057.8320673, true, 1048627261.6683502, 1176958960.3801389, &quot;Y8-U7FginhYEL_NSxkvF&quot;, true, 1821177530.05043, &quot;ePA0N4&quot;, 1133434934 ], &quot;XvdpzU&quot;, true, [ false, &quot;H&quot;, &quot;ST3Q-RzZ&quot;, &quot;HK&quot;, 309254654, &quot;UDp54RFzNZNP&quot;, -971529715.3578794, false ], true, [ 274132440, &quot;DEE5gyP&quot;, &quot;QBf3OlC&quot;, &quot;yBMld1dY3&quot; ] ], &quot;pJaVRZAh&quot;, &quot;flrgejmMnRvk8YYBqRRi&quot;, [ 331852904.18498605 ] ], &quot;pirrtpbdw&quot;: true, &quot;kcvvu&quot;: 2129881430 &#125; &#125; &#125;, &#123; &quot;atddipjuxvuo&quot;: -2092451273, &quot;zzxdyvu&quot;: &quot;N&quot;, &quot;dzpkj&quot;: [ &quot;vC3v43&quot; ] &#125;, [ true, &quot;w5&quot;, &quot;kRj-yNIWgRg_t69&quot;, &quot;536w6nuswTPbulA9WL&quot;, 1197838796.6330416, [ &quot;yuZvr7lV&quot;, &#123; &quot;xbjzmwuruay&quot;: &#123; &quot;rsjvtmxgvcso&quot;: 624447374, &quot;elvzswnqgi&quot;: &#123; &quot;zqmysmk&quot;: &#123; &quot;wbxskgat&quot;: -460312853, &quot;adplpvc&quot;: 465491929, &quot;ziockbpie&quot;: &quot;g6xo4pULxfcgXZvpvh&quot;, &quot;ywcymdjmwrv&quot;: true, &quot;cxabuwbjgekc&quot;: -1445371226.8328083, &quot;abzpzj&quot;: true, &quot;bpebri&quot;: &quot;AAmr1RSknZ3O&quot;, &quot;veytbgy&quot;: -588118666.1096455 &#125;, &quot;amgxj&quot;: [ -17931167.241995856, 496119026, 1440398386, -595214655, false, false, false, 63728793, true ], &quot;mrmgt&quot;: false, &quot;cupluleeyy&quot;: &quot;z9yD&quot;, &quot;cahdgip&quot;: true &#125;, &quot;wiwxn&quot;: &#123; &quot;jasklpjsg&quot;: [ false, false, &quot;4jZXyH&quot;, &quot;oC-SW&quot;, true, &quot;YcodU&quot;, &quot;9IFiPAzRbNSPZjB&quot;, &quot;uG2N4rBXLz&quot;, -401644846 ], &quot;bdvfatuv&quot;: &#123; &quot;ckviad&quot;: &quot;dsYleGO&quot;, &quot;fdjnmag&quot;: false, &quot;nzwqlhpetxl&quot;: &quot;1casUhTLior4MEo_Uu&quot;, &quot;duecnyqohwx&quot;: true, &quot;nzhkplengoao&quot;: -46442601, &quot;rvrfwu&quot;: 1363724138, &quot;oitjec&quot;: true, &quot;cgmiiy&quot;: -365524935.720685, &quot;jobeol&quot;: true &#125;, &quot;exrhe&quot;: false, &quot;bldqrtaf&quot;: &#123; &quot;ljeefg&quot;: 367025317, &quot;hrqrsm&quot;: &quot;qoa31p_3y&quot;, &quot;zuccyg&quot;: -541882614.1484984, &quot;wjuica&quot;: 1118851776.4389498, &quot;czmjgpwd&quot;: &quot;9PcYqGggpmix&quot;, &quot;rbmcyozcqvl&quot;: &quot;amogXlo4PrsSkF&quot;, &quot;ahvsfheb&quot;: &quot;kMfDT01PdfWWd3kb&quot;, &quot;nrnnyvwecta&quot;: &quot;lKH&quot;, &quot;rmlknoateb&quot;: 822156038.354891, &quot;ybmxsaxmrzaw&quot;: -651473225 &#125;, &quot;uhuqacydf&quot;: [ &quot;waNiEbv&quot;, 1350490497.2548158, 775728521, 1539224832, &quot;pulQ5&quot;, 1241808962 ], &quot;qqdfed&quot;: &quot;Lz6CmeWo4lw5&quot;, &quot;erqoigjbo&quot;: -955246658, &quot;gexidfskffb&quot;: &#123; &quot;hhbnbynti&quot;: -1789604122.7400544, &quot;yiufire&quot;: &quot;g&quot; &#125; &#125;, &quot;hzyvbr&quot;: true &#125;, &quot;fueuib&quot;: -1033000032, &quot;pmsxuc&quot;: 1383940107, &quot;cdkwb&quot;: 1835097357, &quot;rxhupqtkozqq&quot;: 791181043, &quot;ttfjsldhkj&quot;: &#123; &quot;cjnzmbcbf&quot;: -1048242788, &quot;ysynmgiitgvp&quot;: &#123; &quot;misctj&quot;: [ true, -885298964, &quot;gFYNoiQyNikoS2OD&quot; ] &#125;, &quot;jksjndzv&quot;: 1629151140.4761147, &quot;twzliww&quot;: [ 1295195848.203685, &#123; &quot;yildjgi&quot;: 300927061.04864544, &quot;ohxpncxyag&quot;: &quot;jP4xNMR-KGC5q&quot;, &quot;ingdet&quot;: false, &quot;gayupximsv&quot;: 519488545.2668662, &quot;eycmcqpaei&quot;: &quot;P1vkPMuO3V&quot;, &quot;miuth&quot;: &quot;bTsYghyZuRIuS&quot;, &quot;fgcaqzatsqe&quot;: &quot;37jpwgZ6sr1a&quot;, &quot;dvotmdwzg&quot;: true, &quot;lwgmkwg&quot;: -2035524854 &#125;, [ false, false ], true, &quot;x&quot;, &#123; &quot;hvjmysawxg&quot;: false, &quot;jxvakg&quot;: 164364286, &quot;stupohp&quot;: false, &quot;dtsht&quot;: &quot;JgI0wAD&quot; &#125;, false ], &quot;fjgvmma&quot;: [ false, &quot;qrzLC8djl&quot;, [ &quot;ZbAcMKGSNy9Y87ztUs&quot;, true ], [ &quot;7MJPN5&quot;, false, -298448722, 778830277, true, true, true ], [ &quot;n-zpyZr3dHIq2-hVBQ_X&quot;, true, 566796753, true, -83283383.20949152, &quot;W0rI&quot;, true, false ], 1376251897.0495272, false, [ true, &quot;DLk5q&quot;, true, false, true, &quot;1kaBaRy1znws&quot;, &quot;loSK0NmPNom7XQmLmUFQ&quot;, &quot;aERRBCirk&quot;, -292868053.4987612 ], [ -1133209241 ], [ &quot;nIFyGvQba-&quot;, false, false, -72343003.88228966, 1117783986.9890037, &quot;hz56HLLERjOUe2ltsiRf&quot;, false ] ], &quot;uxurvlltmyha&quot;: &quot;qu4gu821b72PNoEx6YZ&quot;, &quot;usorhz&quot;: &#123; &quot;rvtvmd&quot;: true, &quot;pvavwsznkqr&quot;: true, &quot;outjipcefu&quot;: &quot;IIYGOI5PKxR&quot;, &quot;hhxqfz&quot;: &quot;lvzs6&quot;, &quot;hyqwsjzbq&quot;: false, &quot;bqetz&quot;: false, &quot;mmjcqua&quot;: false, &quot;pxgefn&quot;: &quot;GVXLXpkgyZUcYvMO4a&quot; &#125;, &quot;kisavkhpvm&quot;: 740640903, &quot;elidlcgkmygj&quot;: false &#125;, &quot;fjtmkah&quot;: 276968322, &quot;uxqtgafcb&quot;: false &#125;, false ], [ -73850871, [ &quot;kX-xhfhOv&quot;, &#123; &quot;kpvwtmofhl&quot;: &quot;Xh7YGngfjbXLFX5L&quot;, &quot;dctaoshagrp&quot;: &#123; &quot;kcazdgadwl&quot;: 807416430.878505 &#125;, &quot;xxsqne&quot;: &#123; &quot;swdqrlub&quot;: [ true, &quot;dVgdaKvwmcMWNyM&quot;, true, 815587398.717155, &quot;zrYuTniJ7qWFriEMz&quot; ], &quot;txytif&quot;: true, &quot;jvmjsovyyrhc&quot;: &#123; &quot;hfilguslav&quot;: true, &quot;ypruvtpkknl&quot;: true, &quot;iiltcqxy&quot;: -375089005, &quot;ftqjdkawzau&quot;: false &#125;, &quot;yqtfz&quot;: &quot;HFWTm53jg_WUtM&quot;, &quot;qvqav&quot;: false, &quot;esagrm&quot;: &quot;Kw8V8cv_Ux&quot; &#125;, &quot;vnbfvid&quot;: &#123; &quot;ijrdigj&quot;: [ &quot;Rqd5TbxgsPj&quot;, 1031491675.5852685, -887082712.0007507, false, -51657014, false, &quot;D5l1&quot;, false ] &#125;, &quot;ifeqv&quot;: 654092592.4447111, &quot;paltgh&quot;: [ false, 164799932 ], &quot;nyzkcvb&quot;: &quot;dc5G8SfXDo_awC8jm&quot;, &quot;ibbmp&quot;: &quot;n6MlUZW-azHAZQICXT2n&quot;, &quot;xhazidfztf&quot;: &#123; &quot;jkpkpv&quot;: -853809357.9744881, &quot;ikangzqcwly&quot;: false, &quot;kqczfjdkgftw&quot;: &quot;LrjtXd8SBppb&quot; &#125;, &quot;xsktdkwksp&quot;: &#123; &quot;iqssccnftwpx&quot;: -238261042, &quot;lpfuuowr&quot;: [ &quot;e&quot; ], &quot;nwgcv&quot;: -186313336, &quot;ahcqzysqdk&quot;: 1968428739.6304142, &quot;jzwtdlt&quot;: true, &quot;ajxedimm&quot;: [ 414459924.2821679, -1228750016, false, 1419729091.1938372, &quot;Z3mKNBtgBFkTS3OOb3&quot;, &quot;b5RmMsDeQkD&quot;, 447904909 ], &quot;sjykviweuqo&quot;: &#123; &quot;viiybpxwsvqi&quot;: true, &quot;vxrrjgth&quot;: 1088439598, &quot;eumqchb&quot;: 962864872, &quot;yzfxilmife&quot;: 1447548876.6731138, &quot;sxkewykyv&quot;: -40383427.26321986, &quot;rgxcb&quot;: &quot;F49YkrtLWDKh1A4P&quot;, &quot;yaoocyksi&quot;: &quot;D-5rshvwL6b0Za&quot;, &quot;wzydygrvj&quot;: -1453943058.0054586 &#125;, &quot;utpmstuxj&quot;: [ &quot;kh-YDM2TtCZ&quot;, &quot;ei8&quot;, &quot;3ACysSv1N8mHuvsC&quot;, -1273111834.71746, -1160943267 ], &quot;yvvxy&quot;: -1413340899 &#125; &#125;, 1778286978.8205569, -216690534, &quot;cjnFXfhpYpyH_bMa7p&quot;, &#123; &quot;elwqa&quot;: [ false, &#123; &quot;pfirxnh&quot;: false, &quot;cpynqpxvip&quot;: 1743374708, &quot;ofylteln&quot;: &quot;zlbGEyH8PJ&quot;, &quot;imfziwwmep&quot;: true, &quot;zvpzabtv&quot;: &quot;kkKYVuf&quot;, &quot;whtydxilb&quot;: -1800928288.6656966 &#125;, false, &#123; &quot;abuvxodpwh&quot;: &quot;az&quot;, &quot;ummdcnnc&quot;: false, &quot;utarmeuy&quot;: &quot;QN0Z_J&quot;, &quot;fwxhrdmmeo&quot;: 996983189, &quot;gipudwpxjwm&quot;: true, &quot;kyrnpnyx&quot;: false &#125;, false ], &quot;cvnope&quot;: true, &quot;cmreipu&quot;: [ -1040638369.2635815, [ -660117018, &quot;HxHfXd_VenH&quot;, false, -1097074189.9149988, &quot;9MU1oiiaqVfEU62VDD&quot;, -592763189, false ], false, &quot;PhjAOp&quot;, &quot;pxhhvTe_xtLB&quot;, [ -1433865628, -1668903714.9972053, &quot;o3vtGTzS4EDW1t8tMcz&quot; ], true ], &quot;oixjyogxtjr&quot;: true, &quot;sswkoan&quot;: &quot;bjS2t&quot;, &quot;nimccefqtzmf&quot;: &quot;73Z26CSj&quot;, &quot;gjcxmvwhep&quot;: &quot;2JBO7yy5Cl&quot;, &quot;lawglyocpd&quot;: true &#125;, -1913470762.0744214, 571121373, [ &#123; &quot;fuzaobcxzw&quot;: false &#125;, &#123; &quot;jklrr&quot;: &#123; &quot;fjeyqwtmehsh&quot;: true, &quot;xwdvbbxg&quot;: false, &quot;nkixbxhv&quot;: 623145715, &quot;nukqrqpqa&quot;: &quot;kNYGvTpiO&quot;, &quot;zkhgoprbl&quot;: true, &quot;ijooe&quot;: &quot;27sUMk0b6y8JYhyTh&quot;, &quot;lmrcglxgm&quot;: false &#125;, &quot;erknvnie&quot;: -113486432, &quot;twsxrhgvgj&quot;: &#123; &quot;ovtwo&quot;: &quot;4L&quot;, &quot;bzlellhgopdr&quot;: true, &quot;feykcwatlqi&quot;: false, &quot;lbdshljumfby&quot;: &quot;34T9r&quot;, &quot;kaecwljt&quot;: &quot;YGkitt9MYlc-M4wRZ&quot; &#125;, &quot;dymtzhpi&quot;: [ &quot;yKiFvzyelZCsj&quot;, true, &quot;cw1x1wyBYjj_AL9Tv&quot;, 207985307 ], &quot;xwqxpbqshtnn&quot;: [ false, 497137294, true, &quot;IZMhbu&quot; ] &#125;, &quot;2a_YGC5fTL&quot;, 1741249400, false, &quot;-YmczVY&quot;, [ [ &quot;Ru0QD7ckM9kV&quot; ], &quot;M0ny-&quot;, -1448008029.9092786, -1068028528, [ &quot;090bSerMqguDVw&quot;, &quot;XEjMOApHoX4LL&quot;, 1206109854.8684351, &quot;SpF49JnW8Z&quot;, 697446934.9846494, -2391421, &quot;A&quot;, true, 899365793, 1261075525 ], true, [ true ] ] ] ], -810395214.3266428, [ &#123; &quot;vmity&quot;: false, &quot;briybqvjh&quot;: [ [ -1598133394, false, -679925868, -631009767.1008494, &quot;X7aklTa&quot;, &quot;3gN1u5TWQ&quot;, true, true, true, -96426440.56146601 ], true ], &quot;uksqmbkvguxw&quot;: false, &quot;dfgmvaacl&quot;: [ &quot;5X8mFN7Ol2muBF&quot;, false ], &quot;batcao&quot;: &#123; &quot;jirdgrtv&quot;: false, &quot;okwbroh&quot;: 257188608.5358039, &quot;nffnbt&quot;: -1246295401.737913, &quot;srbgtbvpi&quot;: [ &quot;P&quot;, false, -1864406446, -475705255.9290624, true, -1855044707.305654, 1766612163.3049045, -955429638, 1670746282.0853467 ] &#125;, &quot;rrkbnhkkiuhw&quot;: 537750613.2926879, &quot;ritezzdfezpo&quot;: &quot;2&quot;, &quot;luunujqcxcyb&quot;: false, &quot;oskemq&quot;: 633113027, &quot;daleifkxx&quot;: [ &quot;rw&quot;, [ &quot;HEo0uxAmahwCRX&quot; ], [ true, false, -722024510, -10610564.130206643, true ] ] &#125;, [ -941602040.7381257 ], [ &#123; &quot;orllfwmmgqrd&quot;: &quot;iH7W3684eJ2TK&quot;, &quot;ikphlqr&quot;: 1583895736.4452858, &quot;bnhgk&quot;: 298103393.31634396, &quot;ivzocctnqlr&quot;: -1368972886.0357454 &#125;, &quot;Y8EM7zEpJW3bbdCS&quot;, false ] ], 221256744.89781043 ] ], true ], &quot;tzppubfq&quot;: true, &quot;fswigmh&quot;: &#123; &quot;nqmfi&quot;: false &#125;, &quot;wmgcfrmdvbww&quot;: false, &quot;aksbvmxqg&quot;: &#123; &quot;dagtealh&quot;: [ 1962550443.7441015, false, &quot;MxhPVELl6XO&quot;, &#123; &quot;tnofvao&quot;: false, &quot;lnoar&quot;: &quot;orYaDFDN&quot;, &quot;vixqvdb&quot;: &quot;rzxK2v&quot;, &quot;zebvyxsbphz&quot;: [ true, &#123; &quot;mnutxggnqney&quot;: -969774554.2021906, &quot;qirwe&quot;: false, &quot;gukgliwarip&quot;: [ true, [ false, false ], [ &quot;ZlwBUE-I&quot;, &quot;GpG9O4h09FWtB5&quot;, true, false, true ], false, &quot;wOhNQ-UbVZv3ihmkjZ&quot; ] &#125;, &quot;j6zwdpcc5DU&quot;, false, 1593913666, 322577893, &#123; &quot;fpsoixaexy&quot;: [ 1941115158, -1117609778.6271014, -1004418262.9280051, [ &quot;Vv9c1Vf4yNvyuOjRk&quot;, true, &quot;lhpxgoisLX3&quot;, false, &quot;5apbc6C_&quot;, &quot;JeE&quot;, &quot;M1_J5mQAC&quot;, false, &quot;x8o7i30&quot;, &quot;p7ecSQ7Bt4wYalCN&quot; ] ], &quot;ocdzwvcvpa&quot;: [ &quot;c1iTLHPHflSdSjGwxg&quot;, &quot;TEC&quot;, [ false, &quot;O2aI_1GTeZ64XT1&quot;, &quot;-7i&quot; ], &quot;dNaUenlMmMl-Z4A_&quot;, &#123; &quot;obcve&quot;: 276216735, &quot;rncpobbap&quot;: false, &quot;dxiubfbt&quot;: -1321384873, &quot;kpcjcxtq&quot;: false, &quot;urtqo&quot;: true, &quot;azcrl&quot;: &quot;kBUBIsxgOBW0aL&quot;, &quot;ypnyzhlxw&quot;: 816295324 &#125;, 631353070, [ &quot;LpbeO66DbtQ6WRZ&quot;, true, &quot;MM42Y4oGhQ8&quot;, &quot;BGk&quot;, 1886293585, true, -296777589 ], &quot;S_1LgH7MTeJ_z_QzZmXm&quot; ], &quot;oecdvquksqd&quot;: [ &quot;7YyZU5rB&quot;, false, &quot;8v7R6SATWHL8&quot;, &quot;at55&quot;, &quot;gVJ9AJey&quot;, [ -148976902, false, &quot;mlx-tM8U&quot;, &quot;Y_GQsBkKh1&quot;, &quot;CM0cEW6hWNpr6hKlxk&quot;, &quot;YlPPsq_3vUvDn&quot;, true, 122610095 ], &#123; &quot;wbdxi&quot;: &quot;1Wln9z_dngD7Z9rt9d7&quot;, &quot;sqdudrsa&quot;: 1960099764.8589048, &quot;vysjfaam&quot;: 586952255.835377 &#125; ], &quot;ayscnmwbo&quot;: [ &#123; &quot;kacuuno&quot;: -1167574360.1140378 &#125;, true, &quot;BSwzBlcVNDdF&quot;, &quot;i&quot;, &#123; &quot;gshviceywd&quot;: true, &quot;pqdqpyyk&quot;: &quot;LfgL_c&quot; &#125;, &quot;rIrgpYZciCPtbdp&quot;, &quot;-nZa9odA-xGUnBs3o&quot;, &#123; &quot;igtevuq&quot;: &quot;_OetjQgChRfDi&quot;, &quot;iougmn&quot;: &quot;8DdehyMV&quot;, &quot;ezoqaecgtpx&quot;: -1472860604, &quot;uhudtkhndqih&quot;: 1282624780, &quot;lmjodfkry&quot;: false, &quot;rwixzx&quot;: &quot;6EtdAoGYAJ&quot;, &quot;edvwliddjtk&quot;: 364963991.0454926, &quot;btqccjq&quot;: 1476160251.1735976, &quot;igpewawglu&quot;: -496093064.16027504, &quot;hosro&quot;: 380379173.06998396 &#125; ], &quot;hvxvtstkrkp&quot;: true, &quot;rdsnaqcwj&quot;: &quot;dinJ8vHUBVs&quot;, &quot;unphtjmurd&quot;: false &#125;, &#123; &quot;vohxgkvsl&quot;: false, &quot;gbavcnsfkf&quot;: &#123; &quot;aihae&quot;: [ 1329471521, false, &quot;gm7tvwkVxqykYAfW&quot;, true, -1400418873.5356367, true, -1265165377.2554955 ] &#125;, &quot;odcezwiz&quot;: [ &#123; &quot;aqnnlgrs&quot;: false, &quot;txgeoyf&quot;: &quot;_DllYMGG&quot;, &quot;sfhnwpmoen&quot;: false, &quot;kysqjqavqfuo&quot;: -1237775725.5050218, &quot;ploixzju&quot;: -2010917836, &quot;izbnme&quot;: &quot;MA1m9Lm&quot; &#125;, true, [ 819379569.9769686, &quot;XN_MheQV&quot; ], -974813781, 1139038310, false ] &#125; ], &quot;kksyumyygpx&quot;: &#123; &quot;jeqthholjrt&quot;: 100105849.67114657, &quot;fzruvvcvpdl&quot;: false, &quot;uqalxbdye&quot;: &quot;2Jju2CQaCpOZE966t&quot;, &quot;sgxxzxsyfcv&quot;: &quot;eY6r&quot;, &quot;hcudahqy&quot;: [ false, 1060841304.3691026, true, &#123; &quot;umwipqw&quot;: [ -616788115.8774604, -277835251.30743814, 2054867232, false, &quot;pPX4uwEfUHzFkYm&quot;, true, &quot;VqBTRpxA1k7bLw1DvJ3&quot; ], &quot;mjcapkgjs&quot;: 1715628002.980071, &quot;jtqhs&quot;: -645263729, &quot;ddjkqmqjvnju&quot;: [ true ], &quot;mzisami&quot;: -628876760.9483359, &quot;wkucdybkgxj&quot;: &#123; &quot;rlvkegzsao&quot;: false, &quot;figgdboz&quot;: true &#125;, &quot;nyleojg&quot;: &#123; &quot;cnducj&quot;: &quot;H-Re&quot;, &quot;ptzmgjkttoyk&quot;: false, &quot;bouryu&quot;: 539048589, &quot;rtyhs&quot;: 485136365, &quot;nxhoc&quot;: 1186718429.43972, &quot;elifmzxy&quot;: &quot;KYul80YAa8&quot;, &quot;bhkyvpr&quot;: 1676960727.7700171, &quot;uwvrkqs&quot;: &quot;KcrQu&quot;, &quot;kiaigzyqttnw&quot;: 1394667555 &#125; &#125;, 1353443847, 1131505624.9675832, &quot;VL&quot;, &quot;Dy5XoI043v&quot; ], &quot;ajsovcarfpsw&quot;: &quot;RiFPrsf4kgkQT&quot; &#125;, &quot;prwdu&quot;: false, &quot;wxzaynsu&quot;: [ false, &#123; &quot;ohons&quot;: true, &quot;jlqosvv&quot;: false, &quot;kyobwcz&quot;: true, &quot;oqxckzbt&quot;: &#123; &quot;urlspwtxiw&quot;: false, &quot;qdlqokxoejzh&quot;: true, &quot;tmftvry&quot;: &quot;bn298MFFU823a3&quot; &#125;, &quot;knuryam&quot;: &#123; &quot;gadlvwmr&quot;: [ 860145215.4132569, 358582027.7293879, -2037435741.692382, 270086932.27380097 ], &quot;esttyjcpahw&quot;: [ -976221221, -1973643146, &quot;z3cMJM6z9esvGxOJS&quot;, true, &quot;hfhWOIXSNfFihaymVe&quot;, false, 1412173417, 1865400660, false ], &quot;tlcdojamsbox&quot;: [ &quot;V&quot;, true, &quot;VFHO8MIs&quot;, &quot;02bgskaJ19&quot;, true, &quot;O5pPwhaDv2WX9&quot;, &quot;kwpg2RXZ8lkKwaZWwHhB&quot;, false, &quot;hvqXZFi9EMl8WlxGIsf&quot;, false ], &quot;zzavncdhxgxt&quot;: true, &quot;jnbrma&quot;: -537147687, &quot;rpiwaj&quot;: false, &quot;esxht&quot;: &#123; &quot;bjhqblrf&quot;: &quot;1kQ2GkP0Tzc4&quot;, &quot;ihoxvxnppyc&quot;: &quot;1I-nw0YUA&quot;, &quot;fhnzdpszdji&quot;: true, &quot;rwqxe&quot;: 1970450435, &quot;ztlvozlgojl&quot;: 1809994412.574849, &quot;uaonnus&quot;: -1068950966.9336827, &quot;pphvlq&quot;: false &#125; &#125;, &quot;unykb&quot;: [ 1366867140.1759133, &#123; &quot;slvegt&quot;: true, &quot;vnkos&quot;: true, &quot;dzcjwihindn&quot;: 580607365, &quot;imnxpznvn&quot;: -1885816284, &quot;zpoeeiq&quot;: &quot;lkg3sIMFyJn4MAJL&quot;, &quot;pexgpchohcze&quot;: -1882401606.5700426, &quot;necpqzfn&quot;: true, &quot;rrbmyhtfn&quot;: 148811573.78353128, &quot;wnicsiexhxyy&quot;: false &#125;, true, [ false, &quot;dSljRtqbzE0LFxA9289&quot;, false, &quot;-bpq_yrW&quot;, &quot;V&quot;, &quot;p-0v4hHw&quot; ], &quot;j7IC7&quot;, -587584234.5537797 ], &quot;kshyqax&quot;: &quot;bPq8MuTZJE1y9YoyM_7&quot; &#125;, &#123; &quot;cppvjibja&quot;: &#123; &quot;szvnn&quot;: [ 278874937.8092257, true, true, true, &quot;30jkXvN&quot;, true, &quot;2fm_Vd8&quot;, false ] &#125; &#125;, -1445285604.2475288, &#123; &quot;kavthxxao&quot;: [ -255672626, &#123; &quot;undsefvfbr&quot;: true, &quot;kbxne&quot;: -1637547183, &quot;pmcprj&quot;: &quot;YjgzqA0PkNw&quot;, &quot;lzessy&quot;: &quot;AiDIMIb-RpPP&quot;, &quot;blceqe&quot;: true, &quot;uhmlxvbdp&quot;: false, &quot;qcfwcs&quot;: false, &quot;avvojez&quot;: &quot;KhSNMyANHtbuQ&quot;, &quot;znzufuv&quot;: -1836891490.2199376 &#125;, &#123; &quot;tifwdb&quot;: false, &quot;ftvmfvjwnv&quot;: &quot;p8jnFVVP&quot;, &quot;khjfy&quot;: 10255490, &quot;xpmayig&quot;: &quot;ZLgbxlBuET&quot;, &quot;nhffqzmx&quot;: false, &quot;gpwvntmcqykc&quot;: false &#125;, false, 2029257936.9114256 ], &quot;yzjdnynoh&quot;: [ &#123; &quot;evavbxmmyys&quot;: false, &quot;nafzhtiw&quot;: &quot;g7I&quot;, &quot;qbbluhrhztey&quot;: &quot;trg&quot; &#125;, &quot;xhWEsUPx6X9JijRn4ZFf&quot; ], &quot;rcmjsp&quot;: false, &quot;rwifid&quot;: &quot;T4&quot;, &quot;mwpcukwu&quot;: -247695617, &quot;iyvci&quot;: false, &quot;ycxzsglvpdfr&quot;: -265854823.45786053, &quot;pezczmctgq&quot;: -1146891373.14226, &quot;texwaryw&quot;: &quot;xv&quot; &#125;, true, &quot;CXXOR&quot;, true ], &quot;zqtlcmqif&quot;: [ [ 1033623001, true, [ -1395454667, &#123; &quot;xznzagsbd&quot;: &quot;_F&quot;, &quot;pevwyzbtfcar&quot;: true, &quot;qldrvrkd&quot;: true, &quot;eloesihdkm&quot;: 1062351111.7727145 &#125;, true, &#123; &quot;tyoannf&quot;: false, &quot;kysqxlq&quot;: -729766689, &quot;adadiacf&quot;: 1410537009, &quot;grktfro&quot;: true, &quot;ildyykbagb&quot;: 615009322, &quot;mwtjrywx&quot;: true, &quot;hvseyvf&quot;: true, &quot;voafxuqlm&quot;: &quot;YPA8TMgjpBm_yD&quot;, &quot;kvzugmf&quot;: false, &quot;dizlpvkcbvxo&quot;: true &#125;, &#123; &quot;xwcuyzqn&quot;: -1014148751.3180305, &quot;scffj&quot;: false, &quot;wzrzqlvypp&quot;: 1116322785.7137117, &quot;vicvuwpfk&quot;: &quot;iEXEOuHee_0&quot;, &quot;qfgle&quot;: true, &quot;iyopmxsl&quot;: -343315638.31447166, &quot;tuklofjpupjc&quot;: 1803064105 &#125;, &#123; &quot;nptlc&quot;: true &#125;, [ &quot;PS8CDSfWR&quot;, false, 450237201.55478394, &quot;b91Cjj2rbs&quot;, &quot;rfl_3_jf8&quot; ] ], false ], &quot;G_H2KMmeMx&quot;, 808091798, true ], &quot;yasvsepb&quot;: &#123; &quot;loufefud&quot;: false, &quot;brkvdeo&quot;: false, &quot;leuziqhhtw&quot;: [ &#123; &quot;lncbgcgl&quot;: &#123; &quot;wltycttjvl&quot;: 827121072, &quot;sebqwx&quot;: &quot;6woE-_m5WII9xJZ4FtC&quot;, &quot;jfgrxdwz&quot;: 889597863, &quot;ihwfmyrhe&quot;: -1285912033, &quot;okyqur&quot;: -925292236.0479451, &quot;vaxqiwf&quot;: true, &quot;inknmlmno&quot;: -1213145330 &#125;, &quot;mkfqxio&quot;: &quot;E0GtS4&quot;, &quot;fdmbmawwn&quot;: &#123; &quot;nisnevtrsnot&quot;: &quot;2D_ddxskeLVvibZz&quot;, &quot;zzgax&quot;: &quot;0eBs&quot;, &quot;iiimbcuw&quot;: 575039955, &quot;dwztncmtc&quot;: -615122631.1948534 &#125;, &quot;vemplcglr&quot;: [ -1891680053.552865 ] &#125;, false ], &quot;lkrznfx&quot;: &#123; &quot;tyahhnitfct&quot;: true, &quot;vypuhrynkbh&quot;: [ &#123; &quot;zendmqv&quot;: &quot;jgV5&quot; &#125; ], &quot;hsrdmofgdrrv&quot;: [ &quot;h&quot;, 2080801717.778016, true, &quot;KnHw49COD&quot;, -395105653, [ -1810661652.9448717 ], &#123; &quot;qovhadps&quot;: 1097969958 &#125; ] &#125;, &quot;zgvkfxycn&quot;: &quot;JOdsHwbyH99KQJ&quot;, &quot;abcnebzdbl&quot;: &#123; &quot;hqctamapbx&quot;: [ true, [ -136595945.08933043, &quot;4f9jDeDe&quot;, -1380437794.939825, 2098368072, &quot;R9JvFj-vsz&quot;, &quot;CBQS7J9oox&quot; ], [ false ], false, true ], &quot;yqmmsoxsskn&quot;: &#123; &quot;zflixdj&quot;: &#123; &quot;gdiuzqrbotz&quot;: 1642214970, &quot;ctttho&quot;: &quot;m&quot;, &quot;xuojrhzxh&quot;: &quot;Xl2MgUjKEefumOOzP5ei&quot;, &quot;lrdprflpvdr&quot;: false, &quot;vddsrajgam&quot;: false, &quot;uxpkk&quot;: &quot;co0owXSeLXR&quot;, &quot;efbasivdy&quot;: &quot;c5xopEVUSq&quot;, &quot;cymvcauo&quot;: 789897395, &quot;iejnmg&quot;: -2102182819 &#125;, &quot;jrxvoywp&quot;: false &#125;, &quot;jgloipzfd&quot;: [ &quot;yI-5gGLZNUz1oc&quot;, &#123; &quot;idnrdmrsdqon&quot;: -689360092.3223418, &quot;amzxii&quot;: &quot;lStW1NUMZlP8I&quot; &#125;, 568189574, &#123; &quot;bstfaw&quot;: false, &quot;micpjxruqu&quot;: false, &quot;qugcsztygis&quot;: true, &quot;pagdlslodcjc&quot;: true, &quot;uiegt&quot;: false, &quot;emglc&quot;: true, &quot;gvccyclvc&quot;: &quot;LicGQA&quot;, &quot;ostmpcxtb&quot;: -1994141473.0746093, &quot;idycp&quot;: 1213923504.1512299 &#125;, [ &quot;1_bNas3xxAUZbF&quot;, &quot;pF_9&quot; ], [ true, false, 1104499137.6581862, &quot;gtRSEiAkV&quot;, &quot;f&quot;, -1427216932.854449 ] ], &quot;mtbvt&quot;: 12016921.330335487 &#125;, &quot;uylgh&quot;: &#123; &quot;ngmrlgsvgdmm&quot;: false, &quot;qewiqgqklm&quot;: 305638841, &quot;fzimlj&quot;: false, &quot;oxtylcwf&quot;: &quot;NsupUamyhG&quot;, &quot;lwebqrro&quot;: true, &quot;ssbqrxhayu&quot;: false, &quot;pqgzbx&quot;: false &#125;, &quot;fmxngtvju&quot;: &quot;c2WHOzW4MDoeXytfVY9&quot;, &quot;modbvffryo&quot;: -1210656559.6051788 &#125; &#125;, 319991990, 752081027, &#123; &quot;ayspio&quot;: &quot;m&quot;, &quot;zdxdb&quot;: -172048492, &quot;bnmfg&quot;: &#123; &quot;kdhtl&quot;: [ &#123; &quot;wmhosbyou&quot;: false, &quot;fxppfv&quot;: &#123; &quot;mysfoij&quot;: -625201263, &quot;ugxlt&quot;: false, &quot;yprzwadvwfsc&quot;: true, &quot;tydbi&quot;: 401570268, &quot;ulqeoysydicm&quot;: true, &quot;hcwmujpgy&quot;: -987799662, &quot;iuzpmg&quot;: 383197351, &quot;lyzhrztujlv&quot;: 259159294, &quot;fecthcxk&quot;: true, &quot;dsmzvpagojbb&quot;: &quot;hJr&quot; &#125;, &quot;quqvjmzatbl&quot;: [ false, &quot;DiSv7&quot;, true ], &quot;pidmqq&quot;: &#123; &quot;chyyx&quot;: -461079065, &quot;wjhldjcagc&quot;: &quot;FRVy&quot; &#125;, &quot;rgbvesz&quot;: false, &quot;sorekl&quot;: &quot;mgJaSKnMIo3AiY&quot;, &quot;abwidiqucid&quot;: true, &quot;vqfoxo&quot;: &#123; &quot;hsebsd&quot;: 1786643087.320104, &quot;qgmnjnntxzsf&quot;: -1728919091.1725118, &quot;nsfwqwicx&quot;: -1007085725.6308616 &#125;, &quot;iewhgjluz&quot;: false, &quot;xvowaxbmf&quot;: true &#125;, [ [ false, &quot;v---cGsLqE7W&quot;, false, &quot;jkvWg8XrI_Orm&quot;, 888665225, false ], true ], false, -1079824666.2026174, &#123; &quot;gugmas&quot;: &quot;ocBec08ppTN8vCnp&quot;, &quot;pulknsyowxy&quot;: 565963796.0613275 &#125; ], &quot;hzeywjbmxj&quot;: -990340286.7455853, &quot;akbiudkv&quot;: [ true ], &quot;vcxlswkf&quot;: &quot;udv8PuxZv6Twx5Pb&quot;, &quot;flceeypkt&quot;: [ true, [ -795613352.3213557, 685714582, &#123; &quot;jujopuqaynky&quot;: 134233885.6473452, &quot;bxsnejoecnrr&quot;: false, &quot;becsdny&quot;: &quot;uioKo31gEp40GTcn&quot;, &quot;ocdex&quot;: true, &quot;cmufrjeljfa&quot;: 946987801.137704, &quot;cvwuwdutbdx&quot;: true, &quot;zumlhmpfjy&quot;: &quot;Ju-wv9XFe_2&quot; &#125;, &#123; &quot;qrfvphcxl&quot;: &quot;nbjKX2lSdKUcMrDsJMoa&quot;, &quot;qfhkpepm&quot;: true, &quot;isvsnzn&quot;: &quot;8s-H4p5jO_1VxSaJSL&quot;, &quot;wosutaonjssb&quot;: -1321615206.2702007, &quot;zhzyarvfbv&quot;: false, &quot;knqhafffn&quot;: &quot;TNWnalBECj98IUDA&quot;, &quot;vzsesugbtk&quot;: &quot;O1hm&quot; &#125;, [ &quot;2it-aFXS0Qy_XVn&quot;, &quot;ihixN&quot; ] ], &#123; &quot;yxtqdjhupa&quot;: 1951743765, &quot;rpvck&quot;: &quot;f3QIUcvC_fauijzNkf&quot;, &quot;slbkyuwnwv&quot;: [ -571232911.2798606, &quot;T7Qzt3Edo4d&quot;, &quot;pWJAm&quot;, -1434131502.6432357, -680271942, &quot;ThdyS9n5bdwstGH&quot;, 1979426403, &quot;90e&quot;, true ] &#125;, [ false, [ &quot;ZnOdJd&quot;, &quot;Me4gneu7Nc7O&quot;, 202051980, 1332684635 ], true, 1264894043, [ -395334900.75651824, 1549989907, -961665108, -1593561717.1767528, 1494787750.6725504, 994190181.9693943, 632636626, &quot;3Uf8V_FaTErM79xdKh0&quot;, &quot;V91QGMl63kI&quot; ], [ -753988053.774492 ] ], &#123; &quot;wflzlntzc&quot;: &quot;qKNchhkZHGblmFDrn8U&quot;, &quot;ucslcrzdyz&quot;: [ 283139739 ], &quot;yxugzqphta&quot;: &quot;y2YbFBO1bXR3ENRvev&quot;, &quot;ihtrq&quot;: true, &quot;yulhhzvvikd&quot;: [ -1046400160.2828263, true, true, false, false, &quot;ei6IDD8UKSW&quot;, 191135027.03853592, &quot;5anD9rNH6&quot; ], &quot;uqvcq&quot;: [ &quot;ZzSW_B-3&quot;, 783554144.0958288, &quot;KU&quot;, false, true, 1966464103, 1920814712, 683487776.262944, false, &quot;UsBaXA&quot; ], &quot;ugvxe&quot;: false, &quot;usrnkbkzfuu&quot;: false, &quot;fiqwtwvre&quot;: 1694627487.7568161, &quot;vihhvsxklcbo&quot;: 897679784 &#125;, [ &quot;EL7XhBA94&quot;, true, &quot;J8TJrWXYkODR&quot;, &#123; &quot;bowvtftalv&quot;: &quot;VEBEw8RwnsIw0s&quot;, &quot;ltkvjg&quot;: &quot;fDHymtYW3L4Hl9R&quot;, &quot;vkdztzv&quot;: &quot;AzL4677302l8FeVnbbX&quot;, &quot;mtardrme&quot;: &quot;Xr2f&quot;, &quot;mpqnrwt&quot;: &quot;6tfiB19W&quot;, &quot;xntyeufr&quot;: &quot;fEZSq&quot;, &quot;zpthzv&quot;: false &#125;, &#123; &quot;xnpzojev&quot;: false, &quot;whsrs&quot;: &quot;gzQesBTOCoNKugz3&quot;, &quot;uhmjzttq&quot;: true, &quot;tesve&quot;: &quot;nkDSpl0b2Ga8vsHT&quot; &#125;, &quot;WuANCr&quot;, &#123; &quot;jyqdak&quot;: &quot;gP-zwcSikc&quot;, &quot;kvbmsyttia&quot;: false &#125;, &quot;H&quot;, &quot;2D1ucsMSfrP&quot; ], 1592338348.7924447, [ &quot;9lYEHCrsXWLkq&quot;, &#123; &quot;vsvlvhkuso&quot;: true, &quot;nnjlgli&quot;: 322338594.6300827, &quot;fetxoqxoghv&quot;: -1991478727, &quot;vzrtxhzu&quot;: &quot;mKl8xiUneZPXrZuF&quot; &#125;, [ 1458107595.4483733, 616263965.0955776, 161045273.1067363, true, &quot;Ck3C2JV5hdJA&quot; ], &#123; &quot;etgzgdsl&quot;: false, &quot;lhvbzwypzrx&quot;: true, &quot;smiyikbhw&quot;: -984707066.8290443, &quot;hktstqzjcrcg&quot;: true, &quot;brgfn&quot;: &quot;HcDo1oRRacy9o4ssNk&quot;, &quot;qjyof&quot;: true, &quot;phdqbosbbkp&quot;: 931049523.3590446, &quot;ofjidjx&quot;: -860738311, &quot;ufrxtiehw&quot;: &quot;MuqsjxkA8e2Ij&quot; &#125;, &#123; &quot;wstjovp&quot;: &quot;zI&quot;, &quot;wppceiyenski&quot;: &quot;kD&quot; &#125;, true, -91349959.14546207 ], &quot;-VMwHk4&quot;, [ true, -1807266800, true, true, [ &quot;Oex_mjMAO4A55c&quot;, &quot;odW9oQlO3A7XKZtEPHM&quot;, &quot;kIsjpeWPlq&quot;, &quot;Scx4fDx65a7UDQ&quot;, true ], &quot;UL&quot;, [ true, -1265257957, false ], [ false, -569818007.5876889, &quot;WwDva9Nc3dMJhikZ_Z&quot;, &quot;NMi7MOHBF7_9sWzRCds&quot;, 380825709.26405615, &quot;iPGQxJbVYprnt&quot;, &quot;VjJf-XdxNrOg3v5yBvx&quot;, true, &quot;oiipbU3t3ISgVwOL7&quot;, true ] ] ], &quot;guinzucru&quot;: [ &quot;vrumW9gl31&quot;, &quot;n&quot;, [ &#123; &quot;ydvzhpou&quot;: true, &quot;wwnndiumk&quot;: true &#125;, false ], &quot;Hq3ygnLIYYjOaQae&quot;, &#123; &quot;yemwjar&quot;: [ -1042701532.5623459, 24549030, 352751370.9875027, 980109670.3544773, &quot;Hh4ePK8NfvSx4OpOW&quot;, true, false, true, 497346263 ], &quot;vcmrzobsjzl&quot;: &quot;nyj2-zg7-0kNw8&quot; &#125;, [ &quot;Vo_arWN3v&quot;, &quot;8F&quot;, &#123; &quot;jibgur&quot;: &quot;dXRlpssz3Wyi&quot;, &quot;zfseuo&quot;: true &#125;, 1937437815, [ -1245657924.4286041, 651976843, &quot;Cjws8kzUiNPcvX70U-x&quot;, false, &quot;Lm9w&quot;, &quot;xxT2tJHI7wDPW2Kfi&quot;, false, -1952758278.2733572 ], &quot;g-I&quot;, -2063256198, &quot;IVxDi6r33ruXiEW&quot; ] ], &quot;hcgqg&quot;: &#123; &quot;pkncbpjityxi&quot;: true, &quot;jywgia&quot;: false, &quot;xuhpgdb&quot;: &quot;2-yvDReio4aNvsXqelv&quot;, &quot;diuzqtbp&quot;: 1369231263.8563566, &quot;boxjl&quot;: &quot;RdfmeS&quot;, &quot;ieydmbpq&quot;: false, &quot;wksjcukglkv&quot;: &quot;BlskDCFdPhO&quot; &#125;, &quot;dqksawfwzia&quot;: -1709158449.2037373, &quot;yqqqgrelsew&quot;: &#123; &quot;axfkapc&quot;: [ 1314173141.025732, true, 1706611926.1511626, [ &quot;LGK9&quot;, &quot;OmKGa-_AV6&quot;, false, 619664858, true ], true, true, true, &quot;MaHgh1nlG&quot;, &quot;-ht&quot;, &#123; &quot;dbxeygnft&quot;: true, &quot;nwjypbw&quot;: -180523820, &quot;svlefgltfn&quot;: true, &quot;wzjlatys&quot;: -933287952, &quot;xsirbpyegfs&quot;: &quot;hAv2H9S7cXb85f2&quot;, &quot;ndllh&quot;: &quot;1IoYAwtIePJaKWc480&quot; &#125; ], &quot;xnpsnax&quot;: false, &quot;zpdmtb&quot;: &quot;yn8HiW&quot;, &quot;cbdpxx&quot;: &quot;irzv&quot;, &quot;ronkpjuqyas&quot;: true, &quot;untzciqdqf&quot;: &quot;kJWx8&quot;, &quot;nfetkiyomp&quot;: true &#125; &#125;, &quot;tqlmboqw&quot;: &quot;-dp9i61bMgbiO-d&quot;, &quot;lvjlx&quot;: -1249334706, &quot;yptkyewgcrj&quot;: 867985282, &quot;ratkrzkarfn&quot;: false &#125; ], &quot;bxxnf&quot;: &quot;MmTxJH919O057sU37&quot;, &quot;yedby&quot;: &quot;QQxVadTt7L8z&quot;, &quot;kamasbl&quot;: &#123; &quot;mswukabrei&quot;: &#123; &quot;acvtgb&quot;: &quot;PDJlQybpSPYdMT8&quot;, &quot;yvtaruegobn&quot;: 997754640.3758422 &#125;, &quot;gvfkney&quot;: -1307017604, &quot;uwvrb&quot;: &quot;W6WF&quot;, &quot;sszkbz&quot;: true, &quot;fpgzwg&quot;: false &#125;, &quot;eujhncsmq&quot;: &quot;jsjZmtqSeh6VVVaY&quot;, &quot;sxnqorpzydrm&quot;: &#123; &quot;phjgkjkonv&quot;: &#123; &quot;fzbdujgtanh&quot;: [ [ -1757709659.747855, &quot;GYAkj&quot;, &quot;nQlNvA5Y4oSKpHOF&quot;, true ], [ 952955177.6360663, &#123; &quot;qummivimqd&quot;: false, &quot;gkkvkc&quot;: false, &quot;snfidxdtto&quot;: &quot;11jzRhIv0&quot;, &quot;ffdfxfruzwfo&quot;: false, &quot;lluwr&quot;: false, &quot;ddlxi&quot;: &#123; &quot;bofjqgppt&quot;: -206304887, &quot;pxuxb&quot;: &quot;JCAHtEfTWPyjmVUOX&quot;, &quot;memsmy&quot;: &quot;p&quot;, &quot;rhvmwrekpr&quot;: -853823899.7978561, &quot;rlhshsewp&quot;: false, &quot;oqjpdotxpz&quot;: -446272382 &#125;, &quot;emqee&quot;: &quot;3zx8LgmigKIKn&quot;, &quot;qmauf&quot;: &quot;MA-oPkKz9lXOBiDMSRSN&quot;, &quot;kqpwqkyptkmu&quot;: [ &quot;2y0Ls60F8eTpOSN&quot; ] &#125;, &quot;fTi&quot;, -265643623, &quot;9v_YlQuFo&quot;, &quot;geuPaZjVsj&quot;, [ [ false, &quot;GHb-FdyW8EomXgHsT&quot;, false, 1875556833.3559535, &quot;vt&quot;, true, false, &quot;osLW6u4iz&quot;, true ], &quot;uJOr4VLCq1t&quot;, &#123; &quot;oqebxwxtxpvb&quot;: &quot;OeR&quot;, &quot;wwwiw&quot;: &quot;-nhycJ&quot;, &quot;vwbagqlinj&quot;: &quot;-D9eDNGKj&quot;, &quot;wqnhzms&quot;: -655078208, &quot;sdmbikfwy&quot;: &quot;x5v&quot; &#125;, &#123; &quot;ysfsnuamh&quot;: false, &quot;ybzuhpv&quot;: &quot;8DY2&quot;, &quot;raiyak&quot;: 495006138, &quot;hgkoobis&quot;: &quot;0&quot;, &quot;hputvguzao&quot;: false, &quot;uyaeh&quot;: true, &quot;pwqhplzwou&quot;: false, &quot;taajvximfcy&quot;: true, &quot;lxmlwsub&quot;: false, &quot;vsofc&quot;: false &#125;, 1088101195, &#123; &quot;sojza&quot;: false, &quot;rbclzrqro&quot;: true, &quot;huqrznjue&quot;: true, &quot;vluebofh&quot;: &quot;5bTgvkkV&quot;, &quot;ezstabvtdeq&quot;: 1976572284, &quot;aqlzj&quot;: &quot;t7yO3IEs7gaC_9MZ&quot;, &quot;josruegfqn&quot;: &quot;HX2El0rpe6HfH&quot;, &quot;edank&quot;: -635493072.4155289, &quot;aymbgyfbdzj&quot;: &quot;ozUhXACnFL&quot; &#125;, -890796541.5700071, &quot;uJXQ5_4G5vIIm4VIv&quot; ], &quot;f1xaV9x196tBnFD5_Zd8&quot;, &#123; &quot;qiubyf&quot;: [ &quot;CQ&quot;, &quot;cW_&quot;, 461572129.55971146, -1876956237.2727652, false, false, &quot;7FxqTYYKTzo702jmuV&quot;, true, -1361005501, &quot;TG3lzWLUBg17Z&quot; ], &quot;bsntrkshbbl&quot;: true, &quot;qayvs&quot;: &quot;Uk-oAdeA51cHhbK5&quot;, &quot;hadikjuxk&quot;: &#123; &quot;yvluqwkog&quot;: -597445612.6250086, &quot;oukykodjcu&quot;: 1850557052, &quot;cdhblr&quot;: true, &quot;ciesjxzghfxt&quot;: true, &quot;jnngdkfpuo&quot;: true, &quot;pzheolhaonp&quot;: 226200614.83962294 &#125;, &quot;cltmvb&quot;: -2074776318, &quot;obyudplghb&quot;: &#123; &quot;vecms&quot;: 582577524.4319428, &quot;mofmkniktapz&quot;: &quot;9Js4uKTN&quot;, &quot;drxyobybcw&quot;: &quot;JTea_0pLArPIzhKEkp2s&quot;, &quot;bbpvy&quot;: false, &quot;kdndzkpnxq&quot;: &quot;daMn&quot;, &quot;ppwjjqvahr&quot;: &quot;uiN&quot;, &quot;evdxmgpozur&quot;: -1467712807.9154332, &quot;lqqxro&quot;: &quot;1C&quot; &#125;, &quot;fvgxbtmyts&quot;: [ false ] &#125;, [ &quot;xgyM0w0gJVc-bUsjjc3W&quot;, [ 1581673185.801224, true ], true, &quot;AFAdRfO1vjhVHBXf&quot;, -1417255356, false, 2125252708, -1351228013.1790602, &quot;s8lmQa9-sF3ZiwfgDNG9&quot;, true ] ], true, [ -1698684901, [ [ 849023324.5976223, -977489585.1647764, 1160100524.5048172, &quot;NVoV&quot;, 1956152963.7851565 ], &#123; &quot;zjkbrxqnjyib&quot;: 1612094501, &quot;laytlrzjm&quot;: -1286271773.382401 &#125;, 1355048752 ], &quot;jGiEWnOBrX6zGk7zSk4&quot;, -461191987 ], [ &quot;m00pw5&quot;, &#123; &quot;tlotkn&quot;: [ false, 985823484 ], &quot;xlbwnbxbhg&quot;: true, &quot;mkatz&quot;: &quot;c6N&quot;, &quot;uoveewlh&quot;: &quot;l3R3s8B1RC3l&quot;, &quot;swouympjz&quot;: &#123; &quot;auyjvbi&quot;: -1255198040.7835124, &quot;ghlxvmz&quot;: &quot;XdHtr&quot;, &quot;wkopoeyqlv&quot;: &quot;Zeyj_&quot;, &quot;grjesew&quot;: &quot;VytG8oHimN0ioronyiAb&quot;, &quot;gbvuthtl&quot;: &quot;SRCBVKWH&quot;, &quot;esscbsk&quot;: false &#125;, &quot;thaxrelsxfav&quot;: true, &quot;qqifhajga&quot;: &#123; &quot;zwozmuz&quot;: 377293093.26616657, &quot;qldgpds&quot;: true &#125; &#125;, &#123; &quot;rcjdyjspy&quot;: -952553084 &#125;, &quot;x7-N76Cc&quot;, [ [ true, true, &quot;zQpYm4rL9JCn&quot;, &quot;NemBXRJmcEsP1C&quot;, 433306137.267195, &quot;qvh8cnT-Jhc8Ou&quot;, 740183319.1502727, &quot;7Bi1GqM4ueA0ampSi&quot; ], &quot;O79VGHrnyR7v&quot;, false, [ &quot;es&quot;, 1505546287 ], &quot;Nw5tI2Y7hhY4fDj31eWN&quot;, [ -749123803.2739266, 216748025, &quot;c1Y7-9k8AC&quot;, 176485073, false, &quot;mf_keznyU_20HdZ_0&quot;, true, false ], false, [ -1512885808.9801362, true, -1527868357, &quot;trOTwZC-0g1lgTqEA&quot;, &quot;mV34DCnkb1LlD7d_km&quot;, &quot;YJ0tHHyAmoIKQ&quot;, &quot;gsXJ5zChelW&quot; ], &#123; &quot;phdse&quot;: 595741052.8125976, &quot;rxcsoflx&quot;: &quot;rIvqIqrnEVGyCwxQP&quot; &#125; ] ] ], &quot;nvotcnis&quot;: &#123; &quot;ogjfiplwvufn&quot;: 1079730809, &quot;fnbyltztf&quot;: &quot;EsxG2fQUW-4XT62&quot;, &quot;rpxsgcq&quot;: &quot;CCAOL_U9&quot;, &quot;vswsw&quot;: &#123; &quot;ijmoibjq&quot;: true, &quot;piivqkugks&quot;: true, &quot;wpcximi&quot;: [ &#123; &quot;iwywzn&quot;: &quot;OOfVX3oNFwBZ&quot;, &quot;hkynoym&quot;: &quot;FJRrQ&quot;, &quot;zuonk&quot;: &quot;49Eec2&quot;, &quot;qjovinmqp&quot;: 679144699 &#125;, true, &quot;yAS&quot;, 1543015013, [ -1021945778.6520991, true, 128684704, true, false, &quot;has-i&quot; ], &quot;4I6blnY&quot;, &#123; &quot;zkwzhwzipi&quot;: &quot;5lP5lousE5iL9IoFTG&quot;, &quot;bitfyzggq&quot;: true, &quot;cwnnguoet&quot;: false, &quot;nqmqzw&quot;: false, &quot;joozp&quot;: false &#125;, &#123; &quot;uhzmeuc&quot;: &quot;u3F1Z&quot;, &quot;mkneciqrikf&quot;: true, &quot;ieiag&quot;: -1256958208.1722577 &#125;, [ 6951325, true ], true ], &quot;xsqea&quot;: &#123; &quot;abdpaposxk&quot;: [ -2083214054, true ], &quot;gavaao&quot;: [ &quot;YVqehowWoxFzxN0tZB8&quot;, false, &quot;ZHK0SwWCyUiC&quot; ], &quot;dlcfcpjjijg&quot;: [ true, &quot;j2r&quot;, 1558887921.6404164, &quot;TveKjVYhg0U&quot;, 632625983.6673323, false, 1367379215, &quot;mpHgbvMpYFi&quot;, true ], &quot;cvztpny&quot;: &quot;z1wbRKt3-u4cBI6&quot;, &quot;tgvmaqhcokg&quot;: false, &quot;pwlirptw&quot;: &#123; &quot;kfntxxsbsbon&quot;: true, &quot;akwavpgf&quot;: -1342471866, &quot;gzpwxwilyubn&quot;: -1743682384.0272207, &quot;ndqaenoranu&quot;: false, &quot;vfzgcfdr&quot;: &quot;utqG7ufYK3j2KEVzpp0O&quot;, &quot;ufxjjef&quot;: -904325888, &quot;fodllzopcpx&quot;: &quot;P3ZBe5qNinRYq1VxEL&quot;, &quot;dhufn&quot;: true &#125;, &quot;ralgamgjl&quot;: [ 2026862038.2987015, false, false ], &quot;gnknlmlum&quot;: false, &quot;azfmkyux&quot;: [ &quot;f413rM5j2LvXNTKL&quot;, -615130880, &quot;0Eh4aUF2CsHg_P-mxmH&quot;, -268950414.54959303, true, -1931834889.733659 ] &#125; &#125;, &quot;wzewlxhjnvw&quot;: -903799295, &quot;nnrugbczmebk&quot;: [ false, false, &quot;G&quot;, [ true, true, &quot;Xfiip08j2n4cXpvUz7&quot;, -1186540424, true, &quot;c9Pn_xx&quot; ], 1124081955, [ 1830918200, [ &quot;Q4MTN&quot; ], [ 127409311, -1809447283.2348087, &quot;4tiJNwazi&quot;, &quot;fy&quot; ], 930886199.1886995, [ -245296169, 844880445.720423, -270760168.8320612, &quot;V_ATKaGoE5XM9RgwLv&quot;, false ], &quot;kpcQ&quot;, 2045568916.3619785 ] ], &quot;iquqoa&quot;: [ &#123; &quot;bdtrvppokywi&quot;: -33393480, &quot;xlxonec&quot;: -1823845807, &quot;pprlnqouqxzn&quot;: 2091914113.8744054, &quot;ybmwesnuegtd&quot;: [ &quot;FMsxRZWsu2H&quot; ], &quot;ylogqgharumv&quot;: false, &quot;nvggdbkr&quot;: &#123; &quot;crvrsjh&quot;: &quot;Xj2cM1hDzTIuhmc&quot;, &quot;umhgzsjwk&quot;: &quot;KS8J3biYo8P&quot;, &quot;dbfkz&quot;: -855560738, &quot;xyfvzoxzqc&quot;: false, &quot;otbwgnrz&quot;: -2034945952.523522, &quot;bbehrnjws&quot;: &quot;QbeySRRy15KeDVQz0IMK&quot;, &quot;lgsgot&quot;: &quot;JnGiCwGsA8aa7o&quot;, &quot;rasrciv&quot;: -700141086, &quot;zdthkydrmln&quot;: &quot;qxzRdtqK-lnShu&quot; &#125; &#125; ] &#125;, &quot;xclapdsaslep&quot;: -23588526.03089682, &quot;ecrpzheu&quot;: &#123; &quot;lxthqzfv&quot;: &#123; &quot;ulylbh&quot;: -1018618930, &quot;qhlscxfu&quot;: &quot;sfZnQ_rXqIm&quot;, &quot;bmdtvxutm&quot;: true, &quot;cczmioh&quot;: [ 111564522 ], &quot;rsbpvrvls&quot;: &quot;OzU9laC7lmDxzlEx_wR&quot;, &quot;ndcirjkclq&quot;: &quot;cqgL1NYFQ3DO&quot;, &quot;oggtqukizq&quot;: -2106470611 &#125;, &quot;cjwtzzpgrb&quot;: [ &quot;TZD4t4XeIUHjJUIK&quot;, &quot;lQGZmZrYh&quot;, &quot;hyaEwqscH8dteUOzha&quot;, &quot;JaQummas&quot; ], &quot;wvppj&quot;: true, &quot;phsqgbfp&quot;: 871081896 &#125;, &quot;isvrnahic&quot;: false, &quot;uasucavojqy&quot;: 163609805, &quot;vnncwei&quot;: -642227261, &quot;njzmcyqd&quot;: &quot;cDCfe3Bx1w5XYVLraxW&quot;, &quot;dweipdxaye&quot;: [ &#123; &quot;aeongjioif&quot;: [ [ true, true, &quot;bECarF5RGKtt1imFtTu&quot;, &quot;xcuL5lX97a&quot; ], false, [ false ], -650309984, &#123; &quot;feyumfzudt&quot;: &quot;TIAi7dPq&quot;, &quot;hxjglebiwf&quot;: true, &quot;tdeggm&quot;: &quot;hp&quot;, &quot;rortbibldkyq&quot;: true, &quot;bucfr&quot;: &quot;IgFif9jpOZZ&quot;, &quot;rjnmvysrynsj&quot;: 441984026.3667474 &#125;, &quot;hkF&quot; ], &quot;mxrrwqte&quot;: &#123; &quot;cnyarz&quot;: &quot;bKnE6P4Kw&quot;, &quot;dccrzgwzc&quot;: [ 543185771.5837113, &quot;mRCDjZgJS1M3U6rl_af&quot;, false, -1933801689, true ] &#125;, &quot;cigvfabm&quot;: &#123; &quot;saujucr&quot;: [ &quot;qdRdcXyEPd&quot;, true, -2123966068.7962725, 2051049994 ], &quot;exxfgcqhjfc&quot;: &#123; &quot;rjsubdbuwsh&quot;: 1224413664.2868626, &quot;lhmairsqez&quot;: true, &quot;asdzyjpeswup&quot;: &quot;o6zuaj&quot;, &quot;gmslwelko&quot;: 610866014.3874341, &quot;qpwadkelki&quot;: 1731608847, &quot;detfckirhowo&quot;: false, &quot;clzzljkxqkp&quot;: &quot;Y7l0BW7NMz6Avh4D_&quot;, &quot;nhupv&quot;: -1006743965.8776457, &quot;jsopnto&quot;: &quot;4DX1mC&quot; &#125;, &quot;wnfjhwvmooaa&quot;: -1886276406.132739, &quot;fhgfgkfqxst&quot;: [ 1593165764.0979652, 1637503927, -1873780322.4778817, &quot;cSaqQ3WNTSGVTZ9NIOW&quot;, false, 860733481.5794744, &quot;232_Efq6&quot;, true ], &quot;dzazh&quot;: &#123; &quot;fvgaaqcnau&quot;: &quot;sNjUz5Ii9I&quot;, &quot;jfcavmwu&quot;: &quot;kmW&quot;, &quot;vlreyb&quot;: -710731569 &#125;, &quot;ckaknuqy&quot;: &quot;6YIs29pUJ9M&quot;, &quot;kcuyg&quot;: true, &quot;pqegyczzkqw&quot;: 205717917, &quot;sdvvxdfb&quot;: &#123; &quot;rsgfdyzjpaa&quot;: true, &quot;vvmrt&quot;: &quot;X5&quot;, &quot;xedlylprsv&quot;: 570673188.5733104, &quot;acwculubdaa&quot;: -849395553, &quot;puksqgt&quot;: false, &quot;odewfvhgdr&quot;: &quot;A1AQXseK9u8_z&quot;, &quot;gekxhikm&quot;: -2139423052.295563, &quot;mfzqlpyu&quot;: true, &quot;yqwffaenyag&quot;: &quot;9G&quot; &#125;, &quot;ohtczfdh&quot;: [ false, &quot;73qWp-&quot;, true, true, true, -1329529787, &quot;WAAy6HCE5uYe&quot;, 1557041914.0483782 ] &#125;, &quot;sbxgh&quot;: [ &quot;Sbg9m7vIEB&quot;, &quot;X9zA0qY1RG9ol_ri&quot;, &#123; &quot;cxqgnomfsnjk&quot;: &quot;R-_aiqzv6bm&quot;, &quot;nuxvtzquh&quot;: true, &quot;dkughomoiba&quot;: &quot;JvX4Y5n_Fh&quot;, &quot;adsqv&quot;: -682262054, &quot;myidiqjbts&quot;: true, &quot;czjhfzxkbpw&quot;: 1751383795.8506076, &quot;fqwpzzwkpr&quot;: &quot;BU0Yu0NRVTiiHcG9mbDt&quot;, &quot;hryel&quot;: &quot;G&quot;, &quot;ckyvqeihbgl&quot;: &quot;QOFYl8GjzR_Ql3f&quot;, &quot;ycexw&quot;: true &#125;, true ], &quot;yzpnjnaktksa&quot;: false, &quot;lgaqcjsfe&quot;: &#123; &quot;kqnizsh&quot;: [ &quot;p&quot;, -1226305180, 571419224.3518956, false ], &quot;xzlefub&quot;: &#123; &quot;fhykv&quot;: -339920314.80420333, &quot;exqmfy&quot;: true, &quot;uiaivfguag&quot;: &quot;rEv6VY&quot;, &quot;jpgztqhjv&quot;: true, &quot;mkynca&quot;: &quot;7z9KNTRB27e&quot;, &quot;zhcbqjatyrgg&quot;: &quot;wFUzbTyk5tmO6p&quot;, &quot;ewpgmkwvlpm&quot;: -1934181295, &quot;rtirys&quot;: true &#125; &#125; &#125;, 541189816, &quot;es&quot;, &#123; &quot;rdflzpxwsbw&quot;: true, &quot;riayske&quot;: &#123; &quot;ijxscwliafis&quot;: -322441950.5303346, &quot;ydhymqlx&quot;: false, &quot;fjyeyim&quot;: false, &quot;lbwsgfg&quot;: &#123; &quot;czcrfatn&quot;: &quot;WKr9&quot;, &quot;gxekfkxdkdq&quot;: true, &quot;vtpxn&quot;: true, &quot;vllqibjw&quot;: 1821007224 &#125;, &quot;nvqswevz&quot;: -2041833954, &quot;rzzkuseaxd&quot;: 18807832.889945496, &quot;wfxjbegeu&quot;: true, &quot;pjayyzd&quot;: &quot;wWUESoQDH_O&quot;, &quot;rfkfqmagir&quot;: &#123; &quot;mykpqrhvuoy&quot;: true, &quot;loyhdll&quot;: 1440472571.8493106, &quot;xcsdvtacdulw&quot;: &quot;W344QdjDy_YdH01iG0fS&quot;, &quot;tzgvthwrp&quot;: true &#125; &#125;, &quot;rsmbhicqnpr&quot;: [ &#123; &quot;kmbsnywwsi&quot;: 133785125.47638391, &quot;evlhamhaxxt&quot;: true &#125;, &quot;b7Fb7N&quot; ], &quot;hfneixzc&quot;: [ &#123; &quot;ayxhlht&quot;: 1548171683.617593, &quot;nqlqirpxh&quot;: false, &quot;npybayp&quot;: false, &quot;xuyutuq&quot;: 2110743987.1496599, &quot;kzmprhoyv&quot;: 1322790923 &#125;, 1765508816.0791237 ], &quot;xmdoabl&quot;: &#123; &quot;refxfgkkzu&quot;: &#123; &quot;xtwns&quot;: -1039887662, &quot;dzgnbcaxve&quot;: false, &quot;zmuecq&quot;: true, &quot;tuzxnlldg&quot;: -907643254, &quot;ouejpqtx&quot;: 331971273, &quot;iaugasmfxclk&quot;: &quot;9tJxJ&quot; &#125;, &quot;trcrityop&quot;: -989164354, &quot;lfjcwkgxift&quot;: [ &quot;1GZo7DANf&quot;, -1561947832.5542061 ], &quot;vgbtbbnj&quot;: &quot;q-ihFdKO9bOXv&quot;, &quot;ndimwio&quot;: &quot;PQcmyo0_y8f7CWYscR&quot;, &quot;gwkahgryaxc&quot;: 1901846564, &quot;telwegwtlv&quot;: [ &quot;oJC0R8V6vDwZnuL&quot;, &quot;cegvtSIH&quot;, false, true, 634771505.5661006, 955230191, true, -1885169813, -1854859621.4315236, false ], &quot;lgdgl&quot;: -1133237594.1663725 &#125;, &quot;pzwvynoappvl&quot;: false, &quot;fplofweuxvzw&quot;: true, &quot;ffqjvpjbuesz&quot;: &quot;AV5DRiG4gKZl75TR6&quot;, &quot;hfdasyzpuoog&quot;: &quot;aAMMRCXFrygWvpg&quot;, &quot;njrohfn&quot;: &#123; &quot;ratftlmbwf&quot;: false, &quot;lfaafenmzbr&quot;: 1374843545.5878198 &#125; &#125;, -2001457228.601632, true ], &quot;mkbmmctixysm&quot;: &quot;ntVR7&quot; &#125;, &quot;zuczlryopca&quot;: &quot;iNj8bmfUHGQpt&quot;, &quot;lhkjnmyi&quot;: 1518013887.0744526, &quot;igdwy&quot;: true, &quot;xbvcu&quot;: 1017887323.7448919, &quot;pitvbgiuml&quot;: -1811318498 &#125;, &quot;zprckvv&quot;: 2108168004, &quot;edfcnvtdtx&quot;: [ &#123; &quot;zjlropjots&quot;: &#123; &quot;ohmsqxdlz&quot;: false, &quot;neisprizn&quot;: 1669237908.3217354, &quot;csenxeijnht&quot;: [ [ &#123; &quot;zppbppw&quot;: 50337283.94736552, &quot;ixrpxguua&quot;: true, &quot;plfzrokdvja&quot;: &quot;7eZ616LbAtqHFNJU4MF&quot;, &quot;jhygfhqou&quot;: 282844661, &quot;obpaqtt&quot;: 1016820153, &quot;tzmnjmnprc&quot;: &quot;PIP_KsAQ8TRfWj8&quot; &#125;, false, [ &quot;iYCPkOgKcGLcpqf&quot;, 1795872978.9544482 ], 67846688.50918601, 1202186634.870897, false ], 9448510.009504765, [ true, true, &#123; &quot;etkidcfq&quot;: &quot;lHdchfpN6JDir&quot;, &quot;agchz&quot;: 712473658.807744, &quot;icqnhfdxhjhk&quot;: -220595219, &quot;fbbfl&quot;: -505498113.7859371, &quot;jmwbiqyfcsuz&quot;: &quot;KA&quot;, &quot;xbvzb&quot;: &quot;gXgB1WZNqjU&quot;, &quot;nwemkhg&quot;: false, &quot;kjherkfm&quot;: true, &quot;xnqsb&quot;: true, &quot;lvsjlm&quot;: false &#125; ], [ [ &quot;buNwzYKD80YR&quot;, true, false, false, false, -710038476.2972732, -309936207, &quot;paBE0&quot; ], &quot;q2GA9trX5VnDm8&quot;, -844643912, false ], [ -1377899387.3188415, &quot;Pq5moaMvAdkM4rQ&quot;, true, true ], -710012547.177507, 673382921.5194938, &quot;FHksVrkWHt3PO0U0b&quot; ], &quot;jfzawdrwkga&quot;: -1072103664.4713615, &quot;xqgaimtu&quot;: &quot;2RTdyzxFpbVQmuY&quot;, &quot;jjkulht&quot;: &quot;GCEdY0WQgHN&quot; &#125;, &quot;dnmlzfzvmidt&quot;: false, &quot;rhcvcxuk&quot;: -1079046924.5961304, &quot;yaktme&quot;: [ &#123; &quot;diywncksn&quot;: [ true, &quot;cGAmxIX7O0WTZ&quot;, [ false, 1564067145, &quot;iW_vFxvuDE-A&quot;, &quot;gZo3&quot;, 1122587441, true, 2083853595 ], true, 1860499142.0810177, false, false, false, 558491628, [ &quot;sOYslU5FbQW6&quot;, &quot;_Z9dSn&quot;, true ] ], &quot;uxmuxkb&quot;: 553474645.1672876, &quot;yhhsqrthzs&quot;: &quot;Z6hjxh_-8QDXpfB_lHc&quot;, &quot;nhznkmw&quot;: &#123; &quot;dlxblit&quot;: -1057613448.3847271, &quot;ypush&quot;: 690139895, &quot;cnjrimqsfmfi&quot;: &quot;sYV1jMW&quot;, &quot;yoppewbiktn&quot;: 1209004459.892378, &quot;wepojzvjmijt&quot;: -1466502462.9614203, &quot;mrjponcdr&quot;: 1615448533.7058485, &quot;upveq&quot;: &#123; &quot;jjoynojpcx&quot;: &quot;Liy&quot; &#125;, &quot;uhbrhfru&quot;: [ &quot;8JEkNS9XjGCuGxV-UYQr&quot;, false, &quot;WE1O1xKeDApdo1h&quot;, &quot;0jGzqy2UL6jjel&quot;, true, -19734332, -242040341, -36045513.31575265, true ], &quot;zupetkvgd&quot;: &#123; &quot;nwfja&quot;: &quot;rG&quot;, &quot;oxtvcwrgzbc&quot;: &quot;jrGmsAV_7y8RGU&quot;, &quot;geskyn&quot;: -1815196370, &quot;fwbhfubc&quot;: -1370846829.5869296, &quot;ylnkb&quot;: -511755975.7114426, &quot;onpyyyoti&quot;: true &#125; &#125; &#125;, &#123; &quot;kvprhn&quot;: &quot;1Ybfy76_3pVvA9xU3F&quot;, &quot;mvbniporqrir&quot;: &quot;sFub&quot;, &quot;umtteoyzzv&quot;: &quot;6_0DxfBfb3J40B2EL45&quot;, &quot;jienbfqm&quot;: false, &quot;wzduhawbdxh&quot;: &#123; &quot;pzmcay&quot;: &#123; &quot;jujqvgbspz&quot;: &quot;68_v&quot;, &quot;fdiby&quot;: &quot;XGpGy_CNybTc8Kov-&quot;, &quot;rfiwortnu&quot;: false, &quot;pfeogfmv&quot;: -986394021.991955, &quot;injpycoua&quot;: &quot;UhuULrD6YjpyPBgLot&quot;, &quot;aportowxs&quot;: -301406610.412803, &quot;vbpiffeqpsav&quot;: &quot;FbcFenbR&quot;, &quot;evbkfj&quot;: -888951341, &quot;qtfzemajl&quot;: &quot;iBp6pusTBjurx&quot;, &quot;hkpxwoub&quot;: &quot;GYsZtov&quot; &#125;, &quot;dflvr&quot;: [ &quot;2jVK4YED9bJwfpmeVMjB&quot;, &quot;bUp6SgbV&quot;, true, &quot;o4hJF&quot;, -910642896.9670054, &quot;CC&quot; ], &quot;razlmovqsiuc&quot;: 1343277490.3944185, &quot;qhafjcift&quot;: -2092618184, &quot;uwnzhv&quot;: [ false, 2049897936.1204708, -2102758834, -546308487.584099 ] &#125;, &quot;akwkkoda&quot;: [ true, -1138132915, 2066106072.8812897, [ &quot;6jMXM2NHNPBIO9t7Tdd&quot;, &quot;_xsk9Xqzj59IXUmIzg&quot;, 349398901.40953594, 1250083138, &quot;itsea&quot;, &quot;n&quot; ], true ], &quot;pedqmgazxwc&quot;: &quot;23vKSv5dHyONCQ0A&quot;, &quot;kbtjil&quot;: &#123; &quot;wddnd&quot;: 1957971779, &quot;xbgel&quot;: &#123; &quot;zuudlzhzlth&quot;: -282063310.2604387, &quot;lwikuhlzixt&quot;: -820180212.3931726 &#125;, &quot;dizjuee&quot;: true &#125;, &quot;jjhvhxucyt&quot;: &#123; &quot;lxjwlnzgkcoq&quot;: false, &quot;hazbbnknrt&quot;: &#123; &quot;hjnuaaemr&quot;: &quot;M&quot; &#125;, &quot;jcpsg&quot;: true, &quot;hmfrqefj&quot;: &#123; &quot;sstzntsmrhk&quot;: false, &quot;ymufzyuumjxr&quot;: 1601488142, &quot;pxllzni&quot;: -390280935.5047585, &quot;nytye&quot;: true &#125;, &quot;oyzsjztrltu&quot;: false, &quot;qugxfiaemban&quot;: &#123; &quot;blzzupbkbm&quot;: -2141244606, &quot;clmhifbzfugt&quot;: -1407487167, &quot;vrmkqosixcq&quot;: false, &quot;lrifqtcpyk&quot;: -417542026.27023846 &#125;, &quot;aixnirite&quot;: false, &quot;ghlpuzrc&quot;: 1478220491.0831888, &quot;wlanv&quot;: -373831632.4243674, &quot;mrogq&quot;: &#123; &quot;osfyga&quot;: false, &quot;aplxxftfj&quot;: -1834090421, &quot;amxrdtsgt&quot;: &quot;Ve-y3_iQ07&quot;, &quot;rejngucpw&quot;: 356119464, &quot;nlwnnxs&quot;: true, &quot;jjstbhtj&quot;: false &#125; &#125;, &quot;xiuynavf&quot;: &#123; &quot;kwtdk&quot;: &quot;8oJ&quot;, &quot;podziuz&quot;: 375736466, &quot;ejphlaxpuhs&quot;: &#123; &quot;tupoha&quot;: 1145829112.756852, &quot;rrxoc&quot;: &quot;M1g&quot;, &quot;awawdsvhfx&quot;: &quot;3Z1QbWsL1&quot;, &quot;dpfpvkhjl&quot;: true, &quot;rtxhlsy&quot;: &quot;v5J5o&quot;, &quot;nymoxuniym&quot;: &quot;i-brgNwzZ&quot; &#125; &#125; &#125;, &quot;tLyGkQ-Eoi6T2cJB7Xda&quot;, true, &quot;Nn2VG&quot;, &#123; &quot;cnngwkrou&quot;: 1906760023, &quot;obbml&quot;: &quot;D&quot;, &quot;mtjwjmkx&quot;: &quot;v14nSf6T42q0lmh6z3kb&quot;, &quot;vgldrup&quot;: &#123; &quot;apdsl&quot;: &#123; &quot;cptovk&quot;: &quot;lPBzNP52ZPbhc&quot;, &quot;ltgqrriay&quot;: &quot;fsHOoDK0f&quot;, &quot;ikxknaj&quot;: true, &quot;bmjogxhkkxk&quot;: true, &quot;uwqdjqnav&quot;: true, &quot;xkytyvkwmiyq&quot;: 1754520275.5236428, &quot;rkdstbva&quot;: false, &quot;awdnbxjxt&quot;: &quot;VSRA_3&quot; &#125;, &quot;ynqhemulse&quot;: &quot;umYn&quot;, &quot;qhsfmpmetk&quot;: &quot;6TokpvN&quot;, &quot;tzfmbghtlc&quot;: [ true, &quot;KMX4M8fY6O&quot;, 912635995.4035354, true, false, true ], &quot;kkdozofvzevy&quot;: [ 1193743730 ], &quot;yzownwaqfbrx&quot;: -891364967, &quot;ylohxwnsq&quot;: &#123; &quot;okfnsbkeg&quot;: -1782592720, &quot;yniav&quot;: &quot;P&quot;, &quot;qdkwvlxbvfw&quot;: &quot;FiU2lFJqWwQ9Op&quot;, &quot;hrztvz&quot;: &quot;7xY3WBSUfs7_0uynou07&quot;, &quot;nbrkjlfhdbdo&quot;: true, &quot;orlvxr&quot;: -1627651305, &quot;umqrwzylbzu&quot;: -1833674567, &quot;vsdoe&quot;: false &#125;, &quot;mmvpuubkse&quot;: false &#125;, &quot;cefldtbrdj&quot;: [ [ 1455050059, -448469309, &quot;P4BgnDkD6U-&quot;, &quot;m38dpawqlpKyiJ5&quot;, true, -1822886985.4121122, 1040331193, 298184823.61547893, &quot;1_J-itpqwMespEFs-EV&quot; ], &quot;kuu_GrP6OV4&quot;, &quot;0SWlGwTC&quot;, false, true, &#123; &quot;zitgiefkard&quot;: -988266938.0552318, &quot;bnnjkcdsvxjx&quot;: 1255201311, &quot;jyzfcqc&quot;: &quot;1NbeYTo-HftdWt1ixL&quot;, &quot;yliigpfrr&quot;: false, &quot;vtrgjhtqkmqd&quot;: false, &quot;knbkxniy&quot;: &quot;L1shmB3uWym&quot;, &quot;yzzrhu&quot;: -603055240.7698349, &quot;iqjdp&quot;: false &#125;, &#123; &quot;bncwf&quot;: false, &quot;uxaaythjsjh&quot;: -150293170.71045366, &quot;kdqlfmbvfk&quot;: false, &quot;baxbvtmqf&quot;: &quot;dU&quot; &#125;, [ -1713786130.764592, false, -1364927791.078211, 1387141885.5667107, &quot;oFATTbPr6cG4m6SVCD&quot;, -2009087135, 294071956 ] ] &#125;, [ true ] ], &quot;vzaicd&quot;: &#123; &quot;utpni&quot;: -16066763.353920365 &#125; &#125;, 1077396070, &quot;W01jK60jC&quot;, [ false, &#123; &quot;cbqhfqnlej&quot;: true &#125;, -827310531.2640669, &quot;7fP&quot;, 556757334.8359073, -38426244.86487788, &#123; &quot;budovqcdmn&quot;: [ [ -57389439, &#123; &quot;ptgfid&quot;: &quot;3KQB47aqHLNdaH2r&quot; &#125;, &quot;uG732oGEwMv9R0&quot;, [ &quot;Vlrl3Yr61Gh-&quot;, false, &quot;U5-Xk9nhRyONv5PTge&quot;, 1248817679, true, &quot;C42GNV-Z&quot;, true ], &quot;86ebzE_X3Iwxj4xCz&quot;, -1633033609, &#123; &quot;zbbhid&quot;: &quot;xFGm3jj-CK6Y&quot;, &quot;ibbbkfocaklk&quot;: 1249592427, &quot;bmdpltxpvqfq&quot;: -1779057643, &quot;eyoglejjgpr&quot;: -389184317, &quot;mrlyllftspd&quot;: &quot;UzZsGh&quot;, &quot;owywb&quot;: &quot;_JoBT&quot;, &quot;xyimobonl&quot;: 1070667744, &quot;fjdghnll&quot;: &quot;et8v14bi3&quot;, &quot;fdjmgcyyj&quot;: true, &quot;ygthooxnv&quot;: true &#125; ], &#123; &quot;oqjhfr&quot;: &#123; &quot;uazjlson&quot;: true, &quot;nhywesq&quot;: &quot;g-zlYY_yQ5Lda&quot; &#125;, &quot;irrlwt&quot;: -1985598547.1135154, &quot;zxofsqqem&quot;: &#123; &quot;ycozgli&quot;: &quot;ZzsK&quot;, &quot;gxwqoy&quot;: 519428523, &quot;bgamxbxp&quot;: 433974054.2914206, &quot;xqgjrkyzagd&quot;: true, &quot;wspgwktgr&quot;: false, &quot;wezmgi&quot;: &quot;90QAFOLS&quot; &#125; &#125;, &#123; &quot;bqloryrfkopi&quot;: &#123; &quot;keklzzpyjpfw&quot;: false, &quot;caqulyqmprqg&quot;: &quot;3yUgtiLM&quot;, &quot;yawwtntshwix&quot;: -1885992334, &quot;jrepeyjfumx&quot;: -1224180243.4474022, &quot;armowm&quot;: true, &quot;iqxxgv&quot;: &quot;v&quot;, &quot;onnbzzejd&quot;: -189138775 &#125;, &quot;hjorfosbd&quot;: &#123; &quot;ntyjc&quot;: &quot;C5fW7ln8uCB5S&quot;, &quot;bwqryc&quot;: false, &quot;evjqaue&quot;: false, &quot;ygurkh&quot;: &quot;HWvyD3MbgFn&quot;, &quot;ksxml&quot;: 1021137441.607147, &quot;vahxtquwlsen&quot;: -470432463.3972441, &quot;yrredhr&quot;: &quot;61rWHK6J2GPYcEK&quot;, &quot;vheen&quot;: true &#125;, &quot;fsdarrsesige&quot;: [ &quot;O&quot;, 1182592021, &quot;O&quot; ], &quot;ayfsyc&quot;: &#123; &quot;lenwzltc&quot;: -941073757 &#125; &#125;, false ], &quot;hplplqcdzqal&quot;: &#123; &quot;gbijemwbxet&quot;: [ &quot;NnLDAsNaOO08kxv&quot;, [ false, 556692365, -1416645037 ], [ true, &quot;hr6QhVZ&quot;, 268262946.22777912, 2104821327, &quot;CGZ8j&quot; ], [ 1210770221, &quot;Z2gkUpO&quot;, true, &quot;nOfq903P_NL&quot; ], [ &quot;nSCiLKZc&quot;, -1198740564.2583942, &quot;Y&quot;, &quot;hf&quot;, false, 1251575349, true, true, 1449034.7918200144 ], false ], &quot;xpkdqexgmlbv&quot;: &#123; &quot;soefhqpc&quot;: &#123; &quot;kzhigadt&quot;: &quot;BuuYMytN9Vl&quot;, &quot;wbeqlxjnzqzn&quot;: 165079385.2466143, &quot;ohgkwkszcq&quot;: false, &quot;clibxgxoitue&quot;: true, &quot;bhwidjch&quot;: &quot;C2T76Ss&quot; &#125;, &quot;utsskzgim&quot;: 2076412583.3556616, &quot;yqqpyfzm&quot;: &quot;RUhRgiLHiVXFSn113hO1&quot;, &quot;mkirpkxz&quot;: &#123; &quot;uhwvbp&quot;: false, &quot;nvsowsqvazhv&quot;: true, &quot;djcyw&quot;: -1070645977.4664952, &quot;ggkpn&quot;: &quot;1Omp&quot;, &quot;gplkwtfkq&quot;: &quot;NiHeP&quot;, &quot;hodqhwq&quot;: &quot;p75YxCkV89C_zZA1t9&quot;, &quot;sujduaz&quot;: false, &quot;kevghj&quot;: &quot;7uhNFz&quot; &#125;, &quot;ngxqmczniy&quot;: [ false, false, true, false, false, 146693885, &quot;ztTgI6YI5CM&quot; ] &#125;, &quot;plaorotrach&quot;: [ &quot;GquEj0UXV-5zyVEFhR6&quot;, false, &quot;7YEyqych3SigTp&quot;, &quot;F1mjfZPyz1vMBdC_&quot;, &quot;S1G1jDcK6dkJkHK&quot;, [ true, -416776065.2971898, &quot;cVD-JpAJLz91jiqXC&quot;, false, 1375847198, &quot;xZosw&quot;, &quot;i74upCH&quot;, true, false, &quot;rccDj6U40rAbCu1K8k&quot; ], [ true, 1587478821, &quot;c2E08p0CT9QMfdpJtE&quot;, false, 206551355.82749113 ], -1108683454 ], &quot;lmuow&quot;: &quot;_tshJZHGp_azi1Ot&quot;, &quot;ofrqnleqtm&quot;: [ false, &#123; &quot;wephmoqcw&quot;: false, &quot;reybjf&quot;: false, &quot;xgajeqpnamr&quot;: false, &quot;jvccgqcd&quot;: false, &quot;waavqwacntn&quot;: -1152169988.9064116, &quot;cjbrq&quot;: &quot;KX3sEswYrm&quot;, &quot;nqpcnsmlnse&quot;: true, &quot;vizoyko&quot;: false, &quot;qneuvptfx&quot;: &quot;oHNt_fdTX_sq&quot; &#125;, true, &#123; &quot;wwgumlmzr&quot;: &quot;Tx_&quot;, &quot;ojonzmrmghm&quot;: 568490381, &quot;uibhwv&quot;: true, &quot;mbjvlqre&quot;: &quot;oAZbEvm8a3J-eL&quot;, &quot;fbvzekz&quot;: &quot;IeDqqze7jm1Ko&quot;, &quot;wakjzfkeyr&quot;: false &#125; ], &quot;whouqjsku&quot;: &#123; &quot;hmtixwqygp&quot;: [ -1284831823.7414596, false, 400621272, -751044386, false ], &quot;dgccfywdt&quot;: &quot;g1S1sjeF-GJJdoqqfpA&quot;, &quot;cmxaigbl&quot;: 1365826255.5225384, &quot;dnzrxegamrpl&quot;: &#123; &quot;cqgefysqdtrk&quot;: true, &quot;yrhlat&quot;: &quot;6tnStQxFjfd&quot;, &quot;yejgbnbpq&quot;: false, &quot;kozzouxqi&quot;: false &#125;, &quot;kglgtplx&quot;: false, &quot;seonfkw&quot;: false, &quot;guyyksbay&quot;: [ 1670129075.3426, &quot;SjCzrprT&quot;, -1735322052, true, -674811093.686591, false, false ] &#125;, &quot;vyatenhz&quot;: true, &quot;egfslqsy&quot;: 1718713030.6296952, &quot;gpeskzqkz&quot;: [ [ -60156127.02353801, -1156142254, &quot;258RagfH&quot;, false, 222823135, false, &quot;T88c&quot;, true ], &quot;ply1DGEuxKcisHgG&quot;, false, false, 21823195, false, [ &quot;mpmsHwI0C&quot;, true, &quot;mQdAC2tJ8OzhRoiAez&quot;, &quot;3atqInQvo7hoY&quot;, -1091083781.7179978, false, false ], false, true, 1220906796 ], &quot;nnoaolusj&quot;: &#123; &quot;mcbylytfda&quot;: &quot;2mI3JlkNuVrmxIz&quot;, &quot;nfcyklbted&quot;: &#123; &quot;ogxsirswpu&quot;: &quot;Tpo&quot;, &quot;tldslvl&quot;: false, &quot;kfmiizr&quot;: &quot;THN9fpWfs3cGj8J&quot;, &quot;oxlqyrrqatz&quot;: true, &quot;fdmyjtklvcce&quot;: false, &quot;utdlym&quot;: 1130696574, &quot;ogprpoxdc&quot;: 1314471890.0004387, &quot;xehhv&quot;: -1823524873.949718, &quot;xjbyneoljr&quot;: &quot;jJoBK&quot; &#125;, &quot;melrhi&quot;: true, &quot;szdti&quot;: &quot;YzWZl0iPDU7D0l2-9VQM&quot; &#125; &#125;, &quot;uyrsyzqrjn&quot;: true, &quot;mmbabyw&quot;: [ &quot;-PDzWm_Qde4me&quot;, &#123; &quot;arobguyi&quot;: &#123; &quot;ctcwt&quot;: true, &quot;oobbpurhf&quot;: false, &quot;oywkrncphnqt&quot;: true, &quot;jicrxebpkf&quot;: false, &quot;osjwsdfkgwwd&quot;: &quot;FjKsCAjSrUyBMU&quot;, &quot;ugcdu&quot;: -1751628122.3069346, &quot;kzqfmwz&quot;: 392802621.353155, &quot;urckxyz&quot;: false, &quot;rtcxhdr&quot;: true, &quot;cxozzzrwu&quot;: 690611330 &#125; &#125;, &#123; &quot;uvhztpycb&quot;: [ false, -304433342.9855737, -1986253929.8862252, -73607687, &quot;kyzqt87osn5hyQR9HeRX&quot; ], &quot;xgekwkvfayup&quot;: &#123; &quot;xvyorm&quot;: 2045045163.3581913, &quot;pqfrmhjvi&quot;: false, &quot;kswvahn&quot;: 1089734225, &quot;vuktsgzg&quot;: false, &quot;mchuzoercdh&quot;: true, &quot;rjjnnxcyx&quot;: true, &quot;spthk&quot;: &quot;Q2YZx&quot;, &quot;xorbqrjmf&quot;: true &#125; &#125;, [ false, false, true, -475759322.3544179, [ &quot;HI9Qx3IdOP7QQWig&quot;, 1387099373.9838986, &quot;5mHxhkqMcMa5Q&quot; ], &quot;CEytjHH8sxNC4w&quot;, &#123; &quot;gdfuiagfdypl&quot;: -910792105.0630586, &quot;mpjeyhtuvaag&quot;: -1318142963, &quot;owngfvjsz&quot;: -469788864.5288309 &#125;, [ &quot;f8ImiaW&quot;, false, 1853180246 ], [ &quot;IzdYW2uFt7TDjo&quot;, true, -573205362, &quot;4OH3nWRKg3&quot;, false, &quot;dsMxjYE6I&quot;, &quot;52LP3_fwGITbgW4&quot; ], &#123; &quot;ebhsaxl&quot;: -1913244253.2224777, &quot;tliyeaa&quot;: -1240143201.3531358 &#125; ], &#123; &quot;wnvgkpsvx&quot;: &quot;gUrxc&quot;, &quot;tyocbzcpard&quot;: &quot;eyts&quot;, &quot;mepfh&quot;: &quot;nNc1zmeZXO&quot;, &quot;fskaz&quot;: &quot;3kDCe2pvi0kpLbAz56R6&quot;, &quot;zpevom&quot;: [ -1996751885.9953284, &quot;I3hQ3kRNps&quot;, false, &quot;FvFqU2lxUe-&quot;, &quot;n7jGEK177falIk&quot;, -1470190804, false, &quot;fm1uO&quot; ], &quot;tjvxbeszrqr&quot;: true &#125;, [ [ 1740178023, &quot;uWgDlekQPurMw1O&quot;, false ], [ &quot;q2B9IP6e&quot;, -81926863.60805717, false, true, &quot;6TDt&quot;, -80356296.84130147, false ], &#123; &quot;wowwxpshbqzv&quot;: false, &quot;koosyguunza&quot;: &quot;M3TN9D8_&quot;, &quot;chqfpqsjxy&quot;: false, &quot;bktornpi&quot;: true, &quot;rphogpy&quot;: &quot;x9&quot;, &quot;haujyaucxzei&quot;: false, &quot;iwlcdg&quot;: -610753749.6952323, &quot;kceybqeah&quot;: -1853805624.88945, &quot;ybeyu&quot;: 1699710361.70739 &#125;, &#123; &quot;gnstbh&quot;: -737756022, &quot;pilzbxk&quot;: 664143014 &#125; ], false, [ false, false, &quot;pLtn&quot;, true, false, &#123; &quot;gpmostloq&quot;: -865152099, &quot;zafrmnmghkl&quot;: 218863841, &quot;cmtsvjrvakan&quot;: -162135924, &quot;muepjxz&quot;: &quot;sFfBgE8Bx0cobPV&quot;, &quot;drcmqklwgct&quot;: false, &quot;zmpsnm&quot;: false, &quot;eauvud&quot;: false, &quot;ryfwqqlmmd&quot;: false, &quot;kwnoppbpnsmb&quot;: &quot;Mmjmd&quot; &#125;, [ false, &quot;92uA7ai&quot;, &quot;r&quot; ] ] ], &quot;sayfqsfq&quot;: false, &quot;fnbjr&quot;: &quot;QK6Hr70vh&quot; &#125;, false, true ], -472853662.4448299, true ], &quot;cxkhqrw&quot;: &quot;0nGMZPXIra&quot; &#125;, &quot;imfuplhgiwhk&quot;: &#123; &quot;qjhvib&quot;: &quot;8IyQoO&quot;, &quot;orsrzxgtsb&quot;: 1292823399, &quot;mbynbhot&quot;: &#123; &quot;pyuli&quot;: false, &quot;heqddbzbnyp&quot;: true, &quot;wttmwcvzviy&quot;: [ &quot;Bp&quot;, [ &#123; &quot;jnchantot&quot;: true &#125;, &#123; &quot;dkptm&quot;: 354362032, &quot;anturqnxcz&quot;: true, &quot;gzigxkct&quot;: true, &quot;olrwarm&quot;: &quot;RaRSSwTQbjZk_3&quot;, &quot;kdexbf&quot;: -1134244493, &quot;cfvjxfmer&quot;: false, &quot;fiwjnl&quot;: 439148158.9310619, &quot;etztrahkyo&quot;: &#123; &quot;gmerwjgedjjp&quot;: [ -1538417527.5285602 ], &quot;ptotwujtafjw&quot;: &quot;nGUMOZukFDWlZndwX3Px&quot;, &quot;vmtjndm&quot;: -1479864667.9845788, &quot;vmocikpz&quot;: -1287967612.8102922 &#125; &#125;, true, &#123; &quot;nxcdq&quot;: [ [ &quot;b&quot;, 656668891, &quot;DqpijPJrVDlettaC&quot;, &quot;_o&quot;, -1919447255, true ], -1617755327 ], &quot;kmdcansh&quot;: 1208614146, &quot;zdyedhs&quot;: [ &quot;D215CQQhHgeToBnY5&quot;, &quot;qpRT_ea9M2Y8dqHLB&quot; ], &quot;hepxsrse&quot;: [ [ -1942979877.238561, &quot;Ps&quot;, true, -375007148.0616856, 1954411601, false, &quot;rxdRh4Ke0Jxy_7U&quot; ], [ true, -1390161506.4010656, true, &quot;zk75J&quot;, &quot;PhGQjT9F&quot;, 1105317246, true, &quot;av2Lyc41Jin1NVTHk&quot;, 1662949484, &quot;PDpMkpvt&quot; ], [ -710870718.6919433, &quot;_MpcASWA3El_OZvl&quot;, &quot;UqwPY2G__A0ONRITdC&quot;, &quot;2AK6YQvILMYW2rgMtIR0&quot;, 46781308.50995451, -1082934575.6245272, &quot;-e&quot;, false, true ], [ false, 2134628024.4587543, true, &quot;jx8v&quot;, false, 1876930590, false, &quot;5KM2ugF9PI6J&quot; ], false, -107392713.44453588, &quot;R6VUhikWLVMZm&quot; ] &#125;, 1259697074.6462932, [ &#123; &quot;toglnt&quot;: &#123; &quot;iwopo&quot;: &quot;89251xnQhx&quot;, &quot;ktfzttpzwx&quot;: -2037447591, &quot;awabvkytkjv&quot;: &quot;YLVCGCnrkBio-tw08&quot; &#125;, &quot;iuynmtt&quot;: &quot;SjTUgd9cOctE3p&quot;, &quot;wwuur&quot;: &quot;zoHNg&quot;, &quot;naebrmmoqxy&quot;: true, &quot;crqov&quot;: &#123; &quot;rxpqw&quot;: &quot;ckVaikc&quot;, &quot;megplgvw&quot;: -2044893926, &quot;wngyaxjp&quot;: -1084465958.3196049, &quot;fwbtypgo&quot;: false, &quot;bbsev&quot;: &quot;H&quot;, &quot;ybjakrcecaq&quot;: true &#125;, &quot;onougn&quot;: false, &quot;rvnkzpn&quot;: &#123; &quot;nnhqip&quot;: &quot;kLn8_&quot;, &quot;ypjkwlj&quot;: 312424844, &quot;enlhpfmv&quot;: -1197259304.2705925, &quot;bbbwj&quot;: -2103946056.6571527, &quot;grspouef&quot;: true, &quot;lftutyui&quot;: &quot;b0PuyT&quot;, &quot;jgjmy&quot;: true &#125;, &quot;pjnyqabebgj&quot;: -132314178, &quot;ishqpf&quot;: &#123; &quot;wvakwucx&quot;: -581471498 &#125;, &quot;gzugdiaiuzbm&quot;: &quot;zXkp&quot; &#125;, false ], &quot;ndf5&quot;, [ &#123; &quot;rhhtwrmgxpm&quot;: &quot;G05e&quot;, &quot;jlvvkykv&quot;: [ &quot;u1T32x5lX8&quot;, -1723766686, &quot;YcMY-5&quot;, true ], &quot;bchwdl&quot;: [ &quot;STwyDc9UBPpgP2&quot;, 27612460.880995132, -1652795712.0669658, &quot;7&quot;, false, &quot;1&quot;, &quot;tZbb52BQiOtetF2i5DC&quot; ], &quot;rpjrt&quot;: &#123; &quot;xinthorjjycb&quot;: &quot;_OH_v&quot;, &quot;frluklvyhky&quot;: 830881421, &quot;tmhcb&quot;: &quot;mxRhLgfO95eJr8KWu&quot;, &quot;qqgub&quot;: false, &quot;lamcddumvcdj&quot;: 772457539.076735 &#125;, &quot;rwcpyksy&quot;: true, &quot;cnqrfff&quot;: -805142592 &#125;, [ [ true, true, -1162363347, &quot;KLmDqQ8JQdY_RMFU_Y6&quot;, 1178945129, 61689325 ], [ &quot;TbENO_SJGY1&quot; ], false, &quot;aTA0o&quot;, true ], -940004004.1262656, &quot;2k03aErkURB35&quot;, &#123; &quot;kknkgfju&quot;: [ &quot;laBs&quot;, &quot;vTFKxgam85NCqhAo8K&quot;, -475924513, 184668320, false ], &quot;aulnznc&quot;: 113528287, &quot;tevgjxwb&quot;: &quot;9LxCWMVXgCcMF&quot;, &quot;rtzdfm&quot;: &quot;-DmxhNABw&quot;, &quot;embamnrk&quot;: &quot;mB1O-9o&quot;, &quot;zpmgmpnwm&quot;: [ &quot;_5rVeU9QiHvDGhk&quot;, -612755838, 125373001.04389116, &quot;5mPTgVVg7Bx1&quot;, &quot;x8MHWsUH9jcGOsLRmp&quot;, -15465413.268159417 ], &quot;yrpqz&quot;: [ &quot;-LIrzGi7fqt2UB&quot;, 2033025113, &quot;yC-M1CN81KVnoca&quot;, -1106104252, -135012063.9122812, true, -413068327, &quot;H4Y4XgCeoOzeJUeQg8&quot;, false ], &quot;evzhnw&quot;: &#123; &quot;zeysamvpz&quot;: &quot;Yw21jiAggY&quot;, &quot;zyyjwubdxh&quot;: true, &quot;xkgtwplyr&quot;: -57063511, &quot;xtvbaeifqsmo&quot;: &quot;XFSdi2xc9qjBZbZ41&quot;, &quot;wnadryw&quot;: 609575955.6189022, &quot;vohkke&quot;: 582675731.4728001, &quot;ffklqfuivwt&quot;: false, &quot;ifllziw&quot;: -1177380009, &quot;ypozo&quot;: &quot;sdkhyu7jc&quot; &#125; &#125;, 478423673.68756074, &quot;B72BJ&quot;, 829828879.8784968, &#123; &quot;kgkikoha&quot;: &#123; &quot;bcwphdckdlwh&quot;: true, &quot;emvvveoys&quot;: -2030390705, &quot;xrxnryc&quot;: &quot;ebHwERrLsUWu0NxSot&quot;, &quot;hrxndfq&quot;: -790783922.0827127, &quot;wxfdmkqxpq&quot;: false, &quot;ornjg&quot;: false &#125;, &quot;cgqbbt&quot;: -1518335512.8801334, &quot;quhfxhzsk&quot;: [ &quot;HzczrLh&quot; ] &#125; ] ], false ], &quot;zcsetlfwxlnx&quot;: [ 1036878338.6690581, false, false, true, &quot;5aP1eI&quot;, [ false, true, [ [ &quot;F&quot;, 1532511229.641169, &#123; &quot;wizbakib&quot;: false, &quot;xgaoizblpzr&quot;: &quot;eMbJwLH2nI6&quot;, &quot;gpwxicl&quot;: false, &quot;xelico&quot;: &quot;hHzceP4lmFNs3bTE&quot;, &quot;yalkt&quot;: -203739565.87083414, &quot;bvghrpukae&quot;: 219631202.77167004, &quot;zdtumhfuj&quot;: -563301966, &quot;nquwcxwwre&quot;: 2790463.0823330586, &quot;itjqbgjahhzj&quot;: 751477177, &quot;cpzfhpj&quot;: &quot;3CC800xm4LCDxgLbr&quot; &#125;, [ true, &quot;4j342VV&quot;, -2077186047.8497515, 433417780.1889818, &quot;4q74TZD&quot; ] ], [ [ &quot;SKPf5dW&quot;, &quot;mODk2gOwrIszHbXUVHM&quot;, -979092430.6236501, false, 1298694799.159157, &quot;zadZW35S5_qot51A&quot;, false, &quot;4X1RI_EvY4PTNGer&quot;, true ], &quot;FGFpxHpdiyeRbsx&quot;, &quot;WaWEADS1sZu7kHC&quot;, &#123; &quot;iervlaz&quot;: true, &quot;cwlfmjqc&quot;: false, &quot;mosmkbjfwxue&quot;: true &#125;, &#123; &quot;gunkrlk&quot;: false &#125;, &#123; &quot;bdbydt&quot;: 810975758.0239561, &quot;kkebtjhi&quot;: &quot;Qc3_YAYA&quot;, &quot;zwnpqeuv&quot;: -1597741863.6257539, &quot;ipvanzyzegfo&quot;: true, &quot;pizmypnb&quot;: &quot;-Y8iN&quot;, &quot;ddyzzitpecyl&quot;: false &#125;, &#123; &quot;evguirlfrw&quot;: 6902238, &quot;sniasfbuy&quot;: -1886034340, &quot;poagxgzze&quot;: true, &quot;vrgtwdhwdm&quot;: false, &quot;itjifqxs&quot;: false, &quot;tqgkcj&quot;: -1454367790.0141711, &quot;utvdeilhkia&quot;: false, &quot;aznyl&quot;: -794902496.7805009 &#125;, &quot;HA&quot;, &quot;64mLzi-irAC9&quot;, &#123; &quot;zcogirhp&quot;: false, &quot;qcgciuaug&quot;: false, &quot;fbyzzeeljlgx&quot;: -1660114409, &quot;jtubxxouxm&quot;: &quot;ciEnWlu_nOQq2ST8DDNb&quot;, &quot;czufm&quot;: 1410826284, &quot;cmojidpsux&quot;: true, &quot;bsuiz&quot;: false, &quot;gwlwg&quot;: &quot;fT2VuDcYd&quot;, &quot;utwalathu&quot;: false &#125; ], true ], &quot;16Xuyxsvo98Xpr5&quot;, [ &#123; &quot;agatfvvzlnqd&quot;: false &#125;, &quot;ihf&quot;, &quot;C7ajidJwC1k&quot; ], &quot;P&quot;, true, &quot;2PP&quot;, -1758883893.530147, &#123; &quot;gqjvcqbz&quot;: &#123; &quot;ledqsixls&quot;: false, &quot;cpordcfft&quot;: &#123; &quot;qcvueckjkg&quot;: -1912923674.4505131, &quot;cntoptj&quot;: 1246388686.2979558, &quot;nzzdv&quot;: 1964609976.9675019, &quot;mqlyzhf&quot;: &quot;BznBrvdJrDfyk4iIlKf&quot;, &quot;ybnew&quot;: false, &quot;aegjv&quot;: &quot;b5FnWeCt&quot;, &quot;ertceb&quot;: false, &quot;lfctgivmgmjq&quot;: false, &quot;niyup&quot;: -1986763492 &#125;, &quot;tpoczjrid&quot;: &quot;3uunbkskIBR79N7&quot;, &quot;vakbs&quot;: false &#125; &#125; ] ], &quot;wlxgxjojeegi&quot;: &quot;7TusG-XZok2HFplW5hqC&quot;, &quot;dfmsypja&quot;: [ [ &quot;h&quot;, 263274239, &#123; &quot;mghfubmhcivc&quot;: &quot;YtZ2vi82RDul4-Mw0&quot;, &quot;vfanmgmrp&quot;: 442896172.497882, &quot;jkugariehmb&quot;: [ &#123; &quot;nmxvdp&quot;: true, &quot;gltsojvostq&quot;: 1550063322.9341767, &quot;invhrepwod&quot;: false, &quot;mwentmmhww&quot;: false, &quot;kqcozqgrrcno&quot;: &quot;Zrpy&quot; &#125;, false, false, -1971785328.170233, -2071173730.4198024, &#123; &quot;jrqeblzy&quot;: false, &quot;fcjfyfz&quot;: 785019292, &quot;yzatqgib&quot;: &quot;BWzF&quot;, &quot;uygewmjxnm&quot;: &quot;uVyjIP&quot;, &quot;gxmkxd&quot;: -860976350.3925823, &quot;fxbihpq&quot;: &quot;JsS&quot;, &quot;phkkf&quot;: false &#125; ], &quot;kaaohawstio&quot;: 201298083, &quot;goicss&quot;: -653255185 &#125;, true, true, true, &quot;4bil-&quot; ], &#123; &quot;zsdsrbwbe&quot;: &#123; &quot;xsrmhf&quot;: 1683366574.3039901, &quot;rfhuzwc&quot;: true, &quot;ovbwegarxku&quot;: 2125173230.9514544, &quot;gwjpcxtzzwu&quot;: false, &quot;abjxgq&quot;: &quot;RqF41LrVzx0-&quot;, &quot;hkrbjn&quot;: &#123; &quot;lmnbomjzsn&quot;: false, &quot;chdalnkjiyw&quot;: [ &quot;ksvYQbXJI&quot;, true, &quot;p4oZyxWjj0la&quot;, false ], &quot;jhanewllpua&quot;: &quot;RVpCArjzU&quot;, &quot;vpkbunqug&quot;: &quot;s6-NMf5XTbee6ffRz&quot;, &quot;egmmsb&quot;: &#123; &quot;erhzsjw&quot;: &quot;y9xYHj&quot; &#125; &#125;, &quot;pettg&quot;: 993396776.5461912 &#125; &#125;, &quot;m6&quot; ] &#125; &#125;, &quot;muqqk&quot;: &quot;hlvXeAS56cq2Tse9xWFO&quot;, &quot;ceuamw&quot;: 1524060976 &#125; &#125;, &quot;iuzdaqhynbn&quot;: -370371371 &#125; 可以看到JSON已经被格式化了。 我们还可以修改输入为一个不合法的JSON，例如 &#123; &quot;name&quot;: &quot;Ray&quot;, &quot;age&quot;: data &#125; 解析上面的数据可以得到报错信息如下，即data字符串是不合法的，错误位于文件的第3行第9列 failed: token recognition error at: &#39;d&#39; at src\\main\\resources\\json\\data.json:3:9 参考ANTLR4规则Java代码","categories":[],"tags":[{"name":"词法分析","slug":"词法分析","permalink":"https://www.nosuchfield.com/tags/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"},{"name":"语法分析","slug":"语法分析","permalink":"https://www.nosuchfield.com/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"编译器","slug":"编译器","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"},{"name":"ANTLR","slug":"ANTLR","permalink":"https://www.nosuchfield.com/tags/ANTLR/"}]},{"title":"ANTLR4从入门到实践","slug":"ANTLR4-from-Beginning-to-Practice","date":"2023-08-26T23:11:20.000Z","updated":"2025-08-22T15:42:13.329Z","comments":true,"path":"2023/08/26/ANTLR4-from-Beginning-to-Practice/","link":"","permalink":"https://www.nosuchfield.com/2023/08/26/ANTLR4-from-Beginning-to-Practice/","excerpt":"","text":"ANTLR（ANother Tool for Language Recognition）是一个强大的解析器生成器，用于读取、处理、执行或翻译结构化文本或二进制文档。它被广泛用于构建语言、工具和框架。ANTLR根据语法定义生成解析器，解析器可以构建和遍历解析树。 安装以Linux系统为例，我们首先安装Java17 ~ java -version java version &quot;17.0.6&quot; 2023-01-17 LTS Java(TM) SE Runtime Environment (build 17.0.6+9-LTS-190) Java HotSpot(TM) 64-Bit Server VM (build 17.0.6+9-LTS-190, mixed mode, sharing) 随后我们下载antlr4的完整依赖包 wget https://www.antlr.org/download/antlr-4.13.0-complete.jar 并把依赖包添加到Java的CLASSPATH中，将以下命令添加到~/.zshrc文件中 export CLASSPATH=&quot;/home/raymond/Desktop/antlr4/antlr-4.13.0-complete.jar:$CLASSPATH&quot; 之后我们就可以使用antlr4的Tool和TestRig了 ~ java org.antlr.v4.Tool ANTLR Parser Generator Version 4.13.0 -o ___ specify output directory where all output is generated -lib ___ specify location of grammars, tokens files -atn generate rule augmented transition network diagrams -encoding ___ specify grammar file encoding; e.g., euc-jp -message-format ___ specify output style for messages in antlr, gnu, vs2005 -long-messages show exception details when available for errors and warnings -listener generate parse tree listener (default) -no-listener don&#39;t generate parse tree listener -visitor generate parse tree visitor -no-visitor don&#39;t generate parse tree visitor (default) -package ___ specify a package/namespace for the generated code -depend generate file dependencies -D&lt;option&gt;=value set/override a grammar-level option -Werror treat warnings as errors -XdbgST launch StringTemplate visualizer on generated code -XdbgSTWait wait for STViz to close before continuing -Xforce-atn use the ATN simulator for all predictions -Xlog dump lots of logging info to antlr-timestamp.log -Xexact-output-dir all output goes into -o dir regardless of paths/package ~ java org.antlr.v4.gui.TestRig java org.antlr.v4.gui.TestRig GrammarName startRuleName [-tokens] [-tree] [-gui] [-ps file.ps] [-encoding encodingname] [-trace] [-diagnostics] [-SLL] [input-filename(s)] Use startRuleName=&#39;tokens&#39; if GrammarName is a lexer grammar. Omitting input-filename makes rig read from stdin. 可以在~/.zshrc中添加如下别名 alias antlr4=&#39;java org.antlr.v4.Tool&#39; alias grun=&#39;java org.antlr.v4.gui.TestRig&#39; 后面就可以直接使用antlr4和grun命令了 一个简单的例子我们从一个最简单的例子来看antlr4，创建一个名为Hello.g4的文件并输入如下内容 12345grammar Hello; // 语法名称，必须要和文件名称一样r : &#x27;hello&#x27; ID ; // 表示匹配字符串hello和ID这个token，语法名称用小写字母定义ID : [a-z]+ ; // ID这个token的定义只允许小写字母，词法名称用大写字母定义WS : [ \\t\\r\\n]+ -&gt; skip ; // 忽略一些字符 随后执行antlr4 Hello.g4 -o code命令将语法文件转化为Java的代码，具体生成的文件如下 HelloBaseListener.java Hello.interp HelloLexer.interp HelloLexer.java HelloLexer.tokens HelloListener.java HelloParser.java Hello.tokens 之后执行命令javac *.java将所有的Java代码进行编译，编译完了之后执行命令grun Hello r -tree并输入相关文本内容，之后输入EOF（Linux上面是Ctrl + D）可以得到解析结果 ➜ grun Hello r -tree hello antlr &lt;EOF&gt; (r hello antlr) 其中Hello是语法文件的名称，r则是语法的名称，-tree表示以lisp语法展示语法，我们也可以使用-gui选项展示语法树。 Visual Studio Code提供了antlr4的插件，可以方便的进行语法高亮和格式化等操作。IntelliJ Idea也提供了插件，具有快速生成代码、设置生成代码的参数以及查看语法树等功能。 使用antlr4构建一个计算器首先我们创建一个Calc.g4文件，具体内容如下 123456789101112131415161718192021222324grammar Calc; // 语法的名称，要和文件名称一致calc: (expr)* EOF; // 一个或多个表达式expr: BRACKET_L expr BRACKET_R // 圆括号 | (ADD | SUB)? (NUMBER | PERCENT_NUMBER) // 正负数字和百分数 | expr (MUL | DIV) expr // 乘除法 | expr (ADD | SUB) expr; // 加减法PERCENT_NUMBER: NUMBER PERCENT; // 百分数NUMBER: DIGIT (POINT DIGIT)?; // 小数DIGIT: [0-9]+; // 数字BRACKET_L: &#x27;(&#x27;; // 左括号BRACKET_R: &#x27;)&#x27;; // 右括号ADD: &#x27;+&#x27;;SUB: &#x27;-&#x27;;MUL: &#x27;*&#x27;;DIV: &#x27;/&#x27;;PERCENT: &#x27;%&#x27;;POINT: &#x27;.&#x27;;WS: [ \\t\\r\\n]+ -&gt; skip; // 跳过空格换行等字符 执行命令antlr4 Calc.g4 -o code来生成代码，并将生成的代码放到code文件夹中。进入code文件夹，执行javac *.java命令编译代码。编译完代码之后，就可以执行测试程序了 1234567891011121314151617181920212223➜ grun Calc calc -tree1 + 2 * (3 + 4) - 5 / 6 (calc (expr (expr (expr 1) + (expr (expr 2) * (expr ( (expr (expr 3) + (expr 4)) )))) - (expr (expr 5) / (expr 6))) &lt;EOF&gt;)➜ grun Calc calc -tokens1 + 2 * (3 + 4) - 5 / 6 [@0,0:0=&#x27;1&#x27;,&lt;NUMBER&gt;,1:0][@1,2:2=&#x27;+&#x27;,&lt;&#x27;+&#x27;&gt;,1:2][@2,4:4=&#x27;2&#x27;,&lt;NUMBER&gt;,1:4][@3,6:6=&#x27;*&#x27;,&lt;&#x27;*&#x27;&gt;,1:6][@4,8:8=&#x27;(&#x27;,&lt;&#x27;(&#x27;&gt;,1:8][@5,9:9=&#x27;3&#x27;,&lt;NUMBER&gt;,1:9][@6,11:11=&#x27;+&#x27;,&lt;&#x27;+&#x27;&gt;,1:11][@7,13:13=&#x27;4&#x27;,&lt;NUMBER&gt;,1:13][@8,14:14=&#x27;)&#x27;,&lt;&#x27;)&#x27;&gt;,1:14][@9,16:16=&#x27;-&#x27;,&lt;&#x27;-&#x27;&gt;,1:16][@10,18:18=&#x27;5&#x27;,&lt;NUMBER&gt;,1:18][@11,20:20=&#x27;/&#x27;,&lt;&#x27;/&#x27;&gt;,1:20][@12,22:22=&#x27;6&#x27;,&lt;NUMBER&gt;,1:22][@13,31:30=&#x27;&lt;EOF&gt;&#x27;,&lt;EOF&gt;,2:0]➜ grun Calc calc -gui1 + 2 * (3 + 4) - 5 / 6 第一个命令是生成Lisp风格的语法树，第二个命令是查看相应的token，第三个命令生成的语法树如下所示 通过Java代码调用生成的Lexer和Parser还是以上面的例子为例，这次我们把词法分析和语法分析的内容分开来，分别创建CalcLexerRules.g4和Calc.g4文件，它们的内容分别如下 CalcLexerRules.g4 12345678910111213141516lexer grammar CalcLexerRules;PERCENT_NUMBER: NUMBER PERCENT;NUMBER: DIGIT (POINT DIGIT)?;DIGIT: [0-9]+;BRACKET_L: &#x27;(&#x27;;BRACKET_R: &#x27;)&#x27;;ADD: &#x27;+&#x27;;SUB: &#x27;-&#x27;;MUL: &#x27;*&#x27;;DIV: &#x27;/&#x27;;PERCENT: &#x27;%&#x27;;POINT: &#x27;.&#x27;;WS: [ \\t\\r\\n]+ -&gt; skip; Calc.g4 12345678910grammar Calc;import CalcLexerRules; // 引入CalcLexerRules的词法规则calc: (expr)* EOF;expr: BRACKET_L expr BRACKET_R | (ADD | SUB)? (NUMBER | PERCENT_NUMBER) | expr (MUL | DIV) expr | expr (ADD | SUB) expr; 创建这两个文件之后，执行命令antlr4 Calc.g4 -o code生成代码，antlr会自动把CalcLexerRules.g4的内容引入进来。在生成代码的code文件夹下创建Java文件CalcTest.java，并使用Java代码调用生成的Lexer和Parser类中的方法 CalcTest.java 12345678910111213import org.antlr.v4.runtime.CharStreams;import org.antlr.v4.runtime.CommonTokenStream;import org.antlr.v4.runtime.tree.ParseTree;public class CalcTest &#123; public static void main(String[] args) throws Exception &#123; CalcLexer lexer = new CalcLexer(CharStreams.fromString(&quot;1 + 2 * (3 + 4) - 5 / 6&quot;)); CommonTokenStream tokens = new CommonTokenStream(lexer); CalcParser parser = new CalcParser(tokens); ParseTree tree = parser.calc(); System.out.println(tree.toStringTree(parser)); &#125;&#125; 添加了如上的类之后，执行命令javac *.java编译源码文件，之后执行命令java CalcTest来运行Java代码，得到结果如下 (calc (expr (expr (expr 1) + (expr (expr 2) * (expr ( (expr (expr 3) + (expr 4)) )))) - (expr (expr 5) / (expr 6))) &lt;EOF&gt;) 运行结果和上面的grun的测试结果是一致的。 通过Visitor访问代码上面我们使用Java代码调用了CalcLexer和CalcParser类，接下来我们实现一个Visitor，通过Visitor来访问我们所需要访问的AST节点，并执行计算器的计算功能。 这里我们使用Idea的ANTLR v4插件来生成代码，上面的词法文件CalcLexerRules.g4不需要任何改变，而语法文件Calc.g4修改如下 12345678910111213grammar Calc;@header &#123;package com.nosuchfield.calc.code;&#125;import CalcLexerRules; // 引入词法分析文件calc: (expr)* EOF # calculationBlock;expr: BRACKET_L expr BRACKET_R # expressionWithBr | sign = (ADD | SUB)? num = (NUMBER | PERCENT_NUMBER) # expressionNumeric | expr op = (MUL | DIV) expr # expressionMulOrDiv | expr op = (ADD | SUB) expr # expressionAddOrSub; 这里我们添加了@header标记，表示在生成代码的时候在代码头部生成我们所需要的内容，如上就是在代码头部放上了类的package声明。 我们还在每个语法后面使用井号#设置了一个标记名称，这个名称在生成Visitor代码的时候会生成相应名称的方法。此外我们还给表达式的参数设置了名称，例如sign、num和op，这样当生成代码的时候，我们就可以用参数num取到NUMBER或者PERCENT_NUMBER的值。 我们在Calc.g4文件上右击并选择Configure ANTLR选项 之后设置代码的生成目录为src/main/java/com/nosuchfield/calc/code，并且去掉生成listener的选项，同时选择生成visitor的选项 设置好了之后我们右击Calc.g4文件并右击选择Generate ANTLR Recognizer选项，即可在com/nosuchfield/calc/code文件夹下生成相关的代码 接下来我们自定义一个继承自CalcBaseVisitor类的CalculateVisitor，具体如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104package com.nosuchfield.calc;import com.nosuchfield.calc.code.CalcBaseVisitor;import com.nosuchfield.calc.code.CalcLexer;import com.nosuchfield.calc.code.CalcParser;import org.antlr.v4.runtime.Token;import java.math.BigDecimal;import java.math.MathContext;import java.util.Objects;public class CalculateVisitor extends CalcBaseVisitor&lt;BigDecimal&gt; &#123; /** * 用于设置BigDecimal的计算精度 */ private static final MathContext MATH_CONTEXT = MathContext.DECIMAL128; /** * calc语法，包含了多个expr，返回最后一个expr的结果 */ @Override public BigDecimal visitCalculationBlock(CalcParser.CalculationBlockContext ctx) &#123; BigDecimal calcResult = null; for (CalcParser.ExprContext expr : ctx.expr()) &#123; calcResult = visit(expr); &#125; return calcResult; &#125; /** * 左右括号，取出括号中的表达式 */ @Override public BigDecimal visitExpressionWithBr(CalcParser.ExpressionWithBrContext ctx) &#123; return visit(ctx.expr()); &#125; /** * 乘除法，返回左右两个元素的计算结果 * 其中op属性是在语法文件中自定义的 */ @Override public BigDecimal visitExpressionMulOrDiv(CalcParser.ExpressionMulOrDivContext ctx) &#123; BigDecimal left = visit(ctx.expr(0)); BigDecimal right = visit(ctx.expr(1)); switch (ctx.op.getType()) &#123; case CalcParser.MUL: return left.multiply(right, MATH_CONTEXT); case CalcParser.DIV: return left.divide(right, MATH_CONTEXT); default: throw new RuntimeException(&quot;unsupported operator type&quot;); &#125; &#125; /** * 加减法，返回左右两个元素的计算结果 * 其中op属性是在语法文件中自定义的 */ @Override public BigDecimal visitExpressionAddOrSub(CalcParser.ExpressionAddOrSubContext ctx) &#123; BigDecimal left = visit(ctx.expr(0)); BigDecimal right = visit(ctx.expr(1)); switch (ctx.op.getType()) &#123; case CalcParser.ADD: return left.add(right, MATH_CONTEXT); case CalcParser.SUB: return left.subtract(right, MATH_CONTEXT); default: throw new RuntimeException(&quot;unsupported operator type&quot;); &#125; &#125; /** * 获取数值，num属性是在语法文件中定义的 * 如果数值前有负号就取负值 */ @Override public BigDecimal visitExpressionNumeric(CalcParser.ExpressionNumericContext ctx) &#123; BigDecimal numeric = numberOrPercent(ctx.num); if (Objects.nonNull(ctx.sign) &amp;&amp; ctx.sign.getType() == CalcLexer.SUB) &#123; return numeric.negate(); &#125; return numeric; &#125; /** * 将文本内容转化为BigDecimal，包含数字和百分数 */ private BigDecimal numberOrPercent(Token num) &#123; String numberStr = num.getText(); switch (num.getType()) &#123; case CalcLexer.NUMBER: return new BigDecimal(numberStr); case CalcLexer.PERCENT_NUMBER: return new BigDecimal(numberStr.substring(0, numberStr.length() - 1).trim()) .divide(BigDecimal.valueOf(100), MATH_CONTEXT); default: throw new RuntimeException(&quot;unsupported number type&quot;); &#125; &#125;&#125; 在自定义的Visitor中我们实现了计算逻辑，可以看到，这里重写了类CalcBaseVisitor的5个方法，分别对应了语法文件中的5个标记以及它们定义的名称，而属性的定义如num则对应了方法中入参的属性。以expressionNumeric语法为例，它对应的了方法visitExpressionNumeric，我们可以通过方法入参ExpressionNumericContext取到sign和num属性，之后通过这两个属性来定义数字的值。而expressionMulOrDiv语法就是通过op取到运算符，之后对两边的数字根据运算符来进行相应的计算。 有了visitor之后，我们用一个测试类来测试计算结果 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.nosuchfield.calc;import com.nosuchfield.calc.code.CalcLexer;import com.nosuchfield.calc.code.CalcParser;import org.antlr.v4.runtime.CharStream;import org.antlr.v4.runtime.CharStreams;import org.antlr.v4.runtime.CommonTokenStream;import org.junit.Test;import java.math.BigDecimal;import static junit.framework.TestCase.assertEquals;public class TestCalculate &#123; @Test public void testCalculate() &#123; String[][] sources = new String[][]&#123; &#123;&quot;1 + 2&quot;, &quot;3&quot;&#125;, &#123;&quot;3 - 2&quot;, &quot;1&quot;&#125;, &#123;&quot;2 * 3&quot;, &quot;6&quot;&#125;, &#123;&quot;6 / 3&quot;, &quot;2&quot;&#125;, &#123;&quot;6 / (1 + 2)&quot;, &quot;2&quot;&#125;, &#123;&quot;50%&quot;, &quot;0.5&quot;&#125;, &#123;&quot;100 * 30%&quot;, &quot;30.0&quot;&#125;, &#123;&quot;1 + 2 * (3 - 4) / 5&quot;, &quot;0.6&quot;&#125;, &#123;&quot;-8 + 8 * 2 - 8&quot;, &quot;0&quot;&#125; &#125;; for (String[] source : sources) &#123; String input = source[0].trim(); BigDecimal result = new BigDecimal(source[1].trim()); assertEquals(calculate(input), result); &#125; &#125; /** * 计算表达式 * * @param expression 表达式 * @return 计算的结果 */ private BigDecimal calculate(String expression) &#123; CharStream cs = CharStreams.fromString(expression); CalcLexer lexer = new CalcLexer(cs); CommonTokenStream tokens = new CommonTokenStream(lexer); CalcParser parser = new CalcParser(tokens); CalcParser.CalcContext context = parser.calc(); CalculateVisitor visitor = new CalculateVisitor(); return visitor.visit(context); &#125;&#125; 可以看到，我们构建的计算器已经成功的计算出了正确结果。 ANTLR4的工作流程在上面的例子中我们已经了解到，使用antlr4的一般流程如下 书写antlr4的词法和文法规则 使用antlr4的生成工具处理写好的规则，以生成指定语言的Lexer和Parser代码 调用生成的Lexer和Parser类，书写相应的逻辑代码，将原始输入文本转化为一个抽象语法树 使用antlr4的visitor来解析语法树，实现各种功能 实际上，除了visitor之外，antlr4还提供了另一种解析语法树方式，叫做Listener。Listener是antlr4默认解析语法树的方式，它和visitor一样都可以实现对ParseTree的解析。如果开启了visitor或listener，那么antlr4除了会生成Lexer和Parser代码，还会生成相应的Visitor和Listener代码。 Listener和Visitor区别如下注 Listener Visitor 是否访问所有节点 访问所有节点 只访问手动指定的节点 访问节点方式 通过enter和exit方法 通过visit方法 方法是否有返回值 没有返回值 有返回值 了解了Listener和Visitor的区别之后，我们可以总结出antlr4的大致工作流程如下 如上左边的点线流程代表了通过ANTLR4，将原始的.g4规则转化为Lexer、Parser、Listener和Visitor。右边的虚线流程代表了将原始的输入流通过Lexer转化为Tokens，再将Tokens通过Parser转化为语法树，最后通过Listener或Visitor遍历ParseTree得到最终结果。 解析CSV文件我们已经使用Visitor构建过一个计算器，接下来我们使用Listener实现对CSV的解析。Comma-separated values (CSV)文件是一种使用英文逗号 , 来分割字段的文件格式。文件分为多行，每行又被逗号分割为多列，第一行的内容可以当作字段的名称。下面是一个例子 省份,城市,区县,描述 江苏,南京,雨花台,外包大道 浙江,杭州,西湖,太美丽啦！西湖 ,上海,黄浦,&quot;as it says: &quot;&quot;hello, shanghai&quot;&quot;&quot; 分析这个格式，首先是一行头部，之后跟着多行数据，因此可以很容易的得出如下的语法规则 csv: hdr row*; 而头部也是一样的数据格式，因此有如下规则 hdr: row; 数据是一些由逗号分割的字段，因此可以定义数据如下。其中\\n是Mac和Linux的换行符，\\r\\n则是Windows下的换行符，因此\\r是可选的 row: field (&#39;,&#39; field)* &#39;\\r&#39;? &#39;\\n&#39;; 接下来只需要定义field的词法即可，因为换行和逗号都是CSV中的格式符号，不允许在字符中存在。因此可以很容易的得到 field: ~[\\n,\\r]+; ~代表取反，也就是除了换行和逗号之外的其它多个字符。 有了上面这个规则还不够，因为CSV标准规定了，如果有特殊字符，可以用双引号包起来。例如一个逗号如果被包含在双引号里面，那么就是一个字段的组成部分而不是字段的分隔符。如果双引号包裹的内容中又有双引号，那么需要将这个字段内部的双引号用两个双引号进行替代。因此我们还需要一个规则 field: &#39;&quot;&#39; (&#39;&quot;&quot;&#39; | ~&#39;&quot;&#39;)* &#39;&quot;&#39;; 如上规则表示用双引号包裹的内容，可以是两个双引号或者除了单个双引号之外的其它任意内容。 CSV还允许空字段 field: ; 整理如上规则，并添加包配置和相关的标记 12345678910111213grammar Csv;@header &#123;package com.nosuchfield.csv.code;&#125;csv: hdr row*;hdr: row;row: field (&#x27;,&#x27; field)* &#x27;\\r&#x27;? &#x27;\\n&#x27;;field: TEXT # text | STRING # string | # empty;TEXT: ~[\\n,\\r]+;STRING: &#x27;&quot;&#x27; (&#x27;&quot;&quot;&#x27; | ~&#x27;&quot;&#x27;)* &#x27;&quot;&#x27;; 之后配置代码生成目录为com/nosuchfield/csv/code，并去掉生成Visitor的选项，勾选生成Listener的选项，使用antlr4生成代码，生成的Java代码如下 CsvBaseListener.java CsvLexer.java CsvListener.java CsvParser.java 可以看到除了Lexer和Parser，还生成了相应的Listener代码。我们创建一个继承自CsvBaseListener的类如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687package com.nosuchfield.csv;import com.nosuchfield.csv.code.CsvBaseListener;import com.nosuchfield.csv.code.CsvParser;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class CsvListener extends CsvBaseListener &#123; /** * CSV的多行数据 */ private final List&lt;Map&lt;String, String&gt;&gt; rows = new ArrayList&lt;&gt;(); /** * CSV的头部 */ private List&lt;String&gt; header; /** * 一行CSV数据 */ private List&lt;String&gt; row; /** * 进入一行 */ @Override public void enterRow(CsvParser.RowContext ctx) &#123; // 创建一个list用来保存这一行的数据 row = new ArrayList&lt;&gt;(); &#125; /** * 离开TEXT */ @Override public void exitText(CsvParser.TextContext ctx) &#123; // 添加这一列的数据 row.add(ctx.TEXT().getText()); &#125; @Override public void exitString(CsvParser.StringContext ctx) &#123; // 获取字符 String field = ctx.STRING().getText(); // 移除头部和尾部的双引号 field = field.substring(1, field.length() - 2); // 因为CSV在双引号中用两个双引号代表单引号，这里转回来 field = field.replaceAll(&quot;\\&quot;\\&quot;&quot;, &quot;\\&quot;&quot;); row.add(field); &#125; @Override public void exitEmpty(CsvParser.EmptyContext ctx) &#123; // 添加空字符串 row.add(&quot;&quot;); &#125; /** * 离开某一行 */ @Override public void exitRow(CsvParser.RowContext ctx) &#123; if (ctx.getParent() instanceof CsvParser.HdrContext) &#123; // 如果某一行的父节点是header头部 // 那么就把header的值设置成这一行的数据 header = row; return; &#125; Map&lt;String, String&gt; data = new HashMap&lt;&gt;(); // 某一行已经遍历完毕，将这一行的数据和header组合起来，构成一个map for (int i = 0; i &lt; row.size(); i++) &#123; data.put(header.get(i), row.get(i)); &#125; // 将这一行数据添加到数据集中 rows.add(data); &#125; public List&lt;Map&lt;String, String&gt;&gt; getRows() &#123; return rows; &#125;&#125; 如上的Listener在进入行的时候初始化容器，在退出字段的时候将字段的数据保存到容器中，并在退出行的时候最终保存所有的字段。我们通过Lexer和Parser来解析上面的CSV数据，最终生成一个ParseTree，并调用Listener遍历ParseTree来解析生成的数据 123456789101112131415161718192021public void testCsv() throws IOException &#123; // 从文件中取得CSV数据流，并生成lexer CsvLexer lexer = new CsvLexer(CharStreams.fromFileName(&quot;src/main/resources/csv/city.csv&quot;)); // 根据lexer生成token CommonTokenStream tokens = new CommonTokenStream(lexer); // 将token交给parser CsvParser parser = new CsvParser(tokens); // 生成语法树 ParseTree tree = parser.csv(); // 打印语法树 System.out.println(tree.toStringTree(parser)); // 构建语法树遍历器 ParseTreeWalker parseTreeWalker = new ParseTreeWalker(); // 语法树监听器 CsvListener listener = new CsvListener(); // 遍历语法树 parseTreeWalker.walk(listener, tree); // 打印生成的结果 System.out.println(listener.getRows());&#125; 执行上面的代码得到结果如下，可以看到完整的打印出了CSV的数据 (csv (hdr (row (field 省份) , (field 城市) , (field 区县) , (field 描述) \\r \\n)) (row (field 江苏) , (field 南京) , (field 雨花台) , (field 外包大道) \\r \\n) (row (field 浙江) , (field 杭州) , (field 西湖) , (field 太美丽啦！西湖) \\r \\n) (row field , (field 上海) , (field 黄浦) , (field &quot;as it says: &quot;&quot;hello, shanghai&quot;&quot;&quot;) \\r \\n)) [&#123;省份=江苏, 描述=外包大道, 城市=南京, 区县=雨花台&#125;, &#123;省份=浙江, 描述=太美丽啦！西湖, 城市=杭州, 区县=西湖&#125;, &#123;省份=, 描述=as it says: &quot;hello, shanghai&quot;, 城市=上海, 区县=黄浦&#125;] 通过Listener构建一个计算器在上面的例子中，我们已经使用了Visitor实现了一个计算器，实际上通过Listener也可以实现相同的功能。在Visitor中我们通过方法的返回值来存储计算结果，在Listener中方法没有返回值，那我们就需要通过另一种方式来进行计算并存储计算结果 —— 栈。 还是使用上面的词法分析和语法分析规则，这次我们勾选生成Listener选项，之后再次生成代码，这次会生成CalcListener接口和CalcBaseListener类，我们实现一个继承自CalcBaseListener的类。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091public class CalculateListener extends CalcBaseListener &#123; private static final MathContext MATH_CONTEXT = MathContext.DECIMAL128; private Stack&lt;BigDecimal&gt; stack; private BigDecimal result; @Override public void enterCalculationBlock(CalcParser.CalculationBlockContext ctx) &#123; // 创建新的栈 stack = new Stack&lt;&gt;(); &#125; @Override public void exitCalculationBlock(CalcParser.CalculationBlockContext ctx) &#123; // 取出栈顶元素作为结果 result = stack.pop(); &#125; @Override public void exitExpressionMulOrDiv(CalcParser.ExpressionMulOrDivContext ctx) &#123; // 将栈顶的两个元素取出来做乘除法，将结果压回栈 BigDecimal x = stack.pop(); BigDecimal y = stack.pop(); BigDecimal z; switch (ctx.op.getType()) &#123; case CalcLexer.MUL: z = y.multiply(x, MATH_CONTEXT); break; case CalcLexer.DIV: z = y.divide(x, MATH_CONTEXT); break; default: throw new RuntimeException(&quot;unsupported operator type&quot;); &#125; stack.push(z); &#125; @Override public void exitExpressionAddOrSub(CalcParser.ExpressionAddOrSubContext ctx) &#123; // 将栈顶两个元素取出来做加减法，将结果压回栈 BigDecimal x = stack.pop(); BigDecimal y = stack.pop(); BigDecimal z; switch (ctx.op.getType()) &#123; case CalcLexer.ADD: z = y.add(x, MATH_CONTEXT); break; case CalcLexer.SUB: z = y.subtract(x, MATH_CONTEXT); break; default: throw new RuntimeException(&quot;unsupported operator type&quot;); &#125; stack.push(z); &#125; @Override public void exitExpressionNumeric(CalcParser.ExpressionNumericContext ctx) &#123; // 计算数字 BigDecimal numeric = numberOrPercent(ctx.num); if (Objects.nonNull(ctx.sign) &amp;&amp; ctx.sign.getType() == CalcLexer.SUB) &#123; numeric = numeric.negate(); &#125; stack.push(numeric); &#125; private BigDecimal numberOrPercent(Token num) &#123; String numberStr = num.getText(); switch (num.getType()) &#123; case CalcLexer.NUMBER: return new BigDecimal(numberStr); case CalcLexer.PERCENT_NUMBER: return new BigDecimal(numberStr.substring(0, numberStr.length() - 1).trim()) .divide(BigDecimal.valueOf(100), MATH_CONTEXT); default: throw new RuntimeException(&quot;unsupported number type&quot;); &#125; &#125; /** * 获取计算结果 * * @return 计算结果 */ public BigDecimal getResult() &#123; return result; &#125;&#125; 上面的代码和Visitor非常相似，区别在于针对加减法和乘除法的计算，Visitor是直接拿方法参数计算，并将结果作为返回值返回。而Listener是从栈的顶部取出两个元素进行计算，并将计算结果压回栈。 如果你了解方法调用的一般方式，就应该知道其实方法调用的一般方式也是通过栈来存储方法的入参和出参的。在方法调用前，将方法入参的值压入栈中，之后运行方法，如果方法中还有方法调用，继续将入参压入栈。当方法开始执行时，将方法的入参弹出，等到方法执行完毕，将执行完毕的方法返回值压入栈，如此往复就形成了方法调用。 因此我们可以知道，计算Visitor和Listener的逻辑基本一致，都是使用栈来存储计算的数值和计算的结果。区别在于Visitor的值是存储在当前运行线程的栈上的，如果值过多，可能因为栈空间不够导致StackOverflow错误。而Listener的值是保存在我们自定义的位于堆内存的栈数据结构上的，可以存储更多的数据内容。 完整的代码位于https://github.com/RitterHou/test-antlr4 参考ANTLR 4权威指南语法解析器ANTLR4从入门到实践从一个小例子理解Antlr4Antlr4系列（二）：实现一个计算器ANTLR 使用——以表达式语法为例Antlr4教程","categories":[],"tags":[{"name":"词法分析","slug":"词法分析","permalink":"https://www.nosuchfield.com/tags/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"},{"name":"语法分析","slug":"语法分析","permalink":"https://www.nosuchfield.com/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"编译器","slug":"编译器","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"}]},{"title":"ShardingSphere-JDBC介绍","slug":"Introduction-to-ShardingSphere-JDBC","date":"2023-06-23T18:26:45.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2023/06/23/Introduction-to-ShardingSphere-JDBC/","link":"","permalink":"https://www.nosuchfield.com/2023/06/23/Introduction-to-ShardingSphere-JDBC/","excerpt":"","text":"ShardingSphere-JDBC是一款可以将JDBC操作进行封装，然后实现数据分片、分布式事务、读写分离、高可用、数据加密和数据脱敏等功能的模块。它的原理是实现JDBC的接口，随后将收到的JDBC操作进行改写和处理，再将操作命中到真正的数据库之上。因为它实现了JDBC接口，因此现有的Java项目都可以100%兼容使用，只需要依赖ShardingSphere-JDBC并提供相关的配置即可。 JDBC数据分片的简单使用我们看一个简单的JDBC数据分片的例子，首先我们需要添加相关的maven依赖 12345678910 &lt;dependency&gt; &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt; &lt;artifactId&gt;shardingsphere-jdbc-core&lt;/artifactId&gt; &lt;version&gt;5.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt; &lt;version&gt;8.0.33&lt;/version&gt;&lt;/dependency&gt; 如上添加了shardingsphere-jdbc和mysql的依赖，shardingsphere-jdbc是项目的核心依赖，而mysql则是jdbc操作需要用到的依赖。添加了maven依赖之后我们可以先创建相关的数据库和表，创建数据库和表的sql如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET NAMES utf8 */;/*!50503 SET NAMES utf8mb4 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE=&#x27;+08:00&#x27; */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;-- 导出 ds_0 的数据库结构DROP DATABASE IF EXISTS `ds_0`;CREATE DATABASE IF NOT EXISTS `ds_0` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_0`;-- 导出 表 ds_0.t_order 结构DROP TABLE IF EXISTS `t_order`;CREATE TABLE IF NOT EXISTS `t_order` ( `id` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;用户id&#x27;, `order_id` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;订单id&#x27;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_1 的数据库结构DROP DATABASE IF EXISTS `ds_1`;CREATE DATABASE IF NOT EXISTS `ds_1` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_1`;-- 导出 表 ds_1.t_order 结构DROP TABLE IF EXISTS `t_order`;CREATE TABLE IF NOT EXISTS `t_order` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;用户id&#x27;, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;订单id&#x27;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_2 的数据库结构DROP DATABASE IF EXISTS `ds_2`;CREATE DATABASE IF NOT EXISTS `ds_2` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_2`;-- 导出 表 ds_2.t_order 结构DROP TABLE IF EXISTS `t_order`;CREATE TABLE IF NOT EXISTS `t_order` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;用户id&#x27;, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;订单id&#x27;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_3 的数据库结构DROP DATABASE IF EXISTS `ds_3`;CREATE DATABASE IF NOT EXISTS `ds_3` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_3`;-- 导出 表 ds_3.t_order 结构DROP TABLE IF EXISTS `t_order`;CREATE TABLE IF NOT EXISTS `t_order` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;用户id&#x27;, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;订单id&#x27;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_4 的数据库结构DROP DATABASE IF EXISTS `ds_4`;CREATE DATABASE IF NOT EXISTS `ds_4` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_4`;-- 导出 表 ds_4.t_order 结构DROP TABLE IF EXISTS `t_order`;CREATE TABLE IF NOT EXISTS `t_order` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;用户id&#x27;, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;订单id&#x27;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_5 的数据库结构DROP DATABASE IF EXISTS `ds_5`;CREATE DATABASE IF NOT EXISTS `ds_5` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_5`;-- 导出 表 ds_5.t_order 结构DROP TABLE IF EXISTS `t_order`;CREATE TABLE IF NOT EXISTS `t_order` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;用户id&#x27;, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;订单id&#x27;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, &#x27;system&#x27;) */;/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, &#x27;&#x27;) */;/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */; 我们会创建6个数据库，分别为ds_0到ds_5，并且会在每个数据库里面创建一个名叫t_order的表。 为了使用shardingsphere-jdbc，我们需要创建相应的jdbc连接和配置，因为shardingsphere-jdbc实现了jdbc的接口，所以我们可以像使用普通的jdbc一样使用shardingsphere-jdbc。创建shardingsphere-jdbc连接的代码如下 12Class.forName(&quot;org.apache.shardingsphere.driver.ShardingSphereDriver&quot;);Connection conn = DriverManager.getConnection(&quot;jdbc:shardingsphere:classpath:shardingsphere-config.yaml&quot;); 如上我们创建了一个shardingsphere-jdbc的连接，可以看到就是一个创建JDBC的过程。其中使用的SPI类是org.apache.shardingsphere.driver.ShardingSphereDriver，而具体的jdbcUrl则是一个文件地址shardingsphere-config.yaml，shardingsphere-jdbc的配置就保存在这个文件中。根据shardingsphere-jdbc的官方文档，其配置包含五大类： JDBC逻辑数据库名称 运行模式配置 数据源集合配置 规则集合配置 属性配置 shardingsphere-jdbc的配置支持Java代码和yaml文件，这里我们只介绍yaml文件，下面是一个简单的例子shardingsphere-config.yaml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859dataSources: ds_0: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://127.0.0.1:3306/ds_0 username: root password: 1234 ds_1: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_1 username: root password: 1234 ds_2: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://127.0.0.1:3306/ds_2 username: root password: 1234 ds_3: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_3 username: root password: 1234 ds_4: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://127.0.0.1:3306/ds_4 username: root password: 1234 ds_5: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_5 username: root password: 1234rules: - !SHARDING tables: t_order: actualDataNodes: ds_$-&gt;&#123;0..5&#125;.t_order databaseStrategy: standard: shardingColumn: id shardingAlgorithmName: testInline keyGenerateStrategy: column: id keyGeneratorName: snowflake shardingAlgorithms: testInline: type: INLINE props: algorithm-expression: ds_$-&gt;&#123;id % 6&#125; keyGenerators: snowflake: type: SNOWFLAKEprops: sql-show: true 如上配置了6个数据源分别是数据库ds_0到ds_5，props设置了打印sql语句，rules包含了表、分片算法和主键生成算法的配置。表设置中创建了一个逻辑表t_order，对应的真正数据库表是ds_0.t_order到ds_5.t_order，数据库的使用策略是通过id进行分片，分片算法是testInline，表的id字段的生成算法为snowflake。分片算法中定义了算法testInline，它使用INLINE内置方式来对id取模并和ds_进行拼接，构成数据库名。字段生成算法中定义了类型为SNOWFLAKE的字段生成算法。 有了如上配置之后，我们就可以使用shardingsphere-jdbc了。以一个数据插入操作为例，在引入了maven依赖、创建了相关的数据库和表、定义了相关的shardingsphere-jdbc配置之后，我们就可以使用上面创建的conn字段实现数据插入了。 1234567String sql = &quot;INSERT INTO t_order (`user_id`, `order_id`) VALUES (?, ?)&quot;;PreparedStatement ps = conn.prepareStatement(sql))for (int i = 0; i &lt; 20; i++) &#123; ps.setString(1, &quot;userId&quot;); ps.setString(2, &quot;orderId&quot;); ps.executeUpdate();&#125; 如上代码会创建一条数据并且随机根据snowflake算法生成一个id字段，并根据id字段的取模结果将数据保存到真正的数据库中去。更多的增删改查操作可在如下代码中看到：https://github.com/RitterHou/test-shardingsphere/tree/basic/src/main/java/com/nosuchfield/shardingsphere/data SpringBoot集成MyBatis使用shardingsphere-jdbc根据官方issue，目前shardingsphere-jdbc已经不再使用spring-boot-starter，而是直接使用jdbc实现相关功能。这种方式可以完美兼容JDBC的相关接口，因此可以简化很多已有项目的使用。 在SpringBoot中使用ShardingSphere需要设置如下的pom配置，在这里我们使用MyBatis作为ORM框架。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/parent&gt; &lt;groupId&gt;com.nosuchfield&lt;/groupId&gt; &lt;artifactId&gt;test-shardingsphere&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;java.version&gt;17&lt;/java.version&gt; &lt;maven.compiler.source&gt;$&#123;java.version&#125;&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;$&#123;java.version&#125;&lt;/maven.compiler.target&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.28&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt; &lt;artifactId&gt;shardingsphere-jdbc-core&lt;/artifactId&gt; &lt;version&gt;5.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt; &lt;version&gt;8.0.33&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;3.1.2&lt;/version&gt; &lt;configuration&gt; &lt;skipTests&gt;true&lt;/skipTests&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; SpringBoot的application.yml配置如下，这里配置的数据源驱动为ShardingSphereDriver，而url就是我们配置ShardingSphere属性的地方。除此之外，我们还配置了mybatis的SQL语句所对应xml文件的路径信息。 1234567891011spring: datasource: url: jdbc:shardingsphere:classpath:shardingsphere/config.yaml driver-class-name: org.apache.shardingsphere.driver.ShardingSphereDriver application: name: ShardingSpheremybatis: mapper-locations: classpath:mybatis/mapper/*.xml configuration: map-underscore-to-camel-case: true 接着我们配置ShardingSphere的配置信息config.yaml，这里的配置和上面简单使用的配置差不多，不再赘述了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667dataSources: ds_0: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://127.0.0.1:3306/ds_0 username: root password: 1234 ds_1: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_1 username: root password: 1234 ds_2: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://127.0.0.1:3306/ds_2 username: root password: 1234 ds_3: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_3 username: root password: 1234 ds_4: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://127.0.0.1:3306/ds_4 username: root password: 1234 ds_5: dataSourceClassName: com.zaxxer.hikari.HikariDataSource driverClassName: com.mysql.jdbc.Driver jdbcUrl: jdbc:mysql://localhost:3306/ds_5 username: root password: 1234rules: - !SHARDING tables: t_order: actualDataNodes: ds_$-&gt;&#123;0..5&#125;.t_order_$-&gt;&#123;1..2&#125; databaseStrategy: standard: shardingColumn: id shardingAlgorithmName: databaseInline tableStrategy: standard: shardingColumn: id shardingAlgorithmName: tableInline keyGenerateStrategy: column: id keyGeneratorName: snowflake shardingAlgorithms: databaseInline: type: INLINE props: algorithm-expression: ds_$-&gt;&#123;id % 6&#125; tableInline: type: INLINE props: algorithm-expression: t_order_$-&gt;&#123;id % 2 + 1&#125; keyGenerators: snowflake: type: SNOWFLAKEprops: sql-show: true 接着我们定义一个订单模型Order，订单包含了一些属性信息 12345678public class Order &#123; private String id; private String orderId; private Long userId; private BigDecimal totalPrice; private LocalDateTime createTime; private LocalDateTime updateTime;&#125; 我们根据这个模型可以定义个MyBatis的Mapper，它包含了插入、查询的操作 1234567@Mapperpublic interface OrderMapper &#123; void insert(Order order); List&lt;Order&gt; selectListByIds(@Param(&quot;idList&quot;) List&lt;Long&gt; idList); @Select(&quot;SELECT * FROM t_order&quot;) List&lt;Order&gt; getAllOrders();&#125; 其中getAllOrders方法通过注解实现了SQL的定义，而另外两个方法的SQL则在xml文件中进行实现 123456789101112131415&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.nosuchfield.shardingsphere.mapper.OrderMapper&quot;&gt; &lt;insert id=&quot;insert&quot; parameterType=&quot;com.nosuchfield.shardingsphere.model.Order&quot;&gt; INSERT INTO t_order(user_id, order_id, total_price, create_time, update_time) VALUES(#&#123;userId&#125;, #&#123;orderId&#125;, #&#123;totalPrice&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;) &lt;/insert&gt; &lt;select id=&quot;selectListByIds&quot; resultType=&quot;com.nosuchfield.shardingsphere.model.Order&quot;&gt; SELECT order_id, user_id, total_price, state FROM t_order WHERE order_id IN &lt;foreach collection=&quot;idList&quot; item=&quot;id&quot; open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt; #&#123;id&#125; &lt;/foreach&gt; &lt;/select&gt;&lt;/mapper&gt; 构建了如上的ShardingSphere和MyBatis的配置之后，我们可以创建相关的数据库和表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET NAMES utf8 */;/*!50503 SET NAMES utf8mb4 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE=&#x27;+08:00&#x27; */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;-- 导出 ds_0 的数据库结构DROP DATABASE IF EXISTS `ds_0`;CREATE DATABASE IF NOT EXISTS `ds_0` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_0`;-- 导出 表 ds_0.t_order_1 结构DROP TABLE IF EXISTS `t_order_1`;CREATE TABLE IF NOT EXISTS `t_order_1` ( `id` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 表 ds_0.t_order_2 结构DROP TABLE IF EXISTS `t_order_2`;CREATE TABLE IF NOT EXISTS `t_order_2` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_1 的数据库结构DROP DATABASE IF EXISTS `ds_1`;CREATE DATABASE IF NOT EXISTS `ds_1` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_1`;-- 导出 表 ds_1.t_order_1 结构DROP TABLE IF EXISTS `t_order_1`;CREATE TABLE IF NOT EXISTS `t_order_1` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 表 ds_1.t_order_2 结构DROP TABLE IF EXISTS `t_order_2`;CREATE TABLE IF NOT EXISTS `t_order_2` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_2 的数据库结构DROP DATABASE IF EXISTS `ds_2`;CREATE DATABASE IF NOT EXISTS `ds_2` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_2`;-- 导出 表 ds_2.t_order_1 结构DROP TABLE IF EXISTS `t_order_1`;CREATE TABLE IF NOT EXISTS `t_order_1` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 表 ds_2.t_order_2 结构DROP TABLE IF EXISTS `t_order_2`;CREATE TABLE IF NOT EXISTS `t_order_2` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_3 的数据库结构DROP DATABASE IF EXISTS `ds_3`;CREATE DATABASE IF NOT EXISTS `ds_3` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_3`;-- 导出 表 ds_3.t_order_1 结构DROP TABLE IF EXISTS `t_order_1`;CREATE TABLE IF NOT EXISTS `t_order_1` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 表 ds_3.t_order_2 结构DROP TABLE IF EXISTS `t_order_2`;CREATE TABLE IF NOT EXISTS `t_order_2` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_4 的数据库结构DROP DATABASE IF EXISTS `ds_4`;CREATE DATABASE IF NOT EXISTS `ds_4` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_4`;-- 导出 表 ds_4.t_order_1 结构DROP TABLE IF EXISTS `t_order_1`;CREATE TABLE IF NOT EXISTS `t_order_1` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 表 ds_4.t_order_2 结构DROP TABLE IF EXISTS `t_order_2`;CREATE TABLE IF NOT EXISTS `t_order_2` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 ds_5 的数据库结构DROP DATABASE IF EXISTS `ds_5`;CREATE DATABASE IF NOT EXISTS `ds_5` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */;USE `ds_5`;-- 导出 表 ds_5.t_order_1 结构DROP TABLE IF EXISTS `t_order_1`;CREATE TABLE IF NOT EXISTS `t_order_1` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;-- 导出 表 ds_5.t_order_2 结构DROP TABLE IF EXISTS `t_order_2`;CREATE TABLE IF NOT EXISTS `t_order_2` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `order_id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `user_id` bigint DEFAULT NULL, `total_price` decimal(20,6) DEFAULT NULL, `create_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#x27;订单表&#x27;;/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, &#x27;system&#x27;) */;/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, &#x27;&#x27;) */;/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */; 有了上面的数据库和表之后，我们就可以测试ShardingSphere的数据插入和查询了 123456789101112131415161718192021222324@Slf4j@RunWith(SpringRunner.class)@SpringBootTest(classes = Application.class)public class OrderMapperTest &#123; @Autowired private OrderMapper orderMapper; @Test public void testInsert() &#123; for (int i = 0; i &lt; 30; i++) &#123; Order order = new Order(); order.setOrderId(&quot;66666666666&quot;); order.setUserId(1L); order.setTotalPrice(new BigDecimal((i + 1) * 5)); order.setCreateTime(LocalDateTime.now()); order.setUpdateTime(order.getCreateTime()); this.orderMapper.insert(order); &#125; &#125; @Test public void testQueryAll() &#123; List&lt;Order&gt; orders = orderMapper.getAllOrders(); orders.forEach(order -&gt; log.info(order.toString())); &#125;&#125; 读写分离和数据脱敏上面我们测试了ShardingSphere的数据分片功能，下面我们了解一下它的读写分离和数据脱敏。我们先在ds_0、ds_1和ds_2数据库中创建表t_user 123456CREATE TABLE `t_user` ( `id` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `phone` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL, `address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; 之后我们在ShardingSphere的rules属性下添加如下配置 1234567891011121314151617181920212223242526272829- !READWRITE_SPLITTING dataSources: readwrite_ds: staticStrategy: writeDataSourceName: ds_0 readDataSourceNames: - ds_1 - ds_2 loadBalancerName: random loadBalancers: random: type: RANDOM- !MASK tables: t_user: columns: id: maskAlgorithm: md5_mask phone: maskAlgorithm: keep_first_n_last_m_mask maskAlgorithms: md5_mask: type: MD5 keep_first_n_last_m_mask: type: KEEP_FIRST_N_LAST_M props: first-n: 3 last-m: 4 replace-char: &#x27;*&#x27; 配置包含了写库ds_0和读库ds_1、ds_2的配置，读库的负载均衡策略为随机（这里需要先设置ds_1和ds_2自动同步ds_0的数据，详细过程可查看文章MySQL实现双服务器主从同步）。数据脱敏策略为对t_user的id字段进行md5脱敏，对phone字段保留前3位和后4位，剩下的部分用*替换。创建好了表和配置之后，我们设置User的model 123456public class User &#123; private String id; private String name; private String phone; private String address;&#125; 以及mapper 1234567@Mapperpublic interface UserMapper &#123; @Insert(&quot;INSERT INTO t_user(id, name, phone, address) VALUES (#&#123;id&#125;, #&#123;name&#125;, #&#123;phone&#125;, #&#123;address&#125;)&quot;) void save(User user); @Select(&quot;SELECT * FROM t_user&quot;) List&lt;User&gt; query();&#125; 之后我们测试上面的操作 123456789101112131415161718@Slf4jpublic class UserMapperTest extends BaseTest &#123; @Autowired private UserMapper userMapper; @Test public void testInsert() &#123; userMapper.save(User.builder() .id(&quot;888&quot;) .name(&quot;小明&quot;) .phone(&quot;13866688888&quot;) .address(&quot;江苏省南京市&quot;).build()); &#125; @Test public void testQuery() &#123; List&lt;User&gt; users = userMapper.query(); log.info(users.toString()); &#125;&#125; 我们先插入数据，随后到从库中查询数据，得到结果如下 ShardingSphere-SQL:73 Logic SQL: SELECT * FROM t_user ShardingSphere-SQL:73 Actual SQL: ds_1 ::: SELECT * FROM t_user com.nosuchfield.shardingsphere.UserMapperTest:30 [User(id=0a113ef6b61820daa5611c870ed8d5ee, name=小明, phone=138****8888, address=江苏省南京市)] 可以看到数据插入到了主库中，随后从从库ds_1中查询出了相关的数据，并且对id和phone字段的数据进行了脱敏操作，id字段被转化为了MD5的结果，而phone的中间4位被星号替代了。 数据加密数据加密可以保证我们存到数据库中的数据都是经过加密的，和数据脱敏刚好反过来。首先我们创建表t_member 1234CREATE TABLE `t_member` ( `name` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL, `password` varchar(50) COLLATE utf8mb4_general_ci DEFAULT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci; 随后我们配置ShardingSphere的数据加密配置 1234567891011121314151617181920- !ENCRYPT tables: t_member: columns: name: cipherColumn: name encryptorName: name_encryptor password: cipherColumn: password encryptorName: pwd_encryptor queryWithCipherColumn: true encryptors: name_encryptor: type: AES props: aes-key-value: 123abc pwd_encryptor: type: MD5 props: salt: nosuchfield 我们将表t_member的name字段使用name_encryptor的加密方式进行加密，加密之后的字段名仍然叫做name，name_encryptor的配置在encryptors中可以看到，使用了AES加密算法并设置key为123abc。类似的，password的加密方式为MD5，在计算MD5的时候加盐nosuchfield。 随后我们创建model 1234public class Member &#123; private String name; private String password;&#125; 和mapper 1234567@Mapperpublic interface MemberMapper &#123; @Insert(&quot;INSERT INTO t_member(name, password) VALUES (#&#123;name&#125;, #&#123;password&#125;)&quot;) void save(Member member); @Select(&quot;SELECT * FROM t_member&quot;) List&lt;Member&gt; query();&#125; 并测试写入和读取 12345678910111213141516@Slf4jpublic class MemberMapperTest extends BaseTest &#123; @Autowired private MemberMapper memberMapper; @Test public void testSave() &#123; memberMapper.save(Member.builder() .name(&quot;张三&quot;) .password(&quot;123456&quot;).build()); &#125; @Test public void testQuery() &#123; List&lt;Member&gt; members = memberMapper.query(); log.info(members.toString()); &#125;&#125; 在插入了数据&#123;&quot;name&quot;: &quot;张三&quot;, &quot;password&quot;: &quot;123456&quot;&#125;之后，可以到数据库中查看插入的数据如下 PS C:\\Program Files\\MySQL\\MySQL Server 8.0\\bin&gt; ./mysql -u root -p mysql&gt; select * from t_member; +--------------------------+----------------------------------+ | name | password | +--------------------------+----------------------------------+ | Fod6ouOanqNvHlTdBsx1Lw== | 47514eed77109a04ce4c9f9931d0c5ec | +--------------------------+----------------------------------+ 1 row in set (0.00 sec) 可以看到name和password在存储到数据库的时候都加密了。随后我们执行测试代码中的查询逻辑，可以看到结果如下，name又通过AES算法解密成功，而password因为使用的是MD5算法就无法解密了 com.nosuchfield.shardingsphere.MemberMapperTest:27 [Member(name=张三, password=47514eed77109a04ce4c9f9931d0c5ec)] 本节使用到的代码：https://github.com/RitterHou/test-shardingsphere 参考官方文档","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"分布式","slug":"分布式","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"ShardingSphere","slug":"ShardingSphere","permalink":"https://www.nosuchfield.com/tags/ShardingSphere/"},{"name":"分布式数据库","slug":"分布式数据库","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Maven详细介绍","slug":"Maven-Details","date":"2023-06-16T23:03:49.000Z","updated":"2025-08-22T15:42:13.343Z","comments":true,"path":"2023/06/16/Maven-Details/","link":"","permalink":"https://www.nosuchfield.com/2023/06/16/Maven-Details/","excerpt":"","text":"maven是一个声明式的Java程序构建工具，最开始人们使用make命令搭配makefile脚本实现构建过程，tomcat的作者认为make命令不跨平台且脚本编写复杂，因此发明了Ant(Another Neat Tool)。Ant解决了make命令不跨平台且脚本编写困难的问题，不过Ant依然是过程式的，每一个使用Ant的用户仍然需要编写自己所需要的一系列脚本。 maven通过定义了一系列的标准，让用户基本不再需要自己编写脚本，只需要按照maven暴露出的简单标准接口实现构建操作。这样既可以降低用户使用的复杂度，也能够定义一套统一的标准，当用户接手一个全新的项目时，可以根据已知的标准快速上手。 安装maven的安装很简单，只需要下载压缩包解压到磁盘上，并将MAVEN根目录/bin添加到PATH中方便使用mvn命令。自maven 3.5之后已经不再需要设置JAVA_HOME和M2_HOME环境变量了，同时建议使用手动安装的maven替换idea中的bundle maven。 1234567$ mvn -vApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:47+08:00)Maven home: D:\\apache-maven-3.3.9-bin\\apache-maven-3.3.9Java version: 1.8.0_291, vendor: Oracle CorporationJava home: C:\\Program Files\\Java\\jdk1.8.0_291\\jreDefault locale: en_US_US, platform encoding: GBKOS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;dos&quot; pom.xml和Make的Makefile、Ant的build.xml一样，maven的核心是pom.xml，POM（Project Object Model，项目对象模型）描述了项目的详细信息。 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;service&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;name&gt;service&lt;/name&gt; &lt;description&gt;example&lt;/description&gt;&lt;/project&gt; 例如针对如上的一个pom.xml配置文件，第一行定义了文件的版本和编码，紧接着的就是project元素，它声明了一些描述信息以方便编辑工具检查XML文件的格式。project元素包含了一些子元素，它们的含义如下 元素 含义 modelVersion POM的版本，对于Maven 2和Maven 3这个值为4.0.0 groupId 项目所属的组织 artifactId 项目在组织中的名称 version 项目的版本 name 项目的可读名称，非必须 description 项目的描述，非必须 maven提供了一个叫做archetype的插件，这个插件是一个创建maven项目的脚手架工具。我们可以使用help插件的describe goal来查看这个插件的详细信息 mvn help:describe -Dplugin=archetype 查看描述信息可以知道archetype插件有一个generate的goal，可以使用这个goal创建maven项目 mvn archetype:generate maven坐标maven将依赖通过一些属性的定义管理起来，就如同地理上确定一个位置需要经纬度一样，maven中确定一个依赖需要一下几个属性 1234&lt;groupId&gt;org.example&lt;/groupId&gt;&lt;artifactId&gt;service&lt;/artifactId&gt;&lt;version&gt;1.0.0&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt; 前三个属性必须设置，packaging是可选的，默认为jar。当maven项目需要依赖其它项目的时候，一般可以有如下配置 123456789101112131415&lt;project&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;&lt;/groupId&gt; &lt;artifactId&gt;&lt;/artifactId&gt; &lt;version&gt;&lt;/version&gt; &lt;type&gt;&lt;/type&gt; &lt;scope&gt;&lt;/scope&gt; &lt;optional&gt;&lt;/optional&gt; &lt;exclusions&gt; &lt;exclusion&gt;&lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; groupId、artifactId和version代表依赖的基本坐标，而type默认为jar。 scope（依赖范围）maven在编译项目时会使用一个classpath，在测试项目的时候会使用另一个classpath，而最终打包的结果在运行业务的时候也会使用一个自己的classpath。这对应了依赖的scope的三个选项 compile如果不指定就使用compile选项，代表编译依赖范围。使用这个配置的依赖范围的maven依赖，在编译、测试和运行的时候这个依赖都有效。例如spring-code test测试依赖范围，这些依赖只对测试classpath有效。例如JUint provided已提供依赖范围，对编译和测试classpath有效，对运行时classpath无效。例如servlet-api，运行时tomcat会提供 runtime运行时依赖范围，对测试和运行classpath有效，对编译时无效。例如JDBC驱动，代码编译的时候只需要接口，实现只在真正运行时才需要。即SPI（Service Provider Interface）机制下常用。 传递性依赖maven会对依赖的依赖进行依赖，即传递性依赖。例如A依赖B，B依赖C，则A也会依赖C。传递依赖存在优先级的概念： 如果有多个依赖引用了同一个依赖，则选择最短路径。例如 A -&gt; B -&gt; C -&gt; X(1) A -&gt; D -&gt; X(2) 因为X(2)路径更短，选择X(2) 如果路径长度一样，谁先声明就选谁 可选依赖可以通过&lt;optional&gt;&lt;/optional&gt;标签实现可选依赖，例如B项目有依赖 123456&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1&lt;/version&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; 那么B项目会正常依赖mysql的包。但是如果此时有A项目依赖了B项目，那么A项目是不会自动依赖mysql包的。A项目如果需要正常依赖mysql，就需要手动引入mysql的依赖才行。 排除依赖如果项目A依赖了B项目，但是却不想引用B项目里面的某个依赖，则可以使用排除依赖 123456789101112131415 &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.7&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 版本变量如果多个依赖使用了同样的版本，则可以在pom.xml中定义一个版本变量 123456789101112131415161718192021222324&lt;project&gt; ... &lt;properties&gt; &lt;example.version&gt;1.0.15&lt;/example.version&gt; &lt;/properties&gt; ... &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;starter&lt;/artifactId&gt; &lt;version&gt;$&#123;example.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;flow&lt;/artifactId&gt; &lt;version&gt;$&#123;example.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;version&gt;$&#123;example.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; maven提供了插件dependency来查看依赖的一些信息 mvn dependency:list mvn dependency:tree mvn dependency:analyze mvn dependency:sources -X 仓库maven的仓库分为远程仓库和本地仓库。在以前没有maven仓库的时候，都是从网上下载或者从别人那里拷贝的jar包，把包复制到eclipse的&#x2F;lib文件夹下，并手动将包添加到classpath中。 maven的包一般按照groupId、artifactId、version的方式管理，例如 12345&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.12.3&lt;/version&gt;&lt;/dependency&gt; 的依赖就位于com/fasterxml/jackson/core/jackson-core/2.12.3文件夹下。一般来说本地的仓库位于~/.m2/repository文件夹，当然也可以根据~/.m2/settings.xml中的配置修改本地仓库的位置 123&lt;settings&gt; &lt;localRepository&gt;D:\\maven\\repository&lt;/localRepository&gt;&lt;/settings&gt; 当依赖在本地仓库不存在时，就会从远程仓库中下载（推荐一个maven依赖搜索网站）。maven的默认远程仓库：https://repo1.maven.org/maven2/，也可以在pom.xml中使用其它的远程仓库 123456789101112131415&lt;project&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;amh&lt;/id&gt; &lt;name&gt;AMH Repository&lt;/name&gt; &lt;url&gt;https://maven.amh-group.com/artifactory/repo&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt;&lt;/project&gt; 同样的，可以在pom.xml中配置发布依赖的远程仓库 1234567891011121314&lt;project&gt; &lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;releases.deploy&lt;/id&gt; &lt;name&gt;Local Nexus Repository&lt;/name&gt; &lt;url&gt;http://maven.amh-group.com/artifactory/libs-release-local&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;snapshots.deploy&lt;/id&gt; &lt;name&gt;Local Nexus Repository&lt;/name&gt; &lt;url&gt;http://maven.amh-group.com/artifactory/libs-snapshot-local&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt;&lt;/project&gt; 使用命令mvn deploy就可以把release或snapshot版本的依赖推到私服上去了。 maven仓库可以配置镜像，例如如下的镜像配置 12345678&lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;/mirrors&gt; 就代表了使用阿里云的镜像来替换对central中央仓库的请求。 生命周期、阶段、目标和插件我们在日常软件开发和构建中总会有着一些固定的流程，maven对这些流程做了思考和分析，总结出了三套默认的生命周期（lifecycle），clean、default和site。clean生命周期用于清理项目，default生命周期用于构建项目，site生命周期用于构建项目站点，它们之前相互独立互不影响。 每个生命周期又由多个阶段（phase）组成，phase的执行有先后顺序的概念。在执行某个phase时，会按顺序从这个lifecycle最开始的phase开始执行，当上一个phase执行完之后会开始继续执行下一个phase，一直执行到当前指定的phase结束。maven的生命周期的阶段如下表 clean：清理构建输出，包括生成的编译类、JAR文件等 阶段 描述 pre-clean 执行一些清理前需要完成的工作 clean 清理上一个构建生成的文件 post-clean 执行一些清理后需要完成的工作 default：编译源代码并处理打包项目相关的所有事情 阶段 描述 validate initialize generate-sources process-sources 处理项目主资源文件，将src/main/resources目录内的内容进行变量替换之后复制到输出主classpath目录 generate-resources process-resources compile 编译项目主源码，编译src/main/java目录内的Java文件到输出主classpath目录 process-classes generate-test-sources process-test-sources 处理src/test/resources目录的资源 generate-test-resources process-test-resources test-compile 编译src/test/java并放到classpath中 process-test-classes test 执行单元测试 prepare-package package 将编译好的代码打包成可发布的格式，如jar pre-integration-test integration-test post-integration-test verify install 将打包后的文件安装到本地仓库 deploy 将打包后的文件发布到远程仓库 site：为项目生成文档 阶段 描述 pre-site 执行生成站点之前需要完成的工作 site 生成项目站点文档 post-site 执行生成站点之后需要完成的工作 site-deploy 将生成的项目站点发布到服务器上 可以在命令行直接执行maven的phase，例如执行mvn clean将会执行clean生命周期的clean阶段，在clean执行之前pre-clean阶段会先执行。同样的mvn package会执行default生命周期的package阶段，在package阶段执行之前会先执行package阶段之前的阶段。phase也可以组合起来执行，mvn clean package就会先执行clean阶段，之后再执行package阶段。 插件和目标maven的阶段只是一个声明，它不执行任何实际的操作，maven实际的操作都是由目标（goal）来完成的，而goal则是由maven的插件（plugin）实现的，目标也称为MOJO（Maven Old Java Object，与Plain Old Java Object对应）。只需要将插件的某个goal绑定到一个phase，在执行这个phase的时候就会执行这个goal。一个phase可以绑定多个goal，一个插件也可以实现多个不同功能的goal。 如上图，plugin abc分别实现了一些goal，而这些goal可以随意的绑定到指定的阶段上。一个phase可以绑定多个goal，一个goal也可以绑定多个phase。当执行某个phase的时候，其实就是在执行这一系列绑定在phase上的goal。 上面已经介绍了maven的phase例如clean和package执行方法，我们已经知道执行phase实际上就是在执行绑定在这个phase的goal。事实上，我们也可以直接执行插件的goal而不执行phase，语法如下 mvn groupId:artifactId:version:goal 例如 mvn org.apache.maven.plugins:maven-clean-plugin:2.5:clean 如果是maven官方插件 可以省略groupId 还可以省略artifactId中的maven-xxx-plugin，即命名的通用部分。maven官方插件的命名为maven-xxx-plugin，非官方推荐为xxx-maven-plugin。 如果不使用版本号，会自动使用最新的版本（maven 2.x版本会拉取最新snapshot版本，存在问题，3.x只会拉取最新的release版本） 因此上面执行goal的命令也可以简化为mvn clean:clean 插件maven-help-plugin的describe目标可以查看phase和plugin的详细信息（-D,--define Define a system property） mvn help:describe -Dcmd=clean mvn help:describe -Dplugin=clean mvn help:describe -Dplugin=org.apache.maven.plugins:maven-clean-plugin:2.5 mvn help:describe -Dplugin=org.apache.maven.plugins:maven-clean-plugin:2.5 -Dgoal=clean mvn help:describe -Dplugin=help -Ddetail mvn help:describe -Dplugin=versions mvn help:describe -Dplugin=archetype mvn help:describe -Dplugin=com.ymm:apide-maven-plugin:1.7.5 maven默认的phase就已经绑定了一些goal，因此我们可以直接使用maven的阶段而不需要手动声明插件依赖，maven阶段默认绑定的goal如下 阶段 插件 goal 任务 clean maven-clean-plugin clean 清除已生成的构建文件 process-resources maven-resources-plugin resources 复制主资源至主输出目录 compile maven-compiler-plugin compile 编译主代码至主输出目录 process-test-resources maven-resources-plugin testResources 复制测试资源至测试输出目录 test-compile maven-compiler-plugin testCompile 编译测试代码至测试输出目录 test maven-surefire-plugin test 执行测试用例 package maven-jar-plugin jar 创建项目jar包 install maven-install-plugin install 将项目输出构建安装到本地仓库 deploy maven-deploy-plugin deploy 将项目输出构建安装到远程仓库 site maven-site-plugin site 创建项目站点 site-deploy maven-site-plugin deploy 发布项目站点 除了已经绑定好的goal，我们在项目中也可以手动将插件的goal绑定到指定phase上 1234567891011121314151617181920&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;lc-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;configuration&gt; &lt;appName&gt;lc-service&lt;/appName&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;all&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 如上就是在这个项目中，将插件lc-maven-plugin的名称为all的goal绑定到package这个phase上，当项目执行到package阶段的时候，插件的目标all就会执行。此外，我们还定义了maven插件的配置，设置了appName等参数的值。 除了上面用到的全局配置外，maven还可以将配置设置在指定的任务上 1234567891011&lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;all&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;appName&gt;lc-service&lt;/appName&gt; &lt;/configuration&gt; &lt;/execution&gt;&lt;/executions&gt; 当然，直接在命令行设置参数也是可以的 mvn package -DappName=lc-service 聚合与继承聚合在项目开发中，我们经常会需要有多个相互配合的模块，例如RPC接口一般就会包含一个需要暴露给客户端的API模块和一个需要部署在服务端的API具体实现模块。如果将这两个模块分开来，那么在开发的时候在每个模块都需要去执行maven相关的操作命令，这显然是很不方便的。 maven因此提出了模块的聚合概念，我们可以给一些模块定义一个聚合模块，对于这些模块通用的操作，我们都可以在聚合模块中去完成。例如我们有project-api和project-service两个模块，它们的pom.xml分别如下：project-api 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;project-api&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/project&gt; project-service 123456789&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;project-service&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;/project&gt; 如果我们想要同时对它们执行maven的相关操作，我们可以再在它们的同级目录创建一个pom.xml文件，此时的目录结构如下图展开子模块可以看到project-api和project-service都是普通的maven模块聚合模块的pom.xml配置如下 1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;project&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;modules&gt; &lt;module&gt;project-api&lt;/module&gt; &lt;module&gt;project-service&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt; 聚合模块的定义和普通模块存在很多一样的地方，例如groupId、artifactId等，但也存在区别。第一个特殊的地方就是packaging，它的值为pom，和之前普通模块的jar不一样。聚合模块的打包方式packaging的值必须为pom，否则就无法正常构建。 另一个特殊的地方就是元素modules，它包含了多个模块，每个模块都是一个当前聚合模块的子模块，module的值为子模块所在的目录与当前pom.xml文件的相对路径。一般会把子模块和聚合模块的pom.xml放在同一个目录下面，方便进行源码管理。当然，也可以不遵循这个规则，例如如下的一个目录结构，将聚合pom.xml放在一个文件夹里面 . |-- project | `-- pom.xml |-- project-api `-- project-service 那么聚合模块的pom.xml中的module的配置就应该如下 12&lt;module&gt;../project-api&lt;/module&gt;&lt;module&gt;../project-service&lt;/module&gt; 根据上面创建的模块结构，我们可以直接在project文件夹下面执行maven指令，而不需要再去project-api和project-service目录中重复执行maven命令了。我们执行命令mvn compile可以得到如下输出 [INFO] Scanning for projects... [INFO] ------------------------------------------------------------------------ [INFO] Reactor Build Order: [INFO] [INFO] project-api [INFO] project-service [INFO] project [INFO] [INFO] Reactor Summary: [INFO] [INFO] project-api ........................................ SUCCESS [ 0.977 s] [INFO] project-service .................................... SUCCESS [ 0.085 s] [INFO] project ............................................ SUCCESS [ 0.001 s] [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESS [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1.138 s [INFO] Finished at: 2023-06-13T14:21:59+08:00 [INFO] Final Memory: 14M/207M [INFO] ------------------------------------------------------------------------ 可以看到maven分别对project-api和project-service执行了操作，最后对project本身也执行了maven操作。这就是maven聚合功能的好处，如果没有聚合功能，我们也许会创建一个build.sh，在里面定义对多个模块的打包的命令 1234cd project-apimvn compilecd ../project-servicemvn compile 这种过程式的操作方法更像Ant的操作，而不符合maven的声明式操作理念。感谢maven的聚合功能，让我们不再需要去手动编写多模块处理脚本。 继承上面提到的聚合是为了避免在每个子模块中重复执行maven操作，是通过聚合模块来操作子模块。而继承的目的，则是通过子模块获取父模块中的配置，防止在子模块中重复的对属性进行配置。 例如在上面的例子中，两个子模块的groupId和version与父模块中的值都是一样的，这显然是一种重复，因为maven可以在子模块中继承父模块来使用父模块的属性值。所以我们可以修改子模块的pom.xml如下 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;project&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt; &lt;/parent&gt; &lt;artifactId&gt;project-api&lt;/artifactId&gt;&lt;/project&gt; 如上就是设置了api模块继承project模块，这样一来api模块就可以不需要设置自己的groupId和version了。当然，如果子模块需要有自己的groupId或version，也可以显式的进行设置对父模块的值进行覆盖。常见的继承属性如下 属性 说明 groupId 项目组ID version 项目版本 description 项目的描述信息 organization 项目的组织信息 inception Year 项目的创建年份 url 项目URL地址 developers 项目的开发者信息 contributors 项目的贡献者信息 distributionManagement 项目的部署配置 issueManagement 项目的缺陷跟踪系统信息 ciManagement 项目的持续集成信息 scm 项目的版本控制系统信息 mailingLists 项目的邮件列表信息 properties 项目的自定义的属性 dependencies 项目的依赖配置 dependencyManagement 项目的依赖管理配置 repositories 项目的仓库配置 build 项目的源码目录配置、输出目录配置、插件配置、插件管理配置等 reporting 项目的报告输出目录配置、报告插件配置等 以上的属性都可以让子模块从父模块继承到，需要着重介绍的是dependencies和dependencyManagement属性 dependencies所有声明在dependencies里的依赖都会被自动引入，并且被所有的子项目继承 dependencyManagementdependencyManagement只是声明依赖，并不会真正的引入。当父模块的某个依赖声明在了dependencyManagement中，如果子项目中没有显式声明此依赖，则子项目是不会引入该依赖的。只有当子项目在dependencies中声明了该依赖，此时该依赖才真正的被子项目依赖了。如果子项目中的依赖没有指定版本号，就会继承父项目中dependencyManagement依赖的版本号，子项目在声明的时候也可以重写自己所需要的版本号。使用该配置的目的是为了在不把所有的依赖都继承给子模块的情况下，统一所有子模块中某个指定依赖的版本号。一般使用方法就是父模块声明所有用到的依赖的版本号，然后子模块真正的进行依赖且不需要加版本号，这样不同的子模块中使用依赖的版本号都会继承自父模块，保证子模块中版本号的一致。 类似的，maven也有插件的版本管理机制pluginManagement，用法也类似，在父pom中设置了pluginManagement的相关配置之后，子模块只要在plugin元素下配置相关的groupId和artifactId即可。 提示：Maven在依赖的时候，如果存在有父子关系的包，即使只依赖子jar，也是需要把父的pom推到nexus上面去的。如果只推了子jar而没有推父pom，在依赖的时候会报错。 就像Java的所有类都继承自java.lang.Object类一样，maven所有的pom也是继承自一个pom。它位于M2_HOME/lib/maven-model-builder-x.x.x.jar中，解压这个jar，它位于org/apache/maven/model/pom-4.0.0.xml。maven的继承主要是为了解决两个问题，即减少重复和统一标准，继承可以让子模块不再需要反复的去声明一些配置，也可以让所有子模块拥有和父模块一样统一的配置。 小结从上面可以看到，maven的聚合和继承是两个不同的东西。聚合是为了将多个模块的执行操作合并成一个，减少重复的命令操作；而继承则是为了让多个模块都使用父模块的配置信息，防止许多重复的配置，例如我们使用spring-boot的时候经常会需要继承一个父模块，这里就只是使用了继承操作而没有使用聚合。 当然，很多时候聚合和继承也会结合起来一起使用的，更多关于继承和聚合的内容可以参考maven的官方文档。 编写maven插件从上面我们已经知道，maven的操作都是由插件实际完成的，有的时候已有的插件不能完成我们所需要的功能，这时候就需要自己编写相关的插件。编写插件的主要步骤如下 创建一个maven-plugin项目，它也是一个maven项目，只不过它的packaging元素应该是maven-plugin 为插件编写目标goal，每个插件都应该有一个或者多个goal 为目标提供配置参数，这些参数可以在使用插件的时候进行配置 编写代码实现goal的逻辑 错误处理以及测试 例如如果我们想要创建一个统计源码行数（line count，lc）的插件，可以使用如下命令创建一个maven插件项目 mvn archetype:generate \\ -DgroupId=org.example \\ -DartifactId=lc-maven-plugin \\ -DarchetypeGroupId=org.apache.maven.archetypes \\ -DarchetypeArtifactId=maven-archetype-plugin 创建完项目后，设置pom.xml如下 12345678910111213141516171819202122232425262728293031&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;lc-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;maven-plugin&lt;/packaging&gt; &lt;name&gt;Line Count Maven Plugin&lt;/name&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.maven&lt;/groupId&gt; &lt;artifactId&gt;maven-plugin-api&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.maven.plugin-tools&lt;/groupId&gt; &lt;artifactId&gt;maven-plugin-annotations&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-plugin-plugin&lt;/artifactId&gt; &lt;version&gt;3.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; maven-plugin-api是开发maven插件必须依赖的核心包，而maven-plugin-annotations是为了能在在项目中使用maven插件开发的注解。其它诸如groupId、artifactId等元素都是很常见的，packaging元素也如之前所说的是maven-plugin。 接下来我们开始实现插件的goal，一个插件可以有一个或多个goal，每个goal都需要继承org.apache.maven.plugin.AbstractMojo类，并实现其execute()方法，goal的名称由注解org.apache.maven.plugins.annotations.Mojo定义。 12345678910111213141516171819@Mojo(name = &quot;count&quot;) public class LineCountMojo extends AbstractMojo &#123; @Parameter(defaultValue = &quot;$&#123;project&#125;&quot;, readonly = true, required = true) protected MavenProject project; @Parameter(defaultValue = &quot;$&#123;project.build.sourceDirectory&#125;&quot;, readonly = true, required = true) private File sourceDirectory; @Parameter(defaultValue = &quot;$&#123;project.build.resources&#125;&quot;, readonly = true, required = true) private List&lt;Resource&gt; resources; @Parameter(name = &quot;postfixes&quot;) private final String[] postfixes = new String[]&#123;&quot;java&quot;&#125;; @Override public void execute() throws MojoExecutionException &#123; &#125;&#125; 如上goal的名称就叫做count，而goal的具体逻辑就在execute方法中实现，相关的参数可以使用注解@Parameter引入。参数注解的defaultValue属性可以定义参数的默认值，默认值可以包含与这个项目参数相关的表达式，例如$&#123;project.version&#125;代表项目的版本。更多参数的表达式可以在这里查到，如$&#123;repositorySystemSession&#125;就代表了项目的本地仓库。就如同之前所说的，可以使用参数-D在命令行中设定系统变量来定义插件参数的值。 关于maven插件开发更加详细的信息可以参考maven官方插件开发文档，完整的插件代码也可以在GitHub上面找到。 想要使用如上插件，需要先在插件项目执行mvn clean install将项目安装到本地maven仓库，随后在其它的项目中依赖此插件。例如想要将插件绑定到某个maven项目的clean阶段，可以进行如下设置 1234567891011121314151617181920&lt;plugin&gt; &lt;groupId&gt;org.example&lt;/groupId&gt; &lt;artifactId&gt;lc-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;configuration&gt; &lt;postfixes&gt; &lt;postfix&gt;java&lt;/postfix&gt; &lt;postfix&gt;xml&lt;/postfix&gt; &lt;postfix&gt;properties&lt;/postfix&gt; &lt;/postfixes&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;clean&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;count&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 之后在项目中执行mvn clean就可以看到插件的执行信息了。 参考《Maven实战》终于把项目构建神器 Maven 捋清楚了~Maven-构建生命周期、阶段、目标maven 插件开发实战Guide to Developing Java Plugins","categories":[],"tags":[{"name":"编译","slug":"编译","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91/"},{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"HTTPS是如何保证数据安全的","slug":"How-HTTPS-secures-data","date":"2022-11-19T16:15:24.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2022/11/19/How-HTTPS-secures-data/","link":"","permalink":"https://www.nosuchfield.com/2022/11/19/How-HTTPS-secures-data/","excerpt":"","text":"与Windows大量使用二进制文件和数据传输不同，HTTP（Hypertext Transfer Protocol，超文本传输协议）与Linux&#x2F;Unix一样都是是基于文本的，这也导致其在传输过程中十分容易被解析和篡改，于是HTTPS（Hypertext transfer protocol secure）应运而生。HTTP协议一般跑在TCP协议之上，而HTTPS协议就是在原来的TCP和HTTP之间增加一层加密的操作，加密解密由Clinet端和Server端完成，由此保证了HTTP协议的内容不被中间人获取和篡改。可见HTTPS的核心就是这一段加密和解密，它是通过SSL（Secure Sockets Layer）安全套接层和TLS（Transport Layer Security）传输层安全协议实现的。 SSL与TLS网景公司在1994推出HTTPS协议，由SSL协议进行加密，这就是SSL的起源。SSL有1.0、2.0、3.0标准，后来IETF将SSL标准化并称其为TLS，因此SSL与TLS其实是一个东西。SSL和TLS的一些版本如下 协议 发布时间 状态 SSL 1.0 未公布 未公布 SSL 2.0 1995年 已于2011年弃用 SSL 3.0 1996年 已于2015年弃用 TLS 1.0 1999年 已于2021年弃用 TLS 1.1 2006年 已于2021年弃用 TLS 1.2 2008年 - TLS 1.3 2018年 - TLS加密的核心在非对称加密，关于非对称加密的原理可以参考文章“不给力啊，老湿！”：RSA加密与破解中所解释的（在此缅怀Vamei大师，他的文章帮助了无数人），在这里我们只需要知道非对称加密和传统加密解密过程的差异就可以了。 对称加密与非对称加密一般加密都是对称加密，即存在一个秘钥，加密方将数据通过秘钥加密，之后将加密后的数据交给接收方。接收方拿到了数据之后使用同一个秘钥将加密数据解密，就能得到原始数据了。它的问题在于发送方无法将秘钥交给接收方，因为秘钥在传输过程中可能就已经泄漏了，一旦秘钥泄漏数据也就不再安全。 非对称加密则不一样，它存在两个秘钥，一个称之为公钥，另一个相对应的叫私钥。加密方只需要将数据通过公钥加密，之后公钥无法解密数据，只有私钥才能解密数据。这样接收方只需要事先将公钥交给加密方，甚至直接将公钥广播出去，然后发送方将数据用公钥加密后交给接收方，最后接收方拿到数据之后用只有自己才有的私钥将数据解密即可。非对称加密解决了秘钥泄漏的问题，只需要将公钥交出去而保管好私钥，就避免了秘钥在传输过程中一旦泄漏密文全部不安全的问题。 对称加密与非对称加密的结合HTTPS同时用到了对称加密和非对称加密。我们知道对称加密需要双方知道同一个秘钥，HTTPS协议通过非对称加密先保证双方拥有一个安全的对称加密秘钥，之后双方就使用传统的对称加密进行数据加密传输并解密即可。那么HTTPS是如何让双方获得一个安全的对称加密秘钥的呢，这就是非对称加密的工作了，它的流程如下 首先，服务端拥有非对称加密公钥（PubKey）和私钥（PriKey）一对 客户端发起请求，服务端将PubKey发送给客户端 客户端生成一个对称加密秘钥Key，并将这个秘钥Key通过服务端的PubKey进行加密，将加密后的数据发给服务端 服务端用自己的PriKey将客户端发过来的数据解密，拿到客户端生成的对称秘钥Key 客户端服务端后面使用这个对称密钥Key进行加密通信即可 看似很完美是吧，但其实上面流程存在着一个问题。 中间人攻击（Man-in-the-middle attack，MITM）如果客户端和服务端中间存在着一个中间人，它可以实现窃取并篡改数据。具体流程如下 首先，服务端拥有非对称加密公钥（PubKey）和私钥（PriKey）一对 存在一个中间人（MITM），他自己也拥有一套公私钥，我们称之为PubKeyMITM和PriKeyMITM 客户端向服务端发起请求 请求没有到达服务端而是到了MITM，MITM此时也向服务端发起请求 服务端将PubKey返回给中间人，中间人将PubKeyMITM返回给客户端 客户端生成一个对称加密秘钥Key，并将这个秘钥使用中间人的PubKeyMITM（客户端会以为这是服务端的PubKey）加密发给中间人 中间人用自己的PriKeyMITM将客户端加密后的对称密钥Key解析出来，然后用服务端的PubKey将秘钥Key加密，并发送给服务端 服务端用自己的PriKey将中间人发送过来的加密数据解密，得到客户端生成的对称加密Key 据此，客户端、中间人、服务端都知道了对称加密秘钥Key，之后中间人可以在客户端和服务端之间获得加密数据并解密，得到了数据之后它也可以篡改一部分再使用对称秘钥Key加密了发给另一方。由此，MITM窃取到了数据并且可以篡改数据，数据安全性荡然无存。 那我们该怎么办呢？分析一下可以知道，出现如下问题的根本原因在于客户端没有核实服务端的身份就把Key发过去了，只需要客户端验证一下服务端的身份，如果服务端身份有问题（例如上面的MITM）就拒绝后续的操作。在现实世界我们使用签名来验证一个人的身份，在HTTPS中也是类似的方式，叫做数字签名。 证书颁发机构（Certificate Authority，CA）在HTTPS中，服务器想要支持HTTPS，需要先去CA申请一份数字证书，数字证书包含了证书持有者身份、证书有效期、公钥等等信息。在客户端向服务端发起请求之后，服务端其实返回的不仅仅是一个公钥，而是一份完整的数字证书（公钥也包含在证书里面了）。客户端接收到了数字证书之后，对证书的信息进行校验，例如是否过期等等。数字证书的格式一般都是基于X.509标准。 但是单纯的证书并不能保证服务端身份的可信，因为中间人也可以先拿到服务端的证书，然后替换证书的过期时间、服务端公钥等信息，之后生成自己的证书再发给客户端。数字证书实现服务端身份可靠性的方式是通过数字签名实现的，具体方式如下 CA机构自己也有一套公私秘钥 在签发证书时，CA会根据数字证书的信息计算出这些信息对应的哈希值 将哈希值使用CA的私钥进行加密，得到的结果就是这个证书的数字签名 这样一来，数字证书就包含了两部分： 数字证书的信息，例如持有者身份、过期时间、服务端公钥等等； 由以上信息计算得到的并通过CA私钥加密过的证书数字签名 因此，客户端在拿到了数字证书之后，只需要类似的将证书信息计算一下得到哈希值，之后用CA机构的公钥解密那个随数字证书携带而来的数字签名，查看数字签名解密出来的值和自己计算的哈希值是否一致，如果一致就说明这份数字证书没有被篡改过。 客户端是如何知道CA机构的公钥的？这一般是随操作系统或浏览器自带的，也就是说存在客户端本地的。 我们知道，原始数据一旦发生了变化，则哈希值必然发生变化，只有证书本身信息没有经过任何修改，那么它的哈希值才不会变，签名也才不会变。因此只要签名正确，证书的信息就正确，只要签名对不上，那么证书就有问题。 其实哈希算法本身是一定会有冲突的，所以原始数据发生了变化则哈希值必然发生变化这句话是不严谨的，可能会出现两份数据拥有同一个哈希值的情况。例如MD5和SHA-1就已经被王小云教授证明是不安全的，可以考虑使用SHA256等更安全的哈希算法。 有了数字签名之后，中间人就无法修改数字证书的任何信息了，中间人可以获取到数字证书，但是却不能修改它。因为只要中间人修改了数字证书，数字证书的哈希值就一定会发生变化，因为中间人又没有CA机构的私钥，所以它即使重新计算了数字证书的哈希值，也没办法重新生成一份新的数字签名。假如客户端收到了一份被篡改信息的证书，那么新证书的哈希值和原始证书的哈希值计算出来的数字签名的解密结果肯定是不一样的，此时客户端就可以拒绝后续的操作。因为中间人无法创建数字签名，它也就无法修改数字证书的任何内容，那么客户端就一定能拿到真正服务端公钥，这样数据传输就是绝对安全的了。 整个HTTPS通信的流程大致如下 Server Name Indication（SNI）Server Name Indication（SNI）是TLS的一个扩展协议，由于TLS连接创建在HTTP报文发送之前，所以服务器无法再像以前那样通过HTTP请求报文中的HOSTNAME来区分一个IP地址和端口对应的多个主机域名（即虚拟主机，在一个端口上跑多个web服务）。 在HTTP协议的早期，一个主机只能运行一个HTTP服务，因为主机的IP地址+80端口无法区分多个主机。后来人们在HTTP的请求中添加了HOSTNAME即主机名，主机通过这个这个主机名来把多个HTTP服务区分开来，这样一台主机也可以运行多个不同的HTTP服务了。但是HTTPS破坏了这一方案，因为HTTPS的数据是加密的，主机无法知道这个请求它所希望访问的目标服务是哪个，所以早期一台主机只能部署一个HTTPS服务。 解决办法是将HOSTNAME放在SNI中，由客户端发送给服务端，这样服务端就知道客户端是想要与哪一个主机创建连接了。不过这也产生了一个问题，即SNI无法保证安全，被中间人攻击（MITH attack）的时候中间人能够知道客户端想要访问的主机名。 数字证书的格式标准：X.509我们已经知道，服务器在给客户端发送公钥的时候会把公钥放在一个数字证书里面，这个数字证书还会附带有一个通过CA计算出来的数字签名，同时还包含了一些其它的有用信息，服务端只需要把这个包含了大量数据的数字证书发送给客户端即可。那么这个数字证书的格式是什么样的呢？数字证书的格式是由X.509标准设计的，它的格式大致如下 Certificate Version Number Serial Number Signature Algorithm ID Issuer Name Validity period Not Before Not After Subject name Subject Public Key Info Public Key Algorithm Subject Public Key Issuer Unique Identifier (optional) Subject Unique Identifier (optional) Extensions (optional) ... Certificate Signature Algorithm Certificate Signature 其中比较重要的就是公钥、私钥持有人身份、签名、有效时间等等信息。数字证书在文件系统中一般以DER或PEM格式保存，其中DER是二进制格式，PEM是对DER格式做了base64计算后得到的文本格式。常见的证书格式如下 格式 含义 .pem PEM格式 .key PEM格式的私钥文档 .pub PEM格式的公钥文档 .crt PEM格式的公钥证书文档，也可能是DER .cer DER格式的公钥证书文档，也可能是PEM 我们最常见的就是pem（Privacy Enhanced Mail）格式的文档，例如如下的Nginx服务器的配置就使用了大量的PEM文件 server &#123; listen 443 ssl http2; listen [::]:443 ssl http2; server_name www.nosuchfield.com; ssl on; ssl_certificate /etc/letsencrypt/live/www.nosuchfield.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.nosuchfield.com/privkey.pem; ssl_dhparam /etc/ssl/certs/dhparams.pem; ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; location / &#123; autoindex on; autoindex_exact_size off; autoindex_localtime on; charset utf-8; root /home/www; &#125; auth_basic &quot;Private Property&quot;; auth_basic_user_file /etc/nginx/.htpasswd; &#125; 它的HTTPS的配置含义如下 配置 含义 cert.pem 服务端证书 chain.pem 浏览器需要的所有证书但不包括服务端证书，比如根证书和中间证书 fullchain.pem 包括了cert.pem和chain.pem的内容 privkey.pem 证书的私钥 ssl_protocols 服务端支持的SSL&#x2F;TLS协议版本 ssl_ciphers 支持的加密算法，具体语法参考 例如如上服务器的fullchain.pem文件就如下（隐去了证书内容） -----BEGIN CERTIFICATE----- xxx -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- xxx -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- xxx -----END CERTIFICATE----- privkey.pem文件如下 -----BEGIN PRIVATE KEY----- xxx -----END PRIVATE KEY----- SSH的公私钥SSH协议也会有一对公私钥，一般可以通过命令ssh-keygen生成，默认生成在~/.ssh文件夹下，包含一个id_rsa和一个id_rsa.pub文件。 公钥使用空格分为了三部分 ssh-rsa 公钥本身，使用了base64进行编码，包含了一些质数计算的信息 邮箱地址 私钥是DER格式的（和前面的数字证书使用一样的格式），中间部分的内容信息一样是base64编码的，同样包含了一些质数计算信息。 这里的公钥私钥是不能互换的，虽然在数学上RSA的两个秘钥是对等的，即任意一个秘钥加密的结果都可以用另一个秘钥解密。但是在工程上两个秘钥并不对等，因为工程上的秘钥既包含了数学秘钥也包含数学公钥，而工程公钥只包含了数学公钥，因此一旦互换程序直接报错了。当然，是可以手动的把工程公钥私钥的数学公钥私钥解析出来自己计算的，这是没有问题的。 参考大前端进阶系列之HTTPS详解HTTPS公钥到底存放在哪里HTTPS 是如何保护你的安全的X.509 公钥证书的格式标准ssh-keygen生成的id_rsa文档的格式在 RSA 加密中既然公钥和私钥是可逆的，为什么都是把公钥给别人，而不把私钥给别人，自己保存好公钥？","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"HTTP","slug":"HTTP","permalink":"https://www.nosuchfield.com/tags/HTTP/"},{"name":"安全","slug":"安全","permalink":"https://www.nosuchfield.com/tags/%E5%AE%89%E5%85%A8/"}]},{"title":"Kubernetes的安装和使用（三）","slug":"Kubernetes-installation-and-use-3","date":"2022-10-30T22:28:03.000Z","updated":"2025-08-22T15:42:13.343Z","comments":true,"path":"2022/10/30/Kubernetes-installation-and-use-3/","link":"","permalink":"https://www.nosuchfield.com/2022/10/30/Kubernetes-installation-and-use-3/","excerpt":"","text":"目录Kubernetes的安装和使用（一）Kubernetes的安装和使用（二）Kubernetes的安装和使用（三） k8s使用Service在前面的例子中我们使用port-forward进行端口转发，这样会存在两个问题： pod重启后ip地址发生了变化怎么办 如何进行负载均衡 k8s的Service就是用来解决这个问题的，它包含ClusterIP、NodePort和Headless等模块。 ClusterIPClusterIP就是将多个pod用一个ip进行访问的服务，这个ip只能在集群内访问，我们创建如下的程序 12345678910111213141516package mainimport ( &quot;fmt&quot; &quot;io&quot; &quot;net/http&quot; &quot;os&quot;)func main() &#123; http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123; host, _ := os.Hostname() io.WriteString(w, fmt.Sprintf(&quot;[v3] Hello, Kubernetes!, From host: %s\\n&quot;, host)) &#125;) http.ListenAndServe(&quot;:3000&quot;, nil)&#125; 我们将如上程序打包成镜像 docker build . -t derobukal/hellok8s:v3_hostname docker push derobukal/hellok8s:v3_hostname 然后启动k8s的deployment，可以得到3个运行的pod 123456789101112131415161718apiVersion: apps/v1kind: Deploymentmetadata: # deployment 唯一名称 name: hellok8s-go-httpspec: replicas: 3 # 副本数量 selector: matchLabels: app: hellok8s # 管理template下所有 app=hellok8s的pod，（要求和template.metadata.labels完全一致！！！否则无法部署deployment） template: # template 定义一组容器 metadata: labels: app: hellok8s spec: containers: - image: derobukal/hellok8s:v3_hostname name: hellok8s 之后我们创建service-clusterip.yaml 123456789101112131415apiVersion: v1kind: Servicemetadata: name: service-hellok8s-clusteripspec: type: ClusterIP # 这行是默认的，可省略# sessionAffinity: ClientIP # or None, 设置会话亲和性（ClientIP表示同一客户端ip的请求会路由到同个Pod）# sessionAffinityConfig:# clientIP:# timeoutSeconds: 3600 # 范围 0~86400，默认10800（3h） selector: app: hellok8s # 通过selector关联pod组 ports: - port: 3000 # service端口 targetPort: 3000 # 后端pod端口 随后启动service，并查看service所生成的clusterIp的值，以及clusterIp后面的endpoints的详细信息 ~ kc apply -f service-clusterip.yaml service/service-hellok8s-clusterip created ~ kc get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 7d1h service-hellok8s-clusterip ClusterIP 10.111.240.227 &lt;none&gt; 3000/TCP 10s ~ kc get endpoints NAME ENDPOINTS AGE kubernetes 192.168.49.2:8443 7d1h service-hellok8s-clusterip 10.244.0.67:3000,10.244.0.68:3000,10.244.0.69:3000 16s 有了service之后，我们就可以很方便的通过clusterIp的地址访问服务了。因为我们使用的是minikube，为了能正常访问clusterIp，我们先创建一个nginx的pod 12345678910apiVersion: v1kind: Podmetadata: name: nginx labels: app: nginxspec: containers: - name: nginx-container image: nginx 之后我们进入nginx的pod测试clusterIp ~ kc apply -f pod_nginx.yaml pod/nginx created ~ kc get pods NAME READY STATUS RESTARTS AGE hellok8s-go-http-6f5d68bc64-6xrdx 1/1 Running 0 23m hellok8s-go-http-6f5d68bc64-b7wq2 1/1 Running 0 23m hellok8s-go-http-6f5d68bc64-rk59k 1/1 Running 0 23m nginx 1/1 Running 0 98s ~ kc exec nginx -it -- bash root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-b7wq2 root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-rk59k root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-rk59k root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-b7wq2 root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-6xrdx root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-b7wq2 root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-rk59k root@nginx:/# 上面通过curl测试service，可以看到每次访问的后端pod都是不一样的。接下来我们增加pod的数量，可以看到endpoint的数量也发生了变化，同时测试请求也打到了新的pod上面 ~ kc scale deployment/hellok8s-go-http --replicas=10 deployment.apps/hellok8s-go-http scaled ~ kc get endpoints NAME ENDPOINTS AGE kubernetes 192.168.49.2:8443 7d1h service-hellok8s-clusterip 10.244.0.67:3000,10.244.0.68:3000,10.244.0.69:3000 + 7 more... 22m ~ kc get pods NAME READY STATUS RESTARTS AGE hellok8s-go-http-6f5d68bc64-5lxvs 1/1 Running 0 27s hellok8s-go-http-6f5d68bc64-6xrdx 1/1 Running 0 29m hellok8s-go-http-6f5d68bc64-b7wq2 1/1 Running 0 29m hellok8s-go-http-6f5d68bc64-cl56f 1/1 Running 0 27s hellok8s-go-http-6f5d68bc64-gbn9v 1/1 Running 0 27s hellok8s-go-http-6f5d68bc64-k7db4 1/1 Running 0 27s hellok8s-go-http-6f5d68bc64-m4h5s 1/1 Running 0 27s hellok8s-go-http-6f5d68bc64-rk59k 1/1 Running 0 29m hellok8s-go-http-6f5d68bc64-whpht 1/1 Running 0 27s hellok8s-go-http-6f5d68bc64-xnvk2 1/1 Running 0 27s nginx 1/1 Running 0 8m13s ~ kc exec nginx -it -- bash root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-6xrdx root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-b7wq2 root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-m4h5s root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-whpht root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-whpht root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-cl56f root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-xnvk2 root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-cl56f root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-cl56f root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-m4h5s root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-rk59k root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-whpht root@nginx:/# curl 10.111.240.227:3000 [v3] Hello, Kubernetes!, From host: hellok8s-go-http-6f5d68bc64-k7db4 root@nginx:/# NodePortclusterIp只能在集群内部进行访问，NodePort在clusterIp的基础上，还支持了通过k8s集群的节点进行访问。有如下的配置 1234567891011121314151617181920apiVersion: v1kind: Servicemetadata: name: service-hellok8s-nodeportspec: type: NodePort selector: app: hellok8s ports: - port: 3000 # pod端口 nodePort: 30000 # 节点固定端口。在NodePort类型中，k8s要求在 30000-32767 范围内，否则apply报错 # 若需要暴露多个端口，则按下面形式# - name: http# protocol: TCP# port: 80# targetPort: 9376# - name: https# protocol: TCP# port: 443# targetPort: 9377 之后启动nodeport的服务，就可以在集群的节点上访问服务了 ~ kc apply -f service-nodeport.yaml service/service-hellok8s-nodeport created ~ kc get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes ClusterIP 10.96.0.1 &lt;none&gt; 443/TCP 7d1h service-hellok8s-clusterip ClusterIP 10.111.240.227 &lt;none&gt; 3000/TCP 28m service-hellok8s-nodeport NodePort 10.106.138.169 &lt;none&gt; 3000:30000/TCP 17s 因为使用minikube创建服务，而非创建了k8s的集群，因此暂时不太方便测试该功能。","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://www.nosuchfield.com/tags/%E8%BF%90%E7%BB%B4/"},{"name":"k8s","slug":"k8s","permalink":"https://www.nosuchfield.com/tags/k8s/"},{"name":"云原生","slug":"云原生","permalink":"https://www.nosuchfield.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"}]},{"title":"Kubernetes的安装和使用（二）","slug":"Kubernetes-installation-and-use-2","date":"2022-10-30T22:28:02.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2022/10/30/Kubernetes-installation-and-use-2/","link":"","permalink":"https://www.nosuchfield.com/2022/10/30/Kubernetes-installation-and-use-2/","excerpt":"","text":"目录Kubernetes的安装和使用（一）Kubernetes的安装和使用（二）Kubernetes的安装和使用（三） k8s的使用构建和运行镜像编写一个go程序 12345678910111213141516package mainimport ( &quot;io&quot; &quot;log&quot; &quot;net/http&quot;)func main() &#123; http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123; io.WriteString(w, &quot;[v1] Hello, Kubernetes!&quot;) &#125;) log.Printf(&quot;v1 access http://localhost:3000\\n&quot;) panic(http.ListenAndServe(&quot;:3000&quot;, nil))&#125; 编写Dockerfile 12345678910111213141516171819# 引入golang的环境，并设置别名FROM golang:1.20-alpine AS builder# 工作目录WORKDIR /project# 把当前文件夹的内容都添加到镜像的/project文件夹下ADD . .# 编译golang源代码# 设置代理、操作系统、CPU架构、禁用cgo编译# 设置mod为自动模式，防止因为没有设置go.mod而编译报错RUN GOPROXY=https://goproxy.cn,direct GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GO111MODULE=auto go build -o main -ldflags &quot;-w -extldflags -static&quot;# 引入alpine系统环境FROM alpine as prod# 从上面的build镜像复制编译好的文件/project/main到当前目录COPY --from=builder /project/main .# 暴露3000端口EXPOSE 3000# 启动main程序ENTRYPOINT [&quot;/main&quot;] 打包镜像 docker build . -t derobukal/hellok8s:v1 执行镜像，并把3000端口暴露出来 docker run --rm -p 3000:3000 derobukal/hellok8s:v1 之后可以用curl访问3000端口，结果正常显示了 ~ curl 127.0.0.1:3000 [v1] Hello, Kubernetes!% 之后可以把这个镜像推送到镜像仓库 docker login docker push derobukal/hellok8s:v1 使用Pod编写pod.yaml 1234567891011apiVersion: v1kind: Pod # 资源类型为podmetadata: name: go-http # 名称，需要在当前命名空间中唯一 labels: app: go version: v1spec: containers: # pod内的容器组 - name: go-http image: derobukal/hellok8s:v1 # 镜像默认来源 DockerHub 之后创建pod ~ kc apply -f pod.yaml pod/go-http created ~ kc get pods NAME READY STATUS RESTARTS AGE go-http 1/1 Running 0 65s 然后临时开启端口转发，就可以访问相应的服务了 ~ kc port-forward go-http 3000:3000 Forwarding from 127.0.0.1:3000 -&gt; 3000 Forwarding from [::1]:3000 -&gt; 3000 ~ curl http://127.0.0.1:3000 [v1] Hello, Kubernetes!% 在进行以上测试的时候，如果出现pod启动不了的情况，可能是因为防火墙的原因，可以开启网络代理之后再试。 使用Deployment一般来说，pod不会被直接的使用，而是用Deployment来进行相关的操作。 编写deployment.yaml 123456789101112131415161718apiVersion: apps/v1kind: Deploymentmetadata: # deployment 唯一名称 name: hellok8s-go-httpspec: replicas: 2 # 副本数量 selector: matchLabels: app: hellok8s # 管理template下所有 app=hellok8s的pod，（要求和template.metadata.labels完全一致！！！否则无法部署deployment） template: # template 定义一组容器 metadata: labels: app: hellok8s spec: containers: - image: derobukal/hellok8s:v1 name: hellok8s 部署deployment ~ kc apply -f deployment.yaml deployment.apps/hellok8s-go-http created ~ kc get deployments NAME READY UP-TO-DATE AVAILABLE AGE hellok8s-go-http 2/2 2 2 79s kc get pod -o wide可以查看更详细的pod信息。我们可以把配置中的副本数改为3，之后重新执行部署命令，然后查看详细的pod信息如下，可以看到又新增了一个pod NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES go-http 1/1 Running 0 14m 10.244.0.6 minikube &lt;none&gt; &lt;none&gt; hellok8s-go-http-6db476b8cb-4n2nx 1/1 Running 0 4m35s 10.244.0.7 minikube &lt;none&gt; &lt;none&gt; hellok8s-go-http-6db476b8cb-s76jr 1/1 Running 0 4m35s 10.244.0.8 minikube &lt;none&gt; &lt;none&gt; hellok8s-go-http-6db476b8cb-tjqs9 1/1 Running 0 8s 10.244.0.9 minikube &lt;none&gt; &lt;none&gt; 我们选取任意一个pod进行端口转发，随后请求可以看到结果正常 ~ kc port-forward hellok8s-go-http-6db476b8cb-4n2nx 3000:3000 Forwarding from 127.0.0.1:3000 -&gt; 3000 Forwarding from [::1]:3000 -&gt; 3000 Handling connection for 3000 更新deployment我们将golang程序中的v1修改为v2，之后打包新版本镜像并上传 docker build . -t derobukal/hellok8s:v2 docker push derobukal/hellok8s:v2 之后我们修改deployment.yaml中的镜像为derobukal/hellok8s:v2，然后更新部署 ~ kc apply -f deployment.yaml deployment.apps/hellok8s-go-http configured 可以看到pod都重新部署了 ~ kc get pod -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES go-http 1/1 Running 0 25m 10.244.0.6 minikube &lt;none&gt; &lt;none&gt; hellok8s-go-http-8b44d58c5-5bmx7 1/1 Running 0 34s 10.244.0.12 minikube &lt;none&gt; &lt;none&gt; hellok8s-go-http-8b44d58c5-djfcd 1/1 Running 0 35s 10.244.0.11 minikube &lt;none&gt; &lt;none&gt; hellok8s-go-http-8b44d58c5-rt29z 1/1 Running 0 58s 10.244.0.10 minikube &lt;none&gt; &lt;none&gt; 之后选取一个Pod进行端口转发，并请求发现返回结果发生了变化 ~ kc port-forward hellok8s-go-http-8b44d58c5-5bmx7 3000:3000 Forwarding from 127.0.0.1:3000 -&gt; 3000 Forwarding from [::1]:3000 -&gt; 3000 Handling connection for 3000 ~ curl http://127.0.0.1:3000 [v2] Hello, Kubernetes!% 回滚deployment查看版本信息 ~ kc rollout history deployment/hellok8s-go-http deployment.apps/hellok8s-go-http REVISION CHANGE-CAUSE 1 &lt;none&gt; 2 &lt;none&gt; 查看具体版本2 ~ kc rollout history deployment/hellok8s-go-http --revision=2 deployment.apps/hellok8s-go-http with revision #2 Pod Template: Labels: app=hellok8s pod-template-hash=8b44d58c5 Containers: hellok8s: Image: derobukal/hellok8s:v2 Port: &lt;none&gt; Host Port: &lt;none&gt; Environment: &lt;none&gt; Mounts: &lt;none&gt; Volumes: &lt;none&gt; 查看具体版本1 ~ kc rollout history deployment/hellok8s-go-http --revision=1 deployment.apps/hellok8s-go-http with revision #1 Pod Template: Labels: app=hellok8s pod-template-hash=6db476b8cb Containers: hellok8s: Image: derobukal/hellok8s:v1 Port: &lt;none&gt; Host Port: &lt;none&gt; Environment: &lt;none&gt; Mounts: &lt;none&gt; Volumes: &lt;none&gt; 回退到版本1 ~ kc rollout undo deployment/hellok8s-go-http --to-revision=1 deployment.apps/hellok8s-go-http rolled back 此时查看pod可以发现pod已经发生了改变，访问服务返回的也是v1版本信息了。 部署失败我们构建一个如下的程序 12345package mainfunc main() &#123; panic(&quot;something went wrong&quot;)&#125; 之后打包一个新版本镜像：docker build . -t derobukal/hellok8s:v_error并对这个镜像进行push：docker push derobukal/hellok8s:v_error。 之后可以简单地使用命令而不修改deployment.yaml文件来重新部署deployment，通过命令修改镜像： ~ kc set image deployment/hellok8s-go-http hellok8s=derobukal/hellok8s:v2_error deployment.apps/hellok8s-go-http image updated ~ kc get pods NAME READY STATUS RESTARTS AGE go-http 1/1 Running 1 (7m34s ago) 54m hellok8s-go-http-55669566cb-l69hx 0/1 ContainerCreating 0 41s hellok8s-go-http-6db476b8cb-dlr2z 1/1 Running 1 (7m34s ago) 22m hellok8s-go-http-6db476b8cb-glx7h 1/1 Running 1 (7m34s ago) 22m hellok8s-go-http-6db476b8cb-sfxnr 1/1 Running 1 (7m34s ago) 22m 重新部署之后我们查看pod可以发现，之前的pod仍然在正常运行，而新启动的pod则处于ContainerCreating状态。我们可以直接回退到上一个版本 ~ kc rollout undo deployment/hellok8s-go-http --to-revision=2 deployment.apps/hellok8s-go-http rolled back ~ kc get pods NAME READY STATUS RESTARTS AGE go-http 1/1 Running 1 (12m ago) 58m hellok8s-go-http-55669566cb-l69hx 0/1 Terminating 0 5m17s hellok8s-go-http-8b44d58c5-74mhw 1/1 Running 0 22s hellok8s-go-http-8b44d58c5-hfpjj 1/1 Running 0 20s hellok8s-go-http-8b44d58c5-lzwfm 1/1 Running 0 19s 存活探针存活探针顾名思义就是用来检查进程的存活情况的，它支持多种方式，下面是一个例子 flat123456789101112131415161718192021222324252627package mainimport ( &quot;fmt&quot; &quot;io&quot; &quot;net/http&quot; &quot;time&quot;)func main() &#123; started := time.Now() http.HandleFunc(&quot;/healthz&quot;, func(w http.ResponseWriter, r *http.Request) &#123; duration := time.Since(started) if duration.Seconds() &gt; 15 &#123; w.WriteHeader(500) w.Write([]byte(fmt.Sprintf(&quot;error: %v&quot;, duration.Seconds()))) &#125; else &#123; w.WriteHeader(200) w.Write([]byte(&quot;ok&quot;)) &#125; &#125;) http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123; io.WriteString(w, &quot;[v2] Hello, Kubernetes!&quot;) &#125;) http.ListenAndServe(&quot;:3000&quot;, nil)&#125; 这个程序的/healthz接口会在启动15秒钟后开始持续报错，我们使用这个代码创建镜像derobukal/hellok8s:liveness。我们先使用正常的镜像创建depolyment，并设置存活探针配置 flat12345678910111213141516171819202122232425262728apiVersion: apps/v1kind: Deploymentmetadata: # deployment唯一名称 name: hellok8s-go-httpspec: replicas: 2 # 副本数量 selector: matchLabels: app: hellok8s # 管理template下所有 app=hellok8s的pod，（要求和template.metadata.labels完全一致！！！否则无法部署deployment） template: # template 定义一组pod metadata: labels: app: hellok8s spec: containers: - image: derobukal/hellok8s:v1 name: hellok8s # 存活探针 livenessProbe: # http get 探测指定pod提供HTTP服务的路径和端口 httpGet: path: /healthz port: 3000 # 3s后开始探测 initialDelaySeconds: 3 # 每3s探测一次 periodSeconds: 3 在livenessProbe中我们设置使用httpGet的方式来检查程序的存活状态，并且接口为healthz。启动这个deployment，一切正常 ~ kc get pods NAME READY STATUS RESTARTS AGE hellok8s-go-http-cf86fc9d6-qjt57 1/1 Running 0 8s hellok8s-go-http-cf86fc9d6-tnf9r 1/1 Running 0 8s 之后我们切换镜像为我们刚刚创建的derobukal/hellok8s:liveness镜像 kc set image deployment/hellok8s-go-http hellok8s=derobukal/hellok8s:liveness 然后可以看到pod会每隔一会儿重启一下 ~ kc get pods NAME READY STATUS RESTARTS AGE hellok8s-go-http-78fd694d74-j2kr6 1/1 Running 3 (23s ago) 2m41s hellok8s-go-http-78fd694d74-j5d5x 1/1 Running 3 (19s ago) 91s 如果我们这时候再把镜像设置为v1，很快就可以看到pod恢复正常了。 就绪探针就绪探针是用来检测程序是否已经成功启动的，例如程序是否可以接受前端的流量、是否已经可以执行相关的任务了等等。我们编写如下程序并创建derobukal/hellok8s:readiness镜像 12345678910111213141516171819package mainimport ( &quot;io&quot; &quot;net/http&quot;)func hello(w http.ResponseWriter, r *http.Request) &#123; io.WriteString(w, &quot;[v2] Hello, Kubernetes!&quot;)&#125;func main() &#123; http.HandleFunc(&quot;/healthz&quot;, func(w http.ResponseWriter, r *http.Request) &#123; w.WriteHeader(500) &#125;) http.HandleFunc(&quot;/&quot;, hello) http.ListenAndServe(&quot;:3000&quot;, nil)&#125; 使用如下的配置创建deployment flat1234567891011121314151617181920212223242526272829303132apiVersion: apps/v1kind: Deploymentmetadata: # deployment唯一名称 name: hellok8s-go-httpspec: strategy: rollingUpdate: maxSurge: 1 maxUnavailable: 1 replicas: 3 # 副本数量 selector: matchLabels: app: hellok8s # 管理template下所有 app=hellok8s的pod，（要求和template.metadata.labels完全一致！！！否则无法部署deployment） template: # template 定义一组pod metadata: labels: app: hellok8s spec: containers: - image: derobukal/hellok8s:v1 name: hellok8s # 就绪探针 readinessProbe: # http get 探测pod提供HTTP服务的路径和端口 httpGet: path: /healthz port: 3000 initialDelaySeconds: 1 # 1s后开始探测 periodSeconds: 5 # 每5s探测一次 timeoutSeconds: 1 # 单次探测超时，默认1 failureThreshold: 3 # 探测失败时，k8s的重试次数，默认3，达到这个次数后 停止探测，并打上未就绪的标签 还是使用/healthz接口进行检测，启动deployment后发现pod正常启动 ~ kc get pods NAME READY STATUS RESTARTS AGE hellok8s-go-http-7b48477987-2x4ll 1/1 Running 0 12s hellok8s-go-http-7b48477987-hl4kt 1/1 Running 0 14s hellok8s-go-http-7b48477987-xdtvl 1/1 Running 0 14s 之后修改镜像kc set image deployment/hellok8s-go-http hellok8s=derobukal/hellok8s:readiness 之后发现有两个pod一直无法进入ready状态 ~ kc get pods NAME READY STATUS RESTARTS AGE hellok8s-go-http-56dd6754c7-6qltj 0/1 Running 0 20s hellok8s-go-http-56dd6754c7-kmzb2 0/1 Running 0 20s hellok8s-go-http-7856db556-5d9vr 1/1 Running 0 31s hellok8s-go-http-7856db556-jctgt 1/1 Running 0 31s 任务任务用于执行一些job，例如如下的任务 1234567891011121314151617apiVersion: batch/v1kind: Jobmetadata: name: pods-jobspec:# completions: 3 # 启用它表示串行执行3次# parallelism: 3 # 启动它表示并发数，由completions指定总次数# backoffLimit: 3 # 限制重试次数，默认6，超过次数则不再启动新pod# activeDeadlineSeconds: 10 # 限制job执行时间，超时还不终止则强制终止，并且稍后执行自动删除（若设置），且不受restartPolicy字段影响 ttlSecondsAfterFinished: 10 # 多少秒后自动删除执行成功的job，避免太多不再需要的job累积 template: spec: restartPolicy: Never # or OnFailure, 不能是其他值；推荐Never，因为这个策略下控制会启动新的pod，不会删除失败的pod，有助于排查问题；OnFailure是不断重启旧的pod containers: - command: [&#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;echo &quot;Start Job!&quot;; sleep 30; echo &quot;Job Done!&quot;&#x27;] image: busybox name: pods-job-container 如上的任务只是简单的进行了信息的打印 ~ kc apply -f job.yaml job.batch/pods-job created ~ kc get pods NAME READY STATUS RESTARTS AGE pods-job-nthvl 0/1 ContainerCreating 0 7s ~ kc get pods NAME READY STATUS RESTARTS AGE pods-job-nthvl 1/1 Running 0 23s ~ kc get pods NAME READY STATUS RESTARTS AGE pods-job-nthvl 1/1 Running 0 48s ~ kc get pods NAME READY STATUS RESTARTS AGE pods-job-nthvl 0/1 Completed 0 56s 定时任务定时任务CronJob用于执行定时任务 1234567891011121314151617181920apiVersion: batch/v1kind: CronJobmetadata: name: pods-cronjobspec: schedule: &quot;*/1 * * * *&quot; # 最小到min级别，这表示每分钟1次 startingDeadlineSeconds: 3 # 最大启动时间，超时后变成失败 concurrencyPolicy: Forbid # Allow/Forbid/Replace，上个周期的Job未执行结束时，是否允许下个周期的Job开始执行，默认Allow suspend: false # 是否暂停cronjob的执行，一般通过kubectl edit修改 successfulJobsHistoryLimit: 3 # 保留多少条执行成功的Job记录，默认3 failedJobsHistoryLimit: 1 # 保留多少条执行失败的Job记录，默认1 jobTemplate: spec: template: spec: restartPolicy: Never containers: - command: [ &#x27;sh&#x27;, &#x27;-c&#x27;, &#x27;echo &quot;Start Job!&quot;; sleep 30; echo &quot;Job Done!&quot;&#x27; ] image: busybox name: pods-cronjob-container 如上这个任务会每分钟执行一次，详情如下 ~ kc apply -f job.yaml cronjob.batch/pods-cronjob created ~ kc get cronjob NAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE pods-cronjob */1 * * * * False 0 &lt;none&gt; 8s ~ kc get pods NAME READY STATUS RESTARTS AGE pods-cronjob-28410113-fs4hr 0/1 ContainerCreating 0 0s ~ kc get job NAME COMPLETIONS DURATION AGE pods-cronjob-28410113 0/1 6s 6s ~ kc logs pods-cronjob-28410113-fs4hr Start Job! Job Done! ~ kc delete cronjob pods-cronjob cronjob.batch &quot;pods-cronjob&quot; deleted","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://www.nosuchfield.com/tags/%E8%BF%90%E7%BB%B4/"},{"name":"k8s","slug":"k8s","permalink":"https://www.nosuchfield.com/tags/k8s/"},{"name":"云原生","slug":"云原生","permalink":"https://www.nosuchfield.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"}]},{"title":"Kubernetes的安装和使用（一）","slug":"Kubernetes-installation-and-use-1","date":"2022-10-30T22:28:01.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2022/10/30/Kubernetes-installation-and-use-1/","link":"","permalink":"https://www.nosuchfield.com/2022/10/30/Kubernetes-installation-and-use-1/","excerpt":"","text":"目录Kubernetes的安装和使用（一）Kubernetes的安装和使用（二）Kubernetes的安装和使用（三） k8s的介绍k8s是一种可以实现容器集群的自动化部署、自动扩缩容、维护等功能的服务。Docker解决了应用运行时环境的问题，而k8s则可以用来构建大量应用服务，它能方便的管理海量应用容器。它拥有自动包装、自我修复、横向缩放、服务发现、负载均衡、自动部署、升级回滚、存储编排等特性。 k8s的节点分为master和node，它的架构如下Master：官方叫做控制平面（Control Plane），它用于负责整个集群的管控。master由4个部分组成 API Server进程，负责任何资源的管理和操作 etcd，用于保存集群状态，只有apiServer可以读写 调度器（Scheduler），用于调度Pod资源 控制器管理器（kube-controller-manager） Node：数据平面，是实际的工作节点，直接负责对容器的资源控制。node由3个部分组成 kubelet，运行在每个节点上面的代理进程 kube-proxy，负责每个节点的网络服务 容器运行时，例如docker k8s还定义了一些内核抽象1. PodPod是k8s调度的基本单元，它封装了一个或多个容器。Pod中的容器会作为一个整体被k8s调度到一个Node上运行。同一个Pod内的容器可以互相操作对方的文件，这些容器就好像运行在同一个操作系统上的不同进程一样。 2. 控制器一般来说，用户不会直接创建Pod，而是创建控制器来管理Pod，因为控制器能够更细粒度的控制Pod的运行方式，比如副本数量、部署位置等。 控制器包含下面几种： Replication控制器（以及ReplicaSet控制器）：负责保证Pod副本数量符合预期（涉及对Pod的启动、停止等操作） Deployment控制器：是高于Replication控制器的对象，也是最常用的控制器，用于管理Pod的发布、更新、回滚等 StatefulSet控制器：与Deployment同级，提供排序和唯一性保证的特殊Pod控制器。用于管理有状态服务，比如数据库等 DaemonSet控制器：与Deployment同级，用于在集群中的每个Node上运行单个Pod，多用于日志收集和转发、监控等功能的服务。并且它可以绕过常规Pod无法调度到Master运行的限制 Job控制器：与Deployment同级，用于管理一次性任务，比如批处理任务 CronJob控制器：与Deployment同级，在Job控制器基础上增加了时间调度，用于执行定时任务 3. Service、Ingress和StorageService是对一组Pod的抽象，它定义了Pod的逻辑集合以及访问该集合的策略。前面的Deployment等控制器只定义了Pod运行数量和生命周期， 并没有定义如何访问这些Pod，由于Pod重启后IP会发生变化，没有固定IP和端口提供服务。Service对象就是为了解决这个问题。Service可以自动跟踪并绑定后端控制器管理的多个Pod，即使发生重启、扩容等事件也能自动处理， 同时提供统一IP供前端访问，所以通过Service就可以获得服务发现的能力，部署微服务时就无需单独部署注册中心组件。Ingress不是一种服务类型，而是一个路由规则集合，通过Ingress规则定义的规则，可以将多个Service组合成一个虚拟服务（如前端页面+后端API）。 它可实现业务网关的作用，类似Nginx的用法，可以实现负载均衡、SSL卸载、流量转发、流量控制等功能。Storage是Pod中用于存储的抽象，它定义了Pod的存储卷，包括本地存储和网络存储；它的生命周期独立于Pod之外，可进行单独控制。 4. 资源划分命名空间（Namespace）：k8s通过namespace对同一台物理机上的k8s资源进行逻辑隔离。标签（Labels）：是一种语义化标记，可以附加到Pod、Node等对象之上，然后更高级的对象可以基于标签对它们进行筛选和调用， 例如Service可以将请求只路由到指定标签的Pod，或者Deployment可以将Pod只调度到指定标签的Node。注解（Annotations）：也是键值对数据，但更灵活，它的value允许包含结构化数据。一般用于元数据配置，不用于筛选。 例如Ingress中通过注解为nginx控制器配置禁用ssl重定向。 k8s的安装k8s的安装比较复杂，需要涉及到很多的Linux、网络、存储等设置。为了简单起见，我们先学习使用minikube安装单机的k8s环境，等学习并熟悉了k8s的使用之后，再去搭建k8s的集群环境。 安装kubectlkubectl是k8s的客户端，我们可以通过它和k8s的服务进行交互，我们直接从k8s的官网上下载它并将其安装到/usr/local/bin目录下 # 下载kubectl客户端，这里使用了代理 curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot; -x http://192.168.65.100:7890 # 将kubectl客户端安装到指定的bin目录下 sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl 为了方便后面的使用，可以将kc设置为kubectl的别名，将如下配置添加到~/.zshrc文件中 alias kc=&quot;kubectl&quot; 之后我们就可以查看kubectl的版本了 ~ kc version --client --output=json &#123; &quot;clientVersion&quot;: &#123; &quot;major&quot;: &quot;1&quot;, &quot;minor&quot;: &quot;29&quot;, &quot;gitVersion&quot;: &quot;v1.29.0&quot;, &quot;gitCommit&quot;: &quot;3f7a50f38688eb332e2a1b013678c6435d539ae6&quot;, &quot;gitTreeState&quot;: &quot;clean&quot;, &quot;buildDate&quot;: &quot;2023-12-13T08:51:44Z&quot;, &quot;goVersion&quot;: &quot;go1.21.5&quot;, &quot;compiler&quot;: &quot;gc&quot;, &quot;platform&quot;: &quot;linux/amd64&quot; &#125;, &quot;kustomizeVersion&quot;: &quot;v5.0.4-0.20230601165947-6ce0bf390ce3&quot; &#125; 安装DockerDocker的安装参考了官方文档，具体步骤如下 添加Docker的官方GPG秘钥 sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg 把仓库添加到apt的资源列表中 echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null sudo apt-get update 安装相关的程序并进行权限设置 # 安装程序 sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin # 设置文件权限，并把当前用户添加到docker组中 sudo chmod 666 /var/run/docker.sock sudo usermod -aG docker $USER 安装好了Docker并设置完权限之后，可以执行Docker的hello-world查看是否安装成功了 docker run hello-world 安装成功的输出如下 Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/ 安装minikube与kubectl的安装类似，我们还是使用下载并安装的方式安装minikube # 下载 curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 # 安装到指定目录下面 sudo install minikube-linux-amd64 /usr/local/bin/minikube 安装之后，我们就可以启动minikube了。因为网络原因，直接使用minikube start命令有的时候无法正常启动，因此我们可以使用代理 ~ minikube start http_proxy=http://192.168.65.100:7890 https_proxy=http://192.168.65.100:7890 😄 minikube v1.32.0 on Ubuntu 22.04 ✨ Using the docker driver based on existing profile 👍 Starting control plane node minikube in cluster minikube 🚜 Pulling base image ... 🔄 Restarting existing docker container for &quot;minikube&quot; ... 🐳 Preparing Kubernetes v1.28.3 on Docker 24.0.7 ... 🔗 Configuring bridge CNI (Container Networking Interface) ... 🔎 Verifying Kubernetes components... ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5 🌟 Enabled addons: default-storageclass, storage-provisioner 🏄 Done! kubectl is now configured to use &quot;minikube&quot; cluster and &quot;default&quot; namespace by default 看到以上内容，则说明k8s已经启动好了。接下来我们就可以使用kubectl来管理k8s了 查看版本信息 ~ kc version Client Version: v1.29.0 Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3 Server Version: v1.28.3 查看k8s集群信息 ~ kc cluster-info Kubernetes control plane is running at https://192.168.49.2:8443 CoreDNS is running at https://192.168.49.2:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;. 查看节点信息 ~ kc get nodes NAME STATUS ROLES AGE VERSION minikube Ready control-plane 4h48m v1.28.3 参考Kubernetes 安装小记Kubernetes 使用小记Kubernetes 基础教程Docker 入门教程","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://www.nosuchfield.com/tags/%E8%BF%90%E7%BB%B4/"},{"name":"k8s","slug":"k8s","permalink":"https://www.nosuchfield.com/tags/k8s/"},{"name":"云原生","slug":"云原生","permalink":"https://www.nosuchfield.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"}]},{"title":"最大堆的原理与实现","slug":"Principle-and-implementation-of-maximum-heap","date":"2022-06-29T10:58:19.000Z","updated":"2025-08-22T15:42:13.345Z","comments":true,"path":"2022/06/29/Principle-and-implementation-of-maximum-heap/","link":"","permalink":"https://www.nosuchfield.com/2022/06/29/Principle-and-implementation-of-maximum-heap/","excerpt":"","text":"基本原理最大堆是一个二叉树，要求这个二叉树的父节点大于它的子节点，同时这个二叉树是一个完全二叉树，也就是说这个二叉树除了最底层之外的其它节点都应该被填满，最底层应该从左到右被填满。显然，最大堆的顶部节点的值是整个二叉树中最大的。 我们使用数组来构建一个最大堆，使用数组构建一个二叉树最大堆存在如下性质。假设二叉树某节点在数组中的下标索引为index，则它的父节点在数组中的下标索引为parent = (index - 1) // 2，它的左子节点的下标索引为child_left = index * 2 + 1，右子节点的下标索引为child_right = index * 2 + 2。如果计算出来parent小于0或者child大于了数组最大值，就说明没有父节点或者子节点。 代码实现接下来我们创建最大堆类，存储一些堆的基本信息以及工具方法 1234567class Heap(object): def __init__(self) -&gt; None: self._data = [] def _size(self) -&gt; int: return len(self._data) def _swap(self, i: int, j: int) -&gt; None: self._data[i], self._data[j] = self._data[j], self._data[i] Heap类包含了三个方法，一个初始化方法创建了一个数组，_size方法返回数组的长度，_swap方法用于交换数组中的两个元素的值。 插入元素 1234567891011121314def push(self, item: int) -&gt; None: self._data.append(item) # 将最后一个元素，也就是刚刚才添加的元素，上移到保证树大小有序的位置 self._siftup(self._size() - 1)def _siftup(self, index: int) -&gt; None: while True: parent = (index - 1) &gt;&gt; 1 # 右移一位，等价于除以二 # 如果移动到了头部，或者说父元素已经大于了当前元素，已经有序不需要再移动 if index &lt;= 0 or self._data[parent] &gt;= self._data[index]: break # 还没有序，需要将当前值和父节点的值交换，并且让父节点继续进行下一轮移动 self._swap(index, parent) index = parent 插入元素的过程很简单，就是先把元素append到数组的末尾，之后不断地把该元素往上移，直到该元素小于父元素、或者该元素已经到了二叉树的头部，此时二叉树有序，push结束。 弹出元素 12345678910111213141516171819202122def pop(self) -&gt; int: max_item = self._data[0] # 将头部元素和最后一个元素做交换 self._swap(0, self._size() - 1) # 弹出最后一个元素 self._data.pop() # 将第一个元素，也就是从尾部置换而来的元素移动到合适的位置 self._shift_down(0) return max_itemdef _shift_down(self, index) -&gt; None: while True: child = (index &lt;&lt; 1) + 1 # 如果右侧子节点更大，就使用右侧子节点进行置换 if child + 1 &lt; self._size() and self._data[child] &lt; self._data[child + 1]: child += 1 # 如果移动到了末尾，或者当前节点已经大于子节点，则可以停止移动了 if child &gt;= self._size() or self._data[index] &gt;= self._data[child]: break # 还没有序，需要将当前值和子节点的值交换，并且让子节点继续进行下一轮移动 self._swap(index, child) index = child 弹出过程也不复杂，先把顶部的元素弹出。之后为了操作简单，我们把末尾元素和顶部元素进行交换，随后移除末尾元素。然后我们只需要不断地把顶部元素向下移动，直到它大于了自己的子节点、或者移动到了末尾，此时二叉树有序，pop结束。 总结我们可以使用如下代码对最大堆进行测试 flat123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104import mathimport randomclass Heap(object): def __init__(self) -&gt; None: self._data = [] def _size(self) -&gt; int: return len(self._data) def pretty_print(self) -&gt; None: &quot;&quot;&quot; 打印二叉树 :return: &quot;&quot;&quot; height = int(math.log2(len(self._data))) + 1 for i in range(height): width = 2 ** (height - i) - 2 print(&#x27; &#x27; * width, end=&#x27;&#x27;) blank = &#x27; &#x27; * (width * 2 + 2) print( blank.join( [&#x27;&#123;: &gt;2d&#125;&#x27;.format(num) for num in self._data[2 ** i - 1:min(2 ** (i + 1) - 1, len(self._data))]])) print() def _swap(self, i: int, j: int) -&gt; None: &quot;&quot;&quot; 交换两个元素的值 :param i: :param j: :return: &quot;&quot;&quot; self._data[i], self._data[j] = self._data[j], self._data[i] def push(self, item: int) -&gt; None: &quot;&quot;&quot; 往树中添加一个元素 :param item: :return: &quot;&quot;&quot; self._data.append(item) # 将最后一个元素，也就是刚刚才添加的元素，上移到保证树大小有序的位置 self._siftup(self._size() - 1) def _siftup(self, index: int) -&gt; None: while True: parent = (index - 1) &gt;&gt; 1 # 右移一位，等价于除以二 # 如果移动到了头部，或者说父元素已经大于了当前元素，已经有序不需要再移动 if index &lt;= 0 or self._data[parent] &gt;= self._data[index]: break # 还没有序，需要将当前值和父节点的值交换，并且让父节点继续进行下一轮移动 self._swap(index, parent) index = parent def pop(self) -&gt; int: &quot;&quot;&quot; 弹出顶部最大元素 :return: &quot;&quot;&quot; max_item = self._data[0] # 将头部元素和最后一个元素做交换 self._swap(0, self._size() - 1) # 弹出最后一个元素 self._data.pop() # 将第一个元素，也就是从尾部置换而来的元素移动到合适的位置 self._shift_down(0) return max_item def _shift_down(self, index) -&gt; None: while True: child = (index &lt;&lt; 1) + 1 # 如果右侧子节点更大，就使用右侧子节点进行置换 if child + 1 &lt; self._size() and self._data[child] &lt; self._data[child + 1]: child += 1 # 如果移动到了末尾，或者当前节点已经大于子节点，则可以停止移动了 if child &gt;= self._size() or self._data[index] &gt;= self._data[child]: break # 还没有序，需要将当前值和子节点的值交换，并且让子节点继续进行下一轮移动 self._swap(index, child) index = childif __name__ == &#x27;__main__&#x27;: range_num, num = 1000, 300 data = random.sample(range(range_num), num) sorted_data = sorted(data, reverse=True) heap = Heap() for d in data: heap.push(d) heap.pretty_print() for n in range(num): v1 = sorted_data[n] v2 = heap.pop() assert v1 == v2, &#x27;&#x27; print(&#x27;&#123;&#125; -&gt; &#123;&#125;&#x27;.format(v1, v2)) for n in range(10): print(&#x27;-&#x27; * 100) heap.push(n) heap.pretty_print() 参考https://www.cnblogs.com/q1214367903/p/14220949.html","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"简单了解一下动态规划","slug":"A-brief-look-at-Dynamic-programming","date":"2022-06-10T10:47:28.000Z","updated":"2025-08-22T15:42:13.329Z","comments":true,"path":"2022/06/10/A-brief-look-at-Dynamic-programming/","link":"","permalink":"https://www.nosuchfield.com/2022/06/10/A-brief-look-at-Dynamic-programming/","excerpt":"","text":"动态规划是一种求最优解的方式，个人了解也不是很深，胡乱写写，算是一点点自己的理解，有不对的地方欢迎批评。动态规划是一种在多个状态间进行转移时，由上一个最优状态推导出下一个最优状态的方式，而上一个最优状态又是由上上个最优状态推导得到的，如此不断向前推进，最后我们只需要知道初始最优状态即可。通过初始最优状态和状态间转移的逻辑和方式，我们就能获得全局最优状态。（是不是感觉有点像数学归纳法？） 举一个斐波拉契数列的例子，最简单的解法自然是使用递归实现 123456def fab(n): if n == 0: return 0 if n == 1: return 1 return fab(n - 1) + fab(n - 2) 简单分析就可以发现，以上例子中，很多的数字被重复计算了。例如在计算fab(5)时fab(3)已经被计算了，但是在计算fab(4)时fab(3)又被计算了一遍。因此，我们可以用一个table保存已经计算好的数据，避免重复计算 123456789101112table = &#123;&#125;def fab(n): if n in table: return table[n] if n == 0: result = 0 elif n == 1: result = 1 else: result = fab(n - 1) + fab(n - 2) table[n] = result return result 更改了策略之后，我们发现计算速度快了很多，这其实就是动态规划需要避免的重叠子问题，这些重叠子问题的存在导致如果使用暴力穷举会产生很多额外的计算量。动态规划的解决办法就是找到最优子结构，通过不断的在最优子结构之间进行状态转移，最终得到最优解，而这个状态转移逻辑就称为状态转移方程。 再次观察可以知道，其实斐波拉契数列的计算只依赖于当前的值的前两个值，所以我们并不需要使用一个table来存数据，而只需要存储两个前值变量即可 123456789101112def fab(n): if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 for i in range(2, n + 1): tmp = a + b a = b b = tmp return b 从上面我们就可以知道，其实斐波拉契数列的计算过程就是一个使用最优子结构和状态转移方程还有初始状态，最终获得全局最优解的过程。下面再看一个跳台阶的例子 有一个楼梯，一次可以跳1个台阶或者2个台阶，问跳n个台阶一共有多少种跳法 上面的问题看似无从着手，但是如果使用上面的动态规划思想思索一下就可以想到，跳n个台阶的跳法，其实就等于跳n - 1个台阶的跳法数目，加上跳n - 2个台阶的跳法数目。为什么可以这样考虑呢，因为跳到最后一个台阶，可能是从第n - 1个台阶跳了一个台阶跳上去的，所以这种情况下只需要考虑n - 1个台阶有多少种跳法即可。当然还有一种可能，是从第n - 2个台阶跳了两个台阶跳上去的，此时只需要考虑n - 2个台阶的跳法数量即可。因此，跳n个台阶的跳法其实就等于n-1和n-2个台阶的跳法之和，即 DP[n] = DP[n - 1] + DP[n - 2] 转移方程确定之后，我们只需要再确定初始状态即可（是不是越发的感觉像数学归纳法了）。简单分析就可以发现，跳1个台阶有1种跳法，跳2个台阶有2种跳法（一次跳2个，或者一次跳1个跳2次）。即 DP[1] = 1 DP[2] = 2 因此我们可以构建如下代码逻辑 123456789101112def jump(n): if n == 1: return 1 if n == 2: return 2 a = 1 b = 2 for i in range(3, n + 1): tmp = a + b a = b b = tmp return b 如上就是一个典型的动态规划解决问题的过程。我们再看一个问题 给k种面值的硬币，面值分别为c1, c2 … ck，每种硬币的数量无限，再给一个总金额amount，问最少需要几枚硬币凑出这个金额，如果不可能凑出，算法返回-1 有了上面的训练，这题我们就可以稍微有点思路了。首先我们需要确定状态转移方程，这里的状态就是总金额，而状态转移就是金额跟随着硬币的增加而产生的剩余金额变化。要知道amount的最小硬币数，其实我们只需要知道amount - c的最小硬币数，amount的最小硬币数就是amount - c的最小硬币数再加1。但是因为有多个硬币，所以我们还需要对不同的amount - c进行判断，先得到其前置条件的最优解。 我们可以得到其状态转移方程 DP[n] = min(DP[n - c1], DP[n - c2] ... DP[n - ck]) + 1 其中DP[0] = 0，DP[负数] = -1。由此我们可以构建如下代码逻辑 1234567891011121314151617181920212223def coin_problem(coins, amount): coin_problem_table = dict() # &#123;&quot;金额&quot;:&quot;硬币数&quot;&#125; def dp(n): if n in coin_problem_table: return coin_problem_table[n] if n == 0: return 0 if n &lt; 0: return -1 res = None for coin in coins: val = dp(n - coin) # 分解为子问题 if val == -1: continue # 没有解，就尝试下一个硬币 if res is None or res &gt; val: res = val # 最优子解 if res is None: # 没有解 res = -1 else: res += 1 # 加上这次新加的硬币 coin_problem_table[n] = res return res return dp(amount) 以上问题其实是LeetCode的一个零钱兑换问题，如上代码在LeetCode中超过了93%的提交，效率还是不错的。 上面我们说的都是一维的问题，事实上动态规划时常会以二维数组的形式出现，下面我看一个例子 一个机器人位于一个 m x n 的网格左上角，机器人每次只能向右或向下走一格，问机器人走到右下角有多少种方式？ 看到了问题，我们就可以开始分析，机器人走到右下角的路径，肯定可以由它到右下角之前的前一个格子的路径推导得到。假设我们把格子都标上坐标，横着的用i表示，竖着的用j表示，显然0 &lt;= i &lt;= m - 1且0 &lt;= j &lt;= n - 1，我们也可以得到DP转移方程 DP[i][j] = DP[i - 1][j] + DP[i][j - 1] 此外，我们可以发现，在最左边一列或者最上面一行的所有方格，其都只有一种走法。即对于最左一列，机器人只能往下走，对于最上面一行，机器人只能往右走，由此我们可以得到初始状态 DP[0...m - 1][0] = 1 DP[0][0...n - 1] = 1 得到了转移方程和初始状态，那么实现代码也就很简单了 12345678910def robot_maze(m, n): dp = [[0] * n] * m # 创建二维数组 for i in range(m): # 第一行 dp[i][0] = 1 for j in range(n): # 第一列 dp[0][j] = 1 for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1] 这同样也是LeetCode的一道题目，我的实现超过了91%的时间和60%的内存，效率也还是不错的。 上面我们介绍了动态规划的思路和解决问题的方式，其中最重要的就是状态转移和初始状态的确定。通过这些练习，我们对动态规划已经有了一些了解，看起来我们已经熟悉了动态规划了。但事实是动态规划难就难在其变种太多，并且有些问题的状态转移很抽象。遇到这些变种的时候，我们可能很难才能确定状态设计和状态转移方程，这些只能通过不断地去练习刷题才能有所提升。 本文涉及到的完整代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122import timedef fab1(n): if n == 0: return 0 if n == 1: return 1 return fab1(n - 1) + fab1(n - 2)table = &#123;&#125;def fab2(n): if n in table: return table[n] if n == 0: result = 0 elif n == 1: result = 1 else: result = fab2(n - 1) + fab2(n - 2) table[n] = result return resultdef fab3(n): if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 for i in range(2, n + 1): tmp = a + b a = b b = tmp return bdef jump(n): if n == 1: return 1 if n == 2: return 2 a = 1 b = 2 for i in range(3, n + 1): tmp = a + b a = b b = tmp return bdef coin_problem(coins, amount): coin_problem_table = dict() # &#123;&quot;金额&quot;:&quot;硬币数&quot;&#125; def dp(n): if n in coin_problem_table: return coin_problem_table[n] if n == 0: return 0 if n &lt; 0: return -1 res = None for coin in coins: val = dp(n - coin) # 分解为子问题 if val == -1: continue # 没有解，就尝试下一个硬币 if res is None or res &gt; val: res = val # 最优子解 if res is None: # 没有解 res = -1 else: res += 1 # 加上这次新加的硬币 coin_problem_table[n] = res return res return dp(amount)def robot_maze(m, n): dp = [[0] * n] * m # 创建二维数组 for i in range(m): # 第一行 dp[i][0] = 1 for j in range(n): # 第一列 dp[0][j] = 1 for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]if __name__ == &#x27;__main__&#x27;: # x = 35 # # start = time.time() # print(fab1(x)) # print(&#x27;fab1 cost: &#123;&#125;ms&#x27;.format((time.time() - start) * 1000)) # # start = time.time() # print(fab2(x)) # print(&#x27;fab2 cost: &#123;&#125;ms&#x27;.format((time.time() - start) * 1000)) # # start = time.time() # print(fab3(x)) # print(&#x27;fab3 cost: &#123;&#125;ms&#x27;.format((time.time() - start) * 1000)) # print(jump(7)) # print(coin_problem([186, 419, 83, 408], 6249)) print(robot_maze(3, 7)) 参考如何学好动态规划什么是动态规划（Dynamic Programming）？动态规划的意义是什么？ - 帅地的回答 - 知乎","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"数学","slug":"数学","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"常见排序算法的原理和实现","slug":"Principles-and-implementation-of-common-sorting-algorithms","date":"2022-05-27T14:11:38.000Z","updated":"2025-08-22T15:42:13.345Z","comments":true,"path":"2022/05/27/Principles-and-implementation-of-common-sorting-algorithms/","link":"","permalink":"https://www.nosuchfield.com/2022/05/27/Principles-and-implementation-of-common-sorting-algorithms/","excerpt":"","text":"冒泡排序冒泡排序的原理很简单，就是每次都把当前无序序列中最大（或者最小）的元素移动到序列的开头（或者结尾），之后再对除该元素之外的剩余序列做同样的操作。当所有的元素都冒泡完毕之后，整个序列就会变得有序。冒泡排序的过程正如它的名字一般，每次都把序列中最大的元素移动到末尾（假设我们选择了这种规则），这种操作就好像水中的泡泡不断地从水中浮到水面一般。 冒泡排序的实现如下，简单观察就可以知道它的时间复杂度为O(n2) 123456def bubble_sort(arr): length = len(arr) for i in range(length - 1): for j in range(length - 1 - i): if arr[j] &gt; arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] 选择排序原理上类似于冒泡排序，区别在于冒泡排序比较的是相邻元素的大小，选择排序则会与一个固定的数值进行大小比较，省去了一些没有必要的比较过程。同样是获取一个无序序列的最小值并放到开头，冒泡排序是逐个比较并交换值，而选择排序会以第一个元素作为基准值进行比较，获取到最小值后只需要把最小值和开头元素进行交换即可。 选择排序实现如下，复杂度为O(n2) 12345678def select_sort(arr): length = len(arr) for i in range(length): min_num_index = i for j in range(i, length): if arr[j] &lt; arr[min_num_index]: min_num_index = j arr[min_num_index], arr[i] = arr[i], arr[min_num_index] 插入排序插入排序是将序列分为两部分，一部分有序，一部分无序。每次从无序序列选择一个元素插入到有序序列中的正确位置，保证有序序列仍然有序，就好像打牌的时候不断地抓牌把牌插入到正确的位置一般。在这里我们把序列的前半段当做有序序列，后半段当做无序序列。 插入排序实现如下，复杂度为O(n2) 123456789def insert_sort(arr): length = len(arr) for i in range(1, length): value = arr[i] j = i - 1 while j &gt;= 0 and value &lt; arr[j]: # 元素向前挪动 arr[j + 1] = arr[j] # 全部向后移一位 j -= 1 arr[j + 1] = value 归并排序归并排序是将两个有序序列合并为一个序列，而合并前的有序序列又可以由两个有序序列合并得到，如此反复最终实现排序。 归并排序实现如下，复杂度为O(NlogN) flat1234567891011121314151617181920212223242526272829303132333435def merge_sort(arr): def _merge_sort(_arr, left, right): if left &gt;= right: return # 计算中间位置 mid = (left + right) // 2 # 获得左半边的有序序列 _merge_sort(_arr, left, mid) # 获得右半边的有序序列 _merge_sort(_arr, mid + 1, right) tmp = [] i = left j = mid + 1 while i &lt;= mid or j &lt;= right: # 遍历 if i &gt; mid: # i已经到了尽头，只存j tmp.append(_arr[j]) j += 1 continue if j &gt; right: # j已经到了尽头，只存i tmp.append(_arr[i]) i += 1 continue # 取较小的那个值 if _arr[i] &lt; _arr[j]: tmp.append(_arr[i]) i += 1 else: tmp.append(_arr[j]) j += 1 _arr[left: right + 1] = tmp # 将这一段序列设为有序 _merge_sort(arr, 0, len(arr) - 1) 快速排序快速排序和归并排序类似，都是使用分治法。区别在于归并排序是先创建两个有序的子序列，而快速排序是随机选取一个主元（pivot），然后将大于该元素的值放在其右边，小于该元素的值放在其左边。如此反复，最终序列就变得有序了。 快速排序实现如下，复杂度为O(NlogN) 12345678910111213141516171819def quick_sort(arr): def _quick_sort(_arr, left, right): if left &gt;= right: return pivot = random.randint(left, right) # 随机一个pivot _arr[pivot], _arr[right] = _arr[right], _arr[pivot] # 把这个值放到最右边 j = left for i in range(left, right): if _arr[i] &lt; _arr[right]: # 如果当前这个值小于pivot对应的值 _arr[i], _arr[j] = _arr[j], _arr[i] # 将这个值放到左边去 j += 1 _arr[j], _arr[right] = _arr[right], _arr[j] # 最后把这个值放在小值和大值的中间 # 对左右两边的值进行分治 _quick_sort(_arr, left, j - 1) _quick_sort(_arr, j + 1, right) _quick_sort(arr, 0, len(arr) - 1) 包含所有排序算法和测试的完整代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141import copyimport randomimport timedef log(time_log=True, result_log=False): def decorator(func): def wrapper(*args, **kw): start = time.time() result = func(*args, **kw) end = time.time() if time_log: print(&#x27;&#123;:&gt;12&#125;: &#123;:&gt;7.2f&#125;ms&#x27;.format(func.__name__, (end - start) * 1000)) if result_log: print(result, end=&#x27;\\n\\n&#x27;) return result return wrapper return decorator@log(result_log=True)def get_array(start=0, end=1000, length=500): if start &gt;= end or length &lt;= 0: return [] random_list = [] for i in range(length): random_list.append(random.randint(start, end)) return random_list@log()def bubble_sort(arr): length = len(arr) for i in range(length - 1): for j in range(length - 1 - i): if arr[j] &gt; arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j]@log()def select_sort(arr): length = len(arr) for i in range(length): min_num_index = i for j in range(i, length): if arr[j] &lt; arr[min_num_index]: min_num_index = j arr[min_num_index], arr[i] = arr[i], arr[min_num_index]@log()def insert_sort(arr): length = len(arr) for i in range(1, length): value = arr[i] j = i - 1 while j &gt;= 0 and value &lt; arr[j]: # 元素向前挪动 arr[j + 1] = arr[j] # 全部向后移一位 j -= 1 arr[j + 1] = value@log()def merge_sort(arr): def _merge_sort(_arr, left, right): if left &gt;= right: return # 计算中间位置 mid = (left + right) // 2 # 获得左半边的有序序列 _merge_sort(_arr, left, mid) # 获得右半边的有序序列 _merge_sort(_arr, mid + 1, right) tmp = [] i = left j = mid + 1 while i &lt;= mid or j &lt;= right: # 遍历 if i &gt; mid: # i已经到了尽头，只存j tmp.append(_arr[j]) j += 1 continue if j &gt; right: # j已经到了尽头，只存i tmp.append(_arr[i]) i += 1 continue # 取较小的那个值 if _arr[i] &lt; _arr[j]: tmp.append(_arr[i]) i += 1 else: tmp.append(_arr[j]) j += 1 _arr[left: right + 1] = tmp # 将这一段序列设为有序 _merge_sort(arr, 0, len(arr) - 1)@log()def quick_sort(arr): def _quick_sort(_arr, left, right): if left &gt;= right: return pivot = random.randint(left, right) # 随机一个pivot _arr[pivot], _arr[right] = _arr[right], _arr[pivot] # 把这个值放到最右边 j = left for i in range(left, right): if _arr[i] &lt; _arr[right]: # 如果当前这个值小于pivot对应的值 _arr[i], _arr[j] = _arr[j], _arr[i] # 将这个值放到左边去 j += 1 _arr[j], _arr[right] = _arr[right], _arr[j] # 最后把这个值放在小值和大值的中间 # 对左右两边的值进行分治 _quick_sort(_arr, left, j - 1) _quick_sort(_arr, j + 1, right) _quick_sort(arr, 0, len(arr) - 1)if __name__ == &#x27;__main__&#x27;: random_array = get_array() array1 = copy.deepcopy(random_array) bubble_sort(array1) array2 = copy.deepcopy(random_array) select_sort(array2) array3 = copy.deepcopy(random_array) insert_sort(array3) array4 = copy.deepcopy(random_array) merge_sort(array4) array5 = copy.deepcopy(random_array) quick_sort(array5) 执行结果如下 get_array: 1.08ms [606, 969, 12, 732, 279, 820, 962, 752, 989, 594, 789, 83, 818, 555, 872, 266, 863, 800, 953, 879, 371, 685, 171, 325, 868, 141, 209, 581, 660, 252, 426, 731, 672, 360, 913, 427, 44, 272, 399, 291, 492, 957, 921, 315, 65, 10, 745, 343, 832, 144, 550, 403, 634, 579, 863, 164, 730, 562, 487, 23, 755, 957, 906, 378, 656, 18, 337, 446, 315, 36, 530, 826, 788, 384, 687, 760, 769, 161, 424, 57, 572, 506, 954, 192, 765, 111, 184, 732, 220, 602, 815, 930, 915, 284, 347, 441, 530, 378, 938, 246, 434, 848, 334, 259, 535, 747, 125, 137, 77, 881, 403, 390, 758, 298, 268, 440, 428, 793, 871, 364, 688, 180, 184, 957, 398, 300, 336, 981, 212, 650, 986, 742, 182, 553, 149, 898, 805, 796, 489, 727, 253, 333, 512, 464, 310, 688, 241, 533, 49, 31, 338, 500, 359, 403, 328, 277, 259, 844, 4, 802, 715, 209, 889, 596, 177, 521, 707, 435, 970, 960, 800, 990, 749, 833, 837, 845, 993, 585, 961, 783, 649, 677, 134, 517, 784, 491, 974, 668, 442, 200, 692, 549, 506, 951, 175, 292, 585, 98, 637, 561, 178, 500, 673, 812, 22, 893, 701, 216, 575, 642, 183, 814, 544, 926, 280, 683, 3, 588, 743, 815, 707, 88, 666, 886, 775, 861, 421, 542, 204, 469, 462, 698, 698, 893, 748, 576, 154, 372, 253, 120, 377, 549, 415, 492, 613, 377, 160, 325, 960, 245, 581, 697, 782, 663, 431, 71, 83, 484, 283, 454, 913, 219, 192, 77, 202, 184, 733, 775, 582, 945, 7, 445, 143, 909, 507, 600, 189, 158, 19, 800, 304, 61, 874, 945, 763, 452, 996, 667, 70, 705, 953, 877, 864, 57, 467, 320, 361, 543, 645, 749, 312, 821, 139, 176, 667, 908, 506, 943, 738, 167, 267, 803, 502, 40, 598, 699, 40, 259, 74, 28, 761, 482, 200, 402, 784, 878, 189, 405, 384, 260, 248, 354, 265, 26, 89, 685, 964, 618, 546, 424, 604, 339, 621, 343, 68, 401, 534, 69, 476, 826, 747, 497, 594, 553, 863, 238, 856, 787, 723, 18, 680, 797, 945, 822, 455, 0, 822, 245, 715, 184, 399, 597, 78, 780, 913, 85, 825, 873, 969, 550, 776, 729, 704, 582, 227, 723, 923, 120, 104, 207, 885, 977, 66, 393, 672, 236, 812, 85, 659, 36, 900, 46, 763, 481, 806, 545, 974, 312, 757, 66, 538, 689, 806, 632, 284, 717, 358, 490, 375, 873, 203, 601, 276, 121, 544, 16, 450, 310, 255, 274, 232, 520, 822, 908, 806, 254, 357, 365, 41, 967, 258, 894, 174, 764, 656, 906, 212, 362, 154, 371, 836, 365, 237, 651, 767, 126, 85, 361, 434, 399, 58, 362, 846, 343, 293, 492, 172, 451, 962, 293, 100, 777, 28, 788, 179, 10, 292, 53, 479, 126, 0, 433, 850, 525, 723, 276, 611, 66, 401, 536, 570, 798, 231, 993, 222, 171, 737, 961, 222, 430] bubble_sort: 181.51ms select_sort: 51.87ms insert_sort: 29.96ms merge_sort: 3.12ms quick_sort: 2.97ms 参考十大常见排序算法常见的基本排序算法Data Structure VisualizationsComparison Sorting AlgorithmsVisuAlgo","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"使用Celery实现Python分布式任务处理","slug":"Distributed-task-processing-in-Python-using-Celery","date":"2022-04-16T17:03:13.000Z","updated":"2025-08-22T15:42:13.333Z","comments":true,"path":"2022/04/16/Distributed-task-processing-in-Python-using-Celery/","link":"","permalink":"https://www.nosuchfield.com/2022/04/16/Distributed-task-processing-in-Python-using-Celery/","excerpt":"","text":"Celery是一个任务队列，它可以实现跨进程和机器的分布式任务处理。任务队列的输入端会输入各种任务（task），这些任务会在输出端由worker进行处理，这些任务会由客户端通过发送消息的方式交给broker，随后broker把任务分发给worker。 安装组件本文使用到的组件版本 组件 版本 Python 2.7.16 Celery 4.4.7 Redis 6.2.4 redis-py 3.2.1 首先我们需要安装celery和Redis的依赖包 pip install celery==4.4.7 pip install redis==3.2.1 Celery支持多种类型的broker，在这里我们主要使用Redis作为Celery的broker，关于Redis的安装和使用可以参考我之前的文章Redis failover。 构建应用我们首先创建如下的目录结构（本文的示例代码都放在了GitHub上面） . ├── run.py └── search ├── __init__.py ├── config.py └── tasks.py 创建celery应用search/config.py包含了一些celery的配置文件，具体配置如下 12345678# 设置任务模块include = [&#x27;search.tasks&#x27;]# 对指定的任务使用一个特定的队列进行路由，该任务在发送时会被发送到该指定队列中# 未指定队列的任务默认发送到一个名叫celery的队列task_routes = &#123; &#x27;search.tasks.sort_list&#x27;: &#123;&#x27;queue&#x27;: &#x27;queue_1&#x27;&#125;&#125; 在search/__init__.py中我们利用如上的配置信息初始化一个celery的app 123456from __future__ import absolute_importfrom celery import Celeryfrom . import configapp = Celery(&#x27;search&#x27;, broker=&#x27;redis://127.0.0.1:6379/1&#x27;, backend=&#x27;redis://127.0.0.1:6379/1&#x27;)app.config_from_object(config) 创建celery任务如上我们创建了一个celery的app，该app使用Redis作为broker和backend，之后我们在search/tasks.py中创建任务 123456789101112131415import requestsfrom . import app@app.taskdef search_url(url): r = requests.get(url) return r.status_code@app.taskdef add(x, y): return x + y@app.taskdef sort_list(data): return sorted(data) 启动celery的worker写完代码之后我们在项目根目录执行如下命令启动一个celery的worker celery -A search worker -Q queue_1,celery -l info 其中，-A是--app的简写，代表启动的应用；worker表示当前命令是要启动一个celery的worker；-Q queue_1,celery表示当前worker监听queue_1和celery队列，不指定的话默认使用一个名叫celery的队列；-l info表示日志的级别。启动后输出如下内容，代表celery的worker已经成功启动了 -------------- celery@Mac v4.4.7 (cliffs) --- ***** ----- -- ******* ---- Darwin-19.6.0-x86_64-i386-64bit 2022-04-15 14:30:06 - *** --- * --- - ** ---------- [config] - ** ---------- .&gt; app: search:0x104604090 - ** ---------- .&gt; transport: redis://127.0.0.1:6379/1 - ** ---------- .&gt; results: redis://127.0.0.1:6379/1 - *** --- * --- .&gt; concurrency: 4 (prefork) -- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker) --- ***** ----- -------------- [queues] .&gt; celery exchange=celery(direct) key=celery .&gt; queue_1 exchange=queue_1(direct) key=queue_1 [tasks] . search.tasks.add . search.tasks.search_url . search.tasks.sort_list [2022-04-15 14:30:06,838: INFO/MainProcess] Connected to redis://127.0.0.1:6379/1 [2022-04-15 14:30:06,855: INFO/MainProcess] mingle: searching for neighbors [2022-04-15 14:30:07,930: INFO/MainProcess] mingle: all alone [2022-04-15 14:30:07,983: INFO/MainProcess] celery@Mac ready. 发送任务之后我们在run.py中发送celery任务并交给worker执行 12345678910import loggingfrom search.tasks import search_url, add, sort_list, get_redis_keysif __name__ == &#x27;__main__&#x27;: logging.info(search_url.delay(&#x27;https://www.jd.com&#x27;).get(5)) logging.info(add.delay(1.5, 3.5).get(5)) data = [5, 86, 59, 17, 24, 92, 38, 95, 13, 89, 63, 3, 4, 60, 6] logging.info(sort_list.delay(data).get(5)) # 将任务发送到指定队列，如果该队列没有worker监听，则此任务不会执行，5秒后超时 logging.info(add.apply_async((1.5, 3.5), queue=&#x27;queue_2&#x27;).get(5)) 只需要在原有的方法基础上添加一个delay方法，就可以实现任务的发送并交给worker执行，非常简单。delay是apply_async方法的简化版，在apply_async方法中我们还可以指定该任务的发送队列，以及一些其它的配置。 apply_async方法的返回值是一个AsyncResult类型，该类型的对象可以获取任务的信息，例如successful()和failed()方法可以获取到该任务是否执行成功，id和state属性可以获取到该任务的id和状态。如上所示，get()方法可以获取到该任务的返回值，为了避免卡死可以在执行时添加get(timeout)方法的超时时间。 通过设置队列实现路由功能celery可以通过设置队列来实现任务的路由。假设我们有三个任务，它们发送任务的队列设置分别为q1，q2，q3。同时我们还有三个worker，它们的队列设置分别为q1，q1，q2,q3。那么任务1将会发送到worker1或者worker2上执行，而任务2和任务3都会在worker3上执行，通过队列就可以实现把任务发送到指定的worker上执行的功能。 worker queue task 1 1 1 2 1 1 3 2,3 2,3 由上可见，task是和queue绑定的，一个task只能发送到一个指定的queue。而一个worker既可以监听多个queue，也可以多个worker监听一个queue，前者可以实现worker能力的扩展，后者可以实现任务的多负载均衡。 celery的监控Flower是一个celery的网页监控和管理工具，使用前需要先安装 pip install flower==0.9.2 之后我们可以启动它 celery -A search flower --port=5555 -Q queue_1,celery -l info 随后访问http://127.0.0.1:5555就可以查看celery的监控信息了，我们也可以在网页上对celery进行一些管理操作。 参考https://docs.celeryq.dev/en/v4.4.7/index.htmlhttps://github.com/RitterHou/celery_demo","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"消息队列","slug":"消息队列","permalink":"https://www.nosuchfield.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"Python","slug":"Python","permalink":"https://www.nosuchfield.com/tags/Python/"}]},{"title":"etcd的简单介绍","slug":"A-brief-introduction-to-etcd","date":"2022-01-14T18:00:29.000Z","updated":"2025-08-22T15:42:13.329Z","comments":true,"path":"2022/01/14/A-brief-introduction-to-etcd/","link":"","permalink":"https://www.nosuchfield.com/2022/01/14/A-brief-introduction-to-etcd/","excerpt":"","text":"etcd是一个开源的分布式一致性键值数据库，其基于Raft一致性算法，用于数据存储、服务发现和调度协调。 安装首先我们下载程序包 useradd etcd su - etcd wget https://github.com/etcd-io/etcd/releases/download/v3.5.4/etcd-v3.5.4-linux-amd64.tar.gz tar -zxvf etcd-v3.5.4-linux-amd64.tar.gz cd etcd-v3.5.4-linux-amd64 之后我们可以查询etcd的版本 $ ./etcd --version etcd Version: 3.5.4 Git SHA: 08407ff76 Go Version: go1.16.15 Go OS/Arch: linux/amd64 我们在三台负载172.19.34.15、172.19.34.56和172.19.34.82上分别执行如上操作来安装etcd。 搭建集群我们使用etcd来构建一个集群，服务启动的相关配置既可以使用命令行设置也可以使用配置文件设置。相关配置的含义如下 div table {white-space: nowrap;} 配置 含义 默认值 name 当前节点的名称 default initial-advertise-peer-urls 告知其它节点，当前节点与其它节点交流的ip地址和端口 http://localhost:2380 advertise-client-urls 告知其它节点，当前节点与客户端通信的ip地址和端口 http://localhost:2379 listen-peer-urls 当前节点所监听的，用于与其它节点交流的ip地址和端口 http://localhost:2380 listen-client-urls 当前节点所监听的，用于与客户端通信的ip地址和端口 http://localhost:2379 initial-cluster-token 集群的token属性，相当于集群的名称 etcd-cluster initial-cluster 集群的节点信息，用于与其它的节点进行网络连接 default&#x3D;http://localhost:2380 initial-cluster-state 第一次启动集群设为new，加入已有集群设为existing new 在三台设备上面设置好一些启动所需要的属性 # 集群的名称 TOKEN=my-etcd-cluster # 所有的节点网络连接信息 CLUSTER=node1=http://172.19.34.15:2380,node2=http://172.19.34.56:2380,node3=http://172.19.34.82:2380 # 只在172.19.34.15上设置 NAME=node1 IP=172.19.34.15 # 只在172.19.34.56上设置 NAME=node2 IP=172.19.34.56 # 只在172.19.34.82上设置 NAME=node3 IP=172.19.34.82 之后我们使用命令行设置在三个节点上分别启动三个进程 $ ./etcd --name $&#123;NAME&#125; \\ --initial-advertise-peer-urls http://$&#123;IP&#125;:2380 \\ --advertise-client-urls http://$&#123;IP&#125;:2379 \\ --listen-peer-urls http://$&#123;IP&#125;:2380 \\ --listen-client-urls http://$&#123;IP&#125;:2379,http://127.0.0.1:2379 \\ --initial-cluster-token $&#123;TOKEN&#125; \\ --initial-cluster $&#123;CLUSTER&#125; 在三台负载都执行了etcd启动命令之后，正常情况下三个节点已经构成了一个etcd集群。集群搭建好了之后，我们可以使用etcdctl客户端获取集群中的节点信息 $ ENDPOINTS=172.19.34.15:2379,172.19.34.56:2379,172.19.34.82:2379 $ ./etcdctl --endpoints=$ENDPOINTS member list 3524bbececbcecf7, started, node2, http://172.19.34.56:2380, http://172.19.34.56:2379, false b1d70dbaf73a7a68, started, node1, http://172.19.34.15:2380, http://172.19.34.15:2379, false e4391b8282b4faf7, started, node3, http://172.19.34.82:2380, http://172.19.34.82:2379, false 操作集群键值对的写入和读取操作./etcdctl --endpoints=$ENDPOINTS put name &quot;zhangsan&quot; ./etcdctl --endpoints=$ENDPOINTS get name ./etcdctl --endpoints=$ENDPOINTS --write-out=&quot;json&quot; get name ./etcdctl --endpoints=$ENDPOINTS put name1 &quot;lisi&quot; ./etcdctl --endpoints=$ENDPOINTS get name --prefix ./etcdctl --endpoints=$ENDPOINTS del name 锁操作# 在两个终端执行该命令，只有一个会成功，另一个会等待直到第一个锁释放 ./etcdctl --endpoints=$ENDPOINTS lock mutex1 监控key# 在一个终端对指定key进行监控 ./etcdctl --endpoints=$ENDPOINTS watch stock1 # 在另一个终端操作这个key，第一个终端的监控程序会收到操作数据 ./etcdctl --endpoints=$ENDPOINTS put stock1 1000 租约# 创建一个租约，时长30秒 ./etcdctl --endpoints=$ENDPOINTS lease grant 30 # lease 7af781dc5d746b11 granted with TTL(30s) ./etcdctl --endpoints=$ENDPOINTS put name zhangsan --lease=7af781dc5d746b11 # 30秒后数据就没有了 ./etcdctl --endpoints=$ENDPOINTS get name 查看集群状态./etcdctl --write-out=table --endpoints=$ENDPOINTS endpoint status +-------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+ | ENDPOINT | ID | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS | +-------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+ | 172.19.34.15:2379 | b1d70dbaf73a7a68 | 3.5.4 | 20 kB | true | false | 5 | 39 | 39 | | | 172.19.34.56:2379 | 3524bbececbcecf7 | 3.5.4 | 20 kB | false | false | 5 | 39 | 39 | | | 172.19.34.82:2379 | e4391b8282b4faf7 | 3.5.4 | 20 kB | false | false | 5 | 39 | 39 | | +-------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+ ./etcdctl --endpoints=$ENDPOINTS endpoint health 172.19.34.15:2379 is healthy: successfully committed proposal: took = 20.180745ms 172.19.34.82:2379 is healthy: successfully committed proposal: took = 21.915962ms 172.19.34.56:2379 is healthy: successfully committed proposal: took = 24.358102ms 参考https://etcd.io/docs/v3.5/tutorials/https://www.infoq.cn/article/zqzelyy57xgvb6ecxcfb","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"分布式一致性","slug":"分布式一致性","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7/"},{"name":"分布式","slug":"分布式","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"一致性","slug":"一致性","permalink":"https://www.nosuchfield.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7/"},{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Redis服务的安装和使用","slug":"Installation-and-use-of-Redis","date":"2021-04-18T17:11:12.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2021/04/18/Installation-and-use-of-Redis/","link":"","permalink":"https://www.nosuchfield.com/2021/04/18/Installation-and-use-of-Redis/","excerpt":"","text":"我在文章Redis failover中介绍过如何安装Redis并且通过sentinel（哨兵）实现Redis的高可用。随着Redis的不断更新，现在的Redis（我使用的版本是6.2.6）已经支持了集群功能，本文记录了如何搭建一个Redis集群并使用。 我们使用如下的6台机器来构建一个Redis集群 172.19.65.196 172.19.72.108 172.19.72.112 172.19.72.203 172.19.65.228 172.19.65.136 下载源码并编译首先在172.19.65.196上下载Redis源代码并进行编译，这里我下载的版本是6.2.6 useradd -m redis su - redis wget https://download.redis.io/redis-stable.tar.gz tar -zxvf redis-stable.tar.gz cd redis-stable make 编译生成的可执行文件在src目录下 文件名 功能 redis-server Redis服务的启动程序 redis-cli Redis命令操作工具 redis-sentinel Redis哨兵，在Redis failover介绍过 redis-benchmark Redis性能测试工具 redis-check-rdb 检查快照文件状态 redis-check-aof 检查aof文件状态 这里我们只需要用到编译生成的redis-server程序，复制redis-server服务程序和redis.conf配置文件到用户根目录 cp /home/redis/redis-stable/src/redis-server /home/redis cp /home/redis/redis-stable/redis.conf /home/redis 修改配置文件，同步文件到所有的机器修改redis.conf文件，对一些属性进行设置，设置内容如下 cluster-enabled yes # 启用Redis集群设置 cluster-config-file nodes.conf # 集群配置信息的存储文件，该文件由Redis管理，不需要手动修改 cluster-node-timeout 15000 # 集群节点超过指定时间（毫秒）无响应，就认为该节点已经挂掉了 appendonly yes # 开启aof方式的数据持久化 bind 0.0.0.0 # 允许任何主机访问Redis的服务 随后我们将这两个文件同步到剩余的5台机器上，在5台机器上执行如下命令 useradd -m redis su - redis rsync -azvhP root@172.19.65.196:/home/redis/redis-server :/home/redis/redis.conf ./ 启动Redis进程并构建集群将redis-server和redis.conf这两个文件分发到所有的机器上之后，在所有的机器上启动Redis进程 ./redis-server redis.conf 6台机器上面的redis-server进程都启动好了之后，复制刚刚我们编译好的redis-cli程序到任意一台器上，连接所有的redis-server创建Redis集群并设置副本为1 ~ ./redis-cli --cluster create 172.19.65.196:6379 172.19.72.108:6379 \\ 172.19.72.112:6379 172.19.72.203:6379 172.19.65.228:6379 \\ 172.19.65.136:6379 --cluster-replicas 1 &gt;&gt;&gt; Performing hash slots allocation on 6 nodes... Master[0] -&gt; Slots 0 - 5460 Master[1] -&gt; Slots 5461 - 10922 Master[2] -&gt; Slots 10923 - 16383 Adding replica 172.19.65.228:6379 to 172.19.65.196:6379 Adding replica 172.19.65.136:6379 to 172.19.72.108:6379 Adding replica 172.19.72.203:6379 to 172.19.72.112:6379 M: 8e172b28314aad39c31ace1229f7d1ae4cdb4973 172.19.65.196:6379 slots:[0-5460] (5461 slots) master M: 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 172.19.72.108:6379 slots:[5461-10922] (5462 slots) master M: 2335076efd1d6f38eac1228d5b326380d92056f4 172.19.72.112:6379 slots:[10923-16383] (5461 slots) master S: 31e83cc017e9d15190b349e11c4762a0d33a3162 172.19.72.203:6379 replicates 2335076efd1d6f38eac1228d5b326380d92056f4 S: 0146973e61ffe3d9f63da5dfb9e565e02b1774b6 172.19.65.228:6379 replicates 8e172b28314aad39c31ace1229f7d1ae4cdb4973 S: f76fff860057dfab9d4df63b7ee183bb0a23e7df 172.19.65.136:6379 replicates 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 Can I set the above configuration? (type &#39;yes&#39; to accept): 如上显示了将要创建的集群的状态信息。redis会提示你是否使用如上的配置，输入yes并回车 &gt;&gt;&gt; Nodes configuration updated &gt;&gt;&gt; Assign a different config epoch to each node &gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster Waiting for the cluster to join &gt;&gt;&gt; Performing Cluster Check (using node 172.19.65.196:6379) M: 8e172b28314aad39c31ace1229f7d1ae4cdb4973 172.19.65.196:6379 slots:[0-5460] (5461 slots) master 1 additional replica(s) S: f76fff860057dfab9d4df63b7ee183bb0a23e7df 172.19.65.136:6379 slots: (0 slots) slave replicates 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 M: 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 172.19.72.108:6379 slots:[5461-10922] (5462 slots) master 1 additional replica(s) M: 2335076efd1d6f38eac1228d5b326380d92056f4 172.19.72.112:6379 slots:[10923-16383] (5461 slots) master 1 additional replica(s) S: 31e83cc017e9d15190b349e11c4762a0d33a3162 172.19.72.203:6379 slots: (0 slots) slave replicates 2335076efd1d6f38eac1228d5b326380d92056f4 S: 0146973e61ffe3d9f63da5dfb9e565e02b1774b6 172.19.65.228:6379 slots: (0 slots) slave replicates 8e172b28314aad39c31ace1229f7d1ae4cdb4973 [OK] All nodes agree about slots configuration. &gt;&gt;&gt; Check for open slots... &gt;&gt;&gt; Check slots coverage... [OK] All 16384 slots covered. 执行完命令之后，集群就已经创建了。根据如上显示的信息，此时6个节点的角色如下 节点 功能 172.19.65.196 master节点，保存slots 0-5460 172.19.72.108 master节点，保存slots 5461-10922 172.19.72.112 master节点，保存slots 10923-16383 172.19.72.203 172.19.72.112:6379的replica 172.19.65.228 172.19.65.196:6379的replica 172.19.65.136 172.19.72.108:6379的replica 集群启动后新生成的文件观察用户的根目录中除了redis-server和redis.conf之外，还生成了appendonly.aof、dump.rdb和nodes.conf文件 文件 作用 appendonly.aof AOF文件，通过追加的方式记录Redis的每一次写操作到磁盘 dump.rdb RDB快照文件，是将Redis内存中的数据持久化到磁盘中生成的 nodes.conf Redis进程用于保存Redis集群相关的配置信息，不需要手动修改 nodes.conf的内容如下，保存了一些和集群配置相关的信息，记录了哪些节点是master，哪些节点是slave并且它所追随的master节点是谁 f76fff860057dfab9d4df63b7ee183bb0a23e7df 172.19.65.136:6379@16379 slave 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 0 1650355208025 2 connected 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 172.19.72.108:6379@16379 master - 0 1650355209991 2 connected 5461-10922 2335076efd1d6f38eac1228d5b326380d92056f4 172.19.72.112:6379@16379 master - 0 1650355210995 3 connected 10923-16383 31e83cc017e9d15190b349e11c4762a0d33a3162 172.19.72.203:6379@16379 slave 2335076efd1d6f38eac1228d5b326380d92056f4 0 1650355213006 3 connected 0146973e61ffe3d9f63da5dfb9e565e02b1774b6 172.19.65.228:6379@16379 slave 8e172b28314aad39c31ace1229f7d1ae4cdb4973 0 1650355212000 1 connected 8e172b28314aad39c31ace1229f7d1ae4cdb4973 172.19.65.196:6379@16379 myself,master - 0 0 1 connected 0-5460 vars currentEpoch 6 lastVoteEpoch 0 触发failover我们可以通过客户端连接redis-server执行命令，-c表示连接的是一个集群。执行命令cluster nodes查看当前集群的节点信息，这里显示了master节点和slave节点 ~ ./redis-cli -c -h 172.19.65.196 -p 6379 &gt; cluster nodes f76fff860057dfab9d4df63b7ee183bb0a23e7df 172.19.65.136:6379@16379 slave 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 0 1650356492455 2 connected 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 172.19.72.108:6379@16379 master - 0 1650356495473 2 connected 5461-10922 2335076efd1d6f38eac1228d5b326380d92056f4 172.19.72.112:6379@16379 master - 0 1650356491451 3 connected 10923-16383 31e83cc017e9d15190b349e11c4762a0d33a3162 172.19.72.203:6379@16379 slave 2335076efd1d6f38eac1228d5b326380d92056f4 0 1650356494468 3 connected 0146973e61ffe3d9f63da5dfb9e565e02b1774b6 172.19.65.228:6379@16379 slave 8e172b28314aad39c31ace1229f7d1ae4cdb4973 0 1650356493462 1 connected 8e172b28314aad39c31ace1229f7d1ae4cdb4973 172.19.65.196:6379@16379 myself,master - 0 0 1 connected 0-5460 执行命令./redis-cli -h 172.19.72.112 -p 6379 debug segfault停止112节点的Redis进程，之后再使用cluster nodes查看集群信息 ~ ./redis-cli -h 172.19.65.196 cluster nodes | grep master 5e2aedd8c0b8ca9cc7839b3779fc34ceabfeda03 172.19.72.108:6379@16379 master - 0 1650356951720 2 connected 5461-10922 2335076efd1d6f38eac1228d5b326380d92056f4 172.19.72.112:6379@16379 master,fail - 1650356740773 1650356736743 3 disconnected 31e83cc017e9d15190b349e11c4762a0d33a3162 172.19.72.203:6379@16379 master - 0 1650356954752 7 connected 10923-16383 8e172b28314aad39c31ace1229f7d1ae4cdb4973 172.19.65.196:6379@16379 myself,master - 0 0 1 connected 0-5460 此时可以看到112已经挂掉了，而203接过112的职责成为了新的master，此时集群已经恢复正常。 进行数据读写操作为了方便使用，我们可以在redis.conf中添加配置daemonize yes使得Redis以守护进程的方式运行。我们可以使用依次停止节点修改配置再启动节点的方式，不停止整个集群修改配置。 使用命令./redis-cli -c -h 172.19.65.196 -p 6379进入Redis的交互式命令行 &gt; set counter 100 -&gt; Redirected to slot [6680] located at 172.19.65.136:6379 OK &gt; incr counter (integer) 101 &gt; incr counter (integer) 102 &gt; incr counter (integer) 103 &gt; incr counter (integer) 104 &gt; incr counter (integer) 105 &gt; incr counter (integer) 106 &gt; incr counter (integer) 107 &gt; incr counter (integer) 108 &gt; incr counter (integer) 109 &gt; incr counter (integer) 110 &gt; RPUSH mylist 11 -&gt; Redirected to slot [5282] located at 172.19.65.228:6379 (integer) 1 &gt; RPUSH mylist 22 (integer) 2 &gt; RPUSH mylist 33 (integer) 3 &gt; LRANGE mylist 0 -1 1) &quot;11&quot; 2) &quot;22&quot; 3) &quot;33&quot; &gt; hmset user:1000 username antirez birthyear 1977 verified 1 OK &gt; hget user:1000 username &quot;antirez&quot; &gt; hgetall user:1000 1) &quot;username&quot; 2) &quot;antirez&quot; 3) &quot;birthyear&quot; 4) &quot;1977&quot; 5) &quot;verified&quot; 6) &quot;1&quot; &gt; hget user:1000 birthyear &quot;1977&quot; &gt; SADD myset 1 12 3 3 1 2 33 88 1 2 3 (integer) 6 &gt; SMEMBERS myset 1) &quot;1&quot; 2) &quot;2&quot; 3) &quot;3&quot; 4) &quot;12&quot; 5) &quot;33&quot; 6) &quot;88&quot; 参考Scaling with Redis Cluster深入学习Redis之Redis Cluster","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"ZooKeeper的简单介绍","slug":"A-brief-introduction-to-ZooKeeper","date":"2021-04-15T10:22:47.000Z","updated":"2025-08-22T15:42:13.329Z","comments":true,"path":"2021/04/15/A-brief-introduction-to-ZooKeeper/","link":"","permalink":"https://www.nosuchfield.com/2021/04/15/A-brief-introduction-to-ZooKeeper/","excerpt":"","text":"用了很久的ZooKeeper了，稍微做个总结。ZooKeeper（以下简称ZK）是一个分布式组件，基于类似Paxos的ZAB一致性算法来实现。ZK保存的数据结构类似于一般的文件系统，只不过在ZK中文件夹也可以拥有数据，整体文件结构为一棵树型。 安装ZooKeeper去官网下载压缩包，随后使用rsync同步到三台机器上，我使用如下三台机器 172.19.65.196 172.19.72.108 172.19.72.112 解压压缩包，使用cp conf/zoo_sample.cfg conf/zoo.cfg得到配置文件，在三台机器的conf/zoo.cfg中添加如下配置 dataDir=/home/zookeeper/apache-zookeeper-3.8.0-bin/data server.1=172.19.65.196:2888:3888 server.2=172.19.72.108:2888:3888 server.3=172.19.72.112:2888:3888 然后在三台机器的dataDir目录下创建myid文件 vi /home/zookeeper/apache-zookeeper-3.8.0-bin/data/myid 三台机器的myid文件中对应修改的内容如下 机器 内容 172.19.65.196 1 172.19.72.108 2 172.19.72.112 3 启动ZK集群修改完毕之后使用命令依次启动三台机器上的ZK ./bin/zkServer.sh start 使用命令zkServer.sh status可以查看三台机器的状态 [zookeeper@lin-65-196 apache-zookeeper-3.8.0-bin]$ ./bin/zkServer.sh status ZooKeeper JMX enabled by default Using config: /home/zookeeper/apache-zookeeper-3.8.0-bin/bin/../conf/zoo.cfg Client port found: 2181. Client address: localhost. Client SSL: false. Mode: follower [zookeeper@lin-72-108 apache-zookeeper-3.8.0-bin]$ ./bin/zkServer.sh status ZooKeeper JMX enabled by default Using config: /home/zookeeper/apache-zookeeper-3.8.0-bin/bin/../conf/zoo.cfg Client port found: 2181. Client address: localhost. Client SSL: false. Mode: leader [zookeeper@lin-72-112-auto-5 apache-zookeeper-3.8.0-bin]$ ./bin/zkServer.sh status ZooKeeper JMX enabled by default Using config: /home/zookeeper/apache-zookeeper-3.8.0-bin/bin/../conf/zoo.cfg Client port found: 2181. Client address: localhost. Client SSL: false. Mode: follower 可以发现108节点是当前的leader，我们使用zkServer.sh stop停止108节点上面的ZK进程，再看状态可以发现112节点成为了的新的leader了。 使用ZooKeeper在其它的机器上使用客户端zkCli连接ZK集群 ~ zkCli -server 172.19.65.196:2181,172.19.72.108:2181,172.19.72.112:2181 Connecting to 172.19.65.196:2181,172.19.72.108:2181,172.19.72.112:2181 Welcome to ZooKeeper! JLine support is enabled WATCHER:: WatchedEvent state:SyncConnected type:None path:null [zk: 172.19.65.196:2181,172.19.72.108:2181,172.19.72.112:2181(CONNECTED) 0] 成功连接zk集群，之后我们可以进行创建、删除、查询等等操作 ls / create /Nanjing create /Nanjing/Yuhuatai ls /Nanjing/Yuhuatai create /Nanjing/Yuhuatai/Ruanjiangu &quot;Software&quot; get /Nanjing/Yuhuatai/Ruanjiangu delete /Nanjing/Yuhuatai/Ruanjiangu stat /Nanjing/Yuhuatai quit ZK支持创建临时数据临时数据在客户端的连接断开之后会自动删除 create -e /Nanjing/Yuhuatai/Ruanjiangu &quot;tmp&quot; get /Nanjing/Yuhuatai/Ruanjiangu # 此时是有值的 断开客户端连接，再重新连接zkServer get /Nanjing/Yuhuatai/Ruanjiangu 此时执行上面的语句就获取不到值了 对节点添加监听器通过addWatch /Nanjing/Yuhuatai添加对节点的监听器，之后打开一个新的zkCli执行命令create /Nanjing/Yuhuatai/Ruanjiangu。此时监听器会收到通知，详情如下 [zk] addWatch /Nanjing/Yuhuatai [zk] WATCHER:: WatchedEvent state:SyncConnected type:NodeCreated path:/Nanjing/Yuhuatai/Ruanjiangu 参考zkMulitServerSetup","categories":[],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://www.nosuchfield.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"}]},{"title":"设计模式学习笔记","slug":"Design-Pattern-Study-Notes","date":"2021-04-06T11:29:13.000Z","updated":"2025-08-22T15:42:13.333Z","comments":true,"path":"2021/04/06/Design-Pattern-Study-Notes/","link":"","permalink":"https://www.nosuchfield.com/2021/04/06/Design-Pattern-Study-Notes/","excerpt":"","text":"创建模式 模式名称 工厂模式 单例模式 结构模式 模式名称 模式描述 适配器模式 将不兼容的组件，通过添加一个适配器兼容起来 桥接模式 将多种属性组合起来进行配置，而不是死板的放在一个类中去定义* 组合模式 树状的结构，一层一层的向下去推进 装饰模式 父类引用指向子类对象，一个接口对应着多个不同的实现 外观模式 对复杂的对象进行一层封装，只暴露出少量的自己所需要的功能 享元模式 通过工厂方法创建对象，这些对象内部不可变并且被所有的引用所共享，以实现对内存的节省 代理模式 实现对某种操作的封装，以实现一种对目标对象的代理 行为模式 模式名称 模式描述 责任链模式 任务被交给职责链，每一个接受者都依次处理这个任务 命令模式 把操作封装起来作为一个命令，GUI上面的模块只需要调用这个命令即可以实现命令操作 迭代器模式 一个模块一个模块的向后递归遍历（链表） 中介者模式 在多个组件之间创建中介者，通过中介者这些组件才能相互联系 备忘录模式 对象内部有一个不可以被修改的备忘录，调用快照方法可以获取到这个备忘录的原始状态数据 观察者模式 发布者在发布消息时，订阅者能够收到发布者所发布的订阅者所订阅的消息 状态模式 将所有的状态都抽象到一个类中，通过调用这个类的方法的方式来修改其状态 策略模式 创建不同的策略，在对象中设置它所需要的策略，最终执行的时候会执行它所设置的策略逻辑 模板方法模式 对所有类都会用到的一些同样的方法，把这些方法创建在模板中，所有的类使用模板类中所创建的方法 访问者模式 单独抽出来一个类，为所有的对象执行某些操作，而不是把这些操作放在这些类的内部 参考https://refactoringguru.cn/design-patternshttps://www.liaoxuefeng.com/wiki/1252599548343744/1281319266943009","categories":[],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://www.nosuchfield.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"软件架构","slug":"软件架构","permalink":"https://www.nosuchfield.com/tags/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"}]},{"title":"在树莓派上面搭建Samba服务","slug":"Build-Samba-service-on-Raspberry-Pi","date":"2021-02-08T23:42:03.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2021/02/08/Build-Samba-service-on-Raspberry-Pi/","link":"","permalink":"https://www.nosuchfield.com/2021/02/08/Build-Samba-service-on-Raspberry-Pi/","excerpt":"","text":"在树莓派3b安装系统中我们已经讲了如何在树莓派上面安装操作系统并且如何通过SSH连接到树莓派，在这篇文章中我们将介绍一下如何通过树莓派搭建一个Samba文件共享服务。 首先我们先在树莓派上安装Samba服务 sudo apt-get update sudo apt-get install samba 之后我们在用户pi的home目录中创建一个用于共享的文件夹，并修改其权限为777 mkdir Share chmod 777 Share 随后我们修改Samba的配置文件 sudo vi /etc/samba/smb.conf 在配置文件的底部添加如下配置 [pi] path = /home/pi/Share public = yes writable = yes create mask = 0777 force create mode = 0777 directory mask = 0777 force directory mode = 0777 read only = no browseable = yes guest ok = yes guest only = yes 配置文件修改并保存了之后，我们重启Samba服务 sudo service smbd restart 这样一个符合我们需要的Samba服务就启动起了。我们使用同一局域网下的一台Windows主机，打开它的文件资源管理器，在文件资源管理器的地址栏中输入\\\\192.168.0.104（该IP地址为树莓派的IP地址）并敲击回车，可以看到一个名字叫做pi的文件夹 我们此时在Windows上面对这个文件夹进行读写操作就是在对树莓派的/home/pi/Share文件夹进行读写操作，这样同一个局域网内的多台主机就可以很方便的进行数据传输了。 在Mac上我们也可以访问这个共享文件夹，首先我们打开Mac的Finder，之后使用快捷键Command + K打开smb操作框，在操作框中输入smb://192.168.0.104以访问共享文件夹，其中身份我们选择Guest，之后选择pi文件夹。在经过以上的操作之后，我们就可以在Mac上对这个共享文件夹进行读写了。 由于树莓派本身的性能限制，我们对共享文件夹进行数据读写仅能到达10MB&#x2F;s左右的速度，这是物理限制所导致的，唯一的解决办法就是升级树莓派的硬件。 当然，如果你想要通过HTTP的方式来访问这个共享文件夹，那我们还可以搭建一个静态文件服务。首先我们需要安装Nginx sudo apt-get install nginx 之后我们修改Nginx的配置文件 sudo vi /etc/nginx/sites-available/default 将文件中的所有内容都注释掉，并添加如下内容 server &#123; listen 80 default_server; listen [::]:80 default_server; location / &#123; root /home/pi/Share; autoindex on; autoindex_exact_size off; autoindex_localtime on; add_header Cache-Control no-store; &#125; &#125; 最后我们重新加载Nginx，使得配置文件的更新生效 sudo service nginx reload 重新加载了Nginx之后，我们在浏览器的地址栏中输入http://192.168.0.104/就可以访问到这个文件夹了","categories":[],"tags":[{"name":"树莓派","slug":"树莓派","permalink":"https://www.nosuchfield.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"文件共享","slug":"文件共享","permalink":"https://www.nosuchfield.com/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"},{"name":"Samba","slug":"Samba","permalink":"https://www.nosuchfield.com/tags/Samba/"}]},{"title":"【译】用纸板和弹珠制作的4位计算器","slug":"A-4-bit-Calculator-made-in-cardboard-and-marble","date":"2021-01-27T17:30:09.000Z","updated":"2025-08-22T15:42:13.329Z","comments":true,"path":"2021/01/27/A-4-bit-Calculator-made-in-cardboard-and-marble/","link":"","permalink":"https://www.nosuchfield.com/2021/01/27/A-4-bit-Calculator-made-in-cardboard-and-marble/","excerpt":"","text":"本文翻译自：https://lapinozz.github.io/learning/2016/11/19/calculator-with-caordboard-and-marbles LOGIC 这是什么？LOGIC是一个全部由纸板、弹珠和胶水制作而成的全功能4位计算器，它可以对从0到15的数字进行加法计算，最大的可计算数字为30，我和我的妹妹为了一向科学活动而一起从零开始制作了这个设备。在这之前，我们还没见过任何用乐高或木头之类东西制作的这类计算器，所以这次我们制作的是一个以前从未有过的全新的模型。 为什么要制作？主要是因为好玩！我一直想要制作一个加法器，但是我一直都没想好要如何制作它，我之前有想过用水或者只用纸板来制作。正好我的妹妹有一个科学活动，活动需要提交一个科学项目，我就帮助她选择了一个科学项目。我无意中看到了一个视频：用多米诺骨牌制成的计算器，因此我就想我也许可以用弹珠来制作一个计算器？ 从这个项目可以学到什么？通过这个项目，我的妹妹已经学会了二进制计数、二进制加法、二进制十进制的互相转换、逻辑门、基本的逻辑电路等等的知识。 我也学到了使用身边常见的材料来制作一个逻辑电路是多么的简单，在我的项目中我使用的都是身边最常见的东西。 它看起来是什么样子的？ 哇，那你怎么使用它呢？将数字用二进制的方式放在输入端，有弹珠的就是1，没有弹珠的就是0。右边的位是最低有效位，在每次计算前我们需要把计算器的部分组件进行重置。之后我们移除一些纸板，这样弹珠就会沿着设定的路径滑动而不会直接掉下来。修改弹珠的滑动路径，弹珠最终会到达底部并且以二进制的方式给出我们计算结果。 例如你想要计算 7 + 5 它的工作原理是什么呢？当想要构建逻辑门时，我们首先需要了解一些基础的通用门。我们第一个需要了解的就是与门 与门什么是与门？简单来说： 如果没有弹珠输入：没有弹珠输出。如果有一个弹珠输入：没有弹珠输出。如果有两个弹珠输入：有一个弹珠输出。 所以我们需要设计一个系统，这个系统只会在有两个弹珠的时候才会让一个弹珠通过，否则就不会有任何弹珠输出。 这是我们想出来的： 一个弹珠：不输出 两个弹珠：一个输出 异或门异或门稍微有点复杂，因为输入必须要在同一时间进行。 那我们如何构建异或门模型呢？其实很简单！ 如果你有一个弹珠，那么就会通过如果你有两个弹珠，那么就应该取消通过 这其实很简单，我们只需要做一个只能通过一个弹珠的路径，当两个弹珠一起到达的时候它们就会发生碰撞然后掉下来。问题在于这两个弹珠需要非常的同步才行，而让两个弹珠非常同步是很难的。 尽管这个异或门仍然是非常不可靠的，我们还是决定继续制作，因为这个异或门我们只会用来当做原型，后面我们可能会不需真正的用到要它。 半加器一般来说我们需要16个与门、16个异或门和4个或门，不过这会导致设备太大了，所以我们也不需要把这些门都真正的制作出来。 在这里我们把门用更通用的方式来组织以方便描述，对于一个半加器而言： 如果只有一个弹珠：使其落在第一个输出中如果有两个弹珠：让它们之中的一个落在第二个输出中 这个做起来其实并不难。第一个弹珠翻转一小块纸板，此时第二个弹珠会掉入一个洞里面，这第二个弹珠会落在一个翻转架上，这个翻转架阻挡了第一个弹珠的继续下落。 当是一个弹珠的时候它会落入路径1 当是两个弹珠的时候它会落入路径2 第一个是开始求和，第二个是开始进位。 全加器一个全加器一般是用两个半加器和一个或门构成的。但是我们也可以很惊讶地看到，其实只要对半加器稍加修改就可以制造一个全加器。全加器和半加器基本上一致，区别在于如果有了第三个弹珠，它应该掉落到路径1中。 如果有一个弹珠：让它掉落到第一个输出如果有两个弹珠：让其中一个掉落到第二个输出如果有三个弹珠：让其中一个掉落到第一个输出，另一个掉落到第二个输出 将第三种情况添加到我们的半加器中其实是非常简单的，只需要添加一小块纸板。我们的全加器看起来有些特别的原因在于我们对它做了一些修改，这样第一个弹珠和第二个弹珠就有了更多的时间来运动，因此弹珠间的同步需求就降低了。 因此对于一个弹珠，它落在路径1中 对于两个弹珠，其中一个弹珠落在路径2中 对于三个弹珠，其中一个落入路径1，另一个落入路径2 把所有的部件组合起来现在可以制作全加器来完成我们的计算器了，我们只需要把它们连接起来，这样上一个的输出就会是下一个的输入。 存在的问题即使我们制作的半加器和全加器都工作的非常好，但是只要组件黏在了一起，这个计算器就没正常工作了。弹珠可能会运动的过快或过慢，或者发生弹出来等等情况。这并不是说它不能正常运行，计算器是可以正常运行的，只是在正常运行之前可能需要进行多次的调整和测试。逻辑本身是没有问题的，只是纸板有的时候需要进行多次的调整才能正常的工作，我们有的时候没有那么多的时间来进行多次的调整工作。 成功！我们制作了另外两个全加器，剩下的只需要保证弹珠可以运动到正确的输入和输出的路径即可。 结论在完成了该项目之后，我在互联网上面搜索来看看是否还有人也做出了类似的构造，结果令人惊讶，这个项目其实是充满了多样性和创造性的。我注意到一件事情，大部分的装置中都需要通过翻转来设置相应的数字，而且要用很多的球来进行操作。在我们的模型中，你只需要直接使用弹珠的位置来设置数字并进行计算，这已经十分接近于计算机的工作方式了，并且看起来把这个部件合并到一个更大的工程中也是十分简单的，我现在已经在考虑如何构建一个极简的弹珠计算机或图灵机了。 感谢阅读，希望你喜欢这篇文章。","categories":[],"tags":[{"name":"计算","slug":"计算","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97/"},{"name":"计算机","slug":"计算机","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}]},{"title":"购房贷款中等额本金与等额本息的计算方式","slug":"How-to-calculate-your-mortgage","date":"2020-12-26T14:35:22.000Z","updated":"2025-08-22T15:42:13.340Z","comments":true,"path":"2020/12/26/How-to-calculate-your-mortgage/","link":"","permalink":"https://www.nosuchfield.com/2020/12/26/How-to-calculate-your-mortgage/","excerpt":"","text":"在我们买房子的时候，如果手上的现金不够，可以选择通过向银行借钱的方式来得到缺少部分的购房现金。一般来说，我们以房子本身作为抵押来向银行借钱，借到钱之后我们就可以用手上的钱向开发商购买房屋，之后只需要按月向银行还钱即可。如果我们单方面对银行进行债务违约，则银行有权利收回借贷抵押物即该套房屋。 当然天下没有免费的午餐，在我们向银行借钱的时候，是需要向银行支付利息的。以中国人民银行2020年12月21日的5年期以上全国银行间同业拆借中心LPR公布价为例，该值为4.65%，其决定了2021年一整年的房贷利率。当然，商业银行在真正进行贷款发放时可能会对利率进行一定的上浮或打折。 基准利率与LPRLRP是央行在最近几年刚刚推出的一个新的利率计算方式，在以前，购房的利率主要参考的是央行基准利率，基准利率的当前值为4.9%。如果你之前的利率是锚定在基准利率上的，根据中国人民银行公告〔2019〕第30号中规定的商业性个人住房贷款的加点数值应等于原合同最近的执行利率水平与2019年12月发布的相应期限LPR的差值，那么将购房贷款利率的锚从基准利率改为LPR的计算方式如下（已知2019年12月发布的LPR的值为4.8%） 实际购房的房贷利率 - 4.8% + 当前LPR利率 例如你在2015年买房，但是当前的利率是有折扣，我们假设是9折，则贷款的真实利率为 4.9% x 0.9 = 4.41%，即最终的贷款利率是4.41%。那么你的利率转化为LPR之后的值则为 4.41% - 4.8% + 4.65% = 4.26%。 央行之所以在基准利率之外又推出了一个LPR，本质上是因为基准利率是由央行直接制定的，而LPR则还会参考一些商业银行的意见。商业银行直接面对了贷款人，对市场行情的了解显然比央行更加及时，所以LPR相比于基准利率也更加能代表市场的真实利率。就好像汽车厂商一般都会给4S店一定的汽车售价变更权利，最终的汽车成交价会在厂商的销售指导价周围产生一定的上升或下降。因为4S店比汽车厂商更加了解市场的真实需求，如果车子好卖就会提升价格获得更多的收益，如果车子不好卖那么也会在一定程度上降低车的售价。LPR就好像是除了给4S店修改售价的权利之外，厂商还会每个月抽取一些4S店来参与产商的报价，最终决定当月的汽车厂商指导价。LPR是每月进行一次报价，而房贷利率是每年一变并且只决定于前一年12月份的LPR报价。LPR的变化不仅影响新增的贷款，也影响已经存在的贷款。 LPR的推出表明我国在近一步的深入市场化改革，摒弃计划经济的一些遗留问题。至于LPR以后会上升还是会下降的问题，这个我认为目前还没有人能够预测。前面扯了一堆LPR的相关问题，只是为了告诉读者LPR是如何出现、如何决定的，在有了贷款利率之后，下面我我们就来了解一下银行是如何根据利率和贷款本金计算贷款人的月供的。这就涉及到两种月供计算方式：等额本金和等额本息。我们以100万贷款为例，假设借贷人借款20年且利率为当前的LPR值即4.65%。 等额本金等额本金的计算方式十分简单，就是每个月还的本金是等额的。以100万为例，借贷20年就是240个月，那么每个月需要还的本金就是 1000000 ÷ 240 = 4166.6666666667，即每个月需要还本金4166.67块钱。 计算完本金我们再计算利息，因为我们每个月还一次本金，那么每个月的利息其实都是不一样的。每个月需要还的利息计算公式如下 借贷本金 x 年利率 ÷ 12 对于第一个月，需要还的利息为 1000000 x 4.65% ÷ 12 = 3875，那么第一个月要还的本金和利息加起来就是 4166.67 + 3875 = 8041.67。 对月第二个月，因为我们已经还了一个月的本金了，所以需要还的利息为 (1000000 - 4166.67) x 4.65% ÷ 12 = 3858.85，那么第二月的月供就为 4166.67 + 3858.85 = 8025.52。 通过以上的规律我们就能算出每一个的月供了，我们也可以观察到，等额本金这种方式一开始每个月的月供是比较高的，但是随着本金的降低，利息也会逐月降低，那么月供也是同样会逐月降低的。 具体每个月的月供我们可以通过如下的代码计算得到 12345for i in range(240): principal = 4166.67 # 本金 interest = (1000000 - 4166.67 * i) * 0.0465 / 12 # 利息 total = principal + interest # 月供 print(&#x27;&#123;:&gt;3&#125;月 &#123;:.2f&#125;(元)&#x27;.format(i + 1, total)) 以上代码得到结果如下 1月 8041.67(元) 2月 8025.52(元) 3月 8009.38(元) 4月 7993.23(元) 5月 7977.09(元) 6月 7960.94(元) 7月 7944.79(元) 8月 7928.65(元) 9月 7912.50(元) 10月 7896.36(元) 11月 7880.21(元) 12月 7864.07(元) 13月 7847.92(元) 14月 7831.77(元) 15月 7815.63(元) 16月 7799.48(元) 17月 7783.34(元) 18月 7767.19(元) 19月 7751.04(元) 20月 7734.90(元) 21月 7718.75(元) 22月 7702.61(元) 23月 7686.46(元) 24月 7670.32(元) 25月 7654.17(元) 26月 7638.02(元) 27月 7621.88(元) 28月 7605.73(元) 29月 7589.59(元) 30月 7573.44(元) 31月 7557.29(元) 32月 7541.15(元) 33月 7525.00(元) 34月 7508.86(元) 35月 7492.71(元) 36月 7476.57(元) 37月 7460.42(元) 38月 7444.27(元) 39月 7428.13(元) 40月 7411.98(元) 41月 7395.84(元) 42月 7379.69(元) 43月 7363.54(元) 44月 7347.40(元) 45月 7331.25(元) 46月 7315.11(元) 47月 7298.96(元) 48月 7282.82(元) 49月 7266.67(元) 50月 7250.52(元) 51月 7234.38(元) 52月 7218.23(元) 53月 7202.09(元) 54月 7185.94(元) 55月 7169.79(元) 56月 7153.65(元) 57月 7137.50(元) 58月 7121.36(元) 59月 7105.21(元) 60月 7089.07(元) 61月 7072.92(元) 62月 7056.77(元) 63月 7040.63(元) 64月 7024.48(元) 65月 7008.34(元) 66月 6992.19(元) 67月 6976.04(元) 68月 6959.90(元) 69月 6943.75(元) 70月 6927.61(元) 71月 6911.46(元) 72月 6895.31(元) 73月 6879.17(元) 74月 6863.02(元) 75月 6846.88(元) 76月 6830.73(元) 77月 6814.59(元) 78月 6798.44(元) 79月 6782.29(元) 80月 6766.15(元) 81月 6750.00(元) 82月 6733.86(元) 83月 6717.71(元) 84月 6701.56(元) 85月 6685.42(元) 86月 6669.27(元) 87月 6653.13(元) 88月 6636.98(元) 89月 6620.84(元) 90月 6604.69(元) 91月 6588.54(元) 92月 6572.40(元) 93月 6556.25(元) 94月 6540.11(元) 95月 6523.96(元) 96月 6507.81(元) 97月 6491.67(元) 98月 6475.52(元) 99月 6459.38(元) 100月 6443.23(元) 101月 6427.09(元) 102月 6410.94(元) 103月 6394.79(元) 104月 6378.65(元) 105月 6362.50(元) 106月 6346.36(元) 107月 6330.21(元) 108月 6314.06(元) 109月 6297.92(元) 110月 6281.77(元) 111月 6265.63(元) 112月 6249.48(元) 113月 6233.34(元) 114月 6217.19(元) 115月 6201.04(元) 116月 6184.90(元) 117月 6168.75(元) 118月 6152.61(元) 119月 6136.46(元) 120月 6120.31(元) 121月 6104.17(元) 122月 6088.02(元) 123月 6071.88(元) 124月 6055.73(元) 125月 6039.59(元) 126月 6023.44(元) 127月 6007.29(元) 128月 5991.15(元) 129月 5975.00(元) 130月 5958.86(元) 131月 5942.71(元) 132月 5926.56(元) 133月 5910.42(元) 134月 5894.27(元) 135月 5878.13(元) 136月 5861.98(元) 137月 5845.83(元) 138月 5829.69(元) 139月 5813.54(元) 140月 5797.40(元) 141月 5781.25(元) 142月 5765.11(元) 143月 5748.96(元) 144月 5732.81(元) 145月 5716.67(元) 146月 5700.52(元) 147月 5684.38(元) 148月 5668.23(元) 149月 5652.08(元) 150月 5635.94(元) 151月 5619.79(元) 152月 5603.65(元) 153月 5587.50(元) 154月 5571.36(元) 155月 5555.21(元) 156月 5539.06(元) 157月 5522.92(元) 158月 5506.77(元) 159月 5490.63(元) 160月 5474.48(元) 161月 5458.33(元) 162月 5442.19(元) 163月 5426.04(元) 164月 5409.90(元) 165月 5393.75(元) 166月 5377.61(元) 167月 5361.46(元) 168月 5345.31(元) 169月 5329.17(元) 170月 5313.02(元) 171月 5296.88(元) 172月 5280.73(元) 173月 5264.58(元) 174月 5248.44(元) 175月 5232.29(元) 176月 5216.15(元) 177月 5200.00(元) 178月 5183.86(元) 179月 5167.71(元) 180月 5151.56(元) 181月 5135.42(元) 182月 5119.27(元) 183月 5103.13(元) 184月 5086.98(元) 185月 5070.83(元) 186月 5054.69(元) 187月 5038.54(元) 188月 5022.40(元) 189月 5006.25(元) 190月 4990.11(元) 191月 4973.96(元) 192月 4957.81(元) 193月 4941.67(元) 194月 4925.52(元) 195月 4909.38(元) 196月 4893.23(元) 197月 4877.08(元) 198月 4860.94(元) 199月 4844.79(元) 200月 4828.65(元) 201月 4812.50(元) 202月 4796.35(元) 203月 4780.21(元) 204月 4764.06(元) 205月 4747.92(元) 206月 4731.77(元) 207月 4715.63(元) 208月 4699.48(元) 209月 4683.33(元) 210月 4667.19(元) 211月 4651.04(元) 212月 4634.90(元) 213月 4618.75(元) 214月 4602.60(元) 215月 4586.46(元) 216月 4570.31(元) 217月 4554.17(元) 218月 4538.02(元) 219月 4521.88(元) 220月 4505.73(元) 221月 4489.58(元) 222月 4473.44(元) 223月 4457.29(元) 224月 4441.15(元) 225月 4425.00(元) 226月 4408.85(元) 227月 4392.71(元) 228月 4376.56(元) 229月 4360.42(元) 230月 4344.27(元) 231月 4328.13(元) 232月 4311.98(元) 233月 4295.83(元) 234月 4279.69(元) 235月 4263.54(元) 236月 4247.40(元) 237月 4231.25(元) 238月 4215.10(元) 239月 4198.96(元) 240月 4182.81(元) 我们也可以计算总利息 12345interest_total = 0for i in range(240): interest = (1000000 - 4166.67 * i) * 0.0465 / 12 # 利息 interest_total += interestprint(interest_total) 得到总利息：466937.13 等额本息等额本息的计算方式要稍微复杂一些，等额本息就是每个月还的本金+利息的和是等额的，也就是每个月的月供是不变的。 我们先假设我们每个月的月供是A，其中 A = 本金 + 利息。我们假设我们每个月还完月供之后还欠银行的本金an，则有a1a2a3…a240。其中a0&#x3D;1000000，a240&#x3D;0。 并且我们知道，下一个月所欠的本金 &#x3D; 这个月所欠的本金 + 这个月本金产生的利息 - 这个月的月供，即如下公式 an &#x3D; an-1 + an-1 x (0.0465 ÷ 12) - A 因此我们可以知道如下等式，其中N的值为 (0.0465 ÷ 12) + 1 &#x3D; 1.003875，即利率 a1 &#x3D; N x a0 - Aa2 &#x3D; N x a1 - A &#x3D; N x (N x a0 - A) - A &#x3D; N2 x a0 - (N + 1) x Aa3 &#x3D; N x a2 - A &#x3D; N x (N2 x a0 - (N + 1) x A) - A &#x3D; N3 x a0 - (N2 + N + 1) x A 根据以上的的规律，我们可以总结得到一个表达式 am &#x3D; Nm x a0 - (Nm-1 + Nm-2 + … + N + 1) x A 通过观察可以发现，Nm-1 + Nm-2 + … + N + 1 是一个等比数列，回忆一下我们高中就已经学过的等比数列的求和公式如下： 其中a为首项，n为项数，r为公比且r不等于1（求和公式取自维基百科）。那么我们把上面的式子带入求和公式就可以得到 am &#x3D; Nm x a0 - ( ( 1 - Nm ) ÷ ( 1 - N ) ) x A 令m&#x3D;240且将a0&#x3D;1000000、a240&#x3D;0、N&#x3D;1.003875带入等式可以得到 0 &#x3D; 1.003875240 x 1000000 - ( ( 1 - 1.003875240 ) ÷ ( 1 - 1.003875 ) ) x A 求解如上公式可以得到A的值为：6407.75，即等额本息每个月需要还6407.75元。 总结在等额本金中，我们最终还的总金额是1000000 + 466937.13 &#x3D; 1466937.13；而等额本息最终的还款金额是6407.75 x 240 &#x3D; 1537860.0。可见等额本息的方式总还款会稍微多一些，这也很容易理解，因为等额本息一开始还的本金更少，那么最终产生的利息也就会更多一些。 参考https://www.youtube.com/watch?v=T6FBfNpiBYw等额本息计算公式推导 https://zhuanlan.zhihu.com/p/36677027","categories":[],"tags":[{"name":"经济","slug":"经济","permalink":"https://www.nosuchfield.com/tags/%E7%BB%8F%E6%B5%8E/"}]},{"title":"Elasticsearch新增节点引发CircuitBreakingException错误","slug":"Elasticsearch-adding-nodes-raises-CircuitBreakingException-error","date":"2020-10-14T14:35:56.000Z","updated":"2025-08-22T15:42:13.334Z","comments":true,"path":"2020/10/14/Elasticsearch-adding-nodes-raises-CircuitBreakingException-error/","link":"","permalink":"https://www.nosuchfield.com/2020/10/14/Elasticsearch-adding-nodes-raises-CircuitBreakingException-error/","excerpt":"","text":"那是一个平静的上午，我因为业务需要决定给我们的Elasticsearch（以下简称ES）集群添加几个节点，当前集群ES的版本为7.5.2，而待添加的节点都是从之前的1.5.2版本的ES集群中移出来的。当前的7.5.2集群已经有了6个数据节点，我这次的工作就是准备再添加5个新的数据节点上去。 因为这5个节点都是之前1.5.2版本的ES集群的数据节点，并且在之前的集群中稳定的运行了好几年也没有出现过任何问题，所以我对它们的配置都是很放心的，这种大意的态度就为接下来的悲剧埋下了伏笔。因为这些节点在之前的集群中都没什么问题，所以我就一次性把这5个节点全部添加到了ES7集群中成为了数据节点。 出现错误 pre { white-space: pre-wrap; } 节点添加之后，ES集群开始进行分片的重新平衡，整个集群开始进行分片的搬迁和复制操作，我们的工作似乎很快就要完成了。很快，这种平静就被手机短信的铃声所打破了，短信提示业务突然开始出现了大量的读写失败错误！同时企业微信的告警群也开始大量告警，告警信息显示的都是CircuitBreakingException类型的异常，具体的报错信息我摘录部分如下 [parent] Data too large, data for [&lt;transport_request&gt;] would be [15634611356/14.5gb], which is larger than the limit of [15300820992/14.2gb], real usage: [15634605168/14.5gb], new bytes reserved: [6188/6kb], usages [request=0/0b, fielddata=0/0b, in_flight_requests=6188/6kb, accounting=18747688/17.8mb] 其实报错的原因非常简单，就是当前内存已经触发了parent级别的circuit breaker，导致transport_request无法继续进行。因为如果继续进行transport_request则可能导致ES产生OutOfMemory错误，ES为了避免OOM会设置一些circuit breaker (断路器)，这些断路器的作用就是在内存不够的时候主动拒绝接下来的操作，而不是进一步的分配内存最终产生OutOfMemoryError，断路器的作用就是保护整个进程不至于挂掉。 我们已经知道了报错的原因是Java进程的堆内存不够了，那么到底是什么原因导致了内存会不够呢？此时此刻我暂时没有心思考虑这些问题，新增加的5个节点都在频繁报内存不够的问题，这导致了大量的线上读写失败，我当前的首要目标就是解决这些报错。这就是我之前所说的伏笔了，因为我一次性把5个节点全部加到了集群中去，所以此时某个索引的某个分片的主分片和所有副本分片可能全部分布在这些我新添加的节点上，因而我不能一次性把这些节点全部停掉，因为这样会导致这些分片的数据彻底丢失从而使得整个集群变成红色。 事实上我当时因为告警太多太紧张了所以干了这种事情，即停止了多个节点，集群状态立即变成了红色。好在这些分片还存在于停止节点的磁盘上，集群变红之后我赶紧又把这些节点起了起来，集群才又脱离红色状态。之后我只能一边忍受着告警，一边默默地等待分片的复制，只有确认一个节点上不存在某一个分片的唯一分片数据之后，我才能把这个节点停掉。 Anyway，我一边忍受着告警一边停止节点，经过一段时间之后总算是把这5个节点都停掉了，内存不足导致的读写告警终于停止了。坑爹的是此时整个集群出现了一些unassigned的分片，即这些分片未能成功分配。我们使用如下命令找到所有还没有分配的分片(unassigned shards)，并且解释这些分片没能分配的原因 GET /_cluster/allocation/explain 得到错误原因如下 shard has exceeded the maximum number of retries 也就是说之前的内存错误导致了这些分片的分配失败，并且多次失败达到了最大的重试次数，此时ES放弃了对这些分片的分配操作。这种情况下我们只需要执行如下命令来手动开始进行重新分配分片 POST /_cluster/reroute?retry_failed=true 之后集群会开始对这些未分配的分片进行分配，等待一段时间的分片分配和复制之后，整个集群终于重新恢复绿色了。 出错原因首先我们想到的就是因为GC的问题导致内存没能及时的回收掉，剩余内存不够导致了错误。我们观察了G1垃圾收集器的GC日志，G1的日志大致分为如下三个部分 # 正常的YoungGC Pause Young (Normal) (G1 Evacuation Pause) # 伴随着YoungGC会有多次标记操作 Pause Young (Concurrent Start) (G1 Humongous Allocation) Concurrent Cycle # MixedGC Pause Young (Prepare Mixed) (G1 Evacuation Pause) Pause Young (Mixed) (G1 Evacuation Pause) 在观察了GC日志之后我们发现堆内存每每在已经达到了很高的占用率之后才会触发GC，这种情况就很有可能导致内存无法及时回收以及剩余的内存不足。如果我们能让GC更早的发生，那么就能够降低剩余内存不够的概率（虽然这样会因为GC的更加频繁而降低整个系统的吞吐量）。通过搜索我们在ES源码的Pull requests中发现了如下的GC配置 -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 G1垃圾收集器的官方文档中对这两个参数的解释如下 -XX:G1ReservePercent=10 Sets the percentage of reserve memory to keep free so as to reduce the risk of to-space overflows. The default is 10 percent. When you increase or decrease the percentage, make sure to adjust the total Java heap by the same amount. This setting is not available in Java HotSpot VM, build 23. -XX:InitiatingHeapOccupancyPercent=45 Sets the Java heap occupancy threshold that triggers a marking cycle. The default occupancy is 45 percent of the entire Java heap. 简单来说-XX:G1ReservePercent是保留的内存空间百分比，其目的是避免内存不够而导致的错误，默认值是10，我们将其提升到了25。-XX:InitiatingHeapOccupancyPercent是触发一次marking cycle的内存占用阈值百分比，默认是45，我们将其减小到了30。修改了这两个虚拟机参数之后，虚拟机就能够更早的进行GC，这样就会大大降低内存不够错误出现的概率。 修改完参数重新启动节点，这次我们一台一台的起，启动一台之后等待几个小时确认没有问题之后再启动下一台。此外，我们在新增节点之前先把cluster.routing.allocation.enable参数设置为none，等待节点确认启动完毕之后再把其设置为all，这样就可以手动控制分片分配的开始和停止。改完参数之后，节点已经不会频繁的发生内存不够的错误了，可见修改配置使得GC时间提前确实降低了GC过慢导致的内存不足问题。虽然一般的情况下节点内存已经不存在压力，但是此时还有另一个问题，就是在加入节点后搬迁分片时还是有几率触发节点内存不够的错误，此时我们只需要减慢分片搬迁的速度即可。 我们将cluster.routing.allocation.node_concurrent_recoveries的值从默认的2修改为1，这样可以降低同一时刻节点上搬迁的分片的数量。此外，我们通过设置indices.recovery.max_bytes_per_sec将每个节点分片搬迁速度从40mb&#x2F;s降低为20mb&#x2F;s，这也能减少分片搬迁时节点的内存压力。改完了这些配置之后，节点就再也没有出现过内存不够的错误了。 其实综上我们可以总结出这次出现问题的原因如下 gc速度过慢 内存增长过快 解决办法就相应地如下 减小GC触发阈值，提升GC频率 减少数据同步速度，降低内存增加速度 参考PB级大规模Elasticsearch集群运维与调优实践JVM调优实战：G1中的to-space exhausted问题 另外多扯一句，ES分片复制的时候，对于从开始复制到复制结束这段时间产生的数据，是由target的translog负责记录的，之后target会对复制来的数据和自己的translog数据进行合并，得到最终数据。target的数据来源如下： 复制开始前 复制过程中 复制结束后 复制source分片的数据 复制过程中写入的本地translog数据 普通的分片本地写入数据","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"GC","slug":"GC","permalink":"https://www.nosuchfield.com/tags/GC/"}]},{"title":"在使用elasticsearch-py时不对master节点进行读写","slug":"Do-not-read-and-write-to-the-master-nodes-when-using-elasticsearch-py","date":"2020-09-22T11:41:00.000Z","updated":"2025-08-22T15:42:13.333Z","comments":true,"path":"2020/09/22/Do-not-read-and-write-to-the-master-nodes-when-using-elasticsearch-py/","link":"","permalink":"https://www.nosuchfield.com/2020/09/22/Do-not-read-and-write-to-the-master-nodes-when-using-elasticsearch-py/","excerpt":"","text":"最近我们搭建了一个新的Elasticsearch（以下简称ES）集群，集群中有3个master节点和6个data节点，集群使用到的ES版本为7.5.2。其中master节点JVM的堆内存设置为2GB，data节点JVM的堆内存设置为30GB，master和data节点都只用作单一的节点角色（即节点不会同时是master和data两种角色）。因为master不存储数据，所以我们给master三台负载的配置都比较低。 master配置不够导致读写出错我们在操作ES集群的时候使用了elasticsearch-py这个ES的Python操作库，问题在于这个库在操作ES的时候会先根据ES的/_nodes/_all/http接口获取集群所有节点的HTTP接口地址，之后利用这些接口地址对ES进行读写。当然elasticsearch-py会在这些接口地址间做负载均衡以及错误重试等等操作，但是/_nodes/_all/http接口会同时返回master、data以及一些其它角色节点的HTTP接口地址，这就导致elasticsearch-py在后面操作集群的过程中既会读写data节点，也会读写master节点。 因为我们master节点的配置很低，所以一旦在master节点上面进行读写操作，那么master节点的压力尤其是内存的压力就会比较大，经常就会出现circuit_breaking_exception的错误。 解决办法就是利用的elasticsearch-py的host_info_callback参数来过滤要操作的节点，具体使用方式如下 在创建ES连接对象的时候指定回调方法 123456from elasticsearch import Elasticsearches = Elasticsearch( host_info_callback=not_master_nodes, # 指定操作的回调方法 sniff_on_start=True, sniff_on_connection_fail=True, sniffer_timeout=60) 之后我们创建not_master_nodes过滤方法如下 123456789def not_master_nodes(node_info, host): &quot;&quot;&quot; 由于master节点的性能较差，所以过滤掉master节点 :param node_info: :param host: :return: &quot;&quot;&quot; roles = node_info.get(&#x27;roles&#x27;, []) return host if &#x27;master&#x27; not in roles else None 逻辑非常简单，就是把roles属性中包含了master的节点给剔除即可。 elasticsearch-py会在_get_host_info方法中调用host_info_callback方法，并且在sniff_hosts方法中对不符合要求的节点进行过滤，具体实现逻辑可以参考前面的源码连接。 添加了host_info_callback属性之后，elasticsearch-py就再也不会操作master节点了。这样带来了两个好处 master节点的压力降低，提升了master节点的稳定性 读写操作也不会因为master节点的内存不足而报错了，提升了读写操作的稳定性 我们把上面的代码上线之后，通过nload -u M命令查看三台master节点的网速，发现三个节点的平均网速均从0.3 MByte/s降到了0.02 MByte/s，网速下降非常明显。此外通过命令netstat -an | grep 9200也看不到任何与master节点的9200端口的连接了，说明此时elasticsearch-py已经不再连接master节点了。 为什么之前从来没有出过这个问题？我们使用ES已经很久了，为什么之前的1.5.2版本的集群都很正常，但是到了7.5.2版本的集群上就会出现master节点内存不足的错误呢？带着这样的疑问我们也查看了一下1.5.2版本的elasticsearch-py的源码，发现在1.5.2的源码中同样会根据host_info_callback方法来过滤节点，区别在于1.5.2的源码中在创建Transport对象的时候会给host_info_callback参数设置一个默认值：host_info_callback&#x3D;get_host_info。 get_host_info方法在源码中已经定义好了，这里摘录如下 123456789def get_host_info(node_info, host): attrs = node_info.get(&#x27;attributes&#x27;, &#123;&#125;) # ignore master only nodes if (attrs.get(&#x27;data&#x27;, &#x27;true&#x27;) == &#x27;false&#x27; and attrs.get(&#x27;client&#x27;, &#x27;false&#x27;) == &#x27;false&#x27; and attrs.get(&#x27;master&#x27;, &#x27;true&#x27;) == &#x27;true&#x27;): return None return host 可以看到在1.5.2版本的elasticsearch-py中，库本身就已经帮我们过滤掉了纯master节点了，也就是说1.5.2是不会读写纯粹的master节点的，这也难怪为什么我们之前从来没有遇到过这个问题了。至于为什么在后续版本中elasticsearch-py把这个特性去掉了，我猜也许是为了避免让库对用户的操作进行过多的干涉吧，因为想不想读master节点这种事情本来也应该交给用户来决定而不是库本身擅自决定的。 应用本身的一些配置如果使用两个版本的elasticsearch-py我们的应用现在在同时读写1.5.2和7.5.2这两个版本的集群，因为使用两个版本的elasticsearch-py会导致包冲突，我们的解决办法是把这两个版本的elasticsearch-py的源码直接复制到我们应用的源码中，两个版本的源码分别放在应用中的elasticsearch1和elasticsearch7这两个模块的文件夹中，之后想要调用时直接使用import elasticsearch1和import elasticsearch7导入模块即可。 如何配置seed hosts我们现在已经知道了elasticsearch-py操作ES分为两个步骤 通过配置的seed hosts访问ES集群，根据ES提供的接口获取到ES集群所有节点的HTTP接口，之后根据需要剔除掉一些节点（这一步在1.5.2和7.5.2中有所差异），最终得到一个符合我们需要的ES集群的节点HTTP接口列表（在elasticsearch-py中这一步操作对应的方法叫做sniff_hosts） 通过第一步拿到的节点列表来对ES集群进行真正的读写操作 由此我们可以知道我们配置的seed hosts并不是一定会作为真正的读写节点的，真正读写的节点会在第一步操作中通过接口获取并进行判断得到的。所以我们现在在设置seed hosts时会把seed hosts设置为所有的master节点地址，这样的好处在于master节点基本上不会更换，而data节点可能会频繁的变更（例如更换硬盘、增加配置等等），使用master节点作为seed hosts就保证了可以在data节点变更时不再需要修改配置。 总结其实本文核心过程就是这几部分 设置seed hosts 以seed hosts为基础，根据sniff_hosts方法拿到集群的全部节点 对拿到的全部节点进行过滤，过滤之后剩下的就是我们想要的节点 通过过滤之后的节点对集群进行真正的操作 参考https://discuss.elastic.co/t/how-to-only-query-on-data-nodes-by-elasticsearch-py/249293https://github.com/elastic/elasticsearch-py/issues/1378 2020-09-24补充 后来经过研究发现其实在elasticsearch-py的7.5.2版本的源码中也是定义了get_host_info方法的，摘录如下 12345def get_host_info(node_info, host): # ignore master only nodes if node_info.get(&quot;roles&quot;, []) == [&quot;master&quot;]: return None return host 上面的逻辑表示，只要一个节点的roles是[&quot;master&quot;]那么默认就会被剔除。只是我调用ES的接口/_nodes/_all/http查看了一下7.5.2集群的配置，发现我的master节点的roles是[&quot;master&quot;, &quot;ml&quot;]，还附带了一个ml的角色，因此不能匹配上面的条件，导致我的master被保留了下来。 知道了原理之后，我们就知道了解决办法了。除了像上面重写过滤方法之外，我们也可以把master节点的ml的角色设置为false，根据ES文档，我们只需要在master节点中添加如下设置即可 node.ml: false 2020-11-03补充 通过总结我们可以得到一个最佳实践对于集群本身，我们先创建三个master节点，它们的配置如下 discovery.seed_hosts: [&#123;&#123; alias.MasterIPList &#125;&#125;] cluster.initial_master_nodes: [&#123;&#123; alias.MasterIPList &#125;&#125;] 集群在刚刚启动的时候master节点的seed_hosts和initial_master_nodes都需要设置为master节点的地址列表。在集群启动完毕之后，我们可以添加data节点或者ingest节点等等其它的节点，它们只需要把seed_hosts设置为当前的master节点即可 discovery.seed_hosts: [&#123;&#123; alias.MasterIPList &#125;&#125;] 而对于客户端，同样我们在设置ES地址的时候也只需要设置master节点的地址就可以了 123&#123; &quot;elasticsearch_hosts&quot;: [&#123;&#123; alias.MasterIPList &#125;&#125;]&#125; es的Python客户端会使用master的节点地址作为种子，通过种子获取了data节点的地址之后再在data节点上面进行真正的读写操作。 附上我们目前使用的elasticsearch.yml和jvm.options配置文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899# ======================== Elasticsearch Configuration =========================## NOTE: Elasticsearch comes with reasonable defaults for most settings.# Before you set out to tweak and tune the configuration, make sure you# understand what are you trying to accomplish and the consequences.## The primary way of configuring a node is via this file. This template lists# the most important settings you may want to configure for a production cluster.## Please consult the documentation for further information on configuration options:# https://www.elastic.co/guide/en/elasticsearch/reference/index.html## ---------------------------------- Cluster -----------------------------------## Use a descriptive name for your cluster:#cluster.name: &#123;&#123; attrs.t_clustername &#125;&#125;## ------------------------------------ Node ------------------------------------## Use a descriptive name for the node:#node.name: &#123;&#123; cHost.name &#125;&#125;## Add custom attributes to the node:## node.attr.rack: r1#node.master: &#123;&#123; attrs.t_is_master &#125;&#125;#node.data: &#123;&#123; attrs.t_is_data &#125;&#125;#node.ingest: &#123;&#123; attrs.t_is_ingest &#125;&#125;#node.ml: false## ----------------------------------- Paths ------------------------------------## Path to directory where to store the data (separate multiple locations by comma):#path.data: /home/elasticsearch/data## Path to log files:#path.logs: /home/elasticsearch/elasticsearch/logs## ----------------------------------- Memory -----------------------------------## Lock the memory on startup:##bootstrap.memory_lock: truebootstrap.system_call_filter: false## Make sure that the heap size is set to about half the memory available# on the system and that the owner of the process is allowed to use this# limit.## Elasticsearch performs poorly when the system is swapping the memory.## ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#network.host: &#123;&#123; cHost.ip &#125;&#125;## Set a custom port for HTTP:#http.port: &#123;&#123; attrs.t_server_port &#125;&#125;# # For more information, consult the network module documentation.## --------------------------------- Discovery ----------------------------------## Pass an initial list of hosts to perform discovery when this node is started:# The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]#discovery.seed_hosts: [&#123;&#123; alias.MasterIPList &#125;&#125;]## Bootstrap the cluster using an initial set of master-eligible nodes:## cluster.initial_master_nodes: [&#123;&#123; alias.MasterIPList &#125;&#125;]## For more information, consult the discovery and cluster formation module documentation.## ---------------------------------- Gateway -----------------------------------## Block initial recovery after a full cluster restart until N nodes are started:##gateway.recover_after_nodes: 3## For more information, consult the gateway module documentation.## ---------------------------------- Various -----------------------------------## Require explicit names when deleting indices:##action.destructive_requires_name: truepath.repo: [&quot;/home/elasticsearch/ES_backup/7-5-2&quot;] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576## JVM configuration################################################################## IMPORTANT: JVM heap size#################################################################### You should always set the min and max JVM heap## size to the same value. For example, to set## the heap to 4 GB, set:#### -Xms4g## -Xmx4g#### See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html## for more information################################################################### Xms represents the initial size of total heap space# Xmx represents the maximum size of total heap space-Xms&#123;&#123;attrs.t_heap_size&#125;&#125;-Xmx&#123;&#123;attrs.t_heap_size&#125;&#125;################################################################## Expert settings#################################################################### All settings below this section are considered## expert settings. Don&#x27;t tamper with them unless## you understand what you are doing#################################################################### GC configuration-XX:+UseConcMarkSweepGC-XX:CMSInitiatingOccupancyFraction=75-XX:+UseCMSInitiatingOccupancyOnly## G1GC Configuration# NOTE: G1GC is only supported on JDK version 10 or later.# To use G1GC uncomment the lines below.# 10-:-XX:-UseConcMarkSweepGC# 10-:-XX:-UseCMSInitiatingOccupancyOnly# 10-:-XX:+UseG1GC# 10-:-XX:G1ReservePercent=25# 10-:-XX:InitiatingHeapOccupancyPercent=30## JVM temporary directory-Djava.io.tmpdir=$&#123;ES_TMPDIR&#125;## heap dumps# generate a heap dump when an allocation from the Java heap fails# heap dumps are created in the working directory of the JVM-XX:+HeapDumpOnOutOfMemoryError# specify an alternative path for heap dumps; ensure the directory exists and# has sufficient space-XX:HeapDumpPath=data# specify an alternative path for JVM fatal error logs-XX:ErrorFile=logs/hs_err_pid%p.log## JDK 8 GC logging8:-XX:+PrintGCDetails8:-XX:+PrintGCDateStamps8:-XX:+PrintTenuringDistribution8:-XX:+PrintGCApplicationStoppedTime8:-Xloggc:logs/gc.log8:-XX:+UseGCLogFileRotation8:-XX:NumberOfGCLogFiles=328:-XX:GCLogFileSize=64m# JDK 9+ GC logging9-:-Xlog:gc*:file=logs/gc.log:t,tags,level:filecount=32,filesize=64m","categories":[],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"Python","slug":"Python","permalink":"https://www.nosuchfield.com/tags/Python/"}]},{"title":"G1垃圾收集器","slug":"G1-garbage-collector","date":"2020-08-12T15:12:37.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2020/08/12/G1-garbage-collector/","link":"","permalink":"https://www.nosuchfield.com/2020/08/12/G1-garbage-collector/","excerpt":"","text":"与C、C++等手动管理内存的编程语言不同，Java程序在运行时会自动对内存中不再使用的对象进行检测，并回收这部分对象所占用的内存空间。 在JDK中，JVM将堆（heap）内存分为了不同的区域块，每种区域会使用不同的垃圾收集器，每种垃圾收集器又会使用各自的垃圾收集算法。因此JVM的垃圾收集设计大致架构如下，从上至下越来越偏向于细节，本文使用自底向上的方式进行介绍 堆内存 堆内存分为多个区域 每个区域使用了不同的垃圾收集器 每种垃圾收集器使用了一个或多个垃圾收集算法 垃圾收集算法检测垃圾的方式一般有引用计数法和可达性分析两种，因为引用计数法无法检测到循环引用的垃圾对象，所以现在JVM中进行垃圾检测都是使用的可达性分析方法。 在检测到了垃圾对象之后，JVM就需要对这些垃圾对象进行垃圾回收（英语：Garbage Collection，缩写为GC），JVM中使用到的GC算法主要由如下三种 标记-清除算法（Mark-Sweep）该算法分为标记和清除两个步骤，第一步标记是将所有活动的对象做上标记，第二部清除是将所有没有标记的对象进行回收。 标记-压缩算法（Mark-Compact）标记压缩算法和标记清除算法基本上一致，只是标记清除算法过程只能单纯的把对象内存空间给释放出来，时间长了会造成内存碎片的问题。标记压缩算法在标记清除算法的基础上会对存活的对象进行移动，之后把这些对象向某一端进行移动来保证有完整的内存空闲空间。 标记压缩算法避免了内存碎片的问题，内存的利用率得到了提高，但是因为要移动对象所以它的GC效率要比标记清除算法要差。 复制算法（Copying）复制算法将内存分为FROM和TO两块区域，对象在From区域内进行分配，之后对FROM区域进行GC，存活的对象被全部复制TO区域；之后对象在TO区域进行分配，GC发生在TO区域，GC后存活的对象被复制到FROM区域，如此反复。 垃圾收集器在JVM中存在着多种垃圾收集器，这些垃圾收集器使用了一种或多种垃圾收集算法，我们可以认为垃圾收集算法是垃圾收集器的理论基础。 下面是JVM中几种常见的垃圾回收器 垃圾回收器 垃圾回收算法 Serial 复制算法 ParNew 复制算法 Serial Old 标记-整理 CMS 标记-清除 G1 标记-整理+复制算法 经典的堆内存布局（与G1做区分）堆是区别于栈、方法区等等的一大块内存空间，用于存放对象。JVM将堆内存再进行分区，分为新生代（Young Generation）和老年代（Old Generation），在新生代进行的GC叫做Young GC或Minor GC，在老年代进行的GC叫做Old GC或Major GC，其中新生代的内存又可以分为伊甸（Eden）和存活区（Survivor），Survivor分为两块，一般称为From和To。典型的对象分配和GC流程如下 JVM将对象分配在新生代的Eden区域 当Eden中的对象内存占用到一定的阈值时，触发一次Young GC JVM将Eden中存活的对象复制到Survivor的To区域，此时Eden从逻辑上已经被清空 将Survivor的From和To区域的名字进行对调，即To（此时包含上一次GC的存活对象）改为From，From改为To JVM继续将对象分配在Eden Eden中的对象到达一定的阈值之后触发一次Young GC，该次gc发生在Eden和Survivor的From（包含上一次GC的存活对象）这两个区中，JVM将Eden和From区中的存活对象复制到To区 继续进行From和To区的名字对调 JVM继续向Eden分配对象，下次的GC会对Eden和From区中的对象进行，存活对象被复制到To区 如此往复，每次的GC存活对象都被保存到Survivor的To，随后To重新改名为From、From也改名为To，之后等待进行下一次的GC 上面介绍的是新生代的GC过程，当To区域存活的对象到达一定的年纪之后（每次GC的存活对象都会增加一岁），JVM就会将该对象移动到Old Generation。老年代的内存分配相较于新生代要简单的多，只有一块区域。 以JDK1.8中流行的 -XX:+UseConcMarkSweepGC 选项为例，该选项会在新生代使用ParNew垃圾收集器，在老年代使用CMS垃圾收集器。 G1垃圾收集器堆内存布局与经典的堆内存不一样，G1垃圾收集器会将堆内存分为一个个的region区域，使用多个region来替代以前连续的堆内存空间。内存分块这种思想与Linux中的内存分页十分类似，本质都是把内存打散以方便进行管理，用离散的内存来替代连续的内存。内存分块之后可以从根本上解决内存碎片的问题，并且内存管理起来更加的简单。 G1的GC可以分为Young Only Phase、Mixed gc Phase和Full gc Phase。 Young Only Phase对象会不断地分配到Eden分区中，Eden分区的数量会不断地增长，这个操作会一直进行下去直到Eden分区数量达到上限。 当Eden分区的数量达到了阈值之后，就会对所有的Eden分区进行GC，之后存活的对象会移动到Survivor区中，如果没有Survivor区则会随意挑选一个空闲的region作为Survivor并保存存活对象。 同时如果Survivor分区中的某些对象达到了一定年纪之后，这些对象也会被复制到Old分区中。 Mixed gc PhaseOld分区越来越大，当老年分区的占比达到了一定比例之后，就会触发针对年轻代和老年代的GC，是为Mixed gc。 在进行Mixed gc之前，先需要进行**并发标记周期(Concurrent Marking Cycle)**，这个过程会分为5步 初始标记（Young Collection with Initial Mark），它伴随着一次普通的Young GC发生，然后对Survivor区进行标记，因为该区可能存在对老年代的引用，会触发Stop The World 根区间扫描，因为先进行了一次YGC，所以当前年轻代只有Survivor区有存活对象，它被称为根引用区（root region）。扫描Survivor到老年代的引用，该阶段必须在下一次Young GC发生前结束 并发标记（Concurrent Marking），寻找整个堆的存活对象，该阶段可以被Young GC中断 重新标记（Remark），完成最后的存活对象标记。使用了比CMS收集器更加高效的 snapshot-at-the-beginning (SATB) 算法，会触发Stop The World 清除（Clean），清理阶段真正回收的内存很少 到这里，G1的一个并发周期就算结束了，其实就是主要完成了垃圾定位的工作，定位出了哪些分区是垃圾最多的。因为整堆一般比较大，所以这个周期应该会比较长，中间可能会被多次STW的Young GC打断。 等到并发标记周期完成之后，就会进入Mixed gc Phase了，混合垃圾收集周期既会回收新生代的垃圾，也会回收老年代的垃圾。 Full gc Phase当以下两个现象同时发生时就会触发Full GC 空闲分区不足或巨型对象无法在老年代找到连续的分区，此时JVM报错to-space exhausted。 在现象1发生时，G1会尝试增加堆的使用量，如果增加失败则会触发Full gc Full gc时单个线程会对整个堆的所有代中所有分区做标记、清除以及压缩动作，非常昂贵。 可以通过对JVM设置如下的Xlog来打印GC相关的日志以方便对JVM的GC过程进行深入的了解： -Xlog:gc*:file=logs/gc.log:t,tags,level:filecount=5,filesize=100m G1在Elasticsearch中的使用Elasticsearch对JDK 8u40之前的Java版本是不推荐使用G1垃圾收集器的，如果检测到错误的Java版本和GC配置，Elasticsearch会启动失败。但是在Elasticsearch 7.5.2自带的版本为13.0.1的bundled JDK中，G1已经成为了默认的垃圾收集器，G1已经通过了ES的测试验证并且ES团队也给出了一些关于Java堆(heap)内存管理的最佳实践。 参考咱们从头到尾说一次 Java 垃圾回收 - InfoQJVM中的垃圾回收策略搞懂G1垃圾收集器 - 博客园G1GC 概念与性能调优 - OPPO互联网技术G1 垃圾收集器介绍 - JavadoopUniversal GC Log AnalyzerJava Hotspot G1 GC的一些关键技术 - 美团技术团队新一代垃圾回收器ZGC的探索与实践 - 美团技术团队 Getting Started with the G1 Garbage CollectorGo 垃圾回收（三）——三色标记法是什么鬼？V8 增量 GC 之三色标记Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guidejdk11下g1收集器使用","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"垃圾收集器","slug":"垃圾收集器","permalink":"https://www.nosuchfield.com/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"}]},{"title":"一次Elasticsearch慢查询问题的排查","slug":"Troubleshoot-a-slow-query-problem-in-Elasticsearch","date":"2020-08-04T15:29:10.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2020/08/04/Troubleshoot-a-slow-query-problem-in-Elasticsearch/","link":"","permalink":"https://www.nosuchfield.com/2020/08/04/Troubleshoot-a-slow-query-problem-in-Elasticsearch/","excerpt":"","text":"最近对Elasticsearch（以下简称ES）进行了升级，升级之后把部分数据从之前的ES-1.5集群同步到了现在的ES-7.5集群，之后在新集群中进行数据查询的时候发现会有偶发性的查询非常慢的情况。新集群的大部分查询耗时都在10ms以内，但是偶尔却会出现800ms左右的超高查询耗时，本文记录了该问题的排查过程。 GC的原因？首先我们怀疑是ES的GC导致了偶发性的慢查询，我们知道JVM的GC会导致Stop The World现象，在GC时节点无法处理任何逻辑导致查询行为被阻塞最终导致超长的查询耗时，而GC这种行为本身也是会偶发的，所以和我们观察到的偶尔出现查询耗时非常高的现象非常吻合。 我们观察ES运行的GC日志，并未看到有延迟特别高的GC行为，而且也没有看到任何Old GC的动作，因此这些慢查询应该并不是因为JVM的GC行为导致的。 顺便介绍一下，我们使用的是ES-7.5.2自带的bundled JDK，它的版本为13.0.1 ~ java -version openjdk version &quot;13.0.1&quot; 2019-10-15 OpenJDK Runtime Environment AdoptOpenJDK (build 13.0.1+9) OpenJDK 64-Bit Server VM AdoptOpenJDK (build 13.0.1+9, mixed mode, sharing) 在该版本的Java中已经废弃了以前的GC日志打印配置方式，新版本的Java使用了一种新的叫做JVM Unified Logging Framework的方式来控制GC日志的打印，它通过 -Xlog 这个属性来进行设置。 我们在当前的ES配置jvm.options中添加GC相关配置如下 ## JDK 8 GC logging 8:-XX:+PrintGCDetails 8:-XX:+PrintGCDateStamps 8:-XX:+PrintTenuringDistribution 8:-XX:+PrintGCApplicationStoppedTime 8:-Xloggc:logs/gc.log 8:-XX:+UseGCLogFileRotation 8:-XX:NumberOfGCLogFiles=32 8:-XX:GCLogFileSize=64m # JDK 9+ GC logging 9-:-Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m 上面我们设置了两种GC日志配置，一种是针对Java8的配置，还有一种是针对大于或者等于Java9的配置，ES会根据JVM的版本选择合适的GC日志配置。 因为我们使用的是Java13，它的版本号是大于9的，因此ES会自动使用 -Xlog:gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m 这个Xlog的配置来设置GC LOG的打印方式。Xlog属性使用冒号 ( : ) 把它的内容分割为了四个部分： JVM中哪些tag的日志需要被打印，多个tag之间用逗号 ( , ) 分割 日志打印的目标位置，可以是标准输出或文件等等 打印日志时同时一起打印的附加属性，例如时间、进程号、tag名称等等，属性之间用逗号 ( , ) 分割 一些打印日志时会用到的其它属性 我们再了解一下上面ES使用的-Xlog属性的各个部分的具体含义，这些属性被分为了四大类 属性 含义 （tags） gc* 打印JVM中tag以gc开头的日志，级别为默认值info gc+age&#x3D;trace 打印JVM中tag为gc+age的日志，级别为trace safepoint 打印JVM的safepoint日志，级别为默认值info （日志打印位置） file&#x3D;logs&#x2F;gc.log GC日志所保存的文件名 （需要被打印的其它一些属性） utctime 打印GC的时间点 pid JVM的进程号 tags 打印对应的tags信息 （控制日志打印的一些其它属性） filecount&#x3D;32,filesize&#x3D;64m 当日志文件达到64m是进行切割，保存32个切割文件 上面的Xlog可以得到日志如下，包含了gc*、gc+age和safepoint等tag的一些日志 [2020-08-01T09:54:10.551+0000][1836][gc,heap] Heap region size: 4M [2020-08-01T09:54:14.339+0000][1836][gc ] Using G1 [2020-08-01T09:54:14.339+0000][1836][gc,heap,coops] Heap address: 0x0000000600000000, size: 8192 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [2020-08-01T09:54:14.339+0000][1836][gc,cds ] Mark closed archive regions in map: [0x00000007ffc00000, 0x00000007ffc77ff8] [2020-08-01T09:54:14.339+0000][1836][gc,cds ] Mark open archive regions in map: [0x00000007ffb00000, 0x00000007ffb47ff8] [2020-08-01T09:54:14.355+0000][1836][gc ] Periodic GC disabled [2020-08-01T09:54:14.376+0000][1836][safepoint ] Safepoint &quot;EnableBiasedLocking&quot;, Time since last: 26126542 ns, Reaching safepoint: 711439 ns, At safepoint: 88387 ns, Total: 799826 ns [2020-08-01T09:54:14.381+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 4864660 ns, Reaching safepoint: 286521 ns, At safepoint: 99576 ns, Total: 386097 ns ...省略部分日志... [2020-08-01T09:54:17.374+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 743562 ns, Reaching safepoint: 193154 ns, At safepoint: 51118 ns, Total: 244272 ns [2020-08-01T09:54:17.374+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 198778 ns, Reaching safepoint: 375962 ns, At safepoint: 58373 ns, Total: 434335 ns [2020-08-01T09:54:17.410+0000][1836][gc,start ] GC(0) Pause Young (Normal) (G1 Evacuation Pause) [2020-08-01T09:54:17.412+0000][1836][gc,task ] GC(0) Using 13 workers of 13 for evacuation [2020-08-01T09:54:17.413+0000][1836][gc,age ] GC(0) Desired survivor size 27262976 bytes, new threshold 15 (max threshold 15) [2020-08-01T09:54:17.452+0000][1836][gc,age ] GC(0) Age table with threshold 15 (max threshold 15) [2020-08-01T09:54:17.452+0000][1836][gc,age ] GC(0) - age 1: 13104680 bytes, 13104680 total [2020-08-01T09:54:17.452+0000][1836][gc,phases ] GC(0) Pre Evacuate Collection Set: 1.8ms [2020-08-01T09:54:17.452+0000][1836][gc,phases ] GC(0) Evacuate Collection Set: 25.5ms [2020-08-01T09:54:17.452+0000][1836][gc,phases ] GC(0) Post Evacuate Collection Set: 2.3ms [2020-08-01T09:54:17.452+0000][1836][gc,phases ] GC(0) Other: 12.1ms [2020-08-01T09:54:17.452+0000][1836][gc,heap ] GC(0) Eden regions: 102-&gt;0(98) [2020-08-01T09:54:17.452+0000][1836][gc,heap ] GC(0) Survivor regions: 0-&gt;4(13) [2020-08-01T09:54:17.452+0000][1836][gc,heap ] GC(0) Old regions: 0-&gt;0 [2020-08-01T09:54:17.452+0000][1836][gc,heap ] GC(0) Archive regions: 2-&gt;2 [2020-08-01T09:54:17.452+0000][1836][gc,heap ] GC(0) Humongous regions: 0-&gt;0 [2020-08-01T09:54:17.452+0000][1836][gc,metaspace ] GC(0) Metaspace: 20335K-&gt;20335K(1067008K) [2020-08-01T09:54:17.452+0000][1836][gc ] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 411M-&gt;16M(8192M) 41.802ms [2020-08-01T09:54:17.452+0000][1836][gc,cpu ] GC(0) User=0.17s Sys=0.14s Real=0.04s [2020-08-01T09:54:17.452+0000][1836][safepoint ] Safepoint &quot;G1CollectForAllocation&quot;, Time since last: 35223271 ns, Reaching safepoint: 235074 ns, At safepoint: 42013632 ns, Total: 42248706 ns [2020-08-01T09:54:17.452+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 274881 ns, Reaching safepoint: 134481 ns, At safepoint: 40119 ns, Total: 174600 ns [2020-08-01T09:54:17.452+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 43491 ns, Reaching safepoint: 140798 ns, At safepoint: 26232 ns, Total: 167030 ns [2020-08-01T09:54:17.453+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 64481 ns, Reaching safepoint: 129088 ns, At safepoint: 25018 ns, Total: 154106 ns [2020-08-01T09:54:17.453+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 35003 ns, Reaching safepoint: 129551 ns, At safepoint: 28893 ns, Total: 158444 ns [2020-08-01T09:54:17.453+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 111722 ns, Reaching safepoint: 113937 ns, At safepoint: 37371 ns, Total: 151308 ns [2020-08-01T09:54:17.453+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 36233 ns, Reaching safepoint: 128605 ns, At safepoint: 30396 ns, Total: 159001 ns [2020-08-01T09:54:17.454+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 44610 ns, Reaching safepoint: 129399 ns, At safepoint: 28918 ns, Total: 158317 ns [2020-08-01T09:54:17.456+0000][1836][gc,start ] GC(1) Pause Young (Concurrent Start) (Metadata GC Threshold) [2020-08-01T09:54:17.456+0000][1836][gc,task ] GC(1) Using 13 workers of 13 for evacuation [2020-08-01T09:54:17.456+0000][1836][gc,age ] GC(1) Desired survivor size 27262976 bytes, new threshold 15 (max threshold 15) [2020-08-01T09:54:17.473+0000][1836][gc,age ] GC(1) Age table with threshold 15 (max threshold 15) [2020-08-01T09:54:17.473+0000][1836][gc,age ] GC(1) - age 1: 29256 bytes, 29256 total [2020-08-01T09:54:17.473+0000][1836][gc,age ] GC(1) - age 2: 13077648 bytes, 13106904 total [2020-08-01T09:54:17.473+0000][1836][gc,phases ] GC(1) Pre Evacuate Collection Set: 0.4ms [2020-08-01T09:54:17.473+0000][1836][gc,phases ] GC(1) Evacuate Collection Set: 15.3ms [2020-08-01T09:54:17.473+0000][1836][gc,phases ] GC(1) Post Evacuate Collection Set: 0.9ms [2020-08-01T09:54:17.473+0000][1836][gc,phases ] GC(1) Other: 0.6ms [2020-08-01T09:54:17.473+0000][1836][gc,heap ] GC(1) Eden regions: 1-&gt;0(98) [2020-08-01T09:54:17.473+0000][1836][gc,heap ] GC(1) Survivor regions: 4-&gt;4(13) [2020-08-01T09:54:17.473+0000][1836][gc,heap ] GC(1) Old regions: 0-&gt;0 [2020-08-01T09:54:17.473+0000][1836][gc,heap ] GC(1) Archive regions: 2-&gt;2 [2020-08-01T09:54:17.473+0000][1836][gc,heap ] GC(1) Humongous regions: 0-&gt;0 [2020-08-01T09:54:17.473+0000][1836][gc,metaspace ] GC(1) Metaspace: 20366K-&gt;20366K(1069056K) [2020-08-01T09:54:17.473+0000][1836][gc ] GC(1) Pause Young (Concurrent Start) (Metadata GC Threshold) 20M-&gt;16M(8192M) 17.263ms [2020-08-01T09:54:17.473+0000][1836][gc,cpu ] GC(1) User=0.06s Sys=0.03s Real=0.02s [2020-08-01T09:54:17.473+0000][1836][gc ] GC(2) Concurrent Cycle [2020-08-01T09:54:17.473+0000][1836][gc,marking ] GC(2) Concurrent Clear Claimed Marks [2020-08-01T09:54:17.473+0000][1836][gc,marking ] GC(2) Concurrent Clear Claimed Marks 0.039ms [2020-08-01T09:54:17.473+0000][1836][gc,marking ] GC(2) Concurrent Scan Root Regions [2020-08-01T09:54:17.473+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 93450 ns, Reaching safepoint: 129146 ns, At safepoint: 17510480 ns, Total: 17639626 ns [2020-08-01T09:54:17.474+0000][1836][safepoint ] Safepoint &quot;RevokeBias&quot;, Time since last: 59519 ns, Reaching safepoint: 157428 ns, At safepoint: 40661 ns, Total: 198089 ns 关于Xlog的更加详细的信息可以查看**参考文档**。有的时候我们只想看到GC的日志而不在意其它的日志信息，此时可以只设置gc日志的tag而移除其它日志的tag，同时我们停止打印tags信息并且将打印时间修改为ISO-8601格式。那么根据参考文档，具体设置如下 -Xlog:gc:file=logs/gc.log:t,pid:filecount=32,filesize=64m 改完之后得到的日志如下 [2020-08-07T14:41:42.809+0800][25593] Using G1 [2020-08-07T14:41:42.827+0800][25593] Periodic GC disabled [2020-08-07T14:41:54.322+0800][25593] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 411M-&gt;16M(8192M) 32.843ms [2020-08-07T14:41:54.339+0800][25593] GC(1) Pause Young (Concurrent Start) (Metadata GC Threshold) 20M-&gt;16M(8192M) 12.395ms [2020-08-07T14:41:54.339+0800][25593] GC(2) Concurrent Cycle [2020-08-07T14:41:54.357+0800][25593] GC(2) Pause Remark 24M-&gt;24M(8192M) 2.347ms [2020-08-07T14:41:54.359+0800][25593] GC(2) Pause Cleanup 24M-&gt;24M(8192M) 0.409ms [2020-08-07T14:41:54.393+0800][25593] GC(2) Concurrent Cycle 53.919ms [2020-08-07T14:41:54.889+0800][25593] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 408M-&gt;19M(8192M) 16.746ms [2020-08-07T14:41:55.335+0800][25593] GC(4) Pause Young (Normal) (G1 Evacuation Pause) 411M-&gt;22M(8192M) 13.978ms [2020-08-07T14:41:56.946+0800][25593] GC(5) Pause Young (Normal) (G1 Evacuation Pause) 426M-&gt;42M(8192M) 38.684ms [2020-08-07T14:41:57.545+0800][25593] GC(6) Pause Young (Concurrent Start) (Metadata GC Threshold) 104M-&gt;50M(8192M) 106.594ms [2020-08-07T14:41:57.545+0800][25593] GC(7) Concurrent Cycle [2020-08-07T14:41:57.566+0800][25593] GC(7) Pause Remark 52M-&gt;52M(8192M) 3.391ms [2020-08-07T14:41:57.571+0800][25593] GC(7) Pause Cleanup 52M-&gt;52M(8192M) 0.689ms [2020-08-07T14:41:57.599+0800][25593] GC(7) Concurrent Cycle 54.224ms [2020-08-07T14:42:00.515+0800][25593] GC(8) Pause Young (Concurrent Start) (Metadata GC Threshold) 364M-&gt;59M(8192M) 135.170ms [2020-08-07T14:42:00.515+0800][25593] GC(9) Concurrent Cycle [2020-08-07T14:42:00.544+0800][25593] GC(9) Pause Remark 63M-&gt;63M(8192M) 3.422ms [2020-08-07T14:42:00.560+0800][25593] GC(9) Pause Cleanup 65M-&gt;65M(8192M) 0.432ms [2020-08-07T14:42:00.591+0800][25593] GC(9) Concurrent Cycle 75.614ms [2020-08-07T14:42:01.937+0800][25593] GC(10) Pause Young (Normal) (G1 Evacuation Pause) 447M-&gt;84M(8192M) 33.470ms [2020-08-07T14:42:02.786+0800][25593] GC(11) Pause Young (Normal) (G1 Evacuation Pause) 448M-&gt;117M(8192M) 42.285ms [2020-08-07T14:42:09.939+0800][25593] GC(12) Pause Young (Normal) (G1 Evacuation Pause) 1088M-&gt;730M(8192M) 60.019ms [2020-08-07T14:42:19.286+0800][25593] GC(13) Pause Young (Normal) (G1 Evacuation Pause) 1854M-&gt;769M(8192M) 51.429ms [2020-08-07T14:43:19.996+0800][25593] GC(14) Pause Young (Normal) (G1 Evacuation Pause) 4924M-&gt;770M(8192M) 43.029ms [2020-08-07T14:44:50.846+0800][25593] GC(15) Pause Young (Normal) (G1 Evacuation Pause) 6717M-&gt;771M(8192M) 50.404ms [2020-08-07T14:46:32.710+0800][25593] GC(16) Pause Young (Normal) (G1 Evacuation Pause) 7767M-&gt;774M(8192M) 41.461ms [2020-08-07T14:47:38.164+0800][25593] GC(17) Pause Young (Normal) (G1 Evacuation Pause) 5766M-&gt;855M(8192M) 48.741ms [2020-08-07T14:47:53.993+0800][25593] GC(18) Pause Young (Normal) (G1 Evacuation Pause) 5667M-&gt;809M(8192M) 40.445ms 和我们之前看到的详细日志相比，现在的日志已经显得清晰多了。对于线上ES的JVM而言，这些日志一般已经足够我们在出现问题时进行相应的排查了。当然，如果你需要了解JVM的详细工作情况，那么也可以将尽可能多tag的日志都打印出来以方便进行分析，具体需要哪些日志还是根据实际情况进行考虑。 最后再放一些其它的关于JVM GC LOG打印的参考文档 https://stackoverflow.com/q/54144713/4614538GC logging - ElasticsearchSetting JVM options - ElasticsearchJEP 158: Unified JVM Logging ES本身的Cache？排除了GC的问题之后，我们又考虑到可能是ES本身的缓存失效导致的慢查询。验证方式非常简单，针对指定的索引我们调用ES清除缓存的接口清掉其缓存 POST /index-name/_cache/clear 清除掉缓存之后我们立即进行一次查询，发现该次查询耗时80ms左右。虽然清除缓存在一定程度上降低了查询速度，但是也并没有降低到800ms那么慢，可见ES缓存失效也不是偶发性慢查询的真正原因。因为如果是ES缓存失效导致的慢查询，那么在清除掉ES缓存之后查询速度也应该降低到800ms才对。 Page cache我们知道在Linux操作系统中，内核是按页来管理内存的。如果想要访问磁盘上的一段数据，操作系统会分配一页（一般是4K）物理内存，之后把这些数据读取到这一页内存中以进行后续的操作。读取流程如下参考 进程调用库函数read发起读取文件请求 内核检查已打开的文件列表，调用文件系统提供的read接口 找到文件对应的inode，然后计算出要读取的具体的页 通过inode查找对应的页缓存 如果页缓存节点命中，则直接返回文件内容 如果没有对应的页缓存，则会产生一个缺页异常（page fault） 操作系统创建新的空的页缓存并从磁盘中读取文件内容，更新页缓存，然后重复第4步 读取文件返回 页缓存，也叫做文件缓存或磁盘缓存，它对于ES的核心部件Lucene十分重要。Lucene的读写文件十分依赖操作系统的页缓存来提高访问速度，以至于ES在官方文档中都提到ES的JVM进程只应该占用操作系统的一半物理内存，而把剩下的一半物理内存留给Lucene用作读写文件的页缓存。空闲内存越多，操作系统可用于Page Cache的内存也就越多，Lucene也就可以缓存越多的数据在内存中，这样就可以大大的提高Lucene的读写速度。当物理内存不足时，操作系统也会让部分缓存失效以空出内存空间。 需要注意的是，Page Cache是完全由操作系统控制的，程序无法干预。在程序读写文件时操作系统会自动的创建Page Cache来提高访问速度，但是在程序看来它只是进行了一次文件读写操作，而并不知道在读写操作背后操作系统具体是如何完成这次读写的、以及操作系统是否使用了缓存。 背景知识介绍到此。我们怀疑ES的偶发性慢查询是否是因为Page Cache的失效导致数据查询无法通过缓存获得，因此从磁盘上获取数据导致了比平时更长的查询时间呢？通过对慢查询发生时机器状态的监控我们发现，在发生慢查询时对应查询较慢的分片所在的机器节点CPU负载很低、内存空闲资源充足，并不存在内存资源不足的情况。因此应该并不是内存资源不足导致Page Cache失效而引发的慢查询。 index.search.idle.after以上两个因素都不是偶发慢查询的真正原因，我们继续在Google上搜索相关的问题，最后我们发现了这个帖子。帖子里面提到了一个叫做 index.search.idle.after 的属性，它是在ES-7.0中新增的一个配置属性。 按照官方文档的说法，只要一个分片在 index.search.idle.after 时间段（默认30s）没有能够收到任何请求，就会进入search idle状态。 但是！！！按照官方文档的说法是即使进入了search idle状态，只要 index.refresh_interval 设置了刷新间隔，分片依旧会刷新，**这部分好像与事实不符**。 事实上，一旦分片进入了search idle状态，该分片就会停止refresh以节省资源（即使设置了index.refresh_interval）。等到后面再有search请求在该分片发生时，分片首先需要进行一次refresh，refresh完成之后才会执行真正的search。所以一旦分片进入search idle之后再次查询时就会比平时消耗更多的时间。 至此我们偶发性的慢查询问题就找到原因了。因为我们新的集群刚刚搭建不久，还处于测试阶段，所以我们只切了很少的一部分查询流量到新的集群，那么每个分片在两次查询之间的间隔就有可能会大于30s。而一个分片一旦30s都没有任何查询就会进入search idle状态，那么下一次的查询自然就会比普通的查询慢很多。 知道了原因之后我们就开始着手解决这个问题，目前有两个解决方案。 1. 修改index.search.idle.after的值我们可以把 index.search.idle.after 值改大一些，避免分片频繁的进入search idle，例如我们可以把其从默认值30秒修改为5分钟 PUT /index-name/_settings &#123; &quot;index.search.idle.after&quot;: &quot;5m&quot; &#125; 修改完之后我们可以看下修改是否生效 GET /index-name/_settings 得到结果如下，可见该值已经被修改5m了 &#123; &quot;index-name&quot;: &#123; &quot;settings&quot;: &#123; &quot;index&quot;: &#123; &quot;search&quot;: &#123; &quot;idle&quot;: &#123; &quot;after&quot;: &quot;5m&quot; &#125; &#125;, &quot;number_of_shards&quot;: &quot;2&quot;, ...省略部分内容... &#125; &#125; &#125; &#125; 当然我们也可以恢复该值的默认设置 PUT /index-name/_settings &#123; &quot;index.search.idle.after&quot;: null &#125; 2. 增加请求频率上面我们介绍了第一个解决方案是增加进入idle的时间，还有一个办法是我们把更多的查询流量切到新的集群中去，这样因为查询之间的间隔变低，也就不会进入idle状态了。 考虑到我们已经测试了一段时间的新集群了，所以我们选择第二种方案把所有的查询流量都切到新集群中，查询频率增加后也没有再出现偶尔查询很慢的情况了。","categories":[],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"}]},{"title":"NanoPi R2S","slug":"NanoPi-R2S","date":"2020-07-12T16:34:07.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2020/07/12/NanoPi-R2S/","link":"","permalink":"https://www.nosuchfield.com/2020/07/12/NanoPi-R2S/","excerpt":"","text":"出于某些原因本文发表在其它平台，点击访问。","categories":[],"tags":[]},{"title":"Elasticsearch不同版本的压力测试与结果对比","slug":"Elasticsearch-performance-comparison-of-different-versions","date":"2020-05-16T11:08:18.000Z","updated":"2025-08-22T15:42:13.334Z","comments":true,"path":"2020/05/16/Elasticsearch-performance-comparison-of-different-versions/","link":"","permalink":"https://www.nosuchfield.com/2020/05/16/Elasticsearch-performance-comparison-of-different-versions/","excerpt":"","text":"公司目前所使用的Elasticsearch（以下简称ES）版本是在2015年的时候选择的，当时选择了ES的最新版本1.5.2。随着ES官方的快速发展，ES也已经推出了很多新的版本，这些新版本往往伴随着一些新特性的发布以及性能的提升，为了使用到这些新特性，我们决定将ES的版本升级到7.5.2。 ES版本升级会遇到API不兼容的问题，我们的解决办法是在业务和ES之间增加一层_搜索平台_来做接口兼容。此外我们在版本升级之前还需要了解一下ES-7.5.2相对于ES-1.5.2有多少性能提升，所以我们需要针对这两个版本做一下性能测试并对结果进行对比。我们使用如下的四台负载来做性能测试 div table {white-space: nowrap;} 序号 节点IP CPU型号 CPU核数 内存 硬盘 操作系统 1 172.19.66.58 Intel(R) Xeon(R) CPU E5645 @2.40GHz 2 3079520kB 14G GNU&#x2F;Linux 3.10.0-957.21.3.el7.x86_64 2 172.19.66.70 Intel(R) Xeon(R) CPU E5645 @2.40GHz 2 3079524kB 14G GNU&#x2F;Linux 3.10.0-957.21.3.el7.x86_64 3 172.19.66.77 Intel(R) Xeon(R) CPU E5645 @2.40GHz 2 3079524kB 14G GNU&#x2F;Linux 3.10.0-957.21.3.el7.x86_64 4 172.19.66.133 Intel(R) Xeon(R) CPU E5645 @2.40GHz 2 3079524kB 14G GNU&#x2F;Linux 3.10.0-957.21.3.el7.x86_64 使用time和dd命令测试负载的磁盘性能 # 测试磁盘的写入性能 time dd if=/dev/zero of=test.data bs=8k count=10000 oflag=direct # 测试磁盘的读取性能 time dd if=test.data of=/dev/null bs=8k count=10000 iflag=direct 通过测试可知以上四台负载的磁盘读写性能基本一致。 压测前的环境准备创建索引和数据1号和2号节点安装ES-1.5.2集群，3号和4号节点安装ES-7.5.2集群。两个集群各自的两个节点均设置为master-eligible和data节点，并且JVM的堆内存都设置为1GB。分别向两个集群写入相同的测试数据112万条，对于text类型两个集群都使用ES默认的分词器。两个集群的两个索引的mapping基本上一致，我把1.5.2和7.5.2这两个索引的mapping都放在了gist上面以供参考。 创建压测环境我们使用 ApacheBench (ab) 来实现压测功能，为了方便操作我们利用ab实现了一个测试脚本 test.sh，在测试脚本中我们使用了query.json文件中的ES查询DSL来实现ES不同类型查询的性能测试，后面我们会修改query.json文件中的DSL来实现不同的查询测试。 进行压测压测使用的客户机为MacBookPro，客户机和ES集群位于同一个局域网，因此可以保证网络带宽不会成为瓶颈。客户机的具体配置如下 macOs Catalina 10.15.4 (19E287) MacBook Pro (Retina, 13-inch, Early 2015) 2.7 GHz Dual-Core Intel Core i5 8 GB 1867 MHz DDR3 具体的测试结果如下，我们修改query.json的DSL来实现不同类型操作的测试。 term-levelterm12345678&#123; &quot;query&quot;: &#123; &quot;term&quot;: &#123; &quot;acctId&quot;: &quot;A00000000000&quot; &#125; &#125;, &quot;size&quot;: 0&#125; 修改query.json的内容如上并且执行命令 ./test.sh 随后我们可以得到脚本的执行结果，因为执行结果内容比较多所以我们只挑一些关键性的部分进行了解。完整的执行结果可以在 gist上面 看到。 Elasticsearch-1.5.2 &gt;&gt;&gt; 172.19.66.70 Requests per second: 165.87 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 343 66% 399 75% 421 80% 454 90% 547 95% 620 98% 687 99% 784 100% 905 (longest request) Elasticsearch-7.5.2 &gt;&gt;&gt; 172.19.66.77 Requests per second: 1049.51 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 53 66% 61 75% 68 80% 73 90% 87 95% 100 98% 118 99% 129 100% 202 (longest request) 可以看到在并发为60的情况下，执行压测10秒钟，1.5.2的QPS为165.87，7.5.2的QPS为1049.51，此外7.5.2的99%的请求耗时都是在130ms以下的，由此可以证明7.5.2相较于1.5.2在term查询上确实有很大的性能提升。 rangequery.json 12345678910&#123; &quot;query&quot;: &#123; &quot;range&quot;: &#123; &quot;createdTimeStr&quot;: &#123; &quot;gte&quot;: &quot;2020-01-01T00:00:00.000+0800&quot; &#125; &#125; &#125;, &quot;size&quot;: 0&#125; 性能测试结果 Elasticsearch-1.5.2 &gt;&gt;&gt; 172.19.66.70 Requests per second: 1237.86 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 45 66% 52 75% 58 80% 62 90% 75 95% 85 98% 101 99% 113 100% 189 (longest request) Elasticsearch-7.5.2 &gt;&gt;&gt; 172.19.66.77 Requests per second: 1099.03 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 47 66% 54 75% 59 80% 63 90% 75 95% 86 98% 102 99% 120 100% 166 (longest request) 可以看出7.5.2在range查询上有一定的性能提升，但是提升并不明显。 matchquery.json 12345678&#123; &quot;query&quot;: &#123; &quot;match&quot;: &#123; &quot;userName.analyzed&quot;: &quot;江苏千米&quot; &#125; &#125;, &quot;size&quot;: 0&#125; 性能测试结果 Elasticsearch-1.5.2 &gt;&gt;&gt; 172.19.66.70 Requests per second: 789.62 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 74 66% 92 75% 107 80% 115 90% 132 95% 148 98% 169 99% 187 100% 336 (longest request) Elasticsearch-7.5.2 &gt;&gt;&gt; 172.19.66.77 Requests per second: 1229.56 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 44 66% 52 75% 57 80% 62 90% 72 95% 85 98% 107 99% 135 100% 275 (longest request) 由上面的结果可见7.5.2对match查询也是有一定的性能提升的。 aggregation操作metricsquery.json 12345678910&#123; &quot;aggs&quot;: &#123; &quot;balance_stats&quot;: &#123; &quot;extended_stats&quot;: &#123; &quot;field&quot;: &quot;balance&quot; &#125; &#125; &#125;, &quot;size&quot;: 0&#125; 性能测试结果 Elasticsearch-1.5.2 &gt;&gt;&gt; 172.19.66.70 Requests per second: 32.67 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 1838 66% 1938 75% 1970 80% 1972 90% 2427 95% 2555 98% 2597 99% 3486 100% 3806 (longest request) Elasticsearch-7.5.2 &gt;&gt;&gt; 172.19.66.77 Requests per second: 1393.98 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 41 66% 48 75% 53 80% 56 90% 65 95% 74 98% 84 99% 93 100% 141 (longest request) 7.5.2在指标聚合上的速度提升也十分的可观。 bucketquery.json 1234567891011&#123; &quot;aggs&quot;: &#123; &quot;typeName&quot;: &#123; &quot;terms&quot;: &#123; &quot;field&quot;: &quot;balanceTypeName&quot;, &quot;size&quot;: 50 &#125; &#125; &#125;, &quot;size&quot;: 0&#125; 性能测试结果 Elasticsearch-1.5.2 &gt;&gt;&gt; 172.19.66.70 Requests per second: 79.98 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 721 66% 1015 75% 1171 80% 1258 90% 1488 95% 1571 98% 1600 99% 1618 100% 1643 (longest request) Elasticsearch-7.5.2 &gt;&gt;&gt; 172.19.66.77 Requests per second: 1629.80 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 34 66% 40 75% 45 80% 48 90% 57 95% 65 98% 77 99% 86 100% 153 (longest request) 7.5.2在桶聚合上也有着很好的性能优化效果。 小结从上面的term、range、match、metric、bucket的测试结果中我们可以看到，除了range之外其余的几个DSL在7.5.2都有了较大的性能提升。但是我们也要清醒地认识到，我们在上面的单次性能测试中使用的都是完全一样的DSL，这就可能会使得ES中的缓存生效，因此该性能测试可能无法完全展现出真实环境中的ES性能，因为在真实环境中ES的缓存可能并不能像这里测试的这样完美的生效。 此外，由于这里的机器资源有限，我们只能做一个简单的性能对比实验，证明7.5.2的性能确实是优于1.5.2的。真正的ES-7.5.2集群的性能极限还要等到_搜索平台_的兼容性测试完成后，这时候我们可以搭建一个真正的生产环境的7.5.2集群，然后对此集群进行极限压测，等后面做了我会再做一份笔记。 数据写入的性能测试上面我们测试了ES的数据检索和聚合的性能，下面我们也对ES的数据写入性能做一个测试。创建data.json并保存如下的数据 1234567891011121314151617181920212223242526&#123; &quot;id&quot;: 86523, &quot;name&quot;: &quot;普通高等教育“十一五”国家级规划教材配套参考书：电工电子学学习辅导与习题解答（第3版）&quot;, &quot;publish&quot;: &quot;高等教育出版社&quot;, &quot;author&quot;: &quot;张伯尧，叶挺秀&quot;, &quot;info&quot;: &quot;《电工电子学学习辅导与习题解答(第3版)》&quot;, &quot;price&quot;: 86.9, &quot;createdTimeStr&quot;: &quot;2020-01-01T12:00:00.000+0800&quot;, &quot;createdTime&quot;: 1547873713709, &quot;type&quot;: &quot;college&quot;, &quot;sellOut&quot;: false, &quot;students&quot;: [ &#123; &quot;name&quot;: &quot;王博文&quot;, &quot;class&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;徐晓静&quot;, &quot;class&quot;: 2 &#125;, &#123; &quot;name&quot;: &quot;路小楠&quot;, &quot;class&quot;: 1 &#125; ]&#125; 使用ab测试1.5.2的集群写入性能 ab -n 50000 -c 200 -p data.json -T &#39;application/json&#39; http://172.19.66.70:9200/books/Book 性能报告如下 Time taken for tests: 26.680 seconds Requests per second: 1874.06 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 72 66% 85 75% 95 80% 101 90% 123 95% 147 98% 1236 99% 1276 100% 3652 (longest request) 使用ab测试7.5.2的集群写入性能 ab -n 50000 -c 200 -p data.json -T &#39;application/json&#39; http://172.19.66.77:9200/books/_doc 性能报告如下 Time taken for tests: 103.203 seconds Requests per second: 484.48 [#/sec] (mean) Percentage of the requests served within a certain time (ms) 50% 344 66% 387 75% 438 80% 478 90% 615 95% 739 98% 979 99% 1097 100% 2436 (longest request) 很奇怪的是ES-7.5.2的数据写入性能明显低于ES-1.5.2，为了规避掉机器之间的细微的差异，我把ES-7.5.2安装在节点1和节点2之上，之后停止ES-1.5.2集群同时启动ES-7.5.2集群，然后把数据写到新的7.5.2的集群中去，测试结果和上面还是基本一致。具体原因暂时还不清楚，后面再做进一步的深入了解。 数据写入慢的原因我们删除上面的测试中所创建的books索引，之后给每个索引只创建一条文档 ab -n 1 -c 1 -p data.json -T &#39;application/json&#39; http://172.19.66.70:9200/books/Book ab -n 1 -c 1 -p data.json -T &#39;application/json&#39; http://172.19.66.77:9200/books/_doc 只写入一条数据我们发现1.5.2也是快于7.5.2的集群的，之后我们使用如下接口观察我们写入的数据的段文件情况，首先是1.5.2集群 http://172.19.66.70:9200/books/_segments 得到1.5.2的段文件信息如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&#123; &quot;_shards&quot;: &#123; &quot;total&quot;: 4, &quot;successful&quot;: 4, &quot;failed&quot;: 0 &#125;, &quot;indices&quot;: &#123; &quot;books&quot;: &#123; &quot;shards&quot;: &#123; &quot;0&quot;: [ &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: true, &quot;node&quot;: &quot;Fn-qbetJSyS7Qn6qb8rcaQ&quot; &#125;, &quot;num_committed_segments&quot;: 1, &quot;num_search_segments&quot;: 1, &quot;segments&quot;: &#123; &quot;_0&quot;: &#123; &quot;generation&quot;: 0, &quot;num_docs&quot;: 1, &quot;deleted_docs&quot;: 0, &quot;size_in_bytes&quot;: 9870, &quot;memory_in_bytes&quot;: 12898, &quot;committed&quot;: true, &quot;search&quot;: true, &quot;version&quot;: &quot;4.10.4&quot;, &quot;compound&quot;: true &#125; &#125; &#125;, &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: false, &quot;node&quot;: &quot;PvI9366jTQKbFXWF2HRg6w&quot; &#125;, &quot;num_committed_segments&quot;: 1, &quot;num_search_segments&quot;: 1, &quot;segments&quot;: &#123; &quot;_0&quot;: &#123; &quot;generation&quot;: 0, &quot;num_docs&quot;: 1, &quot;deleted_docs&quot;: 0, &quot;size_in_bytes&quot;: 9870, &quot;memory_in_bytes&quot;: 12898, &quot;committed&quot;: true, &quot;search&quot;: true, &quot;version&quot;: &quot;4.10.4&quot;, &quot;compound&quot;: true &#125; &#125; &#125; ], &quot;1&quot;: [ &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: false, &quot;node&quot;: &quot;Fn-qbetJSyS7Qn6qb8rcaQ&quot; &#125;, &quot;num_committed_segments&quot;: 0, &quot;num_search_segments&quot;: 0, &quot;segments&quot;: &#123;&#125; &#125;, &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: true, &quot;node&quot;: &quot;PvI9366jTQKbFXWF2HRg6w&quot; &#125;, &quot;num_committed_segments&quot;: 0, &quot;num_search_segments&quot;: 0, &quot;segments&quot;: &#123;&#125; &#125; ] &#125; &#125; &#125;&#125; 从上面的结果中我们可以看到这条文档被保存到了books索引的0号分片中，这个分片包含了primary和replica两份数据，1号分片中的数据则为空。我们可以看到0号分片的主备两个分片的 segments.size_in_bytes 的值均为9870，这代表了segment在磁盘上占用的空间大小。 了解了以上信息之后，我们继续获得7.5.2的段文件信息 http://172.19.66.77:9200/books/_segments 得到的7.5.2的段文件信息如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&#123; &quot;_shards&quot;: &#123; &quot;total&quot;: 4, &quot;successful&quot;: 4, &quot;failed&quot;: 0 &#125;, &quot;indices&quot;: &#123; &quot;books&quot;: &#123; &quot;shards&quot;: &#123; &quot;0&quot;: [ &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: true, &quot;node&quot;: &quot;sLtK-N1eSFiGNV7PeA1ntg&quot; &#125;, &quot;num_committed_segments&quot;: 0, &quot;num_search_segments&quot;: 0, &quot;segments&quot;: &#123;&#125; &#125;, &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: false, &quot;node&quot;: &quot;HNJ8oebqSRGO6C9YJbjCFA&quot; &#125;, &quot;num_committed_segments&quot;: 0, &quot;num_search_segments&quot;: 0, &quot;segments&quot;: &#123;&#125; &#125; ], &quot;1&quot;: [ &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: false, &quot;node&quot;: &quot;sLtK-N1eSFiGNV7PeA1ntg&quot; &#125;, &quot;num_committed_segments&quot;: 0, &quot;num_search_segments&quot;: 1, &quot;segments&quot;: &#123; &quot;_0&quot;: &#123; &quot;generation&quot;: 0, &quot;num_docs&quot;: 1, &quot;deleted_docs&quot;: 0, &quot;size_in_bytes&quot;: 11863, &quot;memory_in_bytes&quot;: 5007, &quot;committed&quot;: false, &quot;search&quot;: true, &quot;version&quot;: &quot;8.3.0&quot;, &quot;compound&quot;: true, &quot;attributes&quot;: &#123; &quot;Lucene50StoredFieldsFormat.mode&quot;: &quot;BEST_SPEED&quot; &#125; &#125; &#125; &#125;, &#123; &quot;routing&quot;: &#123; &quot;state&quot;: &quot;STARTED&quot;, &quot;primary&quot;: true, &quot;node&quot;: &quot;HNJ8oebqSRGO6C9YJbjCFA&quot; &#125;, &quot;num_committed_segments&quot;: 0, &quot;num_search_segments&quot;: 1, &quot;segments&quot;: &#123; &quot;_0&quot;: &#123; &quot;generation&quot;: 0, &quot;num_docs&quot;: 1, &quot;deleted_docs&quot;: 0, &quot;size_in_bytes&quot;: 11863, &quot;memory_in_bytes&quot;: 5007, &quot;committed&quot;: false, &quot;search&quot;: true, &quot;version&quot;: &quot;8.3.0&quot;, &quot;compound&quot;: true, &quot;attributes&quot;: &#123; &quot;Lucene50StoredFieldsFormat.mode&quot;: &quot;BEST_SPEED&quot; &#125; &#125; &#125; &#125; ] &#125; &#125; &#125;&#125; 7.5.2集群的books索引的文档分配在了分片1上，同样分片1也包含了主副两个分片。我们可以看到7.5.2的段文件占用的磁盘空间为11863，比1.5.2的9870要大一些，这是为什么呢？按道理来说Lucene从版本4.10.4升级到版本8.3.0，占用空间应该有一定程度上的优化才对，至少也不应该是占用空间变大了啊。 通过查找资料，我们可以知道在新版本的Elasticsearch中，为了优化ES的排序和聚合的速度而引入了Doc values属性，该属性是在文档索引时生成的，目的是为了替代以前在文档查询时才生成的Fielddata属性。 我们可以对字段的mapping属性添加 &quot;doc_values&quot;: false 这样可以禁用字段的doc_values属性，在禁用了7.5.2的字段的doc_values之后，段文件占用空间明显减小，索引速度也有明显的提升。 BUT!!! 通过以上的配置之后，7.5.2的数据索引速度仍然只是1.5.2的一半😶，具体原因还需进一步的分析😢。 5月19日补充： 关闭两个集群的refresh_interval（关闭自动refresh之后，写入到索引的数据不会被查询到，除非手动的执行了refresh操作之后才可以） PUT /books/_settings &#123; &quot;refresh_interval&quot;: -1 &#125; 同时关闭7.5.2的doc_values，并且只保存了long类型的数据以避免分词器的影响，之后测试结果发现仍然是7.5.2的时间更长。不过此时我们使用如下的接口查询索引的详细信息 GET /books/_stats 可以发现两个索引的 indexing.index_time_in_millis 的值其实是一样呢，这是为啥呢。。。 参考Apache Bench 安装与使用性能测试应该怎么做？ 滴滴 ElasticSearch 平台跨版本升级以及平台重构之路https://www.elastic.co/guide/en/elasticsearch/reference/7.5/query-dsl.htmlhttps://www.elastic.co/guide/en/elasticsearch/reference/7.5/search-aggregations.html","categories":[],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"压力测试","slug":"压力测试","permalink":"https://www.nosuchfield.com/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"}]},{"title":"【转】三个字节的历险","slug":"The-adventure-of-three-bytes","date":"2020-05-10T15:55:17.000Z","updated":"2025-08-22T15:42:13.348Z","comments":true,"path":"2020/05/10/The-adventure-of-three-bytes/","link":"","permalink":"https://www.nosuchfield.com/2020/05/10/The-adventure-of-three-bytes/","excerpt":"","text":"引子不管你相不相信，每个程序的日志都记录了一个完整的故事，一个由代码和数据相互交谈而产生的故事。就像你们人类的故事一样，这里面既有日常琐事，又有奇事趣闻，自然也少不了各种喜怒哀乐。只要你仔细聆听，就一定能够听懂。 请注意，当我在说这些话的时候，我并不是在打一个比喻，而是在描述确凿的事实，就像太阳的东升西落那样不容置疑。每个日志中记录的故事，在那个世界都曾经真切的发生过。如果你还是不相信，请阅读下面这个故事，它是我的一段亲身经历。这个故事就记录在一个程序日志里，而这个日志文件至今还躺在主人的笔记本电脑中的某个位置，随时供人查阅。 哦，对了，你还不知道我是谁？其实跟故事本身比起来，这并不那么重要。我只是数字空间(Cyberspace)里一个普通的字节(Byte)。我可以随身携带8个比特(Bit)的信息，请叫我0x30。 相遇，启程按照你们人类的说法，我是个男生。为了叙述方便，姑且按照这样的方式来定义吧——奇数值的字节是女生，偶数值的字节是男生。这样说的话，现在紧挨着我坐一起的这两位，0x35和0x32，一位是女生，而另一位就是男生喽。同样是为了叙述方便，下面我给他们各起一个人类的名字，0x35叫小丽，0x32叫小明。而我呢，如果你们愿意，可以叫我小白。 在我们三个碰到一起之前，我们已经在数据库里睡了几个世纪之久（当然是按照数字空间的时间单位）。多半是因为受到某个网络请求的触发，我们被加载到了内存里。此刻，我们位于一个很庞大的对象实例的内部。我粗略估算了一下，同我们一起被加载进来的，大概还有几千个字节，他们大部分都存储在这个对象内部的一个List中。 等了一会，负责执行CPU指令的进程老大跑过来告诉我们，“大家注意，你们马上就要被发送到一条TCP长连接上去，对方正在等待你们所携带的信息。由于这是一个串行的通道，所以，你们所在的整个对象首先要被序列化(Serialization)。” 我正在困惑之际，没想到小丽率先替我问出了心中的疑问： “序列化？那是什么意思啊？” 她说话的声音很好听，就像某个电台的女主播。我不禁有些恍惚。 “序列化就是按字节先后排成一队，就好像回龙观西大街上的汽车要经过北郊农场桥，所有车最后都必须并到一个车道上去。”进程老大耐心地向我们解释道。 然后，我们按照一种被称为protobuf的数据格式完成了序列化。据说，这种数据格式是由一个「不存在」的国际化大公司设计出来的。不管那么多了，现在重要的是，我们原来在同一个对象实例内部的所有字节被排成了长长的一队，而且我发现，队伍中还插入了一些额外的字节。最后队伍的总长度达到了3400个字节。 在序列化之后的队伍中，小丽，小明，和我，我们三个仍然挨在一起。我排在第1461个字节位置，而他们俩都在我前面。也就是说，小丽排在第1459个字节位置，小明排在第1460个字节位置。 算法小哥告诫我们，队伍一旦排好，顺序就绝对不能再变了，而且所有字节一个都不能少。否则，到了接收端，我们将无法被反序列化(Deserialization)。这当然也包括新插入的那些字节，比如站在队头的那几个，他们携带着整个队伍的长度信息，至关重要。 “伙计们，现在你们已经组成一个完整的消息(Message)了。一路顺风！”说完，进程老大就将我们由字节组成的整个消息队伍扔到了协议栈的buffer之中。 协议栈的buffer就像一间很大的候车大厅，我们并排坐在里面，小心地保持着原来的次序。 负责维护协议栈的内核程序告诉我们，TCP通道上正在进行流量控制(Flow Control)，原因是TCP另一端的接收窗口目前不允许我们发送。所以，需要我们耐心等待。 为了打发无聊的时间，我就跟前面的小丽和小明他们攀谈了起来。聊了一阵子，小明突然提议说：“反正也闲得无聊，要不我们一起玩个游戏？” “好啊好啊，真心话大冒险怎么样？”我赶紧附和，并用眼角的余光扫了一下小丽。 小丽迟疑了一下，“这个有点太刺激了，要不我们还是来个文艺点的吧。每个人讲一个故事如何？看谁讲的故事精彩！” 对于女人的建议，我和小明自然都欣然采纳，“那就这样，按顺序来，女士优先吧。” 小明又补充道：“毕竟我们都生活在数字空间，而且，你们知道吗——我们的听众基本上都是程序员。所以我建议，故事最好要跟程序员或编程有关。” 小丽听完白了他一眼，不置可否。 接下来，小丽用她凄婉的语调讲述了一个令我们所有人都感动不已的故事。 我在死神前转身，只因你一生的坚守窗外是淅淅沥沥的小雨，而她的心情也跌落到了谷底。她想象着那些冰冷的雨滴，滴答滴答，落在肌肤上，浸透她的全身。 古灵儿躺在床上，睁着大眼睛瞪着天花板。她从药瓶中又倒出了一粒药片，动作娴熟地一口吞进了肚子里。已经是第十粒安定片了，却了无睡意。她现在有点怀疑网上的说法，安眠药吃到100片真的能致人死命吗？ 她现在还有最后一件事要做，这也是她最后的一点希望了。她把已经关机了好几天的手机重新拿出来，开机，然后把卸载掉的各种社交软件也重新安装了回来。 除了那些讨债的人，没有任何人联系她。她的爱人没有任何消息，没有短信，没有留言，没有未接电话。 那些上门讨债的人曾经告诉过她，她的老公携款潜逃了，带走了他们的血汗钱。直到现在，古灵儿也都不相信，那个深爱她的男人会抛下她不管。但事实似乎无可争辩，她老公的朋友圈最后一次更新还是在两个月前，也就是他突然消失不见的前几天。 最近这些日子，是她人生中最痛苦的一段经历。为了躲避那些上门讨债的人，她搬了好几次住处，卸掉了所有的社交软件，甚至很多时候不得不把手机关掉，但手机号却一直坚持没换，因为她怕老公联系不到她。至今她仍然心存幻想，幻想着突然收到他的消息，然后他会向她解释所有这一切。 其实她对最近发生的事情一直都很迷惑。他老公的公司经营得一直还算顺利，甚至在他消失的前不久，他还踌躇满志地告诉她公司马上就要进入下一轮融资了。直到两个月前，一群人突然闯进她们的家里，宣称她老公的公司产生了上亿的坏账，并要求她替丈夫还债。而她竟然也真的联系不到他了。 现在她知道了，幻想终归是幻想，她的心重新变得冰冷。她又拿出药瓶，吞下一粒。此刻，她头脑中只剩下一个念头，就这么吃下去，直到永远睡去。 突然，「叮」的一声，手机收到了一条推送。她一把抓过手机，竟然是来自她已经很久不玩的一款App——名字叫「微爱」的情侣软件。那是很久很久之前，她和她的前男友，也是她的初恋，一起在「微爱」上开通的私有空间。本是小孩子的把戏，两个人每天坚持浇灌一棵虚拟的爱情树。早在两年前他们分手之后，她就不再玩了。没想到，那个像傻瓜一样的他却还在坚持。手机推送告诉她，对方已经连续浇水超过2000天了，他们的爱情树又升到了一个新的等级。 思绪如快速生长的草木一般，触及到了一段尘封的记忆。 两年前，那也是一个雨天，五月的一个雨天。天气本应是温暖宜人的，但那天却格外阴冷。就像今天一样。 “我们还是分手吧。”有多少次想说，却始终无法开口。终于，古灵儿还是把那个句子吐了出来。 苏秦表情木然地站在那里，原本就黯淡无光的眼睛彻底蒙上了一层灰纱。 不再有悲伤和争吵。该吵的，该闹的，该哭泣的，都已经过去了。在一起三年多了，两个人之间细小的战役也断断续续地持续了三年。 该走的终会走。 这并不能怪古灵儿。整日面对这样一个吊儿郎当的男人，哪个女人又会有安全感呢？说起来有点讽刺，苏秦，跟古代那个「头悬梁，锥刺股」的苏秦是同一个名字，可怎么就没有一点相像呢？那时，他毕业后干程序员这一行也好几年了，不仅没获得任何升职机会，甚至工资都没涨过太多。他这性格从上大学那会就一直这样，平日里嘻嘻哈哈，东游西逛，从来不会认认真真地钻研点东西，还经常花大把的时间打游戏。干程序员这一行的，本应是个高薪行业，他周围的很多同学早就买房买车了。 而古灵儿的家里人一直对她的婚事催个不停。稍微有点理智的女人，都会像她这样选择的。跟苏秦相比，她后来的丈夫不管哪一点，都要强上一万倍。没想到…… 同样没想到的是，在这样晦暗的时刻，他又以另外的一种方式出现在她的面前。她突然想起了他过去所有的好，想起了他骑着自行车带着她游遍了北京城的每一个角落，想起了那一天，当她最后转身离开的时候，苏秦向着她在雨中的背影大声地喊：“灵儿，我会等你回来的！” 古灵儿从床上爬起来，走到穿衣镜前。她缓缓地脱去身上的睡衣，扔在一边，镜中出现了她憔悴的面容、赤裸而日渐瘦弱的身体。一股巨大的悲伤感向她袭来，如汹涌的波涛一般。她再也控制不住自己，两行热泪夺眶而出。 她蹲在卧室的地上哭了半个小时。最后，她拿起手机，从通讯簿中找到了苏秦的号码。 遥远的路途“讲完了？” 面对我和小明的问题，小丽点了点头。 “你这故事跟程序员一点关系也没有啊！”小明提醒她。 “怎么没有？那个前男友就是个程序员呢！”小丽反驳说。 “但故事情节跟程序员没关系啊……”小明大概是感觉有点说不清楚，换了个问法，“那他会写复杂的程序吗？他是个技术高手吗？” “不是。这根本不重要！”小丽一脸不耐烦地回答。 “你这故事是真的吗？”我问小丽。 “当然了！我就曾参与过那次关键的推送，我是那条推送消息里的一个字节。”小丽回答问题的同时，也说出了自己的来历。 “后来他们怎么样了呢？”我继续追问。 “她和苏秦吗？当然是幸福地在一起了啊。” “那古灵儿的老公欠的的那些债务呢？最后怎么解决的呢？” 小丽对这个问题似乎也不太感兴趣，“我也不清楚了。估计苏秦会帮她打官司吧。她应该没有义务承担这笔债务吧。” 正在这时，协议栈的内核程序突然又跑过来，向我们喊道，“快点准备！马上要出发了！对方的TCP接收窗口已经打开。”说着，他打量了一下所有这3400个字节，补充道，“现在buffer里字节太多，对方的接收窗口一下子装不下。这样吧，前面2000个字节先走！” 紧接着，协议栈各个协议层的子程序又在我们这2000个字节的最前面加上了20个字节的TCP头，然后又在前面增加了20个字节的IP头，最后，又在这2040个字节的前面和后面都增加了链路层的帧头和帧尾。 我们从内网上行路由器的一个出口出来，进入了一条光纤通道。路由器上的路由程序告诉我们，下一站是广州的一个节点。 “我们这一站要走3000多公里啊！” “可不是嘛！” 我们三个又开始闲聊起来。 小丽感到很困惑，“我们的出发地点和目的地好像都在北京，为什么要先到广州走一圈呢？” “这可能是一种路由策略。我猜可能是网络运营商在南方的线路资源比较便宜，才会给出这样的路由。也可能是一种配置错误。”我根据我仅有的一点网络知识，向小丽解释。 “对我们会有什么影响吗？”小丽不无担心的问。 “我们中间会经过更多的路由节点，延迟会高一些。如果跳转节点过多，而我们的IP包头的TTL (Time To Live)又被耗尽的话，我们可能被整体丢弃掉。”我突然意识到把问题说得太严重了，赶紧又补充了一句，“不过这种丢弃的情况很少见啦。” 虽然嘴上这样说，但我心里却产生了一股不祥的预感。可能是害怕的原因，小丽也有些脸色发白。 小明忍不住插嘴道，“你说你们俩，说这些没用的干嘛呢？我们又控制不了。这不是自己吓自己吗？” “是啊是啊。”我随声附和，“反正这一趟路途遥远，我们有的是时间，那我们继续之前讲故事的游戏好了。第二个谁讲呢？” “我讲我讲！”小明抢着说，“我这次要讲一个真正的跟程序员有关的故事。主人公可是个顶级的技术高手！” 黑客与女孩我要讲的这个故事啊，可跟我的亲身经历有关。故事的主人公，是一名身怀绝技的网络黑客。他的黑客技术登峰造极，只要动动手指就能让几千个节点的网络瘫痪！他的程序能够穿透各种防火墙，到达别人根本无法到达的地方。 小明神秘的语气吸引了我们。我和小丽聚精会神地听着。 黑客就像网络世界的一个侠盗，他游历世界，劫富济贫，专门收拾那些为富不仁的有钱人。 有一天，黑客在海边度假的时候，碰到了一个女孩。他深深地爱上了她。 哦，对了，我开头忘了介绍，我们的这位黑客主人公虽然技术高超，但表达能力欠缺，而且有严重的社交恐惧症。他好几年都独来独往，从不与外人接触，整日都泡在网络上。他大概没有勇气向女孩当面表达他的爱意。所以，他开始用自己的方式去接触她。 他入侵了女孩的家庭网络，潜伏在她的个人电脑里面，注视着她的一举一动。令他灰心丧气的是，女孩的生活中原来有另外一个男人，那可能是她的男朋友或者丈夫。黑客感觉到自尊心受到了伤害，他顺藤摸瓜，很快黑进了那个男人所在公司的网络。 随后的发现令他大吃一惊。那是一个做互联网金融业务的公司，那个男人是公司的老板。黑客发现公司的账目存在严重的问题，公司非法集资，账目混乱，仿佛在故意掩盖着一个阴谋。他想亲口去告诉那个女孩，但好几次他又退却了。女孩怎么可能会相信他呢？ 现在，对于我们的黑客来说，这已经不是一个私人恩怨的问题了，这涉及到很多人的财产安全。这是一个社会正义的问题！于是，黑客利用那家公司服务器的一个「SQL注入」的漏洞，让公司服务器集体瘫痪，再也无法启动，同时又将隐藏的公司账目提取了出来，并公开发布在了网上。 分手“知道吗？我，就是这名黑客的工具程序中携带的某个字节。我还亲自参与了那次的入侵行动！” 对于他的身世来历，小明说起来一脸的自豪。 “那最后黑客跟那个女孩在一起了吗？”小丽问。 “可能在一起了吧。不过这根本不重要！”这次轮到小明不耐烦了。 现在，我们已经经过了许多中途的路由器节点。在每一个节点上，路由程序都会根据20个字节的IP头中的目的地址去查阅路由表，决定下一跳把我们发送到哪里。眼看着离目的地越来越接近了。 这时，我们来到了一个新的路由节点。路由程序告诉我们一个不好的消息，前面的路线要经过一个以太局域网，这个局域网的MTU (Maximum Transmission Unit，最大传输单元) 是1500字节。所以，我们这2000个字节要被分成两部分分别发送。路由程序解释说，在IP协议里，这叫分片(Fragmentation)，并详细解释了分片的过程。 具体的分片过程稍微有点复杂。首先，分片是IP层的策略，因此它不识别TCP层的封装。也就是说，20个字节的TCP头加上原来2000个字节的数据，这总共2020个字节，在IP层协议执行分片的时候都当做数据。前面的1480个字节分到第一个数据片，他们这一队前面加上20个字节的IP头，成为1500个字节的新IP包，恰好可以通过MTU的限制。而从第1481个字节开始，后面的540个字节，将分到第二个数据片。这个数据片同样在前面加上20个字节的IP头，成为一个560字节长度的IP包。 我突然意识到，第1481个字节位置，由于里面多算了20个字节的TCP头，所以在原来的数据中实际上是第1461个字节。而我不就正好排在第1461个字节位置吗？这就是说，我将被分到第二个数据片，而小明和小丽在第一个数据片！ 真是糟糕透了。 当我把这个分片的结果告诉他们的时候，我确信我看到了小丽眼中现出担忧的神色。 “那我们还会再见面吗？”小丽问。 “当然会了。两个数据片分头到达目的主机之后，还会在协议栈里重组(Reassembly)的。”我故作轻松地解释，但心中不安的感觉却越来越强。 “真可惜！我们还没听到你讲的故事呢。”小明开玩笑地说。 “等重组之后，我马上讲给你们。” 我刚说完，分片操作就已经完成。载着小明和小丽的数据片「嗖」地一声被发射出去。而我仍站在原来的buffer中，向他们挥手告别。 防火墙我在第二个数据片中，紧跟在20个字节的IP头后面，排在数据的第1个位置。一路上，我陷入了沉思。 我们又经过了几个路由节点，慢慢地靠近了目的主机。 “停！”突然有人大喊一声。原来是目的主机上的防火墙程序，他要求我们停下来接受检查。 “不对啊，你们这个数据包的目的端口没有在白名单内！”最后，防火墙程序下了结论。 “什么！”几乎数据片内的所有字节都喊了起来。 防火墙程序无奈地摊开双手，“真是抱歉。但规则就是规则。你们只能被丢弃掉！” 我所在的数据片内一片骚乱。 “等一下！”排在第1个数据位置的我大喊一声。此刻我突然冷静了下来，看来面前是个工作在四层的防火墙程序。我似乎明白怎么回事了，“请听我说！并不是目的端口不对，而是根本没有目的端口。我们是IP分片之后的第二个数据片，只有IP头，没有TCP头。你要看的目的端口号应该在TCP头内部，但我们这里根本没有。” 防火墙程序狐疑地看了我一眼，“那你说怎么办？” “如果我没猜错的话，我们的第一个数据片在之前已经通过了你这里。你可以去查查记录，看有没有一个已经通过的数据包，具有跟我们完全相同的一个Identification字段（注：是IP头用于分片和重组的一个字段）。如果有的话，我们就应该也能通过。” “好，你们等着，我去查一下。” 时间仿佛过了一个世纪之久。看来这个防火墙在处理分片情况下的过滤算法效率并不高。 我心中那种不安的感觉似乎又逐渐升腾起来。没错，如果幸运的话，小明和小丽他们应该已经通过了这里，但如果我们却是先他们一步到达的话……后果真是不堪设想！ 还好，防火墙程序最后终于重新返回，对我们点了点头，“你们可以通过了。” 重逢我们在目的主机的IP层成功完成了重组 (Reassembly)，重新变成了2020个字节的队伍（包括20字节的TCP头）。 我又重新和小丽、小明他们挨在了一起。一切仿佛一如从前，但又变得有点不同。 小丽和小明现在手拉着手，亲密地偎依在一起。他们见到我，微笑着同我打招呼：“你怎么这么慢啊！终于又见到你了！” 我胸中涌起了一股类似嫉妒的情绪。 突然间，我完全明白了，从头至尾。 “我现在就给你们讲第三个故事。”我顿了一顿，“很凑巧，故事的男主人公也叫苏秦，而女主人公也叫古灵儿。” 他们吃惊地瞪大了眼睛。 第三个故事苏秦是计算机系毕业的，毕业后做了程序员的工作。但是，他知道自己并不擅长做这份工作，所以一直没有信心。 他和古灵儿在毕业之前就开始恋爱了，那是一份纯粹的爱情。然而，毕业之后他慢慢地发现，随着生活而来的物质压力却越来越大，让他喘不过气来。他小心翼翼地维系着这份感情，但终于她还是离他而去了。 苏秦从此暗下决心，他发誓一定要把失去的再重新找回来。他从此奋发图强，真可以说是「头悬梁，锥刺股」了。他用了差不多两年的时间，阅读了大量的技术书籍，在工作中也竭尽全力，终于成长成了一名真正的技术高手。升职，加薪，一切似乎都唾手可及。但是，这时候古灵儿早已步入了别人的婚姻殿堂。原来一切都已不可挽回。 苏秦白天上班，晚上则摇身一变，成为一名网络黑客。他对古灵儿仍然没有死心。他入侵了她的家庭网络，又入侵了她老公的公司网络。她老公确实是个有钱人，但却在用人上目光短浅。可能是为了压低成本，他们公司几乎只招一些工资低的程序员，结果做出来的产品漏洞百出。苏秦根据这些漏洞泄露出来的数据，发现了公司的账目问题。 他也说不清自己究竟是出于何种动机，也没仔细想过这样做的后果，总之他出手了。他选了一个好日子，对古灵儿他老公的公司网络发动了致命的一击。 结果公司倒闭了，老板做贼心虚，竟然自己跑路了。那个男人果然是个靠不住的人。苏秦没想到这件事给古灵儿带来了无尽的麻烦，但她把社交软件都删掉了，而且搬了住处，他一时竟也找不到她。 直到有一天，他接到了古灵儿的来电。 整个故事的结尾“所以说，你们俩讲的，其实只是一个故事的两个部分！”我大声地向小丽和小明宣布道。 这时，协议栈的内核程序刚刚剥掉了TCP头，我们又重新变成了2000个字节的数据。紧接着，一个中断产生，我们被从内核态抛到了应用层，等待应用层程序的进一步处理。 他们两个吃惊地说不出话来。看到他们的样子，我内心竟浮起一丝复仇的快感。我脸一红，赶紧压制住了这种情绪。 “你——说的都是真的？”小明惊得说话都有些结巴了。 我慢条斯理的开始分析，“知道为什么我们三个会碰到一起吗？这并不是凑巧。因为我们三个都和苏秦有关！” “那你呢？你和苏秦又是什么关系呢？” “我属于苏秦调试程序的时候使用的一份测试数据。”我指了指由所有这2000个字节组成的字节队列，补充道，“准确地说，我们都属于这份测试数据。他应该正在测试大数据包的情况下究竟会发生什么。” 此时，应用层的程序发现了我们的到达，正准备调用protobuf的反解子例程执行反序列化操作。 “什么？你是说我们几个之所以在这儿，只是在进行一次调试？”小明和小丽表示都不太相信。 “没错。而且我们马上就会知道结果了。”我观察了下周围的执行环境，更加确信了我推测的正确。 他们俩面面相觑。 没错！就是现在了！我大声地冲他们喊道：“知道着这意味着什么吗？” “什么？” “这意味着正在调试的程序还不太稳定！” 一瞬间，进程抛出的异常有如原子弹爆炸。刺眼的白光照亮了支离破碎的整个内存空间。所有的东西在一点点消失，操作系统开始回收异常发生后的现场。 “到底发生了什么？”就在我们大家被彻底地从内存中抹掉之前，小明竭嘶底里地大喊。 “这个接收程序忘了进行「粘包」处理！”我想起了我们出发时由3400个字节组成的完整消息，直到现在，后面仍有1400个字节没有到达。 在一片白光之中，世界重新归于一片寂静。 我们虽然已不再存在于这片内存之中，但程序的日志早已把这发生的一切都记录了下来。此刻，日志文件正静静地躺在世界的某个角落，等待着喜欢听故事的你来随时查阅。 （完） 原文链接：http://zhangtielei.com/posts/blog-3-bytes-story.html欢迎关注博主的微信公众号 ↓↓↓ ██████ ██████ ████ ██ ██████████ ██ ██ ██ ██████ ████ ██ ██████████ ██ ██ ████████████████████████████████ ██ ██ ██ ██ ██ ██ ██ ████ ████ ████ ██ ██ ██ ██ ██ ██ ██ ██ ██ ████ ████ ██ ████ ██ ██ ██████████ ██ ████ ██████ ██ ██ ████ ██████████ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██████████████████████████ ██ ██ ████████████████████ ██ ██ ██ ██ ██████ ██ ████ ██████ ██ ██ ██ ██ ██████ ████ ████ ████ ████ ██ ██████ ████████ ██ ████████ ██ ██████ ████ ████ ██████ ██ ██████ ██ ██████ ██ ██ ██ ██ ██████████ ████ ██████ ██ ████ ████████ ██ ██ ████ ██ ████ ██ ██ ████████ ████ ██ ████████ ██ ██ ██ ██████████ ██ ██ ██ ██ ████ ██ ████ ██ ██ ██ ██ ██ ████ ████████ ████ ████ ██ ██ ██ ████ ██ ████████████ ████ ████ ██ ████ ██████ ████ ██ ██ ████████████ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██████ ██████ ████ ██ ████ ██ ████ ██████ ██ ██ ██████ ████ ██ ██ ██ ██ ██ ██ ████████ ██ ████ ████ ██ ████ ██ ██████ ██ ████ ██████ ████ ██ ██ ██ ██████ ██████ ██████ ████ ██ ██ ██ ██ ████ ██ ██ ████ ██ ██ ██ ████ ██████ ██ ████ ██ ████ ████████████████ ██ ██ ████ ██ ██████ ████ ██ ██ ██ ██████ ██ ██ ██ ██ ██ ████ ██████████ ████ ██ ████ ██ ██ ██████ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██ ██████ ██ ██████ ████████████ ██ ██ ██ ████ ████ ██ ██ ██ ████ ██ ██████████ ██ ████████████████ ██ ████████ ██ ██ ██████ ██ ████ ████ ██ ██ ██████ ██","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"树莓派3b安装系统","slug":"Install-system-on-RaspberryPi-3b","date":"2020-05-01T23:29:34.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2020/05/01/Install-system-on-RaspberryPi-3b/","link":"","permalink":"https://www.nosuchfield.com/2020/05/01/Install-system-on-RaspberryPi-3b/","excerpt":"","text":"去地址https://www.raspberrypi.org/downloads/raspbian/下载树莓派的操作系统镜像，这里我选择的是Raspbian Buster Lite类型的镜像，你可以通过如下的磁力链接直接下载该镜像 magnet:?xt=urn:btih:2213F24BCA4031663B3DFA99FB554DCE8CFCB5DA 下载了镜像之后我们可以通过工具balenaEtcher把我们的镜像写入到树莓派的SD卡中去，具体步骤如下。 选择我们之前下载的镜像（即zip文件）以及相应的SD卡 选择把镜像写入到SD中 镜像写入完毕会进行校验 校验完毕则镜像已经成功的写入到SD卡中了 镜像写入成功后，该SD卡的名称被修改为boot，我们需要对镜像做一些修改使得树莓派支持Wi-Fi自动连接和SSH访问。 首先我们打开树莓派镜像数据的文件夹 cd /Volumes/boot 之后我们创建Wi-Fi设置的文件 vi wpa_supplicant.conf 并输入你的Wi-Fi设置，这些设置使得树莓派在启动时可以自动的连接到你的无线网络 country=CN ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network=&#123; ssid=&quot;your_wifi_ssid&quot; psk=&quot;your_wifi_password&quot; key_mgmt=WPA-PSK &#125; 之后我们继续在当前目录创建ssh文件以使得树莓派支持SSH访问 touch ssh 以上的设置修改完毕之后我们就弹出SD卡，然后把SD卡插入到树莓派中并给树莓派通上电，之后树莓派就会自动启动并连上你的Wi-Fi无线网络。 随后我们就可以使用SSH访问树莓派了，树莓派SSH的默认密码是raspberry ➜ ~ ssh pi@192.168.0.102 The authenticity of host &#39;192.168.0.102 (192.168.0.102)&#39; can&#39;t be established. ECDSA key fingerprint is SHA256:EgcNGDSXadaDuD9f2xbzaP753xzRpEc3pCh6Xrr3Lfw. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &#39;192.168.0.102&#39; (ECDSA) to the list of known hosts. pi@192.168.0.102&#39;s password: Linux raspberrypi 4.19.97-v7+ #1294 SMP Thu Jan 30 13:15:58 GMT 2020 armv7l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. SSH is enabled and the default password for the &#39;pi&#39; user has not been changed. This is a security risk - please login as the &#39;pi&#39; user and type &#39;passwd&#39; to set a new password. pi@raspberrypi:~ $ 至此树莓派已经成功启动并且可以进行SSH远程访问了，你也可以在路由器管理界面把树莓派的MAC地址和IP地址进行绑定，这样之后就都可以使用固定的IP地址访问树莓派了。","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"树莓派","slug":"树莓派","permalink":"https://www.nosuchfield.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"ssh","slug":"ssh","permalink":"https://www.nosuchfield.com/tags/ssh/"},{"name":"无线网","slug":"无线网","permalink":"https://www.nosuchfield.com/tags/%E6%97%A0%E7%BA%BF%E7%BD%91/"}]},{"title":"聊聊Elasticsearch中的文本分析","slug":"Talk-about-text-analysis-in-Elasticsearch","date":"2020-04-28T16:02:40.000Z","updated":"2025-08-22T15:42:13.348Z","comments":true,"path":"2020/04/28/Talk-about-text-analysis-in-Elasticsearch/","link":"","permalink":"https://www.nosuchfield.com/2020/04/28/Talk-about-text-analysis-in-Elasticsearch/","excerpt":"","text":"本文使用到的是Elasticsearch-7.5.2与Lucene-8.3.0 Elasticsearch中的string类型存在着两种不同的类型。一种是结构化的数据称为keyword，elasticsearch在索引时不会对这类数据做任何的处理；另一种是非结构化的数据称为text，elasticsearch在对这类型的数据做索引之前，会先对原始的string数据做一定的分析处理，之后得到一些结构化的数据结果，然后针对这些结构化的数据做进一步的处理。 例如一个field的类型是text，则Elasticsearch在对这个字段进行索引的时候，会先把这个field的值分词为tokens之后再保存这些tokens。而在查询时如果我们使用match查询，则Elasticsearch会对match查询的值进行分词得到tokens，之后才会使用这些tokens进行真正的查询操作。 上图显示了Elasticsearch中结构化数据与非结构化数据的保存与查询流程，需要注意的是，Elasticsearch最终只保存结构化的数据，不会保存非结构化的数据。因此我们可以保存一个text类型的数据到ES中，之后使用term方式来进行查询，这也是可以的。 Elasticsearch Text Analysis从非结构化字符串转化为结构化字符串的过程在Elasticsearch中称为Text analysis，Text analysis流程又分为如下的几个子流程： 使用零个或者多个Character filters，对原始的文本进行一些处理 使用唯一的Tokenizer，对原始的文本进行分词处理，得到一些tokens&#x2F;terms 使用零个或者多个Token filters，对上一步的tokens继续进行处理，例如合并同义词等 我们可以使用如下命令在es中给一个text字段设置指定的analyzer PUT my_index &#123; &quot;mappings&quot;: &#123; &quot;properties&quot;: &#123; &quot;title&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;analyzer&quot;: &quot;whitespace&quot;, &quot;search_analyzer&quot;: &quot;simple&quot; # 可选，默认是analyzer的值 &#125; &#125; &#125; &#125; 以上的analyzer为字段在索引时使用，在查询时字段按照如下优先级使用analyzer进行分析： 查询时手动指定的analyzer 被查询字段的search_analyzer属性 索引的default的analyzer的type 被查询字段的analyzer属性 es中包含了很多内置的analyzer，例如上面的simple和whitespace，这些analyzer能够做到开箱即用。此外es中还包含了很多内置的filter、tokenizer和char_filter，我们也可以使用这些基础组件构建出一些自定义的analyzer，如下就是一个例子 PUT my_index &#123; &quot;settings&quot;: &#123; &quot;analysis&quot;: &#123; &quot;analyzer&quot;: &#123; &quot;my_custom_analyzer&quot;: &#123; &quot;type&quot;: &quot;custom&quot;, # 这里设置为custom表示自定义一个analyzer &quot;tokenizer&quot;: &quot;standard&quot;, &quot;char_filter&quot;: [ &quot;html_strip&quot; ], &quot;filter&quot;: [ &quot;lowercase&quot;, &quot;asciifolding&quot; ] &#125; &#125; &#125; &#125; &#125; es的自定义analyzer功能给文本处理提供了极大的方便，在内置的analyzer无法满足我们的文本分析需求时，我们可以使用内置的character_filter、tokenizer和token_filter来构建符合我们需要的自定义analyzer，这已经十分强大了。但是在有的时候，即使是由character_filter、tokenizer和token_filter自定义的analyzer也无法满足我们的文本分析要求，这时候就需要用到elasticsearch的Analysis插件体系了。 Elasticsearch PluginsElasticsearch包含了很多官方以及社区贡献的plugin，这些插件都可以在es中进行安装或删除： ./bin/elasticsearch-plugin install analysis-smartcn ./bin/elasticsearch-plugin remove analysis-smartcn # 或者下载了安装包之后手动的安装plugin ./bin/elasticsearch-plugin install file:///home/elasticsearch/elasticsearch-analysis-ik-7.5.2.zip 在plugin中有一类叫做Analysis Plugin，该类plugin可以帮助es扩展文本分析的能力。下面我们来详细了解一下如何实现自己的analysis plugin和创建新的analyzer、tokenizer等等组件，以及如何在es中使用这些我们自己创建的插件。 Elasticsearch的分词器插件本质上使用的是Lucene的分词器插件，所以我们需要从两个部分来介绍Elasticsearch的分词器插件 Elasticsearch如何调用Lucene的分词器插件 Lucene如何自定义一个分词器插件 Elasticsearch调用分词器插件如果我们需要写一个能够让Elasticsearch进行调用的插件，首先我们要实现一个继承自 org.elasticsearch.plugins.Plugin 的类，并且该类需要实现 org.elasticsearch.plugins.AnalysisPlugin 接口参考(一)。你可以重写 AnalysisPlugin 接口的 getAnalyzers 方法，该方法最终会返回一个 org.apache.lucene.analysis.Analyzer 的对象，该对象就是一个实现了自定义分词操作的Lucene类型对象；你也可以重写 AnalysisPlugin 接口的 getTokenizers 方法，该方法最终会返回一个 org.apache.lucene.analysis.Tokenizer 的对象，该对象实现了你自定义的分词逻辑。关于这些自定义Lucene分词器的创建会在下一节进行详细介绍。AnalysisPlugin接口中还包含了一些其它的方法，更多信息可以参考该类的源代码。 下面我们看一个实际的例子，首先我们创建AnalysisQianmiPlugin类，它继承Plugin类且实现了AnalysisPlugin接口，它还重写了AnalysisPlugin接口的getAnalyzers方法，具体如下 123456789public class AnalysisQianmiPlugin extends Plugin implements AnalysisPlugin &#123; @Override public Map&lt;String, AnalysisModule.AnalysisProvider&lt;AnalyzerProvider&lt;? extends Analyzer&gt;&gt;&gt; getAnalyzers() &#123; Map&lt;String, AnalysisModule.AnalysisProvider&lt;AnalyzerProvider&lt;? extends Analyzer&gt;&gt;&gt; extra = new HashMap&lt;&gt;(); extra.put(&quot;qm_standard&quot;, QianmiStandardAnalyzerProvider::new); extra.put(&quot;sub&quot;, QianmiSubAnalyzerProvider::new); return extra; &#125;&#125; 上面的类中我们定义了两个ES的Analyzer，它们的名字分别为qm_standard和sub，我们选择qm_standard分析器的provider即QianmiStandardAnalyzerProvider参考(二)来做进一步的了解，QianmiStandardAnalyzerProvider的实现如下 1234567891011public class QianmiStandardAnalyzerProvider extends AbstractIndexAnalyzerProvider&lt;Analyzer&gt; &#123; private final Analyzer analyzer; public QianmiStandardAnalyzerProvider(IndexSettings indexSettings, Environment env, String name, Settings settings) &#123; super(indexSettings, name, settings); analyzer = new QianmiStandardAnalyzer(); &#125; @Override public Analyzer get() &#123; return analyzer; &#125;&#125; QianmiStandardAnalyzerProvider继承自Elasticsearch的AbstractIndexAnalyzerProvider类，并且重写了 public Analyzer get() 方法，该方法返回一个 org.apache.lucene.analysis.Analyzer 对象，具体Analyzer类的实现会在后一节中做进一步介绍。在AnalyzerProvider类的构造方法中我们还传入了Elasticsearch的一些属性，包括了 属性 含义 IndexSettings Elasticsearch中索引的信息 Environment Elasticsearch的环境属性 AnalyzerName 当前分析器的名称 Settings 当前分析器的属性 上面传入的这些属性我们可以在Lucene的分词过程中根据需要进行使用。 在创建了上面的类并且实现了相应的分词逻辑之后，我们可以对代码进行打包得到一个jar。之后我们把该jar包和一个ES插件的描述文件放在同一个文件夹中，然后把这个文件夹打包为一个zip文件，得到的这个zip文件就是一个ES的plugin了。 Elasticsearch的描述文件固定为 plugin-descriptor.properties，它一般包含了如下的内容 # 插件的描述信息 description=$&#123;project.description&#125; # 插件的版本号 version=$&#123;project.version&#125; # 插件的名称 name=$&#123;elasticsearch.plugin.name&#125; # 插件的全限定路径，就是之前继承自Plugin的那个类的全限定路径 classname=$&#123;elasticsearch.plugin.classname&#125; # 使用的Java版本信息 java.version=$&#123;elasticsearch.plugin.java.version&#125; # 插件对应的Elasticsearch的版本 elasticsearch.version=$&#123;elasticsearch.version&#125; 随后我们可以使用如下命令将该pulgin安装到Elasticsearch中 ./bin/elasticsearch-plugin install file:///Users/derobukal/elasticsearch-analysis-ansj/target/releases/elasticsearch-analysis-qianmi-7.5.2-release.zip Lucene自定义分词器插件在上面Elasticsearch调用分词插件的介绍中我们已经知道了Elasticsearch最终会需要一个 org.apache.lucene.analysis.Analyzer 的对象来实现真正的分词操作，下面我们就来了解一下我们如何定义一个这样Lucene的类。如下就是一个例子，QianmiStandardAnalyzer继承自Analyzer并且重写了其createComponents方法 1234567public class QianmiStandardAnalyzer extends Analyzer &#123; @Override protected TokenStreamComponents createComponents(String fieldName) &#123; Tokenizer tokenizer = new QianmiStandardTokenizer(); return new TokenStreamComponents(tokenizer); &#125;&#125; 方法createComponents返回了一个TokenStream，TokenStream会协助生成token。在上面的方法中我们使用到了一个名为QianmiStandardTokenizer的类，这个tokenizer实现了最终的分词逻辑。我们也可以看到我们在Elasticsearch中所提到的character_filter、tokenizer和token_filter其实都是Lucene中的概念，在这里我们只用到了tokenizer，其实在createComponents也是可以定义一些filter的，因为这里没有用到就不介绍了。 QianmiStandardTokenizer继承自org.apache.lucene.analysis.Tokenizer类，该类需要重写Tokenizer类的public boolean incrementToken()和public void reset()方法。除此之外，Tokenizer还需要用到一些attribute来保存分词的信息。 attribute属性attribute属性用于保存我们分词的一些结果信息，例如分词本身、分词的类型、分词的位置、分词的长度，等等。如下我们定义了三个属性 123456// 分词的属性private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);// 分词在原始文本的位置信息private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);// 分词的类型信息，例如字母、文字等等private final TypeAttribute typeAtt = addAttribute(TypeAttribute.class); 当我们得到分词之后，只需要把这些信息保存到attribute中，后续的流程可以从这些attribute取出相应的数据。 incrementToken()方法每一次该方法执行就会得到一个分词结果，如果该方法返回true则表示还存在分词可以继续获取，返回false则表示分词已经获取完毕，我们只需要在该方法中把得到的分词信息保存我们上面所说的attribute中，Lucene会从属性中获取到这些分词的结果信息。 需要注意的是，在执行这个方法时需要先执行clearAttributes()方法来清除attribute属性的中信息，目的是为了防止上一次的分词信息对这一次的分词结果产生影响。下面我们看一个该方法的例子 123456789101112131415public boolean incrementToken() throws IOException &#123; clearAttributes(); char[] chars = new char[1]; // 原始文本数据可以通过Tokenizer类的input变量读取到 int count = input.read(chars); if (count == -1) &#123; // 如果原始数据读取完毕，结束分词 return false; &#125; // 保存分词信息 termAtt.append(chars[0]); typeAtt.setType(&quot;default&quot;); // 进入下一次分词 return true;&#125; reset()方法该方法在每段文本分词前都会调用，目的是恢复一些环境属性，防止多个文本的分词互相影响。注意在重写该方法时需要调用super.reset()以协助恢复一些Lucene本身的环境属性。假设我们需要在每次文本分析前恢复文本读取的offset变量 1234public void reset() throws IOException &#123; super.reset(); // 必须调用父类的reset方法 offset = 0;&#125; 在Lucene分词插件这一小节我们知道了如何定义Analyzer、Tokenizer以及如何在Tokenizer中实现分词逻辑。 参考(一)除AnalysisPlugin之外，如果你想实现一些其它类型的插件，那么只需要创建一个继承自Plugin的类并且实现指定的插件接口即可，Elasticsearch所有的Plugin Interface在类Plugin的文档中都有详细的介绍。总结起来在Elasticsearch中创建插件的简单流程就是创建一个继承自Plugin类并且实现了指定类型插件（例如AnalysisPlugin）的接口的类。 (二)这里的QianmiStandardAnalyzerProvider::new是一个lambda表达式，其转化过程如下： 这里需要一个实现了接口AnalysisModule.AnalysisProvider的类的对象； AnalysisModule.AnalysisProvider接口有一个get方法为虚拟方法，实现该接口的类需要实现该方法； 我们并不需要真的去实现一个类并且让该类实现这个get方法，而是可以使用匿名内部类的方式实现； (如果不使用匿名内部类) 实现一个类，让该类实现AnalysisModule.AnalysisProvider接口； 该类也需要实现get方法，get方法的逻辑还是一样的； 之后在这里创建一个该类的对象即可； 如果使用匿名内部类，则只需要实现get方法即可：123456new AnalysisModule.AnalysisProvider&lt;AnalyzerProvider&lt;? extends Analyzer&gt;&gt;() &#123; @Override public AnalyzerProvider&lt;? extends Analyzer&gt; get(IndexSettings indexSettings, Environment environment, String name, Settings settings) throws IOException &#123; return new QianmiSubAnalyzerProvider(indexSettings, environment, name, settings); &#125;&#125; 由于该接口只需要实现一个get方法，所以可以使用lambda表达式对如上的代码优化如下：123(indexSettings, env, name, settings) -&gt; &#123; return new QianmiSubAnalyzerProvider(indexSettings, env, name, settings);&#125; 由于该方法的方法体只有一行，所以可以把上面的表达式进一步的优化为如下的lambda表达式：1(indexSettings, env, name, settings) -&gt; new QianmiSubAnalyzerProvider(indexSettings, env, name, settings) 由于get方法的参数和后面创建对象的参数一致，所以可以使用lambda表达式进行进一步的优化：1QianmiSubAnalyzerProvider::new (三)如何在Lucene中调用Analyzer进行分词呢？在Lucene的官网中有如下文档 具体的使用方式如下 12345678910String content = &quot;如何在Lucene中调用Analyzer进行分词呢？在Lucene的官网中有如下文档&quot;;Analyzer analyzer = new QianmiStandardAnalyzer();TokenStream ts = analyzer.tokenStream(&quot;&quot;, content);ts.reset();CharTermAttribute termAtt = ts.getAttribute(CharTermAttribute.class);while (ts.incrementToken()) &#123; System.out.println(termAtt.toString());&#125;ts.end();ts.close(); (四)如何在Elasticseach中使用指定的分词器呢？在插件安装完毕之后，我们重启Elasticsearch节点。之后在创建索引时我们可以指定字段的类型 PUT http://localhost:9200/test &#123; &quot;settings&quot;: &#123; &quot;analysis&quot;: &#123; &quot;analyzer&quot;: &#123; &quot;default&quot;: &#123; &quot;type&quot;: &quot;qm_standard&quot; &#125;, &quot;prefix&quot;: &#123; &quot;type&quot;: &quot;sub&quot;, &quot;section&quot;: &quot;0:3;0:5&quot; &#125;, &quot;postfix&quot;: &#123; &quot;type&quot;: &quot;sub&quot;, &quot;section&quot;: &quot;-6:-1;-4:-1&quot; &#125; &#125; &#125; &#125;, &quot;mappings&quot;: &#123; &quot;properties&quot;: &#123; &quot;title&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;analyzer&quot;: &quot;qm_standard&quot; &#125; &#125; &#125; &#125; 如上我们可以使用默认的分析器如qm_standard，也可以根据已存在的分析器定义一些新的分析器，例如prefix分析器就来自于sub分析器。其中自定义分析器的配置信息会传到上面提到的AnalyzerProvider类的Settings变量中，我们可以使用这些配置信息来定义一些新的分词逻辑。 下面是一个使用指定分析器在Elasticsearch中进行分词测试的例子 POST http://localhost:9200/test/_analyze &#123; &quot;analyzer&quot;: &quot;postfix&quot;, &quot;text&quot;: &quot;TCC20040112442814525679&quot; &#125; &#123; &quot;tokens&quot;: [ &#123; &quot;token&quot;: &quot;525679&quot;, &quot;start_offset&quot;: 17, &quot;end_offset&quot;: 22, &quot;type&quot;: &quot;word&quot;, &quot;position&quot;: 0 &#125;, &#123; &quot;token&quot;: &quot;5679&quot;, &quot;start_offset&quot;: 19, &quot;end_offset&quot;: 22, &quot;type&quot;: &quot;word&quot;, &quot;position&quot;: 1 &#125; ] &#125; 相关文档Elasticsearch的文本分析ELasticsearch的插件体系使用Java实现Elasticsearch自定义插件的参考文档Elasticsearch源码中关于插件部分的示例自定义Lucene的分词器AnalyzerPackage org.apache.lucene.analysisApache LuceneTM 8.3.0 Documentationhttps://github.com/RitterHou/elasticsearch-analysis","categories":[],"tags":[{"name":"nlp","slug":"nlp","permalink":"https://www.nosuchfield.com/tags/nlp/"},{"name":"分词","slug":"分词","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E8%AF%8D/"},{"name":"自然语言处理","slug":"自然语言处理","permalink":"https://www.nosuchfield.com/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"}]},{"title":"Kafka学习笔记","slug":"Kafka-study-notes","date":"2019-12-26T14:54:20.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2019/12/26/Kafka-study-notes/","link":"","permalink":"https://www.nosuchfield.com/2019/12/26/Kafka-study-notes/","excerpt":"","text":"环境搭建首先下载Kafka的release文件，在这里我使用的版本是kafka_2.13-2.4.0。 在这里我们准备部署一个三个节点的集群，首先解压release文件，之后进入文件夹 kafka_2.13-2.4.0/config，复制文件 server.properties 得到 server-1.properties 和 server-2.properties，这样一来我们就拥有三份配置文件了，之后我们会使用这三份配置文件来启动三个进程构建Kafka集群。分别对三份配置文件中的相关属性进行修改： server.properties # broker的序号 broker.id=0 # 服务监听的端口号 listeners=PLAINTEXT://localhost:9092 # 数据文件的存放目录 log.dirs=~/kafka/logs/kafka-logs-0 # 复制因子 offsets.topic.replication.factor=3 transaction.state.log.replication.factor=3 transaction.state.log.min.isr=3 # ZK的地址 zookeeper.connect=127.0.0.1:2181 server-1.properties # broker的序号 broker.id=1 # 服务监听的端口号 listeners=PLAINTEXT://localhost:9093 # 数据文件的存放目录 log.dirs=~/kafka/logs/kafka-logs-1 # 复制因子 offsets.topic.replication.factor=3 transaction.state.log.replication.factor=3 transaction.state.log.min.isr=3 # ZK的地址 zookeeper.connect=127.0.0.1:2181 server-2.properties # broker的序号 broker.id=2 # 服务监听的端口号 listeners=PLAINTEXT://localhost:9094 # 数据文件的存放目录 log.dirs=~/kafka/logs/kafka-logs-2 # 复制因子 offsets.topic.replication.factor=3 transaction.state.log.replication.factor=3 transaction.state.log.min.isr=3 # ZK的地址 zookeeper.connect=127.0.0.1:2181 上面之所以要把复制因子修改为3（默认是1）是因为Kafka默认会使用 __consumer_offsets 这个Topic保存Consumer Group的消费状况，而这个topic会在集群启动时自动的创建。因此我们没有办法在集群启动后控制它的replicas数量，所以只能在配置文件中进行设置。如果一个__consumer_offsets的replicas只有一个，那么集群中任意一个broker挂掉都可能会导致消费出现异常。 修改好配置文件之后就可以根据配置文件使用如下命令启动三个Kafka进程了 # 进程1 JMX_PORT=9192 ./bin/kafka-server-start.sh config/server.properties # 进程2 JMX_PORT=9193 ./bin/kafka-server-start.sh config/server-1.properties # 进程3 JMX_PORT=9194 ./bin/kafka-server-start.sh config/server-2.properties 启动完毕之后此时Kafka集群就已经构建完毕了，我们还可以安装kafka-manager这个工具来方便对Kafka集群进行管理。kafka-manager的安装和使用不再赘述，直接参考相关文章即可。 简单使用首先我们使用kafka-manager创建一个topic，并设置相关属性如下 properties value Topic test Partitions 3 Replication Factor 2 之后我们构建一个maven项目并添加Kafka Client的依赖 &lt;dependency&gt; &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt; &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt; &lt;version&gt;2.4.0&lt;/version&gt; &lt;/dependency&gt; 常量属性 12345final class Constants &#123; static final String GROUP = &quot;group_test&quot;; static final String TOPIC = &quot;test&quot;; static final String KAFKA_SERVER_ADDRESS = &quot;127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094&quot;;&#125; Producer 123456789101112131415161718192021222324public class TestProducer &#123; private static final String SERIALIZER = StringSerializer.class.getName(); public static void main(String[] args) throws InterruptedException &#123; Properties props = new Properties(); props.put(&quot;bootstrap.servers&quot;, Constants.KAFKA_SERVER_ADDRESS); props.put(&quot;retries&quot;, 0); props.put(&quot;batch.size&quot;, 1024 * 16); props.put(&quot;linger.ms&quot;, 1); props.put(&quot;buffer.memory&quot;, 1024 * 1024 * 32); props.put(&quot;key.serializer&quot;, SERIALIZER); props.put(&quot;value.serializer&quot;, SERIALIZER); Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props); for (int i = 0; i &lt; 100000; i++) &#123; String msg = &quot;Message_test_&quot; + i; System.out.println(&quot;produce : &quot; + msg); // send方法是异步的，当它被调用时，它会将消息记录添加到待发送缓冲区并立即返回 producer.send(new ProducerRecord&lt;&gt;(Constants.TOPIC, Integer.toString(i), msg)); Thread.sleep(100); &#125; producer.close(); &#125;&#125; Consumer 123456789101112131415161718192021222324252627282930public class TestConsumer &#123; private static final String DESERIALIZER = StringDeserializer.class.getName(); public static void main(String[] args) &#123; String consumerGroup = Constants.GROUP; if (args.length &gt; 0) &#123; consumerGroup = args[0]; &#125; Properties props = new Properties(); props.put(&quot;bootstrap.servers&quot;, Constants.KAFKA_SERVER_ADDRESS); // 同一个group会共享offset props.put(&quot;group.id&quot;, consumerGroup); props.put(&quot;enable.auto.commit&quot;, &quot;true&quot;); props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;); props.put(&quot;key.deserializer&quot;, DESERIALIZER); props.put(&quot;value.deserializer&quot;, DESERIALIZER); KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props); consumer.subscribe(Collections.singletonList(Constants.TOPIC)); while (true) &#123; ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(100)); for (ConsumerRecord&lt;String, String&gt; record : records) &#123; System.out.printf(&quot;partition = %d, offset = %d, key = %s, value = %s%n&quot;, record.partition(), record.offset(), record.key(), record.value()); &#125; &#125; &#125;&#125; 在上面我们创建了一个producer和一个consumer，之后我们可以启动一个producer和多个consumer，具体命令如下。 java TestProducer java TestConsumer java TestConsumer group_0 java TestConsumer group_0 java TestConsumer group_0 这样一来我们就有了一个producer和四个consumer，其中consumer分为两个group，groupId分别为group_0和group_test。不同的group会消费同一条消息，而同一个group内的consumer不会消费同一条消息。即： 多个consumer group可以同时消费一个topic中的消息；（topic） 同一个consumer group中的consumers会共享消费的offset；（queue） 一些原理Kafka使用ZooKeeper的节点注册来实现Broker Controller的选举。 一个topic分为多个partition，每个partition又会有多个replicas，replicas由leader和follower组成，其中replicas的数量是包含了leader的。 producer负责push消息到partition，consumer负责从partition里pull消息。具体发送到哪一个分区是由producer决定的，producer也可以使用自定义的分区器修改默认的分区配置。 consumer与partition之间的对应关系如下： partition &gt; consumer：一个消费者消费多个partition partition &#x3D; consumer：一个消费者消费一个partition partition &lt; consumer：一个消费者消费一个partition，多余的consumer会处于空闲状态 一个partition由多个segment组成，每个segment文件的名称为其第一条消息的索引值，文件分为日志文件和索引文件。 request.required.acks： 1：producer发送消息到leader，leader写入本地日志成功返回（默认） 0：~，leader立即返回（速度快但是有可能丢失消息） -1：~，leader等待所有的follower同步完成才返回（速度慢但是强一致） 确定一个Consumer Group的GroupCoordinator的位置： Consumer Group GroupId abs(GroupId.hashCode) % NumPartition，NumPartition就是__consumer_offsets的分区数 计算结果表示了__consumer_offsets的一个partition 找到该partition的leader所在的broker GroupCoordinator就在这个broker上面 _consumer_offsets保存了消费者消费的offset信息。 后记Kafka的内容太多了，而且感觉都比较琐碎，所以记录的东西也都是相当琐碎的。后面会继续学习，遇到相关的内容再进行补充。 参考https://matt33.com/tags/kafka/","categories":[],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://www.nosuchfield.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"消息队列","slug":"消息队列","permalink":"https://www.nosuchfield.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"流式计算","slug":"流式计算","permalink":"https://www.nosuchfield.com/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"}]},{"title":"Lucene学习笔记","slug":"Lucene-study-notes","date":"2019-10-28T14:44:49.000Z","updated":"2025-08-22T15:42:13.343Z","comments":true,"path":"2019/10/28/Lucene-study-notes/","link":"","permalink":"https://www.nosuchfield.com/2019/10/28/Lucene-study-notes/","excerpt":"","text":"Lucene是由Doug Cutting大神开发的，这哥们同时还创立了Nutch和Hadoop，他和QEMU、FFmpeg、tinycc、QuickJS的发明者Fabrice Bellard一样多产且开发的东西都十分牛逼。 Lucene是一个Java开发的搜索引擎，其全文检索基于Inverted Index实现。此文章所使用的代码都可以在RitterHou&#x2F;test_lucene中找到。 基础使用首先我们对数据进行索引操作，这里我们选择了把数据存储在RAM中，但是要知道Lucene也支持把数据存储在磁盘上。 12345678910111213141516171819202122232425private void index () &#123; Directory directory = new RAMDirectory(); Analyzer analyzer = new IKAnalyzer(); IndexWriterConfig config = new IndexWriterConfig(analyzer); IndexWriter indexWriter = new IndexWriter(directory, config); addDoc(indexWriter, &quot;游戏编程算法与技巧&quot;, &quot;9787121276453&quot;); addDoc(indexWriter, &quot;计算机程序的构造和解释(原书第2版) : 原书第2版&quot;, &quot;9787111135104&quot;); addDoc(indexWriter, &quot;编码 : 隐匿在计算机软硬件背后的语言&quot;, &quot;9787121106101&quot;); addDoc(indexWriter, &quot;计算机网络（第5版）&quot;, &quot;9787302274629&quot;); addDoc(indexWriter, &quot;Python网络编程攻略&quot;, &quot;9787115372697&quot;); addDoc(indexWriter, &quot;UNIX网络编程&quot;, &quot;9787302119746&quot;); addDoc(indexWriter, &quot;算法导论（原书第3版）&quot;, &quot;9787111407010&quot;); indexWriter.close();&#125;private void addDoc(IndexWriter w, String title, String isbn) &#123; Document doc = new Document(); // TextField表示使用配置中分词器对字符串进行分词 doc.add(new TextField(&quot;title&quot;, title, Field.Store.YES)); // StringField则保存原始字符串而不进行分词 doc.add(new StringField(&quot;isbn&quot;, isbn, Field.Store.YES)); w.addDocument(doc);&#125; 上面的代码包含了 创建内存Dir 创建IKAnalyzer分词器，这是一个中文分词器；把该分词器放到config对象中 创建IndexWriter对象 将数据创建为一条条的Document（文档）并进行存储 上一步操作中数据已经被保存成功，下面进行数据检索的操作。 123456789101112131415Directory directory = new RAMDirectory();Query q = new QueryParser(&quot;title&quot;, new IKAnalyzer()).parse(input);int hitsPerPage = 10;IndexReader reader = DirectoryReader.open(directory);IndexSearcher searcher = new IndexSearcher(reader);TopDocs docs = searcher.search(q, hitsPerPage);ScoreDoc[] hits = docs.scoreDocs;System.out.println(&quot;Found &quot; + hits.length + &quot; hits.&quot;);for (int i = 0; i &lt; hits.length; ++i) &#123; int docId = hits[i].doc; Document d = searcher.doc(docId); System.out.println((i + 1) + &quot;. &quot; + d.get(&quot;isbn&quot;) + &quot;\\t&quot; + d.get(&quot;title&quot;));&#125; 和IndexWriter使用同一个Dir 创建查询语句，我们这里是根据title字段查询，因为这是一个TextField所以用于查询的字符串也需要先使用IKAnalyzer进行分词 根据查询语句查询出hits 根据hits中的docId取回数据 基础查询的完整代码位于SimpleTest.java NRT查询我们知道Lucene存储引擎使用的是LSM Tree形式，关于LSM Tree可以参考我之前的文章Log structured merge tree，简而言之Lucene会把数据写到一个个的段（Segment）中。所谓NRT查询即Near Real Time查询，这意味着我们写到Lucene的数据是不能够被立即查询到的，原因如下 Segment在被flush或commit之前，数据保存在内存中，是不可被搜索的，这也就是为什么Lucene被称为提供近实时而非实时查询的原因。读了它的代码后，发现它并不是不能实现数据写入即可查，只是实现起来比较复杂。原因是Lucene中数据搜索依赖构建的索引（例如倒排依赖Term Dictionary），Lucene中对数据索引的构建会在Segment flush时，而非实时构建，目的是为了构建最高效索引。当然它可引入另外一套索引机制，在数据实时写入时即构建，但这套索引实现会与当前Segment内索引不同，需要引入额外的写入时索引以及另外一套查询机制，有一定复杂度。 —— Lucene解析 - 基本概念 上面解释了Lucene不能实现实时查询的原因，下面我们看一看如何能实现NRT查询 首先还是创建配置等这一套代码 1234Analyzer analyzer = new IKAnalyzer();RAMDirectory index = new RAMDirectory();IndexWriterConfig config = new IndexWriterConfig(analyzer);final IndexWriter indexWriter = new IndexWriter(index, config); 随后是NRT的配置以及开启NRT的定时刷新线程 12345678910// NRT查询的相关配置TrackingIndexWriter trackingIndexWriter = new TrackingIndexWriter(indexWriter);final ReferenceManager&lt;IndexSearcher&gt; searcherManager = new SearcherManager(indexWriter, true, null);// NRT查询的定时刷新线程ControlledRealTimeReopenThread&lt;IndexSearcher&gt; nrtReopenThread = new ControlledRealTimeReopenThread&lt;&gt;(trackingIndexWriter, searcherManager, 1.0, 0.1);nrtReopenThread.setName(&quot;NRT Reopen Thread&quot;);nrtReopenThread.setPriority(Math.min(Thread.currentThread().getPriority() + 2, Thread.MAX_PRIORITY));nrtReopenThread.setDaemon(true);nrtReopenThread.start(); 其中最重要的就是ControlledRealTimeReopenThread类的1.0和0.1这两个参数 targetMaxStaleSec: reader的最大open间隔 targetMinStaleSec: reader的最小可open间隔 有了以上这些设置，我们就能实现不重新打开reader也可以读到最新的数据了，当然读取的数据对应写入的数据并不是实时的。 完整代码位于NRTTest.java 相关度打分一般的数据库的查询中，某一条数据针对指定查询条件只存在符合要求或者不符合要求这两种情况；而搜索引擎则还需要提供某条数据与查询条件有多大程度相似的这种情况，这种比较相似度的需求就是通过相似度打分的计算来实现的。在搜索引擎进行查询的同时也会计算指定文档与查询条件的相似度得分，得分高的一般来说就需要优先展示。 Lucene内部包含了多种相似度算法，其中最经典的就是TF&#x2F;IDF算法，Lucene的TF&#x2F;IDF计算实现位于 org.apache.lucene.search.similarities.TFIDFSimilarity 类中。除了TF和IDF，Lucene在该类中计算得分时还会使用到一些其它的参数 计算因子 介绍 coord 指定文档中命中的查询关键词个数 ÷ 所有的查询关键词个数 TF term在指定文档中出现的次数，次数越多得分越高 IDF term在全部文档中出现的次数，次数越多得分越低 boost 一个影响因子，供用户在查询时修改以影响最终得分 queryNorm 常数 norms 文档的长度，长度越短权重越高 coord实现 12345/** Implemented as &lt;code&gt;overlap / maxOverlap&lt;/code&gt;. */@Overridepublic float coord(int overlap, int maxOverlap) &#123; return overlap / (float)maxOverlap;&#125; TF的实现 12345/** Implemented as &lt;code&gt;sqrt(freq)&lt;/code&gt;. */@Overridepublic float tf(float freq) &#123; return (float)Math.sqrt(freq);&#125; IDF的实现 12345/** Implemented as &lt;code&gt;log(numDocs/(docFreq+1)) + 1&lt;/code&gt;. */@Overridepublic float idf(long docFreq, long numDocs) &#123; return (float)(Math.log(numDocs/(double)(docFreq+1)) + 1.0);&#125; 计算最终得分的公式如下（公式来自Lucene官方文档） 提升搜索速度我们知道Lucene使用反向索引存储数据，例如针对如下数据 id 标题 isbn 1 游戏编程算法与技巧 9787121276453 2 计算机程序的构造和解释(原书第2版) : 原书第2版 9787111135104 3 编码 : 隐匿在计算机软硬件背后的语言 9787121106101 4 计算机网络（第5版） 9787302274629 5 Python网络编程攻略 9787115372697 6 UNIX网络编程 9787302119746 7 算法导论（原书第3版） 9787111407010 针对上面的数据我们可以构建的部分反向索引结构如下 标题的反向索引： 关键词 doc_ids 算法 [1, 7] 编程 [1, 5, 6] 计算机 [2, 3, 4] isbn的反向索引： 关键词 doc_ids 9787121106101 3 9787115372697 5 根据上表我们知道Lucene需要构造一个 关键词 -&gt; doc_id 之前的关系映射，如果让我自己实现一个映射关系那我很可能会选择使用哈希表，即关键词使用哈希表的方式进行查找。Lucene选择了使用一个类似于trie树叫做FST(Finite State Transducer)的数据结构来保存关键词，虽然FST在写入和查找速度上都不及哈希表，但是它在前缀查找等方式上却有着巨大的优势，此外FST十分的节省空间，这使得我们可以把FST全部放在内存中以提高数据操作速度。关于FST可以参考这篇文章。 Lucene的数据存储架构如下 上面我们介绍的FST其实是Term dict index这一部分，通过Term dict index我们可以找到Term dict中的相应term，例如上面我们提到的 计算机 或者 9787121106101 等等。找到了相应的term之后我们可以继续根据term找到相应的Inverted Index，Inverted Index使用SkipList保存，SkipList可以让多个term的查询结果合并速度更快。顺便提一下，Elasticsearch会对filter类型的查询结果使用bitset进行缓存，如果下次查询缓存命中则可以直接通过bitset的缓存进行结果合并，速度更快。 生成正向索引我们上面提到的都是数据检索阶段的工作，也看到了Inverted Index在数据检索上十分优秀，但是当我们已经取回了数据需要对数据做进一步的排序或聚合时，反向索引就显得力不从心了。Lucene需要把取回的数据通过计算再生成一份正向索引，之后使用正向索引实现排序或聚合等操作，生成正向索引十分耗费资源，因此Lucene4之后对这些生成的正向索引做了缓存即fieldcache，这样这些正向索引的结果就会被缓存在内存中，fieldcache的命中可以大大提高数据排序或聚合的速度。 fieldcache对内存是一个很大的挑战，如果缓存数据过多会导致内存占用过高。新版的Lucene中引入了DocValues概念，Lucene会在数据索引阶段就生成一份列式存储的正向索引，即DocValues。DocValues因为是在索引阶段生成的，又被保存在磁盘上，所以避免了fieldcache会产生的一些问题。当然，DocValues会增加磁盘空间的使用，所以Lucene允许我们只针对某些需要排序或聚合的字段使用DocValues，这样就节省了部分的磁盘空间。 参考Welcome to Lucene Tutorial.com - Lucene Tutorial.comLucene 近实时搜索 | IT草根Lucene解析 - 基本概念Lucene原理与代码分析 - 随笔分类lucene 的评分机制Lucene 查询原理及解析 Lucene中的文本相似度算法Okapi BM25, TF-IDF, 以及 ElasticSearch&#x2F;Lucene 搜索结果的分数elasticsearch-fullLucene查询原理ElasticSearch 查询的秘密Elasticsearch Modules","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://www.nosuchfield.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}]},{"title":"TCP协议学习笔记(二)","slug":"TCP-study-notes-2","date":"2019-08-26T16:15:42.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2019/08/26/TCP-study-notes-2/","link":"","permalink":"https://www.nosuchfield.com/2019/08/26/TCP-study-notes-2/","excerpt":"","text":"在上一篇文章中我们对TCP有了一个简单的了解，同时我们也知道了TCP是如何建立和关闭连接的，在这篇文章中我们将学习到TCP是如何进行数据传输的。 MSSMaximum Transmission Unit (缩写MTU) 是指最大传输单元，对于以太网来说这个值是1500字节，也就是说以太网一次传输的报文不得大于1500，超过这个大小设备可能就会丢弃报文。IP可以对数据进行拆分，但是为了减小路由器的压力，TCP中会设置合理的数据报文大小以避免最终的报文大小超过MTU，这个大小叫做Maximum Segment Size (缩写MSS)，如果剔掉IP报文和TCP报文的头部，则一个TCP报文的MSS为 1500 - 20 - 20 &#x3D; 1460。 使用ACK进行确认在连接创建和关闭的时候我们已经知道了，TCP为了保证数据不丢失，会在收到报文后发送ACK来告知发送方自己已经收到了该数据。接收方根据发送方发送的seq来发送确认ACK，ACK代表了接收方接收到的数据内容，有时接收方会把多个seq的信息进行合并，也就是说有时候多次传输只会对应一次的ACK。 123456789101115:18:45.635203 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [S], seq 586172531, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 1351103125 ecr 0,sackOK,eol], length 015:18:45.635253 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [S.], seq 2988380519, ack 586172532, win 14480, options [mss 1460,sackOK,TS val 433480428 ecr 1351103125,nop,wscale 7], length 015:18:45.640712 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [.], ack 2988380520, win 2069, options [nop,nop,TS val 1351103130 ecr 433480428], length 015:18:45.640806 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [P.], seq 586172532:586172612, ack 2988380520, win 2069, options [nop,nop,TS val 1351103130 ecr 433480428], length 8015:18:45.640818 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [.], ack 586172612, win 114, options [nop,nop,TS val 433480433 ecr 1351103130], length 015:18:45.649141 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [P.], seq 2988380520:2988380537, ack 586172612, win 114, options [nop,nop,TS val 433480442 ecr 1351103130], length 1715:18:45.649584 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [FP.], seq 2988380537:2988381641, ack 586172612, win 114, options [nop,nop,TS val 433480442 ecr 1351103130], length 110415:18:45.653609 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [.], ack 2988380537, win 2068, options [nop,nop,TS val 1351103143 ecr 433480442], length 015:18:45.653781 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [.], ack 2988381642, win 2051, options [nop,nop,TS val 1351103143 ecr 433480442], length 015:18:45.654360 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [F.], seq 586172612, ack 2988381642, win 2051, options [nop,nop,TS val 1351103144 ecr 433480442], length 015:18:45.654376 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [.], ack 586172613, win 114, options [nop,nop,TS val 433480447 ecr 1351103144], length 0 我们把上一篇文章的报文再拿过来观察一下，第4行为客户端向服务端发送HTTP请求报文的TCP segment，该报文的seq为586172532:586172612，代表了80个字节的数据。服务端在收到数据后返回ACK的seq为586172612，表示服务端已经收到了客户端seq至586172612的数据。 第6行第7行服务端连续发送了两个数据给客户端，第7行还附带了FIN标志，这在上一篇文章中我们已经说过了。第8行第9行分别是针对这两个数据报文的ACK。 滑动窗口滑动窗口是接收方与发送方用来协商数据发送速度的一种方式，它也是实现TCP流量控制的手段，关于滑动窗口可以看我之前的文章TCP协议的流量控制与Linux内核的Scoket缓冲区，这里就不再赘述了。 超时重传超时重传是TCP中的最重要的内容之一，这也是TCP对于数据可靠性保证的来源。关于超时重传我在文章一次网络超时的排查中也有所介绍，具体超时情况的分析可以参考之前的文章。 这里我们重点了解一下TCP中的超时时间是如何计算出来的。TCP中引入了Round Trip Time (简写RTT)来记录数据传输的往返时间，它的值为一个指定seq的报文被发送、到接收这个seq所对应的ACK所需要花费的时间。而Retransmission Timeout (简写RTO)则代表了TCP发送报文的超时时间，如果过了RTO时间还没能接收到指定报文的ACK，就触发超时对该报文进行重发。 不难发现RTO是根据RTT动态计算出来的，RTO的计算方式对于TCP的性能有重大影响。RTO过短会导致不应该被重传的数据被重传，增加整个网络中的数据传输压力，最终降低系统吞吐量；RTO过大会降低TCP数据的传输速度，影响传输性能。 在TCP的发展过程中，各种根据RTT计算RTO的公式被不断地发明出来，例如Jacobaon&#x2F;Karels公式 第一次RTO计算： SRTT = R RTTVAR = R/2 RTO = SRTT + max (G, K*RTTVAR) 之后： RTTVAR = (1 - beta) * RTTVAR + beta * |SRTT - R&#39;| SRTT = (1 - alpha) * SRTT + alpha * R&#39; RTO = SRTT + max (G, K*RTTVAR) 其中 SRTT(smoothed round-trip time)：平滑RTT时间 RTTVAR(round-trip time variation)：RTT变量，其实就是rtt平均偏差 G表示系统时钟的粒度，一般很小，us级别。 beta &#x3D; 1&#x2F;4, alpha &#x3D; 1&#x2F;8，R为RTT的值，K的值为4 需要注意的是上面我们介绍的是初次重传时的RTO，如果重传后还没能收到另一端的响应，下一次重传RTO会指数增加。例如第一次重传RTO是1，之后分别2，4，8，16，…。这种行为叫做指数回避策略，所以对于tcp来说，当丢包率高时，有可能一个包要很久才能送达。 拥塞控制上文中提到的**流量控制(flow control)是一种针对接收端的极限而实现的速度限制机制，拥塞控制(congestion control)**则是针对网络链路中的路由器的极限而提出的速度限制机制。 链路中的丢包一般都是因为路由器的负载较高而产生的，如果路由器因为负载较高丢掉了一些报文，此时发送端会对数据进行重传，这进一步加重了路由器的压力，最终产生一个恶性循环。拥塞控制用于在面临网络拥塞时遏制发送方，拥塞控制对于提升整个互联网的吞吐量有着巨大的影响。 和流量控制类似，拥塞控制使用拥塞窗口(congestion window，简写cwnd)来限制发送速度，拥塞控制的核心在如何确定一个合理的cwnd。TCP的拥塞算法分为三步：慢启动，拥塞避免，快速恢复 慢启动TCP在刚刚发送数据时会把MSS设置为一个较小的值，每当一次数据的成功ACK，cwnd的值就会增加一个MSS（切记MSS代表了一次发送报文的大小，而cwnd代表了报文的发送速率）。 慢启动的过程如下，它分为三种情况 数据发送发生超时，TCP将cwnd重置为1并且将cwnd的最大阈值ssthresh设置为发生超时时的cwnd的1&#x2F;2，之后重新开始慢启动的过程 如果cwnd成功增加到了ssthresh的大小并且没有发生超时，则进入拥塞避免模式 如果检测到3个冗余ACK，这时TCP执行一种快速重传并进入快速恢复状态 拥塞避免每次RTT只会给cwnd增加 MSS x (MSS / cwnd)，整个系统进入一个临时的稳定状态。一旦出现超时，则进入慢启动模式 快速恢复 对收到的每个冗余ACK，cwnd值增加一个MSS 如果丢失报文的ACK又被收到，降低cwnd进入拥塞避免状态 发生超时，进入慢启动 BBR拥塞控制算法BBR是Google在2016年提出的一种拥塞控制算法，在Linux kernel4.9及以后的版本中已添加该算法。BBR比经典的TCP拥塞算法更加激进，关于BBR俺也不是特别了解，等以后有机会一定学习一下。 参考TCP&#x2F;IP详解 卷1：协议：第17章 ~ 第24章TCP RTO计算方法以及go实现验证TCP流量控制与拥塞控制","categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"TCP","slug":"TCP","permalink":"https://www.nosuchfield.com/tags/TCP/"}]},{"title":"TCP协议学习笔记(一)","slug":"TCP-study-notes-1","date":"2019-08-25T12:15:27.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2019/08/25/TCP-study-notes-1/","link":"","permalink":"https://www.nosuchfield.com/2019/08/25/TCP-study-notes-1/","excerpt":"","text":"传输控制协议，洋文叫Transmission Control Protocol，简称TCP。TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。 IP即Internet Protocol是工作在网络层的，其不对网络的可靠性做任何保证，目前互联网中网络的可靠性一般都由TCP来保证，所谓可靠性具体来说就是数据传输不丢失、数据顺序不会发生改变。除了可靠性，TCP还提出了一系列的算法来保证网络数据传输的高效性。 我们先简单的看一下TCP报文的数据结构，其中TCP报文的头部一般都是20个字节，当然根据首部长度字段也可以进行适量的扩充，最大为60字节，跟随在头部信息之后的就是TCP所携带的数据信息。 我们会从两个大的方面来描述TCP的工作方式 TCP连接的创建和关闭 TCP的数据传输过程 抓取TCP的报文信息为了了解TCP的工作方式，我们使用tcpdump来抓取TCP报文进行分析。首先我们启动一个HTTP服务器 $ python -m SimpleHTTPServer 5800 Serving HTTP on 0.0.0.0 port 5800 ... 随后启动tcpdump并让其监听指定端口的数据信息 $ tcpdump tcp port 5800 -S tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes 最后我们使用curl请求HTTP服务器 $ curl -v http://172.21.3.92:5800 这次操作使得tcpdump获得如下输出 123456789101115:18:45.635203 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [S], seq 586172531, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 1351103125 ecr 0,sackOK,eol], length 015:18:45.635253 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [S.], seq 2988380519, ack 586172532, win 14480, options [mss 1460,sackOK,TS val 433480428 ecr 1351103125,nop,wscale 7], length 015:18:45.640712 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [.], ack 2988380520, win 2069, options [nop,nop,TS val 1351103130 ecr 433480428], length 015:18:45.640806 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [P.], seq 586172532:586172612, ack 2988380520, win 2069, options [nop,nop,TS val 1351103130 ecr 433480428], length 8015:18:45.640818 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [.], ack 586172612, win 114, options [nop,nop,TS val 433480433 ecr 1351103130], length 015:18:45.649141 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [P.], seq 2988380520:2988380537, ack 586172612, win 114, options [nop,nop,TS val 433480442 ecr 1351103130], length 1715:18:45.649584 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [FP.], seq 2988380537:2988381641, ack 586172612, win 114, options [nop,nop,TS val 433480442 ecr 1351103130], length 110415:18:45.653609 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [.], ack 2988380537, win 2068, options [nop,nop,TS val 1351103143 ecr 433480442], length 015:18:45.653781 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [.], ack 2988381642, win 2051, options [nop,nop,TS val 1351103143 ecr 433480442], length 015:18:45.654360 IP 172.19.3.44.59480 &gt; lin-21-3-92.5800: Flags [F.], seq 586172612, ack 2988381642, win 2051, options [nop,nop,TS val 1351103144 ecr 433480442], length 015:18:45.654376 IP lin-21-3-92.5800 &gt; 172.19.3.44.59480: Flags [.], ack 586172613, win 114, options [nop,nop,TS val 433480447 ecr 1351103144], length 0 其中的标志含义如下 标志 三字符缩写 描述 S SYN 同步序号 F FIN 发送方完成数据发送 R RST 复位连接 P PSH 尽可能快的将数据发往接受进程 . 以上4个标志bit均置为零 下面我们就基于这次实验的结果来了解TCP。 TCP连接的建立TCP是一个面向连接的协议，双方在进行数据传输前需要先建立连接，上面的实验的前三行就是所谓的“三次握手”。 客户端向服务端发送一个SYN的数据，其中的seq为586172531 服务端接收到SYN报文之后，将报文中的seq+1并作为ACK返回给客户端 服务端自己也生成了一个seq并将这个seq 2988380519发送给客户端 客户端收到了服务端的seq之后，将报文中的seq+1并作为ACK返回给服务端 以上就是建立连接时客户端和服务端之间的数据交互，我们可以看到建立连接时最重要的就是告知对方自己当前的seq的值，这个seq的初始值随时间变化，不会发生重复。 以上建立连接过程的行为不是需要4步操作吗，怎么会称为“三次握手”呢。其实很简单，因为步骤二和步骤三都是由服务端向客户端发送数据，所以这两步操作其实被合并为一步操作了。所以最终三次握手如下 客户端发送seq给服务端 服务端收到seq，将seq+1作为ACK，并且生成一个自己的seq，把客户端的ACK和服务端的seq发送给客户端 客户端收到ACK并校验，知道服务端已经知道了自己的seq了；同时客户端还知道了服务端的seq，其把服务端的seq+1并作为ACK返回给服务端，最终服务端知道客户端也已经知道了自己的seq了。连接建立成功。 TCP连接的关闭建立连接需要3次握手，断开连接却需要4次挥手，这是因为TCP的半关闭特性造成的。简单来说，TCP允许只关闭某一个方向上的连接。我们知道TCP连接是全双工的，而关闭单向的连接之后，另一个方向上的连接还可以正常的发送数据，此时连接变成单工。 上面的报文信息7、9、10、11行显示了这个4次挥手的过程 第07行：服务端发送FIN标志给客户端 第09行：客户端收到了FIN标志后，将服务端的seq+1并返回ACK给服务端，此时 服务端-&gt;客户端 的连接关闭 第10行：客户端发送FIN标志给服务端 第11行：服务端收到FIN之后，将客户端的seq+1并发送ACK给客户端，客户端收到了ACK，客户端-&gt;服务端 的连接关闭 TCP连接断开的过程和连接过程非常相似，区别只在于客户端收到了服务端发送的FIN标志后，在发送给服务端的ACK中没有附带自己的FIN标志，这是TCP的半关闭特性所导致的。 需要注意的是一旦TCP连接建立成功，此时连接双方在传输数据或者断开连接时，都是处于完全对等的状态，不存在身份上的差别。简单来说客户端发送数据给服务端和服务端发送数据给客户端是一样的；而最终断开连接的操作可以由客户端率先发起，也可以由服务端率先发起，它们也都是一样的。 总结关于TCP的笔记暂时先到这里，我们已经了解了TCP连接的建立和关闭，在下一篇文章中我们再继续了解一下TCP的数据传输过程。 最后放一张TCP中连接的状态转移图，这之中的状态变化主要是在连接建立和关闭时所产生的。俺认为作为非网络方向的程序员并不需要记得这张图，只需要在进行网络分析的时候能够对照着这张图进行分析即可，不过俺对自己的要求一向较低，还请读者不要学我。","categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"TCP","slug":"TCP","permalink":"https://www.nosuchfield.com/tags/TCP/"}]},{"title":"电影《社交网络》中的Elo打分算法","slug":"Elo-rating-system","date":"2019-08-16T00:22:37.000Z","updated":"2025-08-22T15:42:13.334Z","comments":true,"path":"2019/08/16/Elo-rating-system/","link":"","permalink":"https://www.nosuchfield.com/2019/08/16/Elo-rating-system/","excerpt":"","text":"在电影《The Social Network》里，马克使用了爱德华给象棋选手评级的算法来对哈佛的女生进行打分。 截图出现在电影《社交网络》的13分02秒 这个算法叫做Elo rating system，是由美国物理学家Arpad Elo发明的一个用于对各种竞技行为进行评分的算法。不过在社交网络中爱德华在窗户上写的公式是错的，正确的公式如下 这两个公式分别用于计算选手A和选手B的期望胜率EA和EB，RA和RB分别代表了A和B的当前得分。有了期望胜率就可以计算出选手A和选手B的最新打分。计算打分的公式在电影中没有给出，这里给出使用期望胜率计算打分的公式如下 计算打分公式的各个参数含义： 参数 含义 R’A 选手A的最新打分 RA 选手A在这轮竞技之前的打分 K 一个正整数因子，用于平衡不同选手的能力，K越大得到的打分越高；有时候可以让种子选手的K稍低，普通选手的K稍高 SA 选手的输赢情况，胜&#x3D;1，和&#x3D;0.5，负&#x3D;0 EA 在上一个公式中计算的选手期望胜率 有了这两个公式，我们就可以实现对竞技行为的打分了，让我们使用Python把这两个公式实现出来。 计算期望胜率 12345678def expected_score(ra, rb): &quot;&quot;&quot; 计算a的期望胜率ea :param ra: a的当前得分 :param rb: b的当前得分 :return: &quot;&quot;&quot; return 1 / (1 + pow(10, (rb - ra) / 400)) 计算竞技之后的得分 12345678910def rank_score(rank, k, sa, ea): &quot;&quot;&quot; 计算实际得分 :param rank: 这轮竞技之前的打分 :param k: K因子针对不同的玩家可能不同 :param sa: 这一局的输赢得分，胜=1，和=0.5，负=0 :param ea: 期望得分，即expected_score方法的计算结果 :return: &quot;&quot;&quot; return rank + k * (sa - ea) 通过以上的代码我们可以看到，Elo评分算法还是比较简单的，只需要分为计算期望胜率和计算得分这两步。虽然算法本身比较简单，但是这不影响Elo成为当今对弈水平评估的公认的权威方法。不仅传统的国际象棋、围棋、足球、篮球等项目会使用它，一些新兴的线上电子竞技游戏也会使用Elo来作为评分算法。 为了模仿电影《社交网络》中的FaceMash网站，我抓取了一些演员的照片并放在下方，你可以通过不断地对演员进行选择来影响演员的最终打分 如果图片无法正常显示请尝试刷新页面 .images { float: left; } .image { width: 9%; float: left; margin-right: 1%; margin-top: 5px; } .image img { width: 100%; height: 100%; } .image .rank { font-size: 12px; } .players { margin-top: 30px; } .player { float: left; width: 25%; cursor: pointer; } .player img { width: 100%; height: 100%; } Which one is more attractive, left or right! 自动模拟选择 // 初始化显示所有的图片 function initImages() { let images = '' for (let i = 0; i < 30; i++) { if (i % 10 == 0) { images += '' } images += ` 1400.00000 ` } document.querySelector('.images').innerHTML = images } initImages() // 根据得分对元素进行排序 function sortImages() { let images = document.querySelectorAll('.images .image') let imagesArray = Array.from(images) function sorter(a, b) { if (parseFloat(a.innerText) < parseFloat(b.innerText)) return 1 if (parseFloat(b.innerText) < parseFloat(a.innerText)) return -1 } let sorted = imagesArray.sort(sorter) for (let i = 0; i < sorted.length; i++) { if (i % 10 == 0) { let d = document.createElement('div') d.setAttribute('style', 'clear: left;') document.querySelector('.images').appendChild(d) } document.querySelector('.images').appendChild(sorted[i]) } } // 随机生成一个范围内的整数 [min, max) function randomInt(min, max) { return (Math.random() * (max - min) + min) | 0 } // 计算期望胜率 function expected_score(ra, rb) { return 1.0 / (1.0 + Math.pow(10.0, (rb - ra) / 400.0)) } // 计算最新打分 function rank_score(rank, k, sa, ea) { return rank + k * (sa - ea) } // 更换待选则的玩家 let lastPlayerA, lastPlayerB function changePlayers() { // console.log(`lastPlayerA: ${lastPlayerA}, lastPlayerB: ${lastPlayerB}`) let a, b while (true) { // 防止和上一次的照片重复 a = randomInt(0, 30) b = randomInt(0, 30) if (a != b && a != lastPlayerA && b != lastPlayerB && a != lastPlayerB && b != lastPlayerA) { lastPlayerA = a lastPlayerB = b break } } // console.log(`a: ${a}, b: ${b}`) let players = document.querySelectorAll('.players .player img') players[0].src = `/images/20190816/${a}.webp` players[0].player = a players[1].src = `/images/20190816/${b}.webp` players[1].player = b sortImages() // 更换后进行排序 } // 选择玩家 function selectPlayer(playerId) { // console.log(playerId) let sa, sb // 选择了A if (playerId == lastPlayerA) { sa = 1 sb = 0 } else { sa = 0 sb = 1 } let a = document.getElementById(lastPlayerA) let ra = parseFloat(a.innerText) let b = document.getElementById(lastPlayerB) let rb = parseFloat(b.innerText) let ea = expected_score(ra, rb) let eb = expected_score(rb, ra) let ra1 = rank_score(ra, 10, sa, ea) let rb1 = rank_score(rb, 10, sb, eb) // console.log(`ra: ${ra}, rb: ${rb}`) ra1 = ra1.toFixed(5) rb1 = rb1.toFixed(5) a.innerText = ra1 b.innerText = rb1 changePlayers() // 选择完毕后更新照片 } changePlayers() // 默认第一次需要更新照片 // 自动模拟选择 let interval function autoRun() { let auto = document.getElementById('auto') if (auto.innerText == '自动模拟选择') { let intervalTime = prompt('自动模拟选择间隔（毫秒）', '600') if (intervalTime === null) { return } if (intervalTime && /^\\d+$/.test(intervalTime)) { auto.innerText = '停止模拟选择' interval = setInterval(function () { let players = document.querySelectorAll('.players .player img') let r = randomInt(0, 2) // console.log(`随机模拟选择：${r}`) players[r].click() }, parseInt(intervalTime)) } else { alert('“' + intervalTime + '” 不是有效的正整数') } } else { auto.innerText = '自动模拟选择' clearInterval(interval) } } 以上就是模仿了FaceMash网站所实现的评分系统，初始时所有人的得分都是1400分，用户会随机的获取两张照片并需要在这之间选择他认为更好看的一张。经过一段时间的评分操作，所有照片的分数将会发生变化，更好看的照片会偏向于拥有更高的得分。 由于数据只存在于本地，你可以使用自动模拟选择按钮来模拟这个打分过程。 参考电影《社交网络》中的“FaceMash”算法Elo rating system社交网络 The Social Network (2010)","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"一次网络超时的排查","slug":"Network-timeout-troubleshooting","date":"2019-08-14T15:43:04.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2019/08/14/Network-timeout-troubleshooting/","link":"","permalink":"https://www.nosuchfield.com/2019/08/14/Network-timeout-troubleshooting/","excerpt":"","text":"最近在测试一个分布式组件的时候，发现节点之间会频繁的出现网络传输超时的情况。组件的工作原理如下 节点1向节点2发送心跳包，发送之后等待节点2的回应 节点2在收到心跳包之后做一些处理，随后发送回复报文给节点1 节点1收到节点2回复的报文并退出等待，一次数据传输结束 节点1如果一段时间内没有收到节点2的回应就会发生超时异常 我们遇到的问题就是节点1总是在运行一段时间之后（很短，大约几秒钟），发送给节点2的数据就无法及时的得到回应，随后节点1报出超时异常。问题在于我们用于测试的机器应该都在同一个机房，而我们设置的超时时间为50ms，同一个机房的节点延迟怎么会超过50ms呢？ 日志因为是分布式系统，并且涉及到网络传输，我们基本上没有办法使用DEBUG来进行调试，所以日志成为了排解问题的唯一线索。顺便说一句，在写代码的时候日志应该越详细越好，日志除了打印变量数据，还应该附带好详细的上下文信息。 我们在发送数据和接收数据的地方都打上日志，此外应该对所使用的节点的时间进行校对，我们在分析问题时很依赖于日志中记录的时间信息。 我们执行程序获取日志如下 发送端 1234562019/08/14 15:18:45.703679 node.go:233: 202(me) send AppendEntries to 922019/08/14 15:18:45.753927 node.go:259: 202(me) to 92 AppendEntries timeout and retry2019/08/14 15:18:45.763991 node.go:233: 202(me) send AppendEntries to 922019/08/14 15:18:45.814221 node.go:259: 202(me) to 92 AppendEntries timeout and retry2019/08/14 15:18:45.824193 node.go:233: 202(me) send AppendEntries to 922019/08/14 15:18:45.874455 node.go:259: 202(me) to 92 AppendEntries timeout and retry 我们观察以上日志发现确实发送端在发送了心跳50ms后因为没有收到响应随即超时了，接下来我们再观察接收端的日志。根据上面的日志我们已经知道了异常发生在 703ms ~ 874ms 之间，所以我们在观察接收端的日志时应该重点关注703、763、824这三个发送了心跳的时间点，接收端有如下日志信息： 123456789101112131415162019/08/14 15:18:45.655403 connection.go:387: AppendEntries2019/08/14 15:18:45.655477 connection.go:95: Read Start2019/08/14 15:18:45.895077 connection.go:99: Read End2019/08/14 15:18:45.895112 connection.go:100: Read 1 bytes and cost 239ms 239574218ns2019/08/14 15:18:45.895379 connection.go:387: AppendEntries2019/08/14 15:18:45.895439 connection.go:95: Read Start2019/08/14 15:18:45.895452 connection.go:99: Read End2019/08/14 15:18:45.895464 connection.go:100: Read 1 bytes and cost 0ms 4203ns2019/08/14 15:18:45.895711 connection.go:387: AppendEntries2019/08/14 15:18:45.895766 connection.go:95: Read Start2019/08/14 15:18:45.895779 connection.go:99: Read End2019/08/14 15:18:45.895791 connection.go:100: Read 1 bytes and cost 0ms 3862ns2019/08/14 15:18:45.896082 connection.go:387: AppendEntries 观察接收端的日志我们发现在655ms的时候接收端接收到最后一次正常的心跳，随后就被阻塞在read调用上，下一次读取到心跳信息则是在895ms，并且随后很快的就读完了三次心跳的数据。很显然，895 远大于 703、763、824，那么是什么原因导致了发送端在这三个时间点发送的报文一直到200多毫秒之后才被接收端成功的读取到呢？ tcpdump我们使用tcpdump工具来获取网络报文信息，从而了解数据的传输情况。因为我们的组件使用6300端口进行数据传输，所以在两个节点上面都要执行如下命令来抓取通过6300端口的报文 tcpdump tcp port 6300 我在上一步执行程序的时候已经打开了tcpdump命令，所以现在我们已经可以观察tcpdump的输出信息了。首先观察发送端发送的信息，同样我们只关注 703ms ~ 874ms 之间的信息。该时间段的信息如下，需要注意有一些网络数据报文与我们要关注的内容无关，直接忽略即可。 123456789101112131415:18:45.643425 IP lin-21-34-202.bmc-grx &gt; 172.21.3.92.57619: Flags [P.], seq 525:546, ack 164, win 114, options [nop,nop,TS val 3450638986 ecr 3259647687], length 2115:18:45.664930 IP 172.21.3.92.57619 &gt; lin-21-34-202.bmc-grx: Flags [P.], seq 164:170, ack 546, win 115, options [nop,nop,TS val 3259647744 ecr 3450638986], length 615:18:45.703607 IP lin-21-34-202.bmc-grx &gt; 172.21.3.92.57619: Flags [P.], seq 546:567, ack 170, win 114, options [nop,nop,TS val 3450639047 ecr 3259647744], length 2115:18:45.763909 IP lin-21-34-202.bmc-grx &gt; 172.21.3.92.57619: Flags [P.], seq 567:588, ack 170, win 114, options [nop,nop,TS val 3450639107 ecr 3259647744], length 2115:18:45.784473 IP 172.21.3.92.57619 &gt; lin-21-34-202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647863 ecr 3450638986,nop,nop,sack 1 &#123;567:588&#125;], length 015:18:45.824084 IP lin-21-34-202.bmc-grx &gt; 172.21.3.92.57619: Flags [P.], seq 588:609, ack 170, win 114, options [nop,nop,TS val 3450639167 ecr 3259647863], length 2115:18:45.840677 IP 172.21.3.92.57619 &gt; lin-21-34-202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647920 ecr 3450638986,nop,nop,sack 1 &#123;567:609&#125;], length 015:18:45.869809 IP 172.21.3.92.57619 &gt; lin-21-34-202.bmc-grx: Flags [P.], seq 170:183, ack 546, win 115, options [nop,nop,TS val 3259647948 ecr 3450638986,nop,nop,sack 1 &#123;567:609&#125;], length 1315:18:45.870435 IP lin-21-34-202.bmc-grx &gt; 172.21.3.92.57619: Flags [P.], seq 609:615, ack 183, win 114, options [nop,nop,TS val 3450639213 ecr 3259647948], length 615:18:45.884354 IP lin-21-34-202.bmc-grx &gt; 172.21.3.92.57619: Flags [P.], seq 615:636, ack 183, win 114, options [nop,nop,TS val 3450639227 ecr 3259647948], length 2115:18:45.886702 IP 172.21.3.92.57619 &gt; lin-21-34-202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647966 ecr 3450638986,nop,nop,sack 1 &#123;567:615&#125;], length 015:18:45.886732 IP lin-21-34-202.bmc-grx &gt; 172.21.3.92.57619: Flags [P.], seq 546:567, ack 183, win 114, options [nop,nop,TS val 3450639230 ecr 3259647948], length 2115:18:45.902699 IP 172.21.3.92.57619 &gt; lin-21-34-202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647981 ecr 3450638986,nop,nop,sack 1 &#123;567:636&#125;], length 015:18:45.903892 IP 172.21.3.92.57619 &gt; lin-21-34-202.bmc-grx: Flags [.], ack 636, win 115, options [nop,nop,TS val 3259647983 ecr 3450639230], length 0 其中lin-21-34-202是节点1，172.21.3.92.57619是节点2，即心跳是由lin-21-34-202发送给172.21.3.92的。Flags中的 P 代表 PUSH， . 代表 ACK。 已知我们心跳的长度为12，由上面的报文以及前面的日志我们可以推测出来，第一行的信息代表了最后一次节点1给节点2发送的正常心跳信息。 随后节点1发送了seq为 546:567 和 567:588 的两条心跳包，这就是第3第4行的信息。奇怪的是在第5行所代表的节点2回复的ACK中，只表示收到了 567:588 的的数据包，没有 546:567。第6第7行表示了发送的第三个心跳包 588:609 以及相应的ACK 567:609。 节点1发现节点2迟迟不回复 546:567 的ACK，就对 546:567 进行了重发，这就是第12行的信息。这一次节点2终于回复了ACK（第14行），我们可以认为 546:567 确定被发送到节点2了。 随后我们再看一下接收端的报文信息 1234567891011121315:18:45.654608 IP 172.21.34.202.bmc-grx &gt; lin-21-3-92.57619: Flags [P.], seq 525:546, ack 164, win 114, options [nop,nop,TS val 3450638986 ecr 3259647687], length 2115:18:45.655249 IP lin-21-3-92.57619 &gt; 172.21.34.202.bmc-grx: Flags [P.], seq 164:170, ack 546, win 115, options [nop,nop,TS val 3259647744 ecr 3450638986], length 615:18:45.774317 IP 172.21.34.202.bmc-grx &gt; lin-21-3-92.57619: Flags [P.], seq 567:588, ack 170, win 114, options [nop,nop,TS val 3450639107 ecr 3259647744], length 2115:18:45.774348 IP lin-21-3-92.57619 &gt; 172.21.34.202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647863 ecr 3450638986,nop,nop,sack 1 &#123;567:588&#125;], length 015:18:45.831770 IP 172.21.34.202.bmc-grx &gt; lin-21-3-92.57619: Flags [P.], seq 588:609, ack 170, win 114, options [nop,nop,TS val 3450639167 ecr 3259647863], length 2115:18:45.831795 IP lin-21-3-92.57619 &gt; 172.21.34.202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647920 ecr 3450638986,nop,nop,sack 1 &#123;567:609&#125;], length 015:18:45.859801 IP lin-21-3-92.57619 &gt; 172.21.34.202.bmc-grx: Flags [P.], seq 170:183, ack 546, win 115, options [nop,nop,TS val 3259647948 ecr 3450638986,nop,nop,sack 1 &#123;567:609&#125;], length 1315:18:45.877852 IP 172.21.34.202.bmc-grx &gt; lin-21-3-92.57619: Flags [P.], seq 609:615, ack 183, win 114, options [nop,nop,TS val 3450639213 ecr 3259647948], length 615:18:45.877870 IP lin-21-3-92.57619 &gt; 172.21.34.202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647966 ecr 3450638986,nop,nop,sack 1 &#123;567:615&#125;], length 015:18:45.892884 IP 172.21.34.202.bmc-grx &gt; lin-21-3-92.57619: Flags [P.], seq 615:636, ack 183, win 114, options [nop,nop,TS val 3450639227 ecr 3259647948], length 2115:18:45.892901 IP lin-21-3-92.57619 &gt; 172.21.34.202.bmc-grx: Flags [.], ack 546, win 115, options [nop,nop,TS val 3259647981 ecr 3450638986,nop,nop,sack 1 &#123;567:636&#125;], length 015:18:45.894971 IP 172.21.34.202.bmc-grx &gt; lin-21-3-92.57619: Flags [P.], seq 546:567, ack 183, win 114, options [nop,nop,TS val 3450639230 ecr 3259647948], length 2115:18:45.894989 IP lin-21-3-92.57619 &gt; 172.21.34.202.bmc-grx: Flags [.], ack 636, win 115, options [nop,nop,TS val 3259647983 ecr 3450639230], length 0 接收端的报文基本上就是发送端的镜像，但是有趣的是接收端的报文只有13条，而发送端则发送了14条报文。仔细对比就发现发送端的 seq 546:567 在接收端不存在，看来这个报文在网络传输中丢失了没能成功到达节点2。节点2在节点1再次重传后才最终获取了 546:567 的报文信息，即接收端的第12行，此时时间点为 15:18:45.894971，最后节点2返回给节点1 ACK。 分析观察上面接收端收到重传数据的时间为 15:18:45.894971，日志中接收端用户态成功读取到报文的时间为 15:18:45.895077，那结果就明显了。 节点1发送给节点2的第一个心跳包丢失了，因为TCP协议中数据的有序性，所以虽然后面的数据成功到达也不能将这些数据返回给用户态程序。一直到节点1因为没能得到ACK而进行超时重传，节点2最终获取了心跳包1，此时数据已经完整可以返回给用户态程序。这一顿操作也导致这部分数据从节点1的用户态到节点2的用户态之间产生了 894 - 703 约200ms的延迟，因而节点1产生了超时。 解决咦，为什么同一个机房的两个机器之间会丢包呢，难道路由器出问题了？经过检查之后发现是我们自己搞错了，在申请机器的时候我们第一次申请的机器在南京，第二次申请的机器在杭州，所以这两个机器其实并不是在一个机房并且之间隔了接近300km，产生丢包的现象也就可以理解了。虽然问题产生的原因很囧，但是这次耗时两天的问题排查还是让我很有收获的，切换了负载之后问题也就成功解决了。","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"网络","slug":"网络","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"TCP协议","slug":"TCP协议","permalink":"https://www.nosuchfield.com/tags/TCP%E5%8D%8F%E8%AE%AE/"}]},{"title":"使用Elasticsearch的Suggester实现搜索提示","slug":"Use-Elasticsearch's-Suggester-to-implement-search-tips","date":"2019-07-12T10:44:34.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2019/07/12/Use-Elasticsearch's-Suggester-to-implement-search-tips/","link":"","permalink":"https://www.nosuchfield.com/2019/07/12/Use-Elasticsearch's-Suggester-to-implement-search-tips/","excerpt":"","text":"搭建环境根据官方文档创建Elasticsearch的运行环境，之后安装中文分词插件。启动Elasticsearch进程后根据如下的配置创建索引 products &#123; &quot;settings&quot;: &#123; &quot;index&quot;: &#123; &quot;number_of_shards&quot;: 1, &quot;number_of_replicas&quot;: 0 &#125; &#125;, &quot;mappings&quot;: &#123; &quot;dynamic_templates&quot;: [ &#123; &quot;strings&quot;: &#123; &quot;match_mapping_type&quot;: &quot;string&quot;, &quot;mapping&quot;: &#123; &quot;type&quot;: &quot;keyword&quot;, &quot;fields&quot;: &#123; &quot;analyzed&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;analyzer&quot;: &quot;ik_max_word&quot; &#125; &#125; &#125; &#125; &#125; ], &quot;properties&quot;: &#123; &quot;suggest&quot;: &#123; &quot;type&quot;: &quot;completion&quot; &#125; &#125; &#125; &#125; 在上面的mapping中我们把 suggest 字段设置成了 completion 类型，该类型支持 completion_suggest 的搜索。 索引数据在创建了索引之后，我们向索引中写入的数据格式如下 &#123; &quot;updateTime&quot;: &quot;2016-09-01T10:59:22+0800&quot;, &quot;proxy&quot;: false, &quot;addTime&quot;: &quot;2016-09-01T10:59:22+0800&quot;, &quot;name&quot;: &quot;PCMS星巴克随手杯&quot; &#125; 完整的数据在这里。 我们使用 python-pinyin 库把 name 字段转化为相应的拼音，例如 咖啡龙角散 被转为 [ &quot;kflls&quot;, &quot;kafeilongjuesan&quot;, &quot;kflgs&quot;, &quot;kafeilonglusan&quot;, &quot;kafeilonggusan&quot;, &quot;kafeilongjiaosan&quot;, &quot;kfljs&quot; ] 我们在原始数据中新增一个 suggest 字段用于存储上面的拼音数据，之后把这个文档保存到 products 索引中。具体的逻辑如下 12345name = data.get(&#x27;name&#x27;)# 将名称转化为拼音列表suggest_values = word_2_pinyin(name)data[&#x27;suggest&#x27;] = suggest_values + [name]requests.post(url + &#x27;/_doc&#x27;, json=data) 搜索数据我们使用 completion_suggest 对数据进行检索 1234567891011requests.post(url + &#x27;/_search&#x27;, json=&#123; &#x27;suggest&#x27;: &#123; &#x27;completion_suggest&#x27;: &#123; &#x27;prefix&#x27;: word, &#x27;completion&#x27;: &#123; &#x27;field&#x27;: &#x27;suggest&#x27;, &#x27;size&#x27;: 10 &#125; &#125; &#125;&#125;) 我们设置word为 ka 或者 kf 都可以获取到 咖啡龙角散 这个字段，如此一来便可以实现用户搜索时的提示功能了。用户输入 kafeil、kafeilong、kfl、咖啡龙 等等都可以获取到提示词“咖啡龙角散”。考虑到用户输入时参数会频繁的变化，所以completion_suggester针对速度进行了额外的优化，特别适合用于搜索提示的场景。 完整的搜索提示代码在此。 其它的suggester除了completion_suggester，ES还提供了 Term Suggester 和 Phrase Suggester。和completion_suggester的前缀搜索不一样，它们使用了莱文斯坦距离来计算词之间的相关性（ES中类似的还有Fuzzy搜索），它们一般可以用于提示词纠错或拼写检查。不过因为中文的词和英文的词它们的构成原理完全不一样，而且ES中莱文斯坦距离的 max_edits 选项的值最大不能超过2，所以这几个搜索选项在中文环境中的使用场景十分有限。 你也可以使用 string_distance 选项来切换其它的编辑距离算法： 选项参数 使用的算法 internal 优化过的 damerau_levenshtein 算法 damerau_levenshtein damerau_levenshtein 算法 levenshtein Levenshtein edit distance algorithm jaro_winkler Jaro-Winkler algorithm ngram character n-grams 算法 参考Elasticsearch Suggester详解Completion Suggester模糊性","categories":[],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"}]},{"title":"使用OpenResty实现流控","slug":"Flow-control-using-OpenResty","date":"2019-07-04T19:14:22.000Z","updated":"2025-08-22T15:42:13.334Z","comments":true,"path":"2019/07/04/Flow-control-using-OpenResty/","link":"","permalink":"https://www.nosuchfield.com/2019/07/04/Flow-control-using-OpenResty/","excerpt":"","text":"OpenResty简介OpenResty是一种基于Nginx并且使用C语言开发的、同时使用Lua作为用户语言的Web平台。如果把Nginx比作Linux内核，那么OpenResty则可以看做是一种Liunx的发行版，其对原有的Nginx做了很大的补充与扩展，使得我们可以在Nginx中编写并执行Lua脚本。Open表示开源的，而Resty则代表了restful的接口风格。 OpenResty环境搭建创建openresty用户 useradd openresty 安装openresty(其它环境的安装方法) sudo yum-config-manager --add-repo https://openresty.org/yum/cn/centos/OpenResty.repo sudo yum install openresty 创建文件夹openresty-test，并根据以下的目录结构创建文件夹以及相应的文件 $ tree openresty-test/ openresty-test/ ├── conf │ └── nginx.conf ├── logs │ ├── access.log │ └── error.log └── lua └── nginx.lua openresty-test文件夹应属于openresty用户，如果不是使用如下命令进行修改 chown -R openresty:openresty openresty-test 修改nginx.conf如下 worker_processes 1; error_log logs/error.log; events &#123; worker_connections 1024; &#125; http &#123; server &#123; listen 6699; location / &#123; default_type text/html; # 关闭lua缓存，只能用于方便调试，修改lua文件后nginx不需要重新reload lua_code_cache off; # 引入Lua脚本文件 content_by_lua_file lua/nginx.lua; &#125; &#125; &#125; 以上内容设置完毕之后，启动openresty openresty -p openresty-test 如果需要重新加载配置文件 openresty -p openresty-test -s reload 编写限流脚本在nginx.conf中我们把 lua/nginx.lua 引入到了配置中，接下来我们开始书写Lua代码。 我们的限流使用了Redis来帮助实现，具体代码如下 123456789101112131415161718192021222324252627282930313233343536373839-- 修改content-typengx.header.content_type = &quot;text/plain&quot;local ip = ngx.req.get_headers()[&quot;X-Real-IP&quot;]if ip == nil then ip = ngx.req.get_headers()[&quot;x_forwarded_for&quot;]endif ip == nil then ip = ngx.var.remote_addrendlocal redis = require &quot;resty.redis&quot;local red = redis:new()red:set_timeout(1000) -- 一秒local ok, err = red:connect(&quot;172.19.3.27&quot;, 6379)if not ok then ngx.say(&quot;failed to connect: &quot;, err) returnendlocal freq = &quot;freq.&quot; .. ip -- 出现频率local bucket = &quot;bucket.&quot; .. iplocal res, err = red:get(bucket)if res == ngx.null then red:set(freq, 0) -- 重置频率 red:set(bucket, 0) red:expire(bucket, 10)endlocal num = tonumber(red:get(freq))if num ~= nil and num &gt; 5 then ngx.say(&quot;访问频率受限&quot;) returnendngx.say(num)red:incr(freq) 限流的原理非常简单，客户端每请求一次就会给计数器加1，如果计数器达到5那么服务端就会告知访问频率到达限制。计数器每10秒钟重置一次，这意味着每个IP在10秒钟内最多请求5次。 总结其实Nginx的限流是可以通过配置直接实现的，不需要这么复杂，我举这么个例子就是想描述一下OpenResty的工作方式。在Lua中我们除了可以访问Nginx和Redis的模块，还有很多其它的模块OpenResty也已经为我们提供好了，下面就是这样的一个列表，更详细的信息可以在OpenResty的官网中查到 lua-resty-memcached lua-resty-mysql lua-resty-redis lua-resty-dns lua-resty-upload lua-resty-websocket lua-resty-lock lua-resty-logger-socket lua-resty-lrucache lua-resty-string ngx_memc ngx_postgres ngx_redis2 ngx_redis ngx_proxy ngx_fastcgi 参考OpenResty 最佳实践https://github.com/openresty/lua-nginx-moduleOpenResty + Lua + Redis 实现 IP 限流在 Nginx 使用 Lua 扩展功能","categories":[],"tags":[{"name":"Lua","slug":"Lua","permalink":"https://www.nosuchfield.com/tags/Lua/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.nosuchfield.com/tags/Nginx/"},{"name":"运维","slug":"运维","permalink":"https://www.nosuchfield.com/tags/%E8%BF%90%E7%BB%B4/"}]},{"title":"【译】Understanding \"Query Then Fetch\" vs \"DFS Query Then Fetch\"","slug":"Understanding-Query-Then-Fetch-vs-DFS-Query-Then-Fetch","date":"2019-06-27T16:28:55.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2019/06/27/Understanding-Query-Then-Fetch-vs-DFS-Query-Then-Fetch/","link":"","permalink":"https://www.nosuchfield.com/2019/06/27/Understanding-Query-Then-Fetch-vs-DFS-Query-Then-Fetch/","excerpt":"","text":"本文翻译自：https://www.elastic.co/cn/blog/understanding-query-then-fetch-vs-dfs-query-then-fetch 在前一篇文章(译注：这篇文章不用看了)中，我们遇到了一个查询结果得分异常的情况。作为回顾，这是之前的查询语言以及查询结果 $ curl -XGET localhost:9200/startswith/test/_search?pretty -d &#39;&#123; &quot;query&quot;: &#123; &quot;match_phrase_prefix&quot;: &#123; &quot;title&quot;: &#123; &quot;query&quot;: &quot;d&quot;, &quot;max_expansions&quot;: 5 &#125; &#125; &#125; &#125;&#39; | grep title &quot;_score&quot; : 1.0, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;drunk&quot;&#125; &quot;_score&quot; : 0.30685282, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;dzone&quot;&#125; &quot;_score&quot; : 0.30685282, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;data&quot;&#125; &quot;_score&quot; : 0.30685282, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;drive&quot;&#125; 如上所示，字段 drunk 的得分为1.0，而其它几个字段的得分则不为1.0。既然这几个字段都匹配了字母 d，那么为什么它们的查询得分却不一样呢？事实上它们的得分本来应该是完全一致的，但是因为一些原因而导致了它们得分的差异。 相关性打分索引文档相关性得分的计算使用了Elasticsearch（内部是Lucene）的TF-IDF算法。 关于TF-IDF的文章已经很多了，需要知道其核心原理为“如果一个字段在一个文档中出现的频率越高，则该字段的相关性越高；同时如果一个字段在整个索引中出现的频率越高，则该字段的相关性越低”。 如果有少量的字段只存在于一部分文档中，那么任何对于这些字段的查询都与这些文档有着极强的相关性。相反的，常见的字段在哪里都是很容易见到的，所以它们查询时的相关性都很低。 ES在查询时面临着一个问题，即查询需要返回所有的相关数据，但是这些数据却是分布在集群中的多个分片之上的。每一个分片都是一个独立的Lucene索引，这意味着每个分片都有着其独立的TF和DF，一个分片只知道某个字段在当前分片的出现次数，而无法知道其在整个索引之中的出现次数。 那么问题来了，相关性的计算不应该是需要知道整个索引的TF和DF，仅仅使用单个分片的结果不会导致查询结果的错误吗？ 默认搜索方式：Query Then Fetch答案是是也不是。默认情况下ES使用一种叫做 Query Then Fetch 的搜索方式，它的工作过程如下 向每一个分片发送查询请求 在每一个分片上查询符合要求的数据，并且根据当前分片的TF和DF计算相关性得分 构建一个优先级队列存储查询结果（包含分页、排序，等等） 把查询结果的metadata返回给查询节点。注意，真正的文档此时还并没有返回，返回的只是得分数据 查询节点对从所有分片上返回的得分数据进行归并和排序，根据查询标准对得分数据进行选择 最终所有符合查询要求的文档被从其所在的分片上取回到查询节点 查询节点将数据返回给客户端 这个过程在大部分情况下都能良好工作。在大部分情况下，你的索引拥有足够的文档数量来降低TF和DF所产生的影响。所以尽管每个分片都不能够知道整个索引的文档分布情况，但是因为每个分片的TF和DF都不会存在非常巨大的差异，所以计算出来的结果也大体上也是相似的，此时得到的查询也大致上满足了我们的要求。 不过在上一篇文章中提到的那种查询情况，默认的查询方式就失败了。 DFS Query Then Fetch在上一篇文章中，我们创建一个没有指定分片数量的索引，在ES中不指定分片数量则默认为5。之后我们向索引中仅仅插入了5条数据，并且要求ES帮助我们取回数据并且给与准确的得分结果，这其实有点不公平。 查询得分的差异是因为默认的 Query Then Fetch 搜索方式的原因。根据ES的数据分片hash算法，一共5条数据，则每个分片可能仅保存了1到2条的数据。当我们使用ES对数据进行查询的时候，每个分片上对于这5条数据都只能有一个极小的了解，所以计算的得分自然是不精确的。 不过还好ES给我们提供了解决方案。如果遇到了得分存在差异的问题，ES提供了一个叫做 DFS Query Then Fetch 的查询方式。它的查询方式和 Query Then Fetch 基本上一致，区别在于它增加了一个用于得到索引中所有文档频率的 pre-query 阶段。 预查询所有的分片，得到一个索引中全局的 Term 和 Document 的频率信息 向每一个分片发送查询请求 在每一个分片上查询符合要求的数据，并根据全局的 Term 和 Document 的频率信息计算相关性得分 构建一个优先级队列存储查询结果（包含分页、排序，等等） 把查询结果的metadata返回给查询节点。注意，真正的文档此时还并没有返回，返回的只是得分数据 查询节点对从所有分片上返回的得分数据进行归并和排序，根据查询标准对得分数据进行选择 最终所有符合查询要求的文档被从其所在的分片上取回到查询节点 查询节点将数据返回给客户端 如果使用新的查询方式对前面的数据进行查询，我们将会得到一致的得分 $ curl -XGET &#39;localhost:9200/startswith/test/_search?pretty=true&amp;search_type=dfs_query_then_fetch&#39; -d &#39;&#123; &quot;query&quot;: &#123; &quot;match_phrase_prefix&quot;: &#123; &quot;title&quot;: &#123; &quot;query&quot;: &quot;d&quot;, &quot;max_expansions&quot;: 5 &#125; &#125; &#125; &#125;&#39; | grep title &quot;_score&quot; : 1.9162908, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;dzone&quot;&#125; &quot;_score&quot; : 1.9162908, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;data&quot;&#125; &quot;_score&quot; : 1.9162908, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;drunk&quot;&#125; &quot;_score&quot; : 1.9162908, &quot;_source&quot; : &#123;&quot;title&quot;:&quot;drive&quot;&#125; 结论当然，更好的准确性并不是没有代价的。预查询会导致一个额外的分片间的数据传输，并且会因为当前的索引大小、分片数量、查询频率等等而影响到性能。更加关键的是，在大部分情况这种精确查询是完全没有必要的，有足够量的数据几乎已经可以帮你解决准确性的问题。 不过有些时候你会遇到一些奇怪的查询得分问题，在这种时候考虑使用 DFS Query then Fetch 可能会是非常有用的。","categories":[],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"}]},{"title":"观察者模式","slug":"Observer-mode","date":"2019-06-24T15:58:20.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2019/06/24/Observer-mode/","link":"","permalink":"https://www.nosuchfield.com/2019/06/24/Observer-mode/","excerpt":"","text":"观察者模式中的角色可以分为Subject和Observer，它们分别为被观察者和观察者，观察者观察被观察者的状态变更。google的guava中提供了EventBus功能，EventBus可以实现观察者模式，下面是一个简单的例子 1234567891011121314151617181920212223242526272829import com.google.common.eventbus.EventBus;import com.google.common.eventbus.Subscribe;public class TestEventBus &#123; public static void main(String[] args) &#123; EventBus eventBus = new EventBus(&quot;test&quot;); // 注册一个listener eventBus.register(new Listener()); // 遍历被注册的对象以及其方法，调用符合要求的方法 eventBus.post(new Event(&quot;hello, world&quot;)); &#125;&#125;class Event &#123; public String message; Event(String message) &#123; this.message = message; &#125;&#125;class Listener &#123; @Subscribe public void listen(Event event) &#123; System.out.println(event.message); &#125;&#125; 我们也可以自己实现一个EventBus，虽然在效率上没办法和google的实现相比，但是基本原理都是一样的。首先我们创建一个用于标记方法是否需要实现订阅的注解 1234@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface Subscribe &#123;&#125; 随后创建EventBus的核心类，其主要功能是添加或移除listener，以及根据传入的参数对符合要求的方法进行调用 123456789101112131415161718192021222324252627282930313233343536public class EventBus &#123; private Set&lt;Object&gt; listeners = new HashSet&lt;&gt;(); public void register(Object listener) &#123; listeners.add(listener); &#125; public void unregister(Object listener) &#123; listeners.remove(listener); &#125; // 1. 遍历所有的listener对象； // 2. 遍历所有的listener对象的方法； // 3. 判断该方法是否添加了订阅注解，方法的参数个数和参数类型是否符合调用方的参数要求； // 4. 如果一切条件都符合，执行该方法； public void post(Object event) &#123; for (Object listener : listeners) &#123; Method[] methods = listener.getClass().getDeclaredMethods(); for (Method method : methods) &#123; if (method.isAnnotationPresent(Subscribe.class)) &#123; Class[] parameterTypes = method.getParameterTypes(); if (parameterTypes.length == 1 &amp;&amp; parameterTypes[0] == event.getClass()) &#123; try &#123; // 调用方法 method.invoke(listener, event); &#125; catch (IllegalAccessException | InvocationTargetException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125; &#125; &#125;&#125; 最后我们对上面的实现进行测试 12345678910111213141516public class Test &#123; public static void main(String[] args) &#123; EventBus eventBus = new EventBus(); eventBus.register(new Listener()); eventBus.post(&quot;Mike&quot;); &#125;&#125;class Listener &#123; @Subscribe public void say(String name) &#123; System.out.println(&quot;hello, &quot; + name); &#125;&#125; 测试代码打印出了如下结果 hello, Mike 参考：https://juejin.im/post/5b61c852e51d451956055476https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/25","categories":[],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://www.nosuchfield.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"Elasticsearch的可视化监控","slug":"Elasticsearch's-visual-monitoring","date":"2019-06-22T11:33:39.000Z","updated":"2025-08-22T15:42:13.334Z","comments":true,"path":"2019/06/22/Elasticsearch's-visual-monitoring/","link":"","permalink":"https://www.nosuchfield.com/2019/06/22/Elasticsearch's-visual-monitoring/","excerpt":"","text":"安装用于存储监控数据的Elasticsearch监控脚本周期性的获取被监控ES的监控数据，这些监控数据同样被保存在一个ES集群中。一般不推荐把监控数据放在被监控的ES集群中，因此这里我们额外的新建一个专门用于存储监控数据的ES集群。 下载Elasticsearch wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.3.tar.gz 解压并启动 tar -zxvf elasticsearch-5.6.3.tar.gz ./elasticsearch-2.4.6/bin/elasticsearch -d 启动前你可能需要更改集群名称、节点名称、节点绑定的地址、索引的分片和副本数、JVM配置、操作系统配置，等等的设置。 使用脚本获取Elasticsearch的监控数据使用脚本来获取监控数据同时把数据写到存储监控数据的ES中（脚本地址），其中server1为被监控ES的地址，server2为存储监控数据的ES地址。更改完毕集群的地址之后，启动监控脚本 python elasticsearch2elastic.py 随后应该就能在存储监控数据的ES集群中看到相关的监控数据索引了。 安装Grafana国内Grafana的安装可以参考清华大学镜像站的安装教程，安装完毕后启动Grafana service grafana-server start Grafana默认工作在3000端口，用户名密码都是admin。 可视化监控在Grafana中创建一个ES数据源，其地址为上面所创建的用于存储监控数据的ES地址，把 Index Name 设置为 Daily 模式，名称模板为 [elasticsearch_metrics-]YYYY.MM.DD，之后保存。 创建好数据源之后导入编号为 878 的dashboard，设置该dashboard的数据源为上一步所创建的数据源，之后创建该dashboard，使用此dashboard就能成功的监控ES的运行状态了。 参考：Elasticsearch在Centos 7上的安装与配置用Grafana创建监控指标仪表盘监控elastic searchElasticsearch Dashboard for 2.X, 5.X and 6.X","categories":[],"tags":[{"name":"运维","slug":"运维","permalink":"https://www.nosuchfield.com/tags/%E8%BF%90%E7%BB%B4/"},{"name":"监控","slug":"监控","permalink":"https://www.nosuchfield.com/tags/%E7%9B%91%E6%8E%A7/"}]},{"title":"ES中的nested对象","slug":"Nested-Object-In-Elasticsearch","date":"2019-06-20T19:30:43.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2019/06/20/Nested-Object-In-Elasticsearch/","link":"","permalink":"https://www.nosuchfield.com/2019/06/20/Nested-Object-In-Elasticsearch/","excerpt":"","text":"我们知道ES的一个索引会对应着多个分片和副本，而每一个分片或副本就是一个完整的Lucene索引。 ES索引 -&gt; ES分片 -&gt; Lucene索引 Elasticsearch在索引数据时，会对输入的数据进行解析，得到一个个单独的字段。ES本身还会添加一些额外的字段，最后把这些字段作为一个文档保存到Lucene中，ES自身额外添加的field：_uid, _source, _type, _version。 从原始输入中解析出相应字段的源码在此，在这里我们看到nested会把当前的document作为自己的parent，nested字段会使用其parentDoc的_uid作为自己的_uid，这就意味着nested字段是和其parent文档拥有一样的_uid的。 在上一步解析出了数据中的字段之后，ES把所有解析得到的字段存放到ParsedDocument中，具体源码在此。 最终ES把所有的字段存储到Lucene中，一个文档中所有字段的 _uid 都是一样的，所有的字段在存储时都使用这个相同的 _uid。ES根据版本决定这个数据是更新还是新增，版本比较以及数据写入到Lucene的源码在此。ES会给每个nested的数据创建一个独立的Lucene document，所以一次写入一共有 nested + 1 个文档数量。如果一个字段不是nested，就普通的解析一下变成单个字段然后存放在主document中进行保存。 例如如下的文本 &#123; &quot;city&quot;: &quot;Nanjing&quot;, &quot;comments&quot;: [ &#123; &quot;name&quot;: &quot;Mike&quot;, &quot;comment&quot;: &quot;Great&quot; &#125;, &#123; &quot;name&quot;: &quot;Mark&quot;, &quot;comment&quot;: &quot;Interesting&quot; &#125; ] &#125; 如果comments是一个普通的字段，那么ES通过解析操作我们可以得到如下的字段 city: Nanjing comments.name: Mike comments.comment: Great comments.name: Mark comments.comment: Interesting 这些字段存放在一个文档中，之后该文档被保存到Lucene。 这样保存的一个问题在于comments的name和comment字段之间失去了关联，如下的一个文本将会和上面的文本生成完全一样的字段： &#123; &quot;city&quot;: &quot;Nanjing&quot;, &quot;comments&quot;: [ &#123; &quot;name&quot;: &quot;Mark&quot;, &quot;comment&quot;: &quot;Great&quot; &#125;, &#123; &quot;name&quot;: &quot;Mike&quot;, &quot;comment&quot;: &quot;Interesting&quot; &#125; ] &#125; 这个文本生成的字段如下 city: Nanjing comments.name: Mark comments.comment: Great comments.name: Mike comments.comment: Interesting 这里生成的字段和上面的文本完全一致，所以如果我们想要查询 comments.name &#x3D;&#x3D; Mike &amp;&amp; comments.comment &#x3D;&#x3D; Great 的结果，那么这两条数据都是符合要求的，但这可能不是我们想要的结果，我们也许只想要查询第一条数据而已。 但是如果comments是一个nested类型的字段，那么ES就会把这段文本解析为三个文档，分别为 // document1 city: Nanjing // document2 comments.name: Mike comments.comment: Great // docuemtn3 comments.name: Mark comments.comment: Interesting 这段文本被拆分为三个document保存到Lucene中，这样一来comments的name和comment就产生了关联，此时进行查询 comments.name &#x3D;&#x3D; Mike &amp;&amp; comments.comment &#x3D;&#x3D; Great，那么就只有该条数据才是符合要求的。 参考：Nested Objectselasticsearch","categories":[],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://www.nosuchfield.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}]},{"title":"Log structured merge tree","slug":"Log-structured-merge-tree","date":"2019-06-17T17:43:49.000Z","updated":"2025-08-22T15:42:13.343Z","comments":true,"path":"2019/06/17/Log-structured-merge-tree/","link":"","permalink":"https://www.nosuchfield.com/2019/06/17/Log-structured-merge-tree/","excerpt":"","text":"LSM Tree是一种基于排序和合并的数据存储方式，与一般数据存储引擎需要反复修改硬盘上的数据不同，LSM Tree的数据一旦写到磁盘上就不会再更改了。并且由于LSM Tree的数据都是连续写入到磁盘上的，因为磁盘的连续写入效率高于随机写入，所以LSMTree的数据写入速度往往高于BTree的数据写入速度；不过由于LSMTree的数据在查询时需要涉及到多个磁盘文件以及数据的合并操作，所以LSMTree的数据查询速度一般都会低于BTree的数据查询速度。 LSM Tree的核心原理分为以下几块 数据在内存中有序的保存，此时存储数据的部分叫做内存表（memtable） 内存中的数据达到一定条件之后会被写入到磁盘上的SSTable（Sorted String Table）中，这里的写入是连续写入 数据在SSTable中是有序的，所以可以给SSTable建立一个索引以提高数据查询速度 磁盘上SSTable达到了一定的条件之后会触发归并操作，即把多个较小的SSTable归并为一个大的SSTable 使用transaction log来避免内存中的数据丢失问题 memtable因为数据需要有序的写入到SSTable中，所以在内存中我们就对数据进行有序的保存。内存中保存有序数据可选择的数据结构比较多，例如链表、红黑树等等，我们在这里选择使用SkipList。SkipList的复杂度和红黑树一样，但是实现起来更加简单。我们使用SkipList作为memtable，对于memtabl我们只需要使用其写入和查询方法即可。 SSTable当内存中的memtable达到了一定的条件，例如占用的内存空间或者数据的条数达到了指定的要求之后，我们就会对memtabl中的数据进行序列化并把其有序的保存到SSTable中。因为这里的写入是连续批量写入，所以写入速度很快，一个SSTable一般对应着一个数据文件。 给SSTable建立索引因为SSTable中的数据是有序的，所以我们在硬盘上创建数据文件的同时，也可以创建一个针对该数据文件的索引文件来提高数据查询时的效率。我们在索引文件中可以保存数据与该数据在数据文件中偏移的映射关系，并且由于数据文件中数据的存储是有序的，所以我们可以每隔n个数据创建一个索引，这样在索引文件中我们就得到了一个稀疏的数据文件中的数据位置信息。在查询数据时我们先到索引文件中查找指定的数据在数据文件中的偏移信息，由于数据是有序的所以我们通过索引能够把目标数据确定在数据文件中的某一个范围之内（或者在数据文件中不存在），这样就可以避免扫描整个数据文件，大大的提高了数据的查询速度。 SSTable的数据归并操作由于硬盘上的数据文件一旦创建就不可以再更改，所以一段时间之后就有可能产生大量的数据文件，数据文件过多会影响查询速度，所以我们把一些数据文件合并为一个大的数据文件。与memtable写到硬盘中一样，数据合并也需要一定的触发条件，例如当文件数量达到了一定阈值我们就触发一次合并。 数据合并其实就是一个归并操作，我们从多个文件中取出每个文件中的当前最小值，然后对这些值进行比较，把比较得到的最小值写入到新的数据文件中，然后刚刚写入新数据文件的值所对应的旧数据文件再次取出一个最小值，之后进行下一轮的比较和写入，直到所有的源数据文件的数据都已经被处理完毕。当比较遇到同样的值的时候我们就会比较这些值的写入时间戳，时间戳较新的值被写入新的数据文件，时间戳较老的值被丢弃。在查询数据时当遇到同样的值的时候也一样需要比较数据的写入时间戳，查询结果使用时间戳最新的值。 在新的数据文件被成功的创建之后，删除所有老的被用于归并的数据文件。 translog我们知道当我们写入数据时是写在memtable中的，当memtable达到一定的条件之后我们才会把其数据写到磁盘上的SSTable中。假如在写入到SSTable之前进程挂掉了，那么此时memtable中的数据就会丢失，解决办法是使用transaction log，translog的工作方式就是在数据写到memtable中的同时在磁盘上追加一条日志信息，这些日志信息是连续写入所以写入效率并不低。一旦进程飞掉memtable数据丢失，此时我们就可以从磁盘上的translog中恢复这部分数据。 当memtable中的数据被成功的写入到了SSTable之后，translog上面对应的日志信息就可以删除掉了。 实现：https://github.com/RitterHou/lsm","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"持续重构","slug":"Continuous-reconstruction","date":"2019-06-06T16:37:16.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2019/06/06/Continuous-reconstruction/","link":"","permalink":"https://www.nosuchfield.com/2019/06/06/Continuous-reconstruction/","excerpt":"","text":"我们在写代码的时候需要避免的两种比较极端的情况： 写代码时字字斟酌，过早的进行代码优化 写代码随心所欲，直到使得项目代码变成一座“屎山”而没有人想去维护 类似于“持续集成”和“持续部署”的理念，我认为我们在写代码时应该可以做到持续重构。持续重构的好处在于我们在写代码时不需要过分的去关注代码结构和性能优化，此时我们以最快的速度来实现功能，这样的好处是可以提高开发效率；在一个小模块开发完成之后要立即进行重构，由于代码的基础逻辑已经完成，此时只需要在原有的代码上进行性能和结构优化的重构，这样比一开始就直接写出最优的代码要轻松的多。如果在最开始就开始考虑写出最优的代码，那么写代码的时候就需要同时考虑多个方面的内容，这样不仅影响开发效率，也会导致模块开发整体性的缺失。 持续重构的核心思想和持续集成一致，即我们无法做到完整的、正确的去完成一个事情，那么我们就把这个事情拆分为一个个小块的、可以被完成的事情，这样再去做就降低了事情复杂度。具体到重构就是我们有时候无法对一个巨大的模块做修改与重构，那么在完成一个个小模块的时候就立即重构，这样事情就变得简单的多。 重构必须要以单元测试为前提，不然无法对代码的正确性做出保证；一般来说重构同时也需要辅以版本控制，不然可能会导致代码混乱。持续重构既避免了代码最终会变成一个不可维护的泥潭，也保证了开发效率，在实际开发中应该多多实践。","categories":[],"tags":[{"name":"软件工程","slug":"软件工程","permalink":"https://www.nosuchfield.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"重构","slug":"重构","permalink":"https://www.nosuchfield.com/tags/%E9%87%8D%E6%9E%84/"}]},{"title":"Golang编译时添加属性信息","slug":"Add-attribute-information-when-Golang-compiles","date":"2019-05-28T17:00:10.000Z","updated":"2025-08-22T15:42:13.330Z","comments":true,"path":"2019/05/28/Add-attribute-information-when-Golang-compiles/","link":"","permalink":"https://www.nosuchfield.com/2019/05/28/Add-attribute-information-when-Golang-compiles/","excerpt":"","text":"在编译golang源代码的时候，我们有时候希望把版本、编译时间等等的信息添加到目标文件中，这些信息不应该在源代码中写死，而是应该在编译时再写入。golang中我们在编译时可以使用-ldflags编译选项来添加一些信息，这些信息会被写入到目标文件中。 我们先实现如下的一个golang源程序： 123456789101112131415161718192021package mainimport ( &quot;fmt&quot; &quot;os&quot;)var ( buildStamp = &quot;&quot; version = &quot;&quot; goVersion = &quot;&quot;)func main() &#123; args := os.Args if len(args) == 2 &amp;&amp; (args[1] == &quot;--version&quot; || args[1] == &quot;-v&quot;) &#123; fmt.Printf(&quot;Build TimeStamp : %s\\n&quot;, buildStamp) fmt.Printf(&quot;Version : %s\\n&quot;, version) fmt.Printf(&quot;Go Version : %s\\n&quot;, goVersion) &#125;&#125; 在上面的源代码中我们定义了三个变量 buildStamp version goVersion 我们使用 --version 或者 -v 选项时可以打印出这三个变量，如果我们直接使用 go build main.go 编译源代码，则执行程序打印结果都是空值。 我们可以使用如下脚本来编译此程序，脚本中我们通过 -ldflags 选项修改变量的值 123456#!/usr/bin/env bashflags=&quot;-X &#x27;main.buildStamp=$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&#x27; -X main.version=v1.0.0 -X &#x27;main.goVersion=$(go version)&#x27;&quot;echo &quot;Build flags: $&#123;flags&#125;&quot;go build -ldflags &quot;$flags&quot; -o main main.go 编译完之后我们执行 ./main -v 可以得到如下结果 Build TimeStamp : 2019-05-28 16:54:02 Version : v1.0.0 Go Version : go version go1.11.5 darwin/amd64 我们这样就可以把编译时的信息写入到目标程序中去了。 参考：https://ms2008.github.io/2018/10/08/golang-build-version/","categories":[],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://www.nosuchfield.com/tags/Golang/"},{"name":"编译","slug":"编译","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91/"}]},{"title":"在Lua中调用C函数","slug":"Call-C-function-in-Lua","date":"2019-05-17T10:37:46.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2019/05/17/Call-C-function-in-Lua/","link":"","permalink":"https://www.nosuchfield.com/2019/05/17/Call-C-function-in-Lua/","excerpt":"","text":"Lua调用C语言中的函数是通过栈来进行参数传递的，这与大部分编程语言的内部函数调用的实现一致。 我们先实现如下C代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;lua.h&gt;#include &lt;lualib.h&gt;#include &lt;lauxlib.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/time.h&gt;static int i_add(lua_State * L)&#123; // 获取第一个函数参数 double a = luaL_checknumber(L, 1); printf(&quot;第一个参数：%f\\n&quot;, a); // 获取第二个函数参数 double b = luaL_checknumber(L, 2); printf(&quot;第二个参数：%f\\n&quot;, b); // 设置函数返回值 lua_pushnumber(L, a + b); // 函数返回值的数量，在这里函数返回值为1 return 1;&#125;static int i_swap(lua_State * L)&#123; int i = lua_tointeger(L, 1); int j = lua_tointeger(L, 2); printf(&quot;%d 和 %d 交换位置\\n&quot;, i, j); lua_pushinteger(L, j); lua_pushinteger(L, i); return 2;&#125;// 计算斐波拉契数列static int i_fib(lua_State * L)&#123; // lua_Integer长度为64位，防止溢出（事实上当n的值达到100左右即使64位也会发生溢出了） lua_Integer sum = 0; lua_Integer a = 0; // n - 2 lua_Integer b = 0; // n - 1 int n = lua_tointeger(L, 1); int i = 0; while (i &lt;= n) &#123; // printf(&quot;sum is %d\\n&quot;, sum); i++; if (i == 1) &#123; a = 0; b = 1; &#125; sum = a + b; a = b; b = sum; &#125; lua_pushinteger(L, sum); return 1;&#125;// 获取当前的毫秒时间戳static int i_time(lua_State * L)&#123; struct timeval tv; gettimeofday( &amp;tv, NULL ); double t = tv.tv_sec + (double)((int)(tv.tv_usec*0.001) * 0.001); // 以整数返回 lua_pushinteger(L, (lua_Integer)(t * 1000)); return 1;&#125;// 打开名为mylib的库，在Lua中使用require(&#x27;mylib&#x27;)可以调用mylib中的函数int luaopen_mylib(lua_State * L)&#123; // 对函数进行注册，之后在Lua中可以直接调用 lua_register(L, &quot;add&quot;, i_add); lua_register(L, &quot;swap&quot;, i_swap); lua_register(L, &quot;fib_c&quot;, i_fib); lua_register(L, &quot;current_time&quot;, i_time); return 0;&#125; 我们把上面的代码保存在 mylib.c 文件中，随后使用如下命令对源代码进行编译得到 mylib.so 文件 gcc mylib.c -fPIC -shared -o mylib.so -I/usr/local/include/lua5.3 -llua5.3 得到动态链接库之后我们在当前文件夹下创建 test.lua 文件，之后输入如下代码 123456789101112131415161718192021222324252627282930313233343536373839404142package.cpath = &#x27;./?.so;&#x27; .. package.cpath -- 把库文件添加到环境变量中require(&#x27;mylib&#x27;)print(add(1, 2))print(swap(2333, 666))-- 计算斐波那契数列fib_lua = function(n) sum = 0 a = 0 -- n - 2 b = 0 -- n - 1 i = 0 repeat i = i + 1 if i == 1 then a = 0 b = 1 end sum = a + b a = b b = sum until i &gt; n return sumendn = 10000000 -- 计算的斐波那契数列位数-- 使用lua计算start = current_time()fib_lua(n)luaCost = current_time() - startprint(luaCost)-- 使用C语言计算start = current_time()fib_c(n)cCost = current_time() - startprint(cCost)-- 计算lua与C语言的耗时比print(luaCost / cCost) 执行 lua test.lua 得到如下结果： 第一个参数：1.000000 第二个参数：2.000000 3.0 2333 和 666 交换位置 666 2333 1887 40 47.175 至此我们就使用Lua成功的调用了C语言中的函数，我们发现C语言的执行效率差不多是Lua的四十多倍（C语言的执行效率是Python的80多倍），可见Lua作为一个脚本语言，其执行速度还是很快的。 参考Lua 5.3 参考手册","categories":[],"tags":[{"name":"Lua","slug":"Lua","permalink":"https://www.nosuchfield.com/tags/Lua/"},{"name":"C","slug":"C","permalink":"https://www.nosuchfield.com/tags/C/"}]},{"title":"记一次生产环境ES脑裂","slug":"Production-environment-elasticsearch-split-brain","date":"2019-05-13T15:44:58.000Z","updated":"2025-08-22T15:42:13.345Z","comments":true,"path":"2019/05/13/Production-environment-elasticsearch-split-brain/","link":"","permalink":"https://www.nosuchfield.com/2019/05/13/Production-environment-elasticsearch-split-brain/","excerpt":"","text":"下午业务部门发来消息说搜索引擎的同一个查询语句会出现不同的查询结果，经过反复debug最终发现是因为这个数据所在的集群发生了“脑裂”的现象。 所谓脑裂就是ES集群中的两个节点都认为自己是master，导致原有的集群被分割为两个独立的集群。我们这个ES集群有两台负载，而前段时间机房发生过一次交换机挂掉导致的机柜断网事件，其中一台ES负载就位于这个发生了断网的机柜之中。断网导致两台负载之间的网络连接断开，进而导致两个节点都把自己选举为主节点，等到网络恢复连接之后，本来一个集群就变成了两个集群。 因为搜索引擎有一些uwsgi进程连接到了负载1所在的集群，还有一些则连接到了负载2所在的集群，此时所有的读写操作都是在两个集群上发生的。一段时间之后，这两个集群之中的数据就出现了不一致的情况，此时再查询就会因为查询的集群不一致而导致查询结果不一致的情况，具体表现就是同一个查询语句出现了不同的查询结果。 最终我们向集群中添加了一台新的节点，3个节点能够通过多数派的方式来确定唯一的集群。一般认为成为master的前提是该节点得到 (n ÷ 2) + 1 个选票，具体在这里就是需要 (3 ÷ 2) + 1 = 2 个选票，因此我们把Elasticsearch配置文件 elasticsearch.yml 中的最小选主人数设置为 2 discovery.zen.minimum_master_nodes: 2 如果任意一个节点脱离网络，那么剩下的两个节点会选举得到一个master，而脱离的那个节点因为 1 &lt; 2，所以不能成为master。如果三个节点全部断开网络连接，则三个节点都不能获得足够的选票成为master，整个集群挂掉。 添加了新节点之后，新节点会加入一个旧节点的集群之中。此时把剩下的那个节点重启，之后该节点也会加入那个集群，此时所有节点都组成了一个集群，脑裂现象消失。不过因为此时所有数据都由master确定，所以被重启的那个节点上的数据会发生丢失的现象，这也是脑裂的最大危害：导致数据的混乱或丢失。 不过好在我们所有的数据都是从业务部门的主库中同步过来的，所以这里只需要重新刷新一遍数据即可。 注最小主节点数 如果不想因为修改配置文件而重启节点，可以通过如下方式直接修改配置 PUT /_cluster/settings &#123; &quot;persistent&quot; : &#123; &quot;discovery.zen.minimum_master_nodes&quot; : 2 &#125; &#125;","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"}]},{"title":"Unicode与UTF-8","slug":"Unicode-and-UTF-8","date":"2019-04-27T15:07:31.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2019/04/27/Unicode-and-UTF-8/","link":"","permalink":"https://www.nosuchfield.com/2019/04/27/Unicode-and-UTF-8/","excerpt":"","text":"计算机编码发展的历史关于计算机系统中编码的历史（例如ASCII、GBK这些编码等等）就不介绍了，如果感兴趣可以看看知乎上面的这个回答。 Unicode字符集Unicode(Universal Multiple-Octet Coded Character Set)是由ISO提出的，这是一种旨在包含目前世界上所有文化、所有字母的字符编码表，其目的是世界上任意一个字符都可以在该表中找到其所对应的编码值。Unicode字符集兼容ASCII码中的 0 ~ 127 位字符，对于这些字符Unicode会将其ASCII码值放在低位，高位全部置为零。 Unicode字符平面映射把Unicode分为17个平面（Plane），每个平面拥有 2 ^ 16 = 65536 个代码点，即每个平面可以表示65536个字符。这17个平面的范围如下表： 平面 编码取值范围 0号平面 U+0000 - U+FFFF 1号平面 U+10000 - U+1FFFF 2号平面 U+20000 - U+2FFFF 3号平面 U+30000 - U+3FFFF 4号平面 - 13号平面 U+40000 - U+DFFFF 14号平面 U+E0000 - U+EFFFF 15号平面 U+F0000 - U+FFFFF 16号平面 U+100000 - U+10FFFF 作为使用者，我们并不需要了解Unicode是如何设计并对字符进行分类的，我们只需要知道在Unicode中一个字符对应了一个唯一的编码就可以了，这个唯一编码叫做code point，其实就是该字符在编码表中的位置下标。 utf-8编码utf-8是Unicode的一种变长度的编码表达方式，Unicode字符集中有相当多的字符其编码高位都是零，这浪费了很多的空间。为了节省空间，可以使用utf-8编码方式对Unicode做进一步的编码注1。相较于Unicode，使用utf-8编码可以显著的减少字符的空间占用。 utf-8对Unicode编码值小于U+FFFF的字符编码效率较高，而对于高于U+FFFF的字符值使用utf-16编码可能是个更好的选择，好在我们常用的字符其编码值基本上都不会超过U+FFFF，所以一般来说utf-8编码方式已经足够满足我们的需求。不过事实上，假设不使用utf-8或者utf-16等编码方式，而是直接使用Unicode编码加上使用数据压缩算法（例如DEFLATE）的方式，也能得到较好的空间节省效果。 我们已经知道了引入utf-8编码机制的目的是为了减少空间的占用，下面我们就详细了解一下utf-8的编码方式。如下是一个utf-8编码与Unicode编码的关系表 位数 Unicode范围 字节数 字节1 字节2 字节3 字节4 7 U+0000 - U+007F 1 0xxxxxxx 11 U+0080 - U+07FF 2 110xxxxx 10xxxxxx 16 U+0800 - U+FFFF 3 1110xxxx 10xxxxxx 10xxxxxx 21 U+10000 - U+1FFFFF 4 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 上面只列举了utf-8编码在4个字节以内的编码方式，再多的因为很少使用没有列举出来。上表中的 x 代表了utf-8编码中的编码值，可以根据字符计算得到。 根据上表我们可以得到utf-8编码四种情况： 第一个bit为0，则说明这个字符只占用一个字节，字符的值为后7个bit 前三个bit为110，则说明这个字符占用两个字节，字符的值为第一个字节的后5个bit加上第二个字节的后6个bit 前四个bit为1110，该字符占用三个字节，字符的值为 字节一[4:] + 字节二[2:] + 字节三[2:] 前五个bit为11110，该字符占用四个字节，字符的值为 字节一[5:] + 字节二[2:] + 字节三[2:] + 字节四[2:] 下面我们看一个实际的utf-8和unicode相互转化的例子： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091package mainimport ( &quot;errors&quot; &quot;fmt&quot;)// 将输入的utf-8字符依次转化为其unicodefunc utf8ToUnicode(words string) ([]uint32, error) &#123; // 对字节做移位处理。基础字节，andByte用于剔除无用的bit，leftMoveBit代表左移位数 cal := func(baseByte byte, andByte byte, leftMoveBit uint32) uint32 &#123; return uint32(baseByte&amp;andByte) &lt;&lt; leftMoveBit &#125; bytes := []byte(words) offset := 0 length := len(bytes) unicodeList := make([]uint32, 0) // 存储最终的unicode列表 for offset &lt; length &#123; var codePoint uint32 // 字符集中的字符位置下标，即unicode码 codeUnit := bytes[offset] // 最小编码单位，即第一个byte // 下面这段代码比较机械，参考上面的编码表即可理解 if codeUnit&gt;&gt;7 == 0 &#123; // 一个字节 codePoint = uint32(codeUnit) offset += 1 &#125; else if codeUnit&gt;&gt;5 == 0x6 &#123; // 两个字节 codePoint = cal(bytes[offset], 0x1f, 6) + cal(bytes[offset+1], 0x3f, 0) offset += 2 &#125; else if codeUnit&gt;&gt;4 == 0xe &#123; // 三个字节 codePoint = cal(bytes[offset], 0xf, 12) + cal(bytes[offset+1], 0x3f, 6) + cal(bytes[offset+2], 0x3f, 0) offset += 3 &#125; else if codeUnit&gt;&gt;3 == 0x1e &#123; // 四个字节 codePoint = cal(bytes[offset], 0x7, 18) + cal(bytes[offset+1], 0x3f, 12) + cal(bytes[offset+2], 0x3f, 6) + cal(bytes[offset+3], 0x3f, 0) offset += 4 &#125; else &#123; return nil, errors.New(&quot;非法的utf-8字符&quot;) &#125; unicodeList = append(unicodeList, codePoint) &#125; return unicodeList, nil&#125;// 将输入的unicode转化为其对应的utf-8编码func unicodeToUtf8(code uint32) ([]byte, error) &#123; bytes := make([]byte, 0) // 同样是一段很机械的代码，实现参考上面的编码表 if code &lt; 0x80 &#123; bytes = append(bytes, byte(code)&amp;0x7f) &#125; else if code &lt; 0x800 &#123; bytes = append(bytes, byte(code&gt;&gt;6)&amp;0x1f|0xc0) bytes = append(bytes, byte(code)&amp;0x3f|0x80) &#125; else if code &lt; 0x10000 &#123; bytes = append(bytes, byte(code&gt;&gt;12)&amp;0xf|0xe0) bytes = append(bytes, byte(code&gt;&gt;6)&amp;0x3f|0x80) bytes = append(bytes, byte(code)&amp;0x3f|0x80) &#125; else if code &lt; 0x20000 &#123; bytes = append(bytes, byte(code&gt;&gt;18)&amp;0x7|0xf0) bytes = append(bytes, byte(code&gt;&gt;12)&amp;0x3f|0x80) bytes = append(bytes, byte(code&gt;&gt;6)&amp;0x3f|0x80) bytes = append(bytes, byte(code)&amp;0x3f|0x80) &#125; else &#123; return nil, errors.New(fmt.Sprintf(&quot;0x%x can&#x27;t be convert to utf-8&quot;, code)) &#125; return bytes, nil&#125;func main() &#123; testSet := &quot;Ƞ南京👉上海12aA北京の𐀉☺©🐵😆😄Ⅷ🖤&quot; // golang默认使用utf-8对源代码文件进行编码 unicodeList, _ := utf8ToUnicode(testSet) for _, unicode := range unicodeList &#123; result, err := unicodeToUtf8(unicode) if err != nil &#123; fmt.Println(err) &#125; else &#123; fmt.Printf(&quot;0x%x %s\\n&quot;, unicode, string(result)) &#125; &#125;&#125; 总结utf-8作为现在最广泛使用的编码方式，了解一下其工作原理还是有必要的。utf-8离不开unicode，utf-8编码出现的目的是为对unicode的编码值进行压缩，这才是utf-8编码的最核心意义。 注 这里有点绕，Unicode和utf-8都是编码方式，我们可以这样对它们作区分： Unicode是一种表驱动的编码方式，即编码值是通过查表的方式获得的 utf-8是一种通过计算而编码的方式，我们可以通过计算来实现一个字符的utf-8编码与Unicode编码的相互转化 参考十分钟搞清字符集和字符编码Emoji与Unicode","categories":[],"tags":[{"name":"编码","slug":"编码","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E7%A0%81/"},{"name":"编程语言","slug":"编程语言","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}]},{"title":"ES数据节点对JVM进程的内存限制","slug":"Memory-limit-of-the-ES-data-node-to-the-JVM-process","date":"2019-03-25T11:08:25.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2019/03/25/Memory-limit-of-the-ES-data-node-to-the-JVM-process/","link":"","permalink":"https://www.nosuchfield.com/2019/03/25/Memory-limit-of-the-ES-data-node-to-the-JVM-process/","excerpt":"","text":"Filesystem CacheElasticsearch高度依赖操作系统的filesystem cache来提升其数据读取效率，如果我们将大量的系统内存分配给JVM进程（例如将堆内存设置的很大），那么将导致操作系统无法得到足够的内存来作为filesystem cache，这会严重的影响Elasticsearch的性能。 我们知道现代操作系统中的内存都是按页分配的，操作系统在把某些数据从外存读取到内存中的页面上时，会把紧邻在被读取数据后面的几个页面的数据也读到内存中，这叫做文件预读，文件预读会极大的提升硬盘的顺序读取速度。除此之外，数据在被读取到内存中之后，即使用户已经使用完毕，操作系统也不会立即把这些数据所占用的内存给释放掉，这些数据会暂时的保存在内存中，如果此时用户开始读取硬盘上的同一块数据，操作系统会立即从内存中把该数据返回给用户而不需要再去操作硬盘进行数据读取操作，这部分暂时留存在内存中的数据就叫做页缓存(page cache)。 页面置换算法cache并不会影响进程的正常运行，一旦操作系统发现物理内存不够用，会立即从cache中分配内存页给进程使用。内存页的更新会使用LRU算法，LRU即Least Recent Used，该算法会淘汰最不经常使用的缓存页，其核心原则为“如果一个缓存页在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小”。 首先我们构建一个页面地址到实际页面的映射关系，我们可以根据这个地址对页面进行读取，这个映射关系我们使用哈希表进行存储。 内存地址 内存页 0x010000 page1 0x014096 page2 0x018192 page3 0x022288 page4 0x026384 page5 … … 内存页本身我们使用一个双向链表进行存储，其核心原理如下 一旦一个页面被读取，则把这个页面移动到链表的头部 如果内存空间不足，则删除链表尾部的页面以换取充足的空间 下面是一个go语言实现的LRU算法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108package mainimport ( &quot;fmt&quot; &quot;math/rand&quot; &quot;strconv&quot; &quot;time&quot;)type Page struct &#123; prev *Page next *Page addr int value []byte&#125;var ( table = make(map[int]*Page) // 存储页面地址和页面之间的映射关系 head = Page&#123;addr: -1&#125; // 头部节点的前一个节点 tail = Page&#123;addr: -1&#125; // 尾部节点的后一个节点 capacity = 10 // 内存最多容纳的页数，默认为10)// 根据地址获取数据func get(addr int) []byte &#123; if addr &lt; 0 &#123; panic(&quot;addr can&#x27;t be negative number&quot;) &#125; // 如果不在内存中则需要去硬盘上读取 if _, ok := table[addr]; !ok &#123; table[addr] = getFromDisk(addr) &#125; page, _ := table[addr] // 如果不位于头部则需要移动到头部 if page.addr != head.next.addr &#123; // 删除此节点 if page.prev != nil &amp;&amp; page.next != nil &#123; page.prev.next = page.next page.next.prev = page.prev &#125; // 移动此节点到头部 page.next = head.next page.next.prev = page page.prev = &amp;head head.next = page &#125; // 如果超出容量限制则需要移除最后一个节点 if getSize() &gt; capacity &#123; delete(table, tail.prev.addr) tail.prev.prev.next = &amp;tail tail.prev = tail.prev.prev &#125; return page.value&#125;// 模拟从硬盘上面获取数据func getFromDisk(addr int) *Page &#123; return &amp;Page&#123;addr: addr&#125;&#125;// 获取当前页面数量func getSize() int &#123; size := 0 page := head.next for page.addr &gt;= 0 &#123; size += 1 page = page.next &#125; return size&#125;// 打印双向链表func pretty() &#123; page := head.next value := strconv.Itoa(page.addr) for &#123; page = page.next if page.addr &lt; 0 &#123; break &#125; value += &quot;\\t⇄\\t&quot; + strconv.Itoa(page.addr) &#125; fmt.Println(value)&#125;func randomNum(min int, max int) int &#123; return rand.Intn(max-min) + min&#125;func main() &#123; head.next = &amp;tail tail.prev = &amp;head capacity = 8 rand.Seed(time.Now().UTC().UnixNano()) for i := 0; i &lt; 15; i++ &#123; get(randomNum(0, 15)) pretty() &#125;&#125; 回到Elasticsearch的问题，假设我们有一个16g内存的机器，如果我们分配了14g内存给JVM进程，那么操作系统就无法充分使用内存作为filesystem cache来为磁盘的读取加速，具体表现就是Elasticsearch的查询变得缓慢。 关闭缓存在Linux中页缓存是默认开启的，在Linux2.6之后你也可以使用 O_DIRECT 选项来关闭文件读取时的页缓存，这在某些特殊的情况下是有用的。 参考Help! Linux ate my RAM!聊聊Linux IO堆内存:大小和交换 | Elasticsearch: 权威指南 | ElasticES内存那点事LRU和LFU缓存置换算法","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"}]},{"title":"Elasticsearch是如何选举出master的","slug":"How-Elasticsearch-elected-the-master","date":"2019-03-18T16:12:57.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2019/03/18/How-Elasticsearch-elected-the-master/","link":"","permalink":"https://www.nosuchfield.com/2019/03/18/How-Elasticsearch-elected-the-master/","excerpt":"","text":"Elasticsearch的任意一个节点都可以设置node.master和node.data属性，该属性的意义如下表所示 master \\ data true false true 既是Master Eligible，又是data节点 单纯的Master Eligible节点 false 单纯的data节点 纯粹的Coordinating Node，协调节点负责查询时的数据收集、合并以及聚合等操作，ES中所有节点都是协调节点 在来自于流行病的Gossip协议一文中我们已经知道了Elasticsearch中所有的节点是如何组成为一个集群的，接下来我们了解ES集群中是如何选出master的。 选举的基本原则ES针对当前集群中所有的Master Eligible Node进行选举得到master节点，为了避免出现Split-brain现象，ES选择了分布式系统常见的quorum（多数派）思想，也就是只有获得了超过半数选票的节点才能成为master。在ES中使用 discovery.zen.minimum_master_nodes 属性设置quorum，这个属性一般设置为 eligibleNodesNum / 2 + 1。 如何触发一次选举当满足如下条件是，集群内就会发生一次master选举 当前master eligible节点不是master 当前master eligible节点与其它的节点通信无法发现master 集群中无法连接到master的master eligible节点数量已达到 discovery.zen.minimum_master_nodes 所设定的值 如何选举当某个节点决定要进行一次选举是，它会实现如下操作 寻找clusterStateVersion比自己高的master eligible的节点，向其发送选票 如果clusterStatrVersion一样，则计算自己能找到的master eligible节点（包括自己）中节点id最小的一个节点，向该节点发送选举投票 如果一个节点收到足够多的投票（即 minimum_master_nodes 的设置），并且它也向自己投票了，那么该节点成为master开始发布集群状态 下面我们用一个实际的例子来解释选举流程，假设有node_a和node_b，node_a向node_b发送选票。 如果node_b已经是master，则node_b就把node_a加入集群，之后node_b发布最新的集群状态，此时node_a会被包含在最新的集群状态里面。 如果node_b正在进行选举，则node_b会把这次投票记录下来，之后node_b可能成为master或者继续等待选票。node_a等待node_b发送最新的集群状态或者超时触发下一次投票。 如果node_b认为自己不会成为master，则拒绝这次投票，node_a将触发下一次投票。 其它的选举办法Zookeeper事实上ES可以使用Zookeeper来进行master选举，方法如下 所有master eligible尝试在zk上创建指定路径 只有第一个节点能创建成功，该节点成为master，其余节点watch此路径 一旦zk失去master的连接，该路径被删除，其余master eligible继续尝试创建路径，同样只能有一个节点成功创建并成为master 重复以上步骤 Zookeeper来实现选主可以使得ES内部的选举算法变得非常的简单，至于为什么ES要自己发明一套轮子就不是很清楚了。 RaftES本身的选举算法在早期还是比较粗糙的，这些年来也在不断改进中。Raft算法本身经过严格的论证，是一种非常优秀的一致性算法，至于ES没有选择使用Raft而是自己发明了一套选举算法的原因则很简单，因为ES早期版本的时候Raft算法还没有被提出来，不过我认为随着ES的发展应该会更多的参考这些已经经过严格论证的选举算法。 Raft作为一种分布式一致性协议，其本身不止描述了选举过程，还提供了日志同步与安全性的相关行为的描述。 参考ElasticSearch 内部机制浅析（一）Master ElectionLeader Election, Why Should I Care?Elasticsearch分布式一致性原理剖析(一)-节点篇 √ELASTICSEARCH 选主流程","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://www.nosuchfield.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"一致性算法","slug":"一致性算法","permalink":"https://www.nosuchfield.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/"}]},{"title":"来自于流行病的Gossip协议","slug":"Gossip-protocol-from-epidemics","date":"2019-03-12T11:22:46.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2019/03/12/Gossip-protocol-from-epidemics/","link":"","permalink":"https://www.nosuchfield.com/2019/03/12/Gossip-protocol-from-epidemics/","excerpt":"","text":"Gossip协议本身比较简单，其使用类似于流行病的传播方式，它把信息以一种随机的方式散布到整个网络中，你可以在这里看到Gossip协议的信息散布方式的在线模拟。Gossip协议传播数据的方式分为 Push-based 和 Pull-based 两种，Push-based 方式的工作流程如下 网络中的某个节点随机选取其它n个节点作为传输对象 该节点向其它n个节点传输相应的信息 收到信息的节点重复 1 ~ 2 步的操作 Pull-based 方式则不一样，它的工作流程如下 某个节点s随机选取其它n个节点询问它们是否有最新的信息 收到请求的节点回复节点s告知其最新的信息 Gossip协议收敛性是比较好的，也就是说随着节点的增加，一次数据更新所需要的完整时间的增长率会逐渐降低，最终所需要的时间会趋于平稳，这使得Gossip在海量节点的情况下也能有良好的同步效率。 著名的分布式搜索引擎Elasticsearch就是使用了类似于Gossip的算法来实现节点之间的发现的。所有的节点会根据此协议而相互通信，最终组合起来成为一个完整的整体。 Zen discovery uses a list of seed nodes in order to start off the discovery process. At startup, or when electing a new master, Elasticsearch tries to connect to each seed node in its list, and holds a gossip-like conversation with them to find other nodes and to build a complete picture of the cluster. By default there are two methods for configuring the list of seed nodes: unicast and file-based. It is recommended that the list of seed nodes comprises the list of master-eligible nodes in the cluster. 以上内容出自ES文档Seed nodes。简单来说，ES节点启动时会根据组播或者文件配置的方式来发现一些种子节点，之后该节点与种子节点进行信息传输，而种子节点本身还可能会和一些其它的节点有着数据传输的操作。集群内部经过一段时间的节点间数据同步，集群中的任意一个节点都可以让其它所有的节点都知道自己，因此集群中的任意一个节点都可以得到集群中所有其它的节点的信息，所有的节点此时成为了一个完整的整体。 参考Gossip SimulatorGossip 协议简介","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"一致性协议","slug":"一致性协议","permalink":"https://www.nosuchfield.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/"}]},{"title":"什么是DHT","slug":"What-is-distributed-hash-table","date":"2019-03-02T14:21:04.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2019/03/02/What-is-distributed-hash-table/","link":"","permalink":"https://www.nosuchfield.com/2019/03/02/What-is-distributed-hash-table/","excerpt":"","text":"Distributed hash table (DHT)，中文翻译叫做分布式哈希表。DHT是P2P网络和分布式存储中常见的一种技术，它本质上的思想是把数据（一般是键值对，即Key-Value）根据其哈希值（这里指Key的哈希值）存储到网络上不同的节点中。DHT只是一种指导思想，具体实现还有很多的细节需要考虑，常见的DHT实现有Chord，其中Chord中使用了一致性哈希来实现分布式哈希表，下面我们详细了解一下一致性哈希。 在一个分布式系统中，我们对所有的数值和节点使用相同的哈希函数。我们构建一个线段，左侧代表了哈希函数所能产生的最小值，右侧代表此哈希函数所能生成的最大值。在构建了一个这样的线段之后，我们把线段首尾相连，形成一个圆环，此时该哈希函数的任意结果在该圆环上都能找到一个对应的位置。 例如对于上面这个例子，这个分布式系统中存在三个节点，每个节点的位置通过计算其本身node_id（例如ip+port+process_id）的哈希函数得到，使用相同的哈希函数计算数据的哈希值，把数据保存在一致性哈希环的对应的位置。在哈希环上，从一个节点开始顺时针滑动，直到下一个节点之前的弧度上的所有的数据都保存当前节点之中。除了记录数据之外，每一个节点还需要记录其前一个节点和后一个节点的位置。 一致性哈希的路由最简单的路由方式就是遍历，我们从指定节点开始进行路由，如果当前节点不存在该数据则继续到下一个节点中进行查找，一直到找到该数据或者确定该数据不存在为止。这种方式比较低效，在节点数量较多时查找一次数据可能需要耗费相当长的时间。 解决办法是使用路由表，即当前节点不仅仅存储前后节点的信息，还会存储更多节点的信息，这样在查找时可以更快的路由到指定的节点。关键问题在于存储多少节点的信息比较合适，存储少了查找效率无法得到显著提升，存储多了会占用更多的存储空间且在某个节点新增或删除时需要更多的节点更新其路由表。下面描述了一种比较好的路由表设计方法。 我们首先算得哈希环的比特位长度m（例如哈希环最大值为1000，因为 (29 &#x3D; 512) &lt; 1000 &lt; (210 &#x3D; 1024)，所以我们得到此哈希环的比特位长度m为10），我们定义变量i（0 ≤ i ≤ m - 1），根据变量i得到路由表如下 距离 20 21 22 … 2m-1 节点 node1 node2 node3 … node_n 我们把上表中节点与距离的关系生成一张路由表，通过这张表查找节点的时间复杂度为O(logN)，还是很高效的。 一致性哈希新增节点当有新的节点加入一致性哈希网络的时候，新节点需要与当前网络中的至少一个节点建立联系。此外网络中需要进行如下操作： 新加入的节点根据其哈希值与网络中相应位置上的前后两个节点建立联系，这实质上是一个链表的节点插入操作 将网络中的数据重新分配，把新加入节点在网络中所对应的数据存储到新加节点上 一致性哈希移除节点节点的离开分为正常的离开和异常的离开，正常的离开执行的就是节点加入时的逆操作，即重新分配数据与链表节点删除。 节点异常离开有多种解决方案，比如做节点备份。 虚拟节点考虑到一致性哈希环中节点的状态可能是不完全一样的，例如在实际的网络中有些机器的性能高，可以存储更多的数据并且有更多的吞吐量，有些机器的性能就会比较低，这种现象称为机器的异质性。 我们可以用类似于分片的方式，将一个物理节点拆分为多个虚拟节点，最终我们使用虚拟节点作为一致性哈希环上的节点。高性能的机器可以拥有更多的虚拟节点，存储更多的数据，低性能节点就拥有较少的节点。 参考聊聊分布式散列表（DHT）的原理——以 Kademlia（Kad） 和 Chord 为例大数据日知录","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"分布式系统简介","slug":"Introduction-to-distributed-systems","date":"2019-02-28T15:59:47.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2019/02/28/Introduction-to-distributed-systems/","link":"","permalink":"https://www.nosuchfield.com/2019/02/28/Introduction-to-distributed-systems/","excerpt":"","text":"分布式系统的主要目的在于实现单机所无法实现的数据计算与存储能力，为了实现海量数据的存储以及其可靠性，一般会采用分片和复制两种手段。 关于分布式系统的数据存储的方式大致如下 分片所谓分片就是把原始数据通过一些方式进行分类，再把不同类别的数据存储到不同位置的方式。数据分片可以把整个数据切分并且分到各个机器中去，使得整个系统的横向扩展能力大大增强。 数据分片有哈希分片、范围分片等等方式，根据一定条件确定到指定机器上的指定分片中读写数据的行为称为路由。 复制基本理论CAP（Consistency, Availability, Partition tolerance）理论，即一个分布式系统无法同时满足一致性、可用性和分区容错这三个性质，该理论对设计分布式系统有指导意义。 复制行为最核心的问题是一致性问题，即数据如何在多个节点上保证一致，一致性可以被分为强一致性和弱一致性。 复制策略在进行数据复制时我们也有多种不同的复制策略： 同时更新：所有节点在同一时刻都可以对数据进行更新，这个策略比较简单但是可能会导致数据不一致的问题 主从式更新：把某一个节点设置为主，只有主节点允许更新数据，之后所有的从节点需要从主节点同步更新数据 任意节点更新：任选一个节点进行数据更新，可能因为某个时刻两个不同的节点更新同一条数据，而导致数据不一致的问题。 除此之外，复制还存在着同步复制和异步复制的差异。一般来说同步复制可以有效保证数据的一致性，而异步复制则可以提高系统的同步速度。 一致性协议常见的一致性协议 2PC 向量时钟 RWN协议 Paxos协议 Raft协议 参考大数据日知录分布式系统理论基础 - 选举、多数派和租约Raft算法原理","categories":[],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://www.nosuchfield.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"}]},{"title":"Spark学习笔记","slug":"Spark-study-notes","date":"2019-02-15T16:44:08.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2019/02/15/Spark-study-notes/","link":"","permalink":"https://www.nosuchfield.com/2019/02/15/Spark-study-notes/","excerpt":"","text":"安装SparkSpark的运行依赖JVM，所以你需要一台安装了JVM的机器。 首先从 https://spark.apache.org/downloads.html 下载Spark程序包并解压，解压后的目录如下 ➜ spark-2.3.0-bin-hadoop2.7 ll total 112 -rw-r--r--@ 1 hourui staff 18045 2 23 2018 LICENSE -rw-r--r--@ 1 hourui staff 24913 2 23 2018 NOTICE drwxr-xr-x@ 3 hourui staff 96 2 23 2018 R -rw-r--r--@ 1 hourui staff 3809 2 23 2018 README.md -rw-r--r--@ 1 hourui staff 187 2 23 2018 RELEASE drwxr-xr-x@ 29 hourui staff 928 2 23 2018 bin drwxr-xr-x@ 9 hourui staff 288 2 23 2018 conf drwxr-xr-x@ 5 hourui staff 160 2 23 2018 data drwxr-xr-x@ 4 hourui staff 128 2 23 2018 examples drwxr-xr-x@ 229 hourui staff 7328 2 23 2018 jars drwxr-xr-x@ 3 hourui staff 96 2 23 2018 kubernetes drwxr-xr-x@ 40 hourui staff 1280 2 23 2018 licenses drwxr-xr-x 5 hourui staff 160 2 15 16:40 logs drwxr-xr-x@ 16 hourui staff 512 2 23 2018 python drwxr-xr-x@ 24 hourui staff 768 2 23 2018 sbin drwxr-xr-x 2 hourui staff 64 2 15 16:38 work drwxr-xr-x@ 3 hourui staff 96 2 23 2018 yarn 其中 sbin 文件夹中保存了管理集群相关的脚本，而 bin 文件夹中则保存了Spark任务相关的脚本。Spark的任务支持R、Python、Java和Scala编写，比较常见的是使用Java或Scala。 Spark的启动分为local和集群，而集群又有以下几种创建方式 Standalone Deploy Mode Apache Mesos Hadoop YARN Kubernetes Spark支持Python、Scala和R的shell，同时也支持Python、Scala、R和Java的submit to cluster。 启动和停止Standalone集群Spark中的节点分为master节点和worker节点，worker节点受master节点管理实现高可用，master节点本身可以通过Zookeeper实现高可用。管理Spark集群的相关脚本都在 sbin 文件夹中 启动master节点➜ sbin ./start-master.sh --host 127.0.0.1 starting org.apache.spark.deploy.master.Master, logging to /Users/hourui/spark-2.3.0-bin-hadoop2.7/logs/spark-hourui-org.apache.spark.deploy.master.Master-1-Mac.out 查看master进程状态 ➜ sbin ps -ef | grep spark 501 34593 1 0 5:48下午 ttys000 0:03.98 /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/bin/java -cp /Users/hourui/spark-2.3.0-bin-hadoop2.7/conf/:/Users/hourui/spark-2.3.0-bin-hadoop2.7/jars/* -Xmx1g org.apache.spark.deploy.master.Master --host Mac --port 7077 --webui-port 8080 --host 127.0.0.1 启动worker节点在上面的master进程状态中我们看到了master进程的host是127.0.0.1，port是7077，我们根据master的host和port构建url spark://&lt;host&gt;:&lt;port&gt;，worker以此url作为参数启动。 ➜ sbin ./start-slave.sh spark://127.0.0.1:7077 starting org.apache.spark.deploy.worker.Worker, logging to /Users/hourui/spark-2.3.0-bin-hadoop2.7/logs/spark-hourui-org.apache.spark.deploy.worker.Worker-1-Mac.out 接下来我们使用命令 ps 查看集群的情况 ➜ ps -ef | grep spark 501 34593 1 0 5:48下午 ttys000 0:05.54 /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/bin/java -cp /Users/hourui/spark-2.3.0-bin-hadoop2.7/conf/:/Users/hourui/spark-2.3.0-bin-hadoop2.7/jars/* -Xmx1g org.apache.spark.deploy.master.Master --host Mac --port 7077 --webui-port 8080 --host 127.0.0.1 501 34691 1 0 5:51下午 ttys000 0:05.14 /Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/bin/java -cp /Users/hourui/spark-2.3.0-bin-hadoop2.7/conf/:/Users/hourui/spark-2.3.0-bin-hadoop2.7/jars/* -Xmx1g org.apache.spark.deploy.worker.Worker --webui-port 8081 spark://127.0.0.1:7077 可以看到master和worker进程都正常启动了。此外，master和worker还各自提供了监听在8080和8081端口的webui，我们可以在浏览器中访问http://127.0.0.1:8080/和http://127.0.0.1:8081/观察master和worker的状态。 停止master和worker进程➜ sbin ./stop-slave.sh stopping org.apache.spark.deploy.worker.Worker ➜ sbin ./stop-master.sh stopping org.apache.spark.deploy.master.Master 之后我们再使用 ps 命令就会发现spark进程已经都没有了。 运行 Spark 应用就Scala而言，目前我们有着三种提交任务的方式： 1. 使用shell（这里启动的是Scala的shell，当然 ./pyspark 和 ./sparkR 也能启动Python和R的shell） ./spark-shell --master spark://127.0.0.1:7077 如果不设置master则默认为local模式 2. 直接在代码中设置master为local，之后运行程序，程序会在本地运行 123456789101112object Test &#123; def main(args: Array[String]) &#123; val inputFile = &quot;/Users/hourui/Desktop/test_go.go&quot; val conf = new SparkConf().setAppName(&quot;learn_spark&quot;).setMaster(&quot;local&quot;) val sc = new SparkContext(conf) val textFile = sc.textFile(inputFile) val wordCount = textFile.flatMap(line =&gt; line.split(&quot; &quot;)).map(word =&gt; (word, 1)).reduceByKey((a, b) =&gt; a + b) wordCount.foreach(println) &#125;&#125; 3. 写完代码并打包，之后使用 ./spark-submit 提交程序到Spark集群。 例如对于上面这个程序，我们把其放在maven项目中，项目结构如下： . ├── pom.xml └── src ├── main │ ├── java │ │ └── me │ │ └── hourui │ │ └── Test.scala │ └── resources └── test └── java 我们的代码位于Test.scala，使用命令 mvn clean package 打包，得到文件 learn_spark-1.0-SNAPSHOT.jar。之后使用命令提交任务到集群 ➜ bin ./spark-submit --master spark://127.0.0.1:7077 \\ --deploy-mode cluster \\ --class me.hourui.Test \\ /Users/hourui/IdeaProjects/learn_spark/target/learn_spark-1.0-SNAPSHOT.jar 参考http://chant00.com/2017/07/28/Spark学习笔记/Spark快速大数据分析","categories":[],"tags":[{"name":"大数据","slug":"大数据","permalink":"https://www.nosuchfield.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"分布式计算","slug":"分布式计算","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"},{"name":"Spark","slug":"Spark","permalink":"https://www.nosuchfield.com/tags/Spark/"}]},{"title":"【读书笔记】Distributed systems for fun and profit","slug":"Distributed-systems-for-fun-and-profit-study-notes","date":"2019-01-26T11:28:43.000Z","updated":"2025-08-22T15:42:13.333Z","comments":true,"path":"2019/01/26/Distributed-systems-for-fun-and-profit-study-notes/","link":"","permalink":"https://www.nosuchfield.com/2019/01/26/Distributed-systems-for-fun-and-profit-study-notes/","excerpt":"","text":"本文是 Distributed systems for fun and profit 的读书笔记。 第一章任何计算机系统都需要解决的两个基本问题： 存储 计算 分布式系统的优势： 可扩展性，可以随着规模增长提升系统的计算、存储、网络等等的资源 高性能，包括快速响应时间、高吞吐量和高效的计算机资源的使用 高可用性（容错），考虑到可能发生的错误并且设计相应的的系统或算法来容忍这种错误，你无法为你未考虑到的场景做容错 分布式系统的物理限制： 节点数量 节点之间的距离 分布式系统中常用的设计技巧： 分区（partition） 备份（replicate） 第二章系统模型是对分布式系统的抽象，如何才能构建一个系统模型呢？ 存在的问题： 节点，节点可能发生crash 连接，连接随时都可能发生断开 时序，在分布式系统中由于没有统一的时钟，所以节点之间无法正常的同步（Lamport timestamps） 同步系统模型： 异步系统模型： FLP理论。FLP理论告诉我们，想要设计一个完全正确的分布式系统模型是不可能的。CAP理论。在设计分布式系统的时候，需要参考CAP理论，根据不同的侧重使用不同的设计： 可用性，即需要能够向外提供服务 分区容错性，分布式系统需要分区和容错 数据（强）一致性：多种一致性模型，包括很多强一致性模型和弱一致性模型。 ACID和BASE代表了两种截然相反的设计哲学，它们都是一种分布式系统的设计方式。而Paxos和Raft都是为了解决这个问题而作出的努力，它们都是一种十分具体的设计方式。 第三章：时序（Time and order）问题因为物理时钟无法再使用，我们需要使用逻辑时钟： Lamport clocks（Raft算法中日志同步好像用的就是这种算法？） vector clocks：Lamport clocks的扩展 第四章：复制(强一致性)复制（replication） 同步复制，一旦某个节点出现问题，可能导致整个系统不可用 异步复制，有可能导致数据丢失，或者在多个节点上数据读取结果不一致 复制算法： Primary&#x2F;backup Replication 2PC 3PC Paxos Raft ZAB 第五章：复制（最终一致性）最终一致性 参考https://www.cnblogs.com/bangerlee/p/6216997.html 以下为一些思考或总结的内容为什么要使用分布式系统：如果只有一台负载，存在着问题，无法高可用、高性能、高可扩展性 分布式系统会产生多个节点： 通过节点完整数据复制的方式：不是不可以，而是不够灵活，且数据恢复时浪费带宽 基于分片和备份的方式管理数据（使用何种策略产生分片和备份？副本的管理机制：中心化 || 去中心化？），系统成为分布式的。 分布式会引入几个问题：节点、网络 crash、时序问题，解决这些问题？ 副本协议（使用何种策略拆分和管理副本） 租约机制（lease） 选举机制（quorum）（节点、副本） 日志技术 两阶段、三阶段提交 分布式一致性协议。。。 中心化的选举：直接由master指定某一个副本（或节点）为Primary，通过lease管理，Primary需要不断地告诉master自己还活着去中心化的选举：Raft协议，选举前是去中心化的，选举结束后整个系统是一个中心化的系统，master管理整个系统 如何实现高可用（使用同质的服务）： 主备（fail over）：如果涉及到数据则备机还需要备份同步master的数据 负载均衡（load balance） 传统数据库的扩容：同构系统 大规模存储系统的可扩展性：异构系统（存储节点和负载之间是异构的，其实就是副本的概念，异构系统带来更高的数据同步和扩容效率） 副本数据在备份时，需要保证一定的一致性，即原始数据到备份数据之间的一致性 一些常用的思想： 多数派(quorum)的思路帮助我们在网络分化的情况下达成决议一致性，在leader选举的场景下帮助我们选出唯一leader 租约(lease)在一定期限内给予节点特定权利，也可以用于实现leader选举 参考分布式系统原理介绍 - 刘杰大规模分布式存储系统：原理解析与架构实战 - 杨传辉","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"}]},{"title":"网络延迟与丢包","slug":"Network-delay-and-packet-loss","date":"2019-01-18T11:12:29.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2019/01/18/Network-delay-and-packet-loss/","link":"","permalink":"https://www.nosuchfield.com/2019/01/18/Network-delay-and-packet-loss/","excerpt":"","text":".post-content h1 {font-weight: normal;} 现象最近发现电脑的网络会不时地出现非常卡顿的情况，我在电脑连接上光猫的无线网之后直接ping光猫发现延迟特别高，有时还会出现ping超时的情况。 $ ping 192.168.1.1 Pinging 192.168.1.1 with 32 bytes of data: Reply from 192.168.1.1: bytes=32 time=544ms TTL=64 Reply from 192.168.1.1: bytes=32 time=191ms TTL=64 Reply from 192.168.1.1: bytes=32 time=161ms TTL=64 Reply from 192.168.1.1: bytes=32 time=19ms TTL=64 Ping statistics for 192.168.1.1: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 19ms, Maximum = 544ms, Average = 228ms 我的电脑距离光猫不过5米，并且传输过程也不需要经过其它的设备。按照光的传输速度来计算，即使考虑到设备处理数据所需要的时间，延迟绝对不可能这么高。 原因和解决方案经过V友的指教怀疑是光猫的无线网存在问题。光猫使用的是2.4g的无线网，使用软件检测之后发现当前环境2.4g无线网的干扰十分严重，数据在传输的过程发生了极其严重的丢包现象。根据TCP协议，数据传输过程中的丢包会导致数据包被重传，如果数据包大量的丢失就必然会导致数据被反复重传，整体系统的吞吐量降低，在上层用户看起来就表现为数据传输的延迟很高。 解决办法如下： 购买一个支持5g的路由器 把5g路由器通过网线直接连到光猫的网络接口上 电脑使用支持5g的网卡通过5g无线网连接到新的路由器 使用如上方法就可以成功解决无线网丢包的问题了，本质上是因为目前工作在5g信道的设备极少、干扰小，无线网络在传输时更稳定而不会发生频繁丢包的情况。现在再ping路由器发现延迟变得很低了： $ ping 192.168.0.1 Pinging 192.168.0.1 with 32 bytes of data: Reply from 192.168.0.1: bytes=32 time&lt;1ms TTL=64 Reply from 192.168.0.1: bytes=32 time&lt;1ms TTL=64 Reply from 192.168.0.1: bytes=32 time&lt;1ms TTL=64 Reply from 192.168.0.1: bytes=32 time&lt;1ms TTL=64 Ping statistics for 192.168.0.1: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 0ms, Maximum = 0ms, Average = 0ms 优化前后的拓扑图对比 类似情况同样的现象在守望先锋中也有所体现，守望先锋在游戏界面的左侧有时会出现如下的两个橙色图标 按照网络上面找到的说法 The lightning bolt means that the server has not heard from your client for some period of time and is now extrapolating. The squares mean that you’re experiencing packet loss. 也就是说闪电代表延迟，而三个方块代表着丢包，看来暴雪对于网络状态的检测还是比较细致的。 事实上在守望先锋中你可以通过快捷键 ctrl + shift + r 在左上角显示游戏状态，也可以使用快捷键 ctrl + shift + n 显示网络状态。 解释一般来说在使用网络时，除了网络游戏、直播、语音通话等等这些对实时性要求较高的场景，大部分情况下网络的延迟并不会对我们产生太大的困扰。因为虽然网络延迟较高，但是网络吞吐量基本上不会受到影响，我打开一个网页也就是慢一点嘛，下载文件的速度也丝毫不受到延迟的影响。 但是丢包就不一样了，丢包会导致大量的数据丢失，此时就不仅是TCP数据包的重传所导致网络延迟了，更会导致网络吞吐量降低。如果不考虑服务端的限速，丢包可能导致100m的带宽仅剩几十K的下载速度，十分的影响网络使用体验。 参考https://www.v2ex.com/t/236257","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"TCP","slug":"TCP","permalink":"https://www.nosuchfield.com/tags/TCP/"}]},{"title":"多路复用、非阻塞、线程与协程","slug":"Multiplex-and-non-blocking-and-threading-and-coroutine","date":"2019-01-09T17:17:58.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2019/01/09/Multiplex-and-non-blocking-and-threading-and-coroutine/","link":"","permalink":"https://www.nosuchfield.com/2019/01/09/Multiplex-and-non-blocking-and-threading-and-coroutine/","excerpt":"","text":"线程与阻塞在传统的blockIO中，一个TCP连接的可读事件与用户的实际读取操作是糅合在一起的。用户想要读取数据只需要调用read系统调用，之后当前线程会阻塞在这里直到当前连接的读缓冲区有数据可读，此时操作系统会调度让此线程退出阻塞状态继续执行，在用户态我们就可以实现读取数据的操作了。 此时的读取操作都是阻塞的，不过因为用户直接用一个线程来实现一个连接的读写，当前线程的阻塞并不会对其它的连接产生影响，所以阻塞也无所谓。 后来因为C10k问题，也就是如何让一个操作系统能同时维护10k个连接的问题的提出，传统的blockIO模型已经不能符合人们此时的需求。因为在传统的IO模型中，TCP连接的可读可写事件以及读写操作本身都被实现在READ和WRITE系统调用中，而读写事件本身会阻塞当前线程，这也就导致了我们必须要给每一个读写操作分配一个单独的线程。 因为传统IO需要一个连接对应着一个线程，所以当连接数过多时线程数也很多，现代操作系统在线程过多时运行效率会明显降低，这主要是因为两个原因 操作系统需要为每一个线程存储一些meta信息（包括线程的当前上下文状态等等），当线程数过多时，会对内存造成一定的压力。 操作系统的线程切换操作是十分耗费系统资源的，当线程数过多时，线程切换的频率大大增加，线程切换次数变多会导致整个系统的吞吐量降低，因而会影响用户程序的执行效率。 现代操作系统使用多路复用和非阻塞来解决C10K问题，它们的核心在于细化了对连接的管理方式。以前我们管理连接只能使用READ和WRITE，然后无脑开个线程，让操作系统来帮助我们管理连接的可读可写事件。为了解决这些问题，我们开始需要自己管理连接的读写事件。 首先我们把连接的操作进行拆分，不再像以前那样READ和WRITE一把梭，而是把可读可写和读写操作本身进行拆分。我们之前说过，我们之所以要给每一个连接创建一个线程，是为了能让操作系统帮助我们管理每一个连接的读写事件。 多路复用我们把一个连接的可读可写事件剥离出来，使用单独的线程来对其进行管理，这里的关键点在于此线程不仅可以管理一个线程的可读可写事件，事实上这个线程中我们可以管理多个连接的可读可写事件，这个线程中实现的操作就叫多路复用，多路复用需要操作系统提供相应的syscall才可以使用。 有了多路复用器，连接与线程之间的紧密联系被拆开。不再需要太多的线程，我们可以在仅一个线程中就维护着数百万个连接的读写事件，C10k问题被解决。 非阻塞多路复用解决的是维护大量TCP连接的状态以及它们的可读可写事件的问题，这是我们在连接的可读可写事件上进行的优化，接下来我们需要对连接数据的读写操作本身进行优化。 一般来说，在从多路复用器得到了一个连接可读或者可写的讯息之后，我们就需要对这个连接进行读写操作了。因为多路复用器所在的线程可能会阻塞，所以我们一般会把这些连接的读写操作放到新的线程中。因为读写操作本身也可能导致线程阻塞（例如读取数据的数量还不满足要求），所以此时我们仍然需要为每一个连接的读写操作开辟新的线程（也可以使用线程池），这在读写连接较少的情况下没什么问题，但是在有大量连接都需要进行读写操作时仍然会产生大量的线程，降低系统吞吐量。 解决办法是使用非阻塞IO，即一旦当前连接读缓冲区中的数据已被读完或当前连接的写缓冲区中的数据已满，则READ或WRITE系统调用立即返回，而不是阻塞住当前线程。有了非阻塞IO，我们就可以在一个线程中进行多个连接的读写操作而不用担心某一个连接会导致当前线程阻塞，这样我们就能降低读写操作所需要的线程的数量了。 传统IO 多路复用 非阻塞 读写事件被绑定在读写操作上，读写操作本身是阻塞的 把读写事件剥离出读写操作本身，单个线程可以管理数百万个连接的读写事件，读写操作本身还是阻塞的 读写操作本身是非阻塞的，可以在少量线程中实现大量连接的读写操作 这三种类型的IO模型的使用情况如下图： 协程协程是用户态层面的代码执行管理单元，可以类比操作系统的线程。 类型 线程 协程 被调度时meta数据的存储区域 内核态内存空间 用户态内存空间 切换操作 需要调用操作系统内核提供的syscall 简单的现场保存和恢复即可 调度机制 现代操作系统都是抢占式的，由内核实现 依赖当前协程主动让出（yield）CPU资源 由于多路复用与非阻塞的使用，导致单个连接的状态管理不再像BlockIO时那样的简单，而且因为线程不会阻塞在读写操作、尤其是读操作上，所以此时我们一般使用回调函数的方式来实现读操作。简单来说就是在读取时，如果已经读取的数据还不满足需求，程序就暂时把这些数据读取并保存在用户态的内存中，待数据读取满足要求之后就调用回调函数，通过异步的方式把数据交给相应的处理函数。 异步的问题在于不便于程序员的理解，人类更加习惯于同步的操作行为，异步的操作总是会显得晦涩而又难以理解，这会提升代码的复杂度。 我们可以使用协程对多路复用和非阻塞进行改造来实现同步的IO操作。首先我们在协程中调用我们自己实现的方法 READ0，该方法为阻塞方法，此时该协程被阻塞。在语言内部我们使用多路复用和非阻塞来管理连接和数据，一旦数据满足了要求，我们再次调度到该协程，此时 READ0 方法返回，在用户看来整个 READ0 方法就是同步阻塞的，非常易于程序员的使用。 此外，由于协程的数据都存储在用户态的内存空间且不需要通过syscall即可以调度，所以协程的调度相较于线程是非常轻量级的，事实上在go语言中我们可以开数十万个协程而不会有性能问题，而同样的机器上运行数千个线程就已经很吃力了。 协程和线程不存在相互替代的关系，它们都是对一个指定的逻辑流的抽象，它们之间是互补的关系。协程和线程的发展历史大致如下： 早期一台计算机上面只能执行一个程序 一台机器上只执行一个程序太浪费CPU资源了，我们可以写一个控制程序，当某个程序执行IO时就让出CPU资源交给另一个程序执行，这就是协程的思想 在多任务操作系统中，为了避免某个程序一直霸占CPU资源，抢占式的操作系统被发明，由操作系统内核对CPU的资源进行管理和分配（事实上不仅仅是CPU，现代操作系统实现了对计算机所有的硬件资源的高效的管理） 多核CPU被发明，我们可以直接在操作系统层面支持多核，面向程序员的线程模型无需改变 线程的切换需要内核的帮助，比较耗费系统资源。为了避免大量的使用线程，我们可以在单个进程中模拟早期的调度程序的行为，从而实现多个逻辑流的执行，这就是协程 在操作系统层面，线程实现了抢占式多任务处理以及对多核CPU的支持；在用户层面，协程提供了统一的逻辑流的抽象，并向上提供编程模型。协程和线程之间是互补的关系，它们本质上都只是对一些的状态的维护。 参考https://tiancaiamao.gitbooks.io/go-internals/content/zh/08.1.html","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"Redis failover","slug":"Redis-failover","date":"2018-11-29T11:21:45.000Z","updated":"2025-08-22T15:42:13.346Z","comments":true,"path":"2018/11/29/Redis-failover/","link":"","permalink":"https://www.nosuchfield.com/2018/11/29/Redis-failover/","excerpt":"","text":"下载Redis源码并编译 $ wget http://download.redis.io/releases/redis-2.8.24.tar.gz $ tar -zxvf redis-2.8.24.tar.gz $ cd redis-2.8.24 $ make install 编译结束后我们从 src 文件夹下找到\b可执行文件 redis-server 和 redis-sentinel，redis根目录下的redis.conf和sentinel.conf文件我们接下来也要用到。 主从复制新建文件夹master、slave1、slave2，把redis-server和redis.conf文件复制到这些文件夹下，目录结构如下 . ├── master │ ├── redis-server │ └── redis.conf ├── slave1 │ ├── redis-server │ └── redis.conf └── slave2 ├── redis-server └── redis.conf 分别修改三个redis.conf中的port 配置文件 端口设置 1 master&#x2F;redis.conf 10010 2 slave1&#x2F;redis.conf 10011 3 slave2&#x2F;redis.conf 10012 在所有的 slave 中添加设置，使得slave自动的从master中同步数据 slaveof 127.0.0.1 10010 先启动master中的redis-server，然后分别启动slave1和slave2中的redis-server ./redis-server redis.conf 此时master节点可以读写数据，slave会自动的同步master的数据，slave可读不可写。 master失效选举redis-sentinel 会在master失效时使用raft算法自动把一个slave选举为master以实现failover，redis-sentinel本身也需要设置多个节点来避免单点故障，sentinel之间的通信使用gossip协议。 新建文件夹sentinel1、sentinel2、sentinel3，把redis-sentinel和sentinel.conf文件复制到这些文件夹下，目录结构如下 . ├── sentinel1 │ ├── redis-sentinel │ └── sentinel.conf ├── sentinel2 │ ├── redis-sentinel │ └── sentinel.conf └── sentinel3 ├── redis-sentinel └── sentinel.conf 设置sentinel.conf中的port 配置文件 端口设置 1 sentinel1&#x2F;sentinel.conf 20010 2 sentinel2&#x2F;sentinel.conf 20011 3 sentinel3&#x2F;sentinel.conf 20012 在所有的sentinel.conf中添加设置 # 监控master节点，slave的信息可以从master中获取到 # 2表示需要有两个sentinel认为master挂了才可以触发重新选举 sentinel monitor mymaster 127.0.0.1 10010 2 # 超时检测时间设置为1秒钟 sentinel down-after-milliseconds mymaster 1000 接下来启动sentient ./redis-sentinel sentinel.conf sentinel会自动的组成一个集群，一旦master超过1秒钟没有响应就会把一个slave选举为master。 参考Redis 复制、Sentinel的搭建和原理说明Redis Sentinel安装与部署，实现redis的高可用 pangu.spacingPage()","categories":[],"tags":[{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"程序的编译、链接、装载与运行","slug":"Program-compilation-linking-loading-and-running","date":"2018-11-23T23:34:11.000Z","updated":"2025-08-22T15:42:13.345Z","comments":true,"path":"2018/11/23/Program-compilation-linking-loading-and-running/","link":"","permalink":"https://www.nosuchfield.com/2018/11/23/Program-compilation-linking-loading-and-running/","excerpt":"","text":"在Linux操作系统中，一段C程序从被写下到最终被CPU执行，要经过一段漫长而又复杂的过程。下图展示了这个过程 目录 编译 目标文件的格式 链接 装载 运行 1. 编译编译就是把程序员所写的高级语言代码转化为对应的目标文件的过程。一般来说高级语言的编译要经过预处理、编译和汇编这几个过程。 预处理预编译过程对源代码做了如下的操作 删除所有的注释信息 删除所有的 #define 并展开所有宏定义 插入所有 #include 文件注1的内容到源文件中的对应位置，include过程是递归执行的 … gcc可以使用如下命令对C语言进行预编译并且把预编译的结果输出到hello.i文件中 gcc -E hello.c -o hello.i 编译编译就是对预处理之后的文件进行词法分析、语法分析、语义分析并优化后生成相应的汇编文件。我们使用如下命令来编译预处理之后的文件 gcc -S hello.i -o hello.s 或者我们也可以把预处理和编译合为一步 gcc -S hello.c -o hello.s 汇编汇编的目的是把汇编代码转化为机器指令，因为几乎每一条汇编指令都对应着一条机器指令，所以汇编的过程相对而言非常的简单。我们可以使用如下命令实现汇编 gcc -c hello.s -o hello.o 或者我们也可以直接把源代码文件编译为目标文件 gcc -c hello.c -o hello.o 汇编操作所生成的文件叫做目标文件（Object File），目标文件的结构与可执行文件是一致的，它们之间只存在着一些细微的差异。目标文件是无法被执行的，它还需要经过链接这一步操作，目标文件被链接之后才可以产生可执行文件。 下面我们了解一下目标文件的格式以及链接这一步具体做了哪些工作。 2. 目标文件的格式Linux下的目标文件格式叫做ELF（Executable Linkable Format），ELF的格式如下图所示： ELF header是ELF文件中最重要的一部分，header中保存了如下的内容 ELF的magic number 文件机器字节长度 ELF版本 操作系统平台 硬件平台 程序的入口地址 段表的位置和长度 段的数量 … 从header中我们可以得到很多有用的信息，其中的一个尤其重要，那就是段表的位置和长度，通过这一信息我们可以从ELF文件中获取到段表（Section Hedaer Table），在ELF文件中段表的重要性仅次于header。 段表保存了ELF文件中所有的段的基本属性，包括每个段的段名、段在ELF文件中的偏移、段的长度以及段的读写权限等等，段表决定了整个ELF文件的结构。 既然段表决定了所有的段的属性，那么ELF文件中的段究竟是个什么东西呢？其实段只是对ELF文件内的不同类型的数据的一种分类。例如，我们把所有的代码（指令）放到一个段中，并且给这个段起名.text；把所有的已经初始化的数据放在.data段；把所有的未初始化的数据放在.bss段；把所有的只读数据放在.rodata段，等等。 至于为什么要把数据（指令在ELF文件中也算是一种数据，它是ELF文件的数据之一）分为不同的类型，除了方便进行区分之外，还有以下几个原因 便于给段设置读写权限，有些段只需要设置只读权限即可 方便CPU缓存的生效 有利于节省内存，例如程序有多个副本情况下，此时只需要一份代码段即可 既然分段有着诸多的好处，那么接下来我们就近距离的看一看ELF文件中的段信息。有如下的示例文件 hello.c 12345678910111213141516171819202122int printf(const char *format, ...);int global_init_var = 84;int global_uninit_var;void func1(int i)&#123; printf(&quot;%d\\n&quot;, i);&#125;int main(void)&#123; static int static_var = 85; static int static_var2; int a = 1; int b; func1(static_var + static_var + a + b); return a;&#125; 使用如下命令把源代码编译成目标文件 gcc -c hello.c -o hello.o 接下来我们可以使用objdump命令查看ELF文件的内部结构，-h 表示显示ELF文件的头部信息 objdump -h hello.o 得到结果如下 hello.o: file format elf64-x86-64 Sections: Idx Name Size VMA LMA File off Algn 0 .text 00000055 0000000000000000 0000000000000000 00000040 2**0 CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE 1 .data 00000008 0000000000000000 0000000000000000 00000098 2**2 CONTENTS, ALLOC, LOAD, DATA 2 .bss 00000004 0000000000000000 0000000000000000 000000a0 2**2 ALLOC 3 .rodata 00000004 0000000000000000 0000000000000000 000000a0 2**0 CONTENTS, ALLOC, LOAD, READONLY, DATA 4 .comment 00000036 0000000000000000 0000000000000000 000000a4 2**0 CONTENTS, READONLY 5 .note.GNU-stack 00000000 0000000000000000 0000000000000000 000000da 2**0 CONTENTS, READONLY 6 .eh_frame 00000058 0000000000000000 0000000000000000 000000e0 2**3 CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA 可以看到上面的结果中显示了7个段，每个段都有一些属性信息，下面我们了解一下这些属性的含义 Size：段的大小 VMA：段的虚拟地址，因为目标文件尚未执行链接操作，所以虚拟地址为0 LMA：段被加载的地址，同上原因为0 File off：段在ELF文件中的偏移地址 CONTENTS：表示此段存在于ELF文件中 … 我们重点关注.text、.data、.bss和.rodata这几个段： .text 段保存了程序中的所有指令信息，objdump的-s参数表示将段的内容以十六进制的方式打印出来，而-d参数则会对所有包含指令的段进行反汇编，因此使用如下命令就可以获取代码段的详细信息 objdump -s -d hello.o .data 段保存已初始化的全局变量和局部静态变量 .bass 段保存未初始化的全局变量和局部静态变量注3 .rodata 段保存只读数据，例如字符串常量、被const修饰的变量 ELF还包含了很多其它类型的段，感兴趣的话可以查阅相关资料做进一步的了解。 3. （静态）链接因为现在机器的内存和磁盘空间已经足够大，而动态链接对于内存和磁盘的节省十分有限，所以我们已经可以忽略动态链接带来的在节省使用空间上的优势。相反因为没有了动态链接库的依赖，不需要考虑动态链接库的不同的版本，静态链接的文件可以做到链接即可执行，减少了运维和部署上的复杂度，是非常的方便的，在有些新发明的语言（例如golang）中链接过程默认已经开始使用静态链接。 静态链接过程分为两步 扫描所有的目标文件，获取它们的每个段的长度、位置和属性，并将每个目标文件中的符号表的符号定义和符号引用收集起来放在一个全局符号表中，建立起可执行文件到目标文件的段映射关系 读取目标文件中的段数据，并且解析符号表信息，根据符号表信息进行重定位、调整代码中的地址等操作 我们有如下的a.c和b.c两个源文件 12345678// a.cextern int shared;int main()&#123; int a = 100; swap(&amp;a, &amp;shared);&#125; 1234567// b.cint shared = 1;void swap(int *a, int *b)&#123; *a ^= *b ^= *a ^= *b;&#125; 编译源代码得到目标文件a.o和b.o gcc -c a.c b.c -zexecstack -fno-stack-protector -g 链接a.o和b.o目标文件得到可执行文件 ld a.o b.o -e main -o ab 在ELF文件中有两个叫做重定位表和符号表的段我们之前没有介绍，它们对于链接过程起着及其重要的作用，接下来我们详细了解一下这两个段 重定位表可以简单的认为是编译器把所有需要被重定位的数据存放在重定位表中，这样链接器就能够知道该目标文件中哪些数据是需要被重定位的。 我们可以使用 objdump -r a.o 来获取重定位表的信息 ... RELOCATION RECORDS FOR [.text]: OFFSET TYPE VALUE 0000000000000014 R_X86_64_32 shared 0000000000000021 R_X86_64_PC32 swap-0x0000000000000004 ... 我们也可以使用 readelf -S a.o 命令来详细的了解一个ELF文件 ... [ 1] .text PROGBITS 0000000000000000 00000040 000000000000002c 0000000000000000 AX 0 0 1 [ 2] .rela.text RELA 0000000000000000 00000430 0000000000000030 0000000000000018 I 18 1 8 ... 其中以.rela开头的就是重定位段，上面的.rela.text就存放了需要被重定位的指令的信息，同样的如果是需要被重定位的数据则段名应该叫做.rela.data。 上面的操作都是针对目标文件a.o进行的，我们对目标文件b.o执行以上命令可以发现其既不存在数据段的重定位表，也不存在代码段的重定位表。这是因为b.c中的变量shared和函数swap都已经明确的知道了其地址，所以不需要重定位。 而a.c中则不一样，因为在a.c中变量shared和函数swap都没有定义在当前的文件中，因此编译后产生的目标文件中不存在它们的地址信息，所以编译器需要把它们放在重定位表中，等到链接时再到其它目标文件中找到对应的符号信息之后对其进行重定位。 符号表（.symtab）目标文件中的某些部分是需要在链接的时候被使用到的“粘合剂”，这些部分我们可以把其称之为“符号”，符号就保存在符号表中。符号表中保存的符号很多，其中最重要的就是定义在本目标文件中的可以被其它目标文件引用的符号和在本目标文件中引用的全局符号，这两个符号呈现互补的关系。 使用命令 readelf -s 可以查看符号表的内容 $ readelf -s a.o ... 8: 0000000000000000 79 FUNC GLOBAL DEFAULT 1 main 9: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND shared 10: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND swap ... $ readelf -s b.o ... 8: 0000000000000000 4 OBJECT GLOBAL DEFAULT 2 shared 9: 0000000000000000 75 FUNC GLOBAL DEFAULT 1 swap ... $ readelf -s ab ... 10: 0000000000000000 0 FILE LOCAL DEFAULT ABS a.c 11: 0000000000000000 0 FILE LOCAL DEFAULT ABS b.c 12: 0000000000400114 45 FUNC GLOBAL DEFAULT 1 swap 13: 00000000006001a0 4 OBJECT GLOBAL DEFAULT 3 shared 14: 00000000006001a4 0 NOTYPE GLOBAL DEFAULT 3 __bss_start 15: 00000000004000e8 44 FUNC GLOBAL DEFAULT 1 main 16: 00000000006001a4 0 NOTYPE GLOBAL DEFAULT 3 _edata 17: 00000000006001a8 0 NOTYPE GLOBAL DEFAULT 3 _end ... 第一列是符号表数组中的坐标 第二列是符号值 第三列是size 第四列是符号类型 第五列是绑定信息 最后一列是符号的名称 命令 nm 也可实现对符号的查看操作 $ nm a.o U __stack_chk_fail 0000000000000000 T main U shared U swap $ nm b.o 0000000000000000 D shared 0000000000000000 T swap $ nm ab 00000000006001a4 D __bss_start 00000000006001a4 D _edata 00000000006001a8 D _end 00000000004000e8 T main 00000000006001a0 D shared 0000000000400114 T swap 其中 D 代表该符号是已经初始化的变量，T 表示该符号是指令，U 代表该符号尚未定义。 从上面的结果我们可以看到，链接过程确实是对目标文件的符号做了“粘合”操作。 问：重定位表和符号表之间是什么关系？ 答：它们之间是相互合作的关系，链接器首先要根据重定位表找到该目标文件中需要被重定位的符号，之后再根据符号表去其它的目标文件中找到可以相匹配的符号，最后对本目标文件中的符号进行重定位。 从上面的过程中我们可以看到链接器最终需要完成的工作有三个 合并不同目标文件中的同类型的段 对于目标文件中的符号引用，在其它的目标文件中找到可以引用的符号 对目标文件中的变量地址进行重定位 静态库的链接操作系统一般都附带有一些库文件，Linux最有名的就是libc静态库，其一般位于 /usr/lib/libc.a，libc.a其实是个压缩文件，里面包含了printf.o，scanf.o，malloc.o，read.o等等的库文件。当使用到标准库中的内容时，链接器会对用户目标文件和标准库进行链接，得到最终的可执行文件。 链接过程的控制链接默认情况下生成的是一个ELF文件，这在Linux操作系统上是符合我们的要求的。但是我们有的时候想要其它的目标文件格式，甚至我们有时候想自己写操作系统内核，此时ELF文件的格式就显然不能满足我们的要求了。事实上我们可以通过一些命令行参数或者直接使用配置文件的方式来控制链接的过程以及链接产生的结果，详细内容可以参考命令ld的相关文档，这里不再做介绍。 4. 装载在上一节我们已经通过链接得到了可执行文件，在可执行文件中包含了很多的段（section），但是一旦这些段被加载到内存中之后，我们就不在乎他到底是什么类型的数据，而只在乎这份数据在内存中的读写权限。所以可执行文件被加载到内存中的数据可以分为两类：可读不可写和可读可写。 由于现代操作系统均采用分页的方式来管理内存，所以操作系统只需要读取可执行文件的文件头，之后建立起可执行文件到虚拟内存注5的映射关系，而不需要真正的将程序载入内存。在程序的运行过程中，CPU发现有些内存页在物理内存中并不存在并因此触发缺页异常，此时CPU将控制权限转交给操作系统的异常处理函数，操作系统负责将此内存页的数据从磁盘上读取到物理内存中。数据读取完毕之后，操作系统让CPU jmp到触发了缺页异常的那条指令处继续执行，此时指令执行就不会再有缺页异常了。 忽略物理内存地址以及缺页异常的影响，一旦操作系统创建进程(fork)并载入了可执行文件(exec)，那么虚拟内存的分布应该如下图所示 可以看到在ELF文件中的多个section在内存中被合并为3个segment Segment name Data type 1 BSS segment 保存未初始化的数据 2 Data segment 保存已经初始化的数据 3 Text segment 保存程序的指令 上面的图片中除了三个保存了ELF文件的数据的segment之外，还有如下的几个部分 名称 描述 Kernel space 操作系统的内核空间，保存操作系统内核的数据，用户进程无权访问该地址 Stack（栈） 用于实现程序中的函数调用，在下一节的程序运行中我们会详细了解栈的工作方式 Heap（堆） 为了保存在程序运行时（而非编译时）产生的全局变量注6 Memory Map 磁盘空间到内存的映射，可以像操作内存中的数据一样操作磁盘中的数据 5. 运行开始执行操作系统jmp到进程的第一条指令并不是main方法，而是别的代码。这些代码负责初始化main方法执行所需要的环境并调用main方法执行，运行这些代码的函数被称为入口函数或者入口点（Entry Point）。 一个程序的执行过程如下： 操作系统在创建进程之后，jmp到这个进程的入口函数 入口函数对程序运行环境进行初始化，包括堆、I&#x2F;O、线程、全局变量的构造，等等 入口函数在完成初始化之后，调用main函数，开始执行程序的主体 main函数执行完毕之后返回到入口函数，入口函数进行清理工作，最后通过系统调用结束进程 函数调用栈用于维护函数调用的上下文，函数调用是通过栈完成的。 栈本身是一个容器，它的特性是FILO。通过上面的Linux内存分布图我们可以知道，内存中的栈是向下增长的。在x86中esp寄存器用于保存当前进程的栈顶的地址，push元素到栈中，esp中的值减小；从栈中pop元素，esp中的值增大。 栈为每一个函数调用维护了其所需要的一些信息，为每个函数所维护的信息部分叫做栈帧（Stack Frame），栈被分割为很多个栈帧。每一个栈帧保存了一个函数的如下信息 函数的参数和返回地址 临时变量，包括非静态局部变量和编译生成的其它临时变量 保存的上下文 一个函数被调用时将会有如下操作 把所有的参数压入栈中，有些参数也可以不压栈而通过寄存器进行传递 把当前指令的下一条指令的地址压入栈中 跳转到函数体执行 当一个函数被调用完毕之后，esp减小到上面的步骤2中的数据的位置，从栈中pop该指令地址，jmp到该指令继续执行。 堆（Heap）与内存管理堆是一块巨大的内存，程序可以在堆中申请内存，这些内存在被程序主动放弃之前都可以随意使用。上图中黄色部分的堆我们在这里把它称为传统堆内存，Linux的堆内存由传统堆和Memory Map Segment共同组成。 Linux下的 brk() 和 mmap() 系统调用都可以用于申请堆内存，它们获取堆内存的方式分别如下 brk 是将 program brk 向高地址推，以此来获取新的传统堆内存空间 mmap 是在 Memory Map Segment 中找一块空闲的内存空间 但是我们一般不会直接使用系统调用，而是使用库函数来申请堆内存，我们一般使用glibc中的malloc函数来申请内存，它会根据申请内存的大小的不同而使用不同的实现 如果申请的内存小于128k 首先查看传统堆内存中是否有足够的空闲内存，如果有足够的空闲内存则直接分配给用户程序而不需要经过系统调用 如果传统堆中空闲内存不足则调用 brk 系统调用增大传统堆以获取新的内存分配给用户程序 如果被 free 的内存位于 program brk 处，则调用 brk 系统调用减小堆大小 如果被 free 的内存位于传统堆内部，则库函数记录下被释放空间的位置和大小，之后再有新的内存申请时可以优先的从传统堆的空闲内存中分配空间，而不需要再次调用 brk 系统调用 如果申请的内存大于128k 使用 mmap 系统调用申请内存 mmap 所申请内存的释放使用 munmap 系统调用来实现 系统调用操作系统负责实现对计算机系统资源的管理，用户程序无权直接使用系统资源。用户程序想要使用系统资源就必须调用操作系统所提供的接口，操作系统提供的接口叫做系统调用。 x86 CPU提供了4个特权级，Linux用到了其中的两个特权级，在Linux中分别叫内核态和用户态，内核态的特权级比用户态高。操作系统的内核（上图中最高位的kernel space）运行在内核态，用户程序无权访问内核态的数据，用户程序想要调用内核中的函数就必须要使用系统调用。 x86下使用中断（interrupt）来发送信息给CPU，一旦CPU收到了中断信息，就会停止执行当前任务转而根据中断编号去执行中断处理函数。中断处理函数由操作系统实现，一般来说每个中断编号都有自己的中断处理函数，这些中断处理函数组成了一个中断向量表，中断向量表由操作系统负责实现并管理。中断可以是由硬件产生的，例如键盘按下、鼠标点击等等；中断也可以由软件产生，x86 下 0x80 中断就是由软件触发的，0x80 中断是实现系统调用的核心。 用户程序调用系统调用的过程如下： 用户程序先根据调用惯例注7把中断处理函数所需要的参数保存在指定的寄存器中，例如 eax 寄存器就应该保存系统调用的编号，eax = 1 对应系统调用 exit，eax = 2 对应 fork，等等 参数设置完毕之后，用户程序执行 int 0x80 指令，CPU收到中断信息 CPU将控制权限交给操作系统内核，进程的栈从用户栈切换到内核栈注8 中断向量表中 0x80 号中断的中断处理函数开始执行 中断处理函数从寄存器 eax 中获取到系统调用编号，根据系统调用编号找到指定的系统调用函数 系统调用函数从约定好的寄存器中获取所需参数，系统调用函数根据参数开始执行 系统调用执行完毕后，将系统调用的结果存放在用户程序有权访问的区域（寄存器或内存） 系统调用返回，将控制权重新交给用户程序 用户程序从指定区域获取系统调用的结果，系统调用结束 用户写C语言时并不会手动的调用系统调用，它们一般都被封装在库函数中。例如 printf 函数就是对系统调用 write 的封装，下面我们就手动的调用 write 系统调用来实现向标准输出打印字符的功能。 相较于gcc支持的AT&amp;T和Intel格式的汇编，我更喜欢NASM汇编的语法，下面是使用NASM实现的向标准输出打印字符串的汇编代码 global _start ; _start是一个符号(.symbol)，链接器会把其作为entry point ; 数据段 section .data buffer db &#39;hello, system call&#39;, 10, 0 ; buffer，10是换行符，0是字符串结束 length db 20 ; buffer的长度 ; 代码段 section .text _start: mov eax, 4 ; 4，write系统调用 mov ebx, 1 ; fd（文件描述符），1为标准输出 mov ecx, buffer ; buffer的地址 mov edx, [length] ; 根据地址从数据段获取buffer的长度 int 0x80 ; system call mov eax, 1 ; 1，exit系统调用 mov ebx, 0 ; exit code int 0x80 ; system call 把汇编代码保存为 print.asm 文件，之后执行以下命令执行打印操作 $ nasm -f elf64 print.asm -o print.o $ ld print.o -o print $ ./print hello, system call 总结操作系统和编译器之间联系的非常的紧密，ELF文件就是操作系统和编译器之间的一个纽带。除了操作系统和编译器之间的关系很紧密，操作系统和编译器与CPU和内存的关系也是十分的紧密：操作系统要负责内存的管理，而我们的程序的很大一部分操作也是与内存相关；至于CPU我们不仅要通过中断才能实现系统调用，操作系统本身也需要CPU的特权级来实现对内核的保护。 回顾历史我们就会发现，C语言就是为了Unix而被发明的，它们之间在发展的过程中也不断的互补与完善，这才有了我们今天所看到的联系的十分紧密的类Unix操作系统和C语言编译器。 注： include文件有如下两种语法 #include &lt;filename.h&gt;：编译器会优先到一些默认的文件夹注2中去寻找该头文件，如果未能找到则在当前目录下继续查找 #include &quot;filename.h&quot;：编译器优先在当前目录下查找头文件，找不到再去默认的文件夹中进行查找 一般来说 /usr/include 或 /usr/local/include 会被当做默认文件夹，在gcc中你也可以使用 -I $include_path 来指定被 include 文件的目录 static对于全局变量只影响其可见性（默认其它文件可见，加了static就只有当前文件可见；function也是一样），对于局部变量只影响其保存区域。则我们可以得到如下的规则 未初始化的全局变量：.bss 已初始化的全局变量：.data 未初始化的局部静态变量：.bss 已初始化的局部静态变量：.data 未初始化的局部普通变量：stack 已初始化的局部普通变量：stack 要查看一个可执行文件所引用的动态链接库可以使用命令 ldd 虚拟地址通过MMU的映射转化为物理地址，操作系统负责MMU的初始化，用户进程使用的都是虚拟地址。 如果把内存比作一个旅店，旅店共有100个房间，而操作系统就是旅店的老板。旅店不断地有旅行团来旅店住宿，旅店老板对每一个旅行团都宣称我们有100个房间，其中10个是员工宿舍，所以每个旅行团都有90个房间可以用。 旅行团的成员无法自己找到房间，必须要使用旅店提供的地图才能找到对应的房间，但其实每个旅行团手中的地图都是不一样的，这个地图保证客人绝对不会找到一个已经被别人使用的房间。一旦客人在房间已经睡着了，旅店老板就可能会把这个客人偷偷地运到旅店的一个隐蔽的仓库中去，这样这个房间又被空了出来，旅店老板可以继续把这个房间租给别人。（真是奸商啊） 一旦旅行团中有人开始找某个旅客，但是这个旅客已经被移到了仓库中，旅店老板就会赶紧把这个人从仓库中移回到某个房间中，然后改变地图，让同一个旅行团的人能成功的在房间中找到这个旅客。 为什么要有堆？为了保存程序在运行时产生的全局变量 数据段：只能保存在编译时产生的变量 栈：只能在当前方法内部保存变量 系统调用的调用惯例和函数调用有些类似，但是系统调用使用寄存器而不是栈作为参数传递的载体 因为系统调用本质上也是函数，在x86下既然是函数就需要用到栈。不过系统调用作为内核中的函数，为了防止用户程序访问，不应该使用用户空间的栈。因此我们需要在内核中也建立一个栈，这个栈专门用于系统调用函数的执行。每个进程都有一套栈，即用户栈和内核栈，在系统调用函数执行之前首先需要做用户栈到内核栈的切换，栈的切换很简单，只需要修改esp的值即可。 参考：程序员的自我修养https://github.com/1184893257/simplelinux高级语言的编译：链接及装载过程介绍golang语言编译的二进制可执行文件为什么比 C 语言大Linux内存分配的原理–malloc&#x2F;brk&#x2F;mmap","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Linux","slug":"Linux","permalink":"https://www.nosuchfield.com/tags/Linux/"},{"name":"C语言","slug":"C语言","permalink":"https://www.nosuchfield.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"Python如何存储闭包中的变量","slug":"How-Python-stores-variables-in-closures","date":"2018-11-12T11:27:55.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2018/11/12/How-Python-stores-variables-in-closures/","link":"","permalink":"https://www.nosuchfield.com/2018/11/12/How-Python-stores-variables-in-closures/","excerpt":"","text":"我们知道，在Python中方法内部的局部变量都保存在栈帧中，一旦方法结束栈帧被销毁，则局部变量也一并被销毁。有如下Python程序 12345678910def outer(): x = 2333 y = 666 def inner(): return x + y return innerfunc = outer() 在outer方法被调用时，outer所对应的栈帧在栈上被创建，局部变量x和y的值被保存在栈帧中。当outer方法执行完毕之后，outer的栈帧被销毁，outer栈帧中的局部变量的值也会被销毁。此时局部变量被保存在哪里才能使得接下来函数func被调用时能得到正确的x和y的值呢？ 使用如下代码可以打印outer函数和func函数的字节码 123456import disprint &#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; outer &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#x27;dis.dis(outer)print &#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#x27;dis.dis(func) 在CPython2.7中运行以上程序，得到结果如下 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; outer &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 2 0 LOAD_CONST 1 (2333) 3 STORE_DEREF 0 (x) 3 6 LOAD_CONST 2 (666) 9 STORE_DEREF 1 (y) 5 12 LOAD_CLOSURE 0 (x) 15 LOAD_CLOSURE 1 (y) 18 BUILD_TUPLE 2 21 LOAD_CONST 3 (&lt;code object inner at 0x105100e30, file &quot;&quot;, line 5&gt;) 24 MAKE_CLOSURE 0 27 STORE_FAST 0 (inner) 8 30 LOAD_FAST 0 (inner) 33 RETURN_VALUE &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; func &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 6 0 LOAD_DEREF 0 (x) 3 LOAD_DEREF 1 (y) 6 BINARY_ADD 7 RETURN_VALUE 上面我们需要重点观察的就是 STORE_DEREF 和 LOAD_DEREF 指令 指令 功能 STORE_DEREF 把栈顶元素保存到函数对象的 __closure__ 属性的指定下标中 LOAD_DEREF 根据 index 从函数的 __closure__ 属性中取得变量 由字节码我们知道Python中闭包的变量是被保存在函数对象中的，我们也可以利用如下的代码获取一个函数对象中的所有的闭包变量： 12for param in func.__closure__: print param.cell_contents 打印结果为 2333 666 参考：Python闭包研究Where does Python store the name binding of function closure? Disassembler for Python bytecode","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.nosuchfield.com/tags/Python/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://www.nosuchfield.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"避免在ES中使用深分页","slug":"Avoid-using-deep-paging-in-Elasticsearch","date":"2018-10-31T23:42:02.000Z","updated":"2025-08-22T15:42:13.331Z","comments":true,"path":"2018/10/31/Avoid-using-deep-paging-in-Elasticsearch/","link":"","permalink":"https://www.nosuchfield.com/2018/10/31/Avoid-using-deep-paging-in-Elasticsearch/","excerpt":"","text":"我们先了解一下在ES中数据的检索流程 请求发送到集群中的某一个协调节点（Coordinate node） 协调节点根据集群的meta信息找到此次查询的索引的所有分片信息 对于每一组主分片和备分片，协调节点会从该组中选出一个合适的分片，并对该分片的宿主节点发起查询请求 包含了指定分片的数据节点收到查询请求之后，会根据查询条件对数据进行检索 首先根据search或filter查询要求查询数据，获取到查询结果 如果查询请求中包含了排序的要求，此时根据排序条件对查询结果进行排序 根据from和size对结果进行切割，保留前from+size条数据 将数据返回给协调节点 协调节点取回各个数据节点所返回的数据，对这些数据再进行排序汇总，之后取出from至size的数据集，该数据集就是最终的数据结果 协调节点将数据返回给所查询的客户端 第4步的操作叫做scatter，类比于MapReduce中的map阶段第5步的操作叫做gather，类比于MapReduce中的reduce阶段 数据节点需要对当前查询所对应的分片上的所有的数据进行检索和排序，如果此分片中数据量很大，此时数据节点的查询将会消耗大量的资源。因此如果一个索引的数据越多，该索引的分片也应该越多，这样可以减少索引的每个分片中的数据量。 协调节点会对所有从数据节点中取回的数据进行汇总和排序，协调节点中需要排序的数据等于 (from + size) × shards_num 因为协调节点中的数据量会被分片的数量所放大，因而一旦使用了深分页，协调节点会需要对大量的数据进行排序，影响查询性能。","categories":[],"tags":[{"name":"分布式","slug":"分布式","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"}]},{"title":"用Golang实现四则运算 - 运行篇","slug":"Implementing-four-arithmetic-operations-with-golang-vm","date":"2018-10-22T23:34:28.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2018/10/22/Implementing-four-arithmetic-operations-with-golang-vm/","link":"","permalink":"https://www.nosuchfield.com/2018/10/22/Implementing-four-arithmetic-operations-with-golang-vm/","excerpt":"","text":"虚拟机执行字节码的第一步就是把字节码读入内存。如果你刚刚读完用Golang实现四则运算 - 编译篇，那么你应该还能记得字节码文件的编码方式。虚拟机需要对字节码进行反序列化从而得到指令列表，整个过程就是序列化操作的逆操作。操作过程如下： 虚拟机首先检测MagicNumber是否正确，不正确则拒绝执行 读入4个字节并把其转化为整数，这个整数代表了接下来这个表达式的字节长度 根据表达式的长度读取相应的字节，这部分就是表达式的内容，之后保存到表达式列表中 重复步骤 2 ~ 4 直到所有的字节都读完 经过上面的步骤我们得到表达式的列表，之后我们对每一个表达式进行反序列化： 读取一个字节，这代表了这条指令的类型；若字节已经读取完毕则停止读取 如果是操作指令，保存指令到指令列表，跳转到步骤1 如果是数值指令，读取下一个字节获取数值类型（INT or FLOAT） 读取4个字节，根据数值类型把4个字节转化为数字 把数值指令和数字合并在一起创建为一条指令，把指令保存到指令列表 跳转到步骤1 通过上面的步骤我们得到了指令列表，之后我们开始执行指令，具体的执行过程参见源码，这里我们只是简单的了解一下虚拟机是如何执行指令的。 首先我们创建一个栈，根据指令的不同类型执行不同的操作： 数值指令：将指令中的值压入栈 操作指令：弹出栈顶的两个数值，对两个数执行相应指令的计算行为后将结果重新压入栈 指令执行完毕之后我们就能获取到表达式执行的最终结果了，打印结果，表达式运行结束。所有的表达式运行完毕，虚拟机退出。","categories":[],"tags":[{"name":"Golang","slug":"Golang","permalink":"https://www.nosuchfield.com/tags/Golang/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://www.nosuchfield.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"用Golang实现四则运算 - 编译篇","slug":"Implementing-four-arithmetic-operations-with-golang-compiler","date":"2018-10-22T23:32:35.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2018/10/22/Implementing-four-arithmetic-operations-with-golang-compiler/","link":"","permalink":"https://www.nosuchfield.com/2018/10/22/Implementing-four-arithmetic-operations-with-golang-compiler/","excerpt":"","text":"Yui的编译过程分为以下几个阶段： 预处理 词法分析 语法分析 语义分析 将指令列表序列化为字节码 下面我们详细的了解一下每一个步骤的具体工作 预处理预处理主要完成以下几个工作： 移除源代码中所有的注释信息 获取源代码中所有的define代码，解析出define的key和value并把它们的映射关系保存在内存中 移除所有的define代码 移除所有的停用词 根据之前已经获取到的映射关系，把源代码中所有的被定义关键字替换为其相应的值 从源代码中解析出所有的表达式（多个表达式的情况下每个表达式用 &#123;&#125; 进行包裹） 更多详细的信息可以查看预处理过程的源码进行进一步的了解。同时需要注意的是，预处理过程可能会生成多个表达式，而词法分析、语法分析、语义分析都是只针对单个表达式进行的。 词法分析词法分析比较简单，只需要把表达式解析为token的列表，token包括以下几种类型： ( ) + - * &#x2F; 浮点数 整数 token的解析使用正则表达式而不是手动的创建DFA和NFA，经过词法分析之后原始的字符串被分割为一个token列表，词法分析的源码在这里。 语法分析语法分析的目的是把词法分析所得到的token列表转化为一棵抽象语法树（Abstract Syntax Tree，AST）。例如对于表达式 (1 + 2) * (3 - 4) 由于我们使用的是中缀表达式，所以应该生成一棵如下的AST 这里生成AST的难点在于运算规则的优先级，表达式运算有如下的三个优先级 括号：最高的优先级 乘除法：中等的优先级 加减法：最低的优先级 我们分别使用了不同的方法对应不同的优先级计算，计算加减法的方法在最外层，计算乘除法的方法在中间一层，最内部的方法解析括号内的表达式和负数。通过不断地读入token，这三个方法递归的执行，最终生成一棵AST。语法分析的源码在这里。 语义分析在上一步我们已经得到了一棵AST，在语义分析中我们将遍历这棵树并且生成指令列表。我们使用递归的方式来遍历整棵树，在遍历的过程中我们把访问到的每个节点都创建为一条指令，然后把这条指令添加到指令列表中。 指令分为两类，一类是数值指令，一类是计算指令。所有的叶子节点都是数值指令，所有的内部节点都是计算指令。例如，对于上面那棵语法树，它可以生成如下的指令列表 PUSH 1 PUSH 2 PLUS PUSH 3 PUSH 4 MINUS MULTIPLY 语义分析的源码在这里。 将指令列表序列化为字节码在上一步的语义分析中我们已经得到了最终的指令列表，但是指令本身需要经过序列化才可以进行保存和传输，下面我们看看如何把指令列表进行序列化。 由于在源码中可能有多个表达式，所以最终我们在语法分析结束后，得到的可能是包含多个表达式的指令列表。对于每一个表达式的指令列表，我们使用如下方式进行序列化 首先我们对指令进行编码，每一个指令都使用一个字节进行编码，具体编码如下： PUSH 0x00 PLUS 0x01 MINUS 0x02 MULTIPLY 0x03 DIVIDE 0x04 如果是操作指令，直接把这个指令的编码添加到字节数组中 如果是数值指令，除了把PUSH指令添加到字节数组之外，还要把对应的数值也序列化添加到字节数组中 首先判断数值是整数还是浮点数，在添加数值之前先使用一个字节表示接下来的数值类型（整型或浮点型） 整数和浮点数使用各自的编码方式进行序列化，再把数字序列化的结果添加到字节数组中 针对每一个表达式进行序列化的源码在这里。 在对每一个表达式进行了序列化之后，我们得到了一个字节数组的数组，接下来我们再把所有表达式的序列化结果整合起来 首先我们把MagicNumber放到字节数组的首部 取出一个表达式的序列化值，计算出这个字节数组的长度，然后将这个整型的长度转化为字节数组 把长度的值添加到字节数组中 把表达式本身添加到字节数组中 重复步骤 2 ~ 5 直到所有的表达式处理完毕 通过上面的方式我们生成一个大的字节数组，这就是我们最终生成的结果。 例如我们有两个表达式A和B，它们生成了两个字节数组A1和B1，那么我们可以构建如下的序列化结果 [MagicNumber][A1 Length Byte Array][A1][B1 Length Byte Array][B1] 在经过了上面这些步骤之后，我们最终把源码编译成了字节码。现在只需要把字节码写入到一个文件中，整个编译就完成了。 注：Yui还实现了从字节码到指令的转化过程，这是为了让目标文件中的指令更易读。此操作对应的命令为 dec，源码位于这里。","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"Golang","slug":"Golang","permalink":"https://www.nosuchfield.com/tags/Golang/"}]},{"title":"用Golang实现四则运算","slug":"Implementing-four-arithmetic-operations-with-golang","date":"2018-10-22T23:29:20.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2018/10/22/Implementing-four-arithmetic-operations-with-golang/","link":"","permalink":"https://www.nosuchfield.com/2018/10/22/Implementing-four-arithmetic-operations-with-golang/","excerpt":"","text":"四则运算，即加减乘除，是数学最基本的算术运算。 — 维基百科 在这里我们把四则运算的计算分为以下两步： 把表达式编译为计算指令 虚拟机执行计算指令得到最终结果 项目的地址：https://github.com/RitterHou/yui Yui提供了以下几个功能： 把表达式编译为字节码 执行字节码得到计算结果 直接运行表达式源文件得到计算结果 反编译字节码得到计算指令 打开一个交互式的shell，可以在shell直接键入表达式并立即执行获取计算结果 Yui的源代码支持以下几种语法 最基本的四则运算表达式 如果源文件中有多个运算表达式，那么每一个表达式都需要使用 &#123;&#125; 包裹起来 define 关键字可以用来进行宏定义，define pi 3.14 可以使得在后面需要用到 3.14 的地方使用 pi 关键字进行替代，define 工作在编译期 Yui 的使用方法可以参考如下视频，如果视频无法观看你也可以点击此链接获取墙内视频地址 参考：https://github.com/ykaidong/calchttps://liujiacai.net/blog/2015/10/03/first-toy-scheme/","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"Golang","slug":"Golang","permalink":"https://www.nosuchfield.com/tags/Golang/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://www.nosuchfield.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"第一个汇编器是怎么实现的","slug":"How-was-the-first-assembler-implemented","date":"2018-10-10T01:22:18.000Z","updated":"2025-08-22T15:42:13.340Z","comments":true,"path":"2018/10/10/How-was-the-first-assembler-implemented/","link":"","permalink":"https://www.nosuchfield.com/2018/10/10/How-was-the-first-assembler-implemented/","excerpt":"","text":"需要理解的是，汇编（或者编译）的过程是不一定需要由计算机来完成的。人类设计的最早的电子计算机的计算过程是由电缆的插拔来实现的，后来为了方便操作人们开始使用纸带来实现对计算机的计算过程的抽象，这里纸带上所记录的内容我们就可以理解为机器语言，机器语言本身是机器的指令，可以实现对计算机的直接控制。 一段时间之后，人们觉得直接写机器指令实在是太过于繁琐和低效。所以人们就把机器指令进行总结和分类，把机器指令分为计算、跳转、复制等等的类别，之后给每个分类冠以相应的伪码。这样一来，程序员就不再需要直接手写机器指令，整个编码过程分为如下三步： 用汇编指令（即伪码）书写程序； 人工的把写好的汇编代码翻译成相应的机器指令； 再把机器指令输入到计算机中让计算机执行； 点击这个链接可以看到人们是如何在纸上书写汇编语言的（或者你也可以直接查看文末的图片列表）。 汇编语言极大地提高了程序员的开发速度，因为相比于毫无意义的机器指令，汇编语言更容易让人理解，开发起来也就更加的容易。 人类的需求是没有止境的。一段时间之后，人们觉得每次都是人工的把汇编语言翻译成机器指令，这样既繁琐也容易出错，而且这种翻译本质上是十分机械的工作。所以人们开始尝试用现有的汇编语言写一个汇编器，这个汇编器可以使用计算机来自动的把汇编语言转化为机器语言。 到这里我们就明白了，世界上第一个汇编器并不是由机器指令写的，它本身是由汇编语言写的。在第一个汇编器实现了之后，后面的汇编语言就都可以使用这个汇编器来实现汇编了。需要注意的是，这个汇编器只能支持某一个特定类型的计算机。不论是汇编器本身的执行还是汇编器工作时汇编语言到机器指令的转化，它们都及其依赖于目标机器的指令集。 不过，在之后每当有拥有新的指令集的计算机被设计出来之后，我们可以在已经拥有汇编器的计算机上实现新的指令集计算机的汇编器，新的指令集的编码过程分为如下三步： 设计新指令集的汇编语言，使用该汇编语言书写程序； 在旧的指令集计算机上实现新指令集的汇编器，使用汇编器对汇编语言进行汇编得到机器指令； 在新的指令集计算机上执行机器指令； 当然，即使是新指令集的计算机你也可以像最早的那样手动的去实现一个汇编器，没有任何问题。 到这里我们就发现了，汇编语言的汇编器是独立于计算机的，它的目的在于转化而非执行，而在这里转化的载体是人还是机器或者说是什么样的机器其实并不重要。 顺便说一下，计算机科学本身是来自于数学的，个人认为这主要体现在两个地方： 计算硬件以及相关的计算理论皆来自于数学； 编程语言在设计时很多理论参考了数学中的相关的理论； 但事实上，在编程语言高度抽象的今天，大部分程序员都不再需要关注计算机本身，更不需要关注于数学，更多的程序员打交道最多的其实是“逻辑”。也就是说，程序员的大部分工作其实是把现实世界的一些东西抽象成逻辑并且用计算机语言把它们实现出来，之后把程序交由计算机去执行。 参考：How was the first assembler programmed?History_of_programming_languages第一个计算机语言编程程序是怎么做出来的？1985年程序员是如何写代码的 在纸上书写汇编语言 1 2 3 4 5 6 7","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://www.nosuchfield.com/tags/%E6%9D%82%E8%B0%88/"},{"name":"无用的知识","slug":"无用的知识","permalink":"https://www.nosuchfield.com/tags/%E6%97%A0%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86/"}]},{"title":"用了10年的手机了","slug":"Using-mobile-phones-for-10-years","date":"2018-09-30T20:58:57.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2018/09/30/Using-mobile-phones-for-10-years/","link":"","permalink":"https://www.nosuchfield.com/2018/09/30/Using-mobile-phones-for-10-years/","excerpt":"","text":"我是08年9月份上的高中，上高中之后因为要能和爸妈保持联系，所以长辈就带我去了延安路的一家移动营业厅。我是在国庆节放假的那天下午去办的手机卡，当时是充了300块钱话费送了个海尔的手机。 转眼间10年的时间过去了，我那部海尔的手机也一直用到了高中毕业。高中的时候用手机订阅了一个彩信的服务，每天会发送一个动画或者段子到手机上面，当时觉得特别的有意思。当时的手机是功能机，不过是能上网的，第一次用手机上网的那个月手机话费花了100多。之后办了1个月5块钱30M的流量，就已经足够每个月的使用了。 我在网络上的第一句发言应该就是在贴吧，我记的很清楚是礼拜四下午第一节微机课上我发出的这个帖子。高中的时候喜欢用手机逛贴吧，那时候每天中午休息的时间都会去各个关注的贴吧看看，当时“魔兽世界”吧特别火，到后来是“李毅”吧，当时也是在这上面看到了很多好玩的事情。除了比较大的贴吧，那时候还会去自己高中的贴吧看看，后来玩魔方还会去看看魔方吧，以及一些其它的贴吧。 这部手机一直用到了我高考之后，我是在高考后的第三天换新手机的，至于为什么是第三天那是因为第二天学校举行毕业典礼。之后我去了延安路，然后在那里买了部洛基亚的E66，当时好像是1600多还是1800买的，记不太清了。不过这部手机买回家的第二天就从桌子上面掉下来把屏幕摔坏了，之后我一直到了大一的国庆节的时候才从淘宝上面买了个E66的屏幕自己动手把屏幕给换掉了，这次买屏幕也是我人生中的第一次网购。 Nokia E66 诺基亚倒也没用太久，我在大一下五一的时候买了台4s，这部4s就一直用到了我工作。工作之后不久因为4s只支持2g网络实在太慢了，就用自己微薄的薪资花了600块钱买了台红米手机2，这部手机我一直用了两年多。一直到去年双11的时候因为手机实在是太卡了才换了小米6。 到今天我用手机是整整的十年了，不得不感叹十年光阴忽然而已。这些年来我的生活早已发生了翻天覆地的变化，我也不再是那个习惯在每天中午吃完饭后刷贴吧的少年了。 有的时候总是会想起来一些以前的事情，想起来那些青春的过往。","categories":[],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://www.nosuchfield.com/tags/%E6%9D%82%E8%B0%88/"}]},{"title":"以太网与互联网","slug":"Ethernet-and-the-Internet","date":"2018-08-09T00:04:08.000Z","updated":"2025-08-22T15:42:13.334Z","comments":true,"path":"2018/08/09/Ethernet-and-the-Internet/","link":"","permalink":"https://www.nosuchfield.com/2018/08/09/Ethernet-and-the-Internet/","excerpt":"","text":".post-content h1 {font-weight: normal;} 如果我们把计算机网络按照层级来进行划分，那么大致上可以分为以下几个层级： 应用层 传输层 网络层 数据链路层 物理层 我们一般在了解计算机网络的时候，抛开应用层不谈（因为这一般都会牵扯到各式各样的具体应用），我们主要关注的都是TCP&#x2F;IP协议。正是因为如此，我们可能对应用层、传输层、网络层都能有着较为深入的理解，但是对数据链路层和物理层的工作原理却不太清楚。 我们知道互联网可以被看成一张网，传输层实现的是端到端的数据传输，而网络层实现的则是通过对数据进行不断地路由来最终把数据从某一端传输另一端。可是在互联网上的相邻两个节点之间的数据是如何传输的呢？点到点之间的数据传输是网络层实现数据传输的基础，事实上网络上相邻两个节点之间的数据传输是在数据链路层和物理层实现的。 物理层首先了解物理层，物理层工作在真实世界。在这里，我们可以通过各种各样的方式来进行数据的传输。例如： 对于导线（同轴电缆、双绞线），我们可以通过电压的高低来传输信息。首先发送端改变导线的电压，之后接收端检测导线的当前电压，假设我们规定电压从低变高记为bit 1，电压从高变低记为bit 0，这样我们就可以通过导线传输数据了； 对于光纤，我们可以通过在发送端发送光、接收端检测当前发送端是否开启了光源的方式。如果发送端打开了光源就记为bit 1，如果发送端关闭了光源就记为bit 0； 由于运动的电子会在其周围产生有规律的电磁波，此时我们只需要在电磁波的范围内放置导体，在该导体内就会产生有规律的电流。由于以上原理，我们可以利用电磁波来实现无线的数据传输，以下是两种常见的方式： 调频：通过不断地改变波的频率来发送数据；例如，频率高表示bit 1，频率低表示bit 0； 调幅：通过不断的改变波的振幅来发送数据；例如，波的振幅大表示bit 1，振幅小表示bit 0； 数据链路层以太网以太网（IEEE 802.3）是数据链路层最重要的实现之一，下面是以太网的帧格式 经典的以太网使用CSMA&#x2F;CD协议来实现数据的传输，该协议一般被实现在网卡内部，操作系统内核不需要干预并且无感知。 交换机交换机工作在数据链路层，集线器、路由器通常会被用来与交换机进行比较，需要注意的是集线器工作在物理层，路由器工作在网络层，它们之间的区别可以通过视频来进一步的了解。 无线局域网无线局域网同样是数据链路层的重要实现之一，无线局域网的主要标准是IEEE 802.11，也叫做Wi-Fi。下面是802.11的帧格式： 802.11使用短程的无线电技术，通常工作在2.4GHz或者5GHz频段。802.11使用CSMA&#x2F;CA协议来实现数据的传输，此协议有些类似于CSMA&#x2F;CD但并不完全一样。","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"TCP","slug":"TCP","permalink":"https://www.nosuchfield.com/tags/TCP/"}]},{"title":"TCP协议的流量控制与Linux内核的Scoket缓冲区","slug":"TCP-Flow-Control-And-Linux-Socket-Buffer","date":"2018-08-01T23:19:09.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2018/08/01/TCP-Flow-Control-And-Linux-Socket-Buffer/","link":"","permalink":"https://www.nosuchfield.com/2018/08/01/TCP-Flow-Control-And-Linux-Socket-Buffer/","excerpt":"","text":".post-content h1 {font-weight: normal;} TCP协议为了协调发送端和接受端的数据发送和接收速度，需要实现对流量的控制，这就是TCP协议的流量控制。TCP报文的格式见下表，其中的Window部分叫做接收窗口，TCP的流量控制就是通过它来实现的： 发送端发送的数据的类型考虑到接收端的数据处理速度，发送端不能无节制的发送数据，发送端的数据可以分为以下3种类型： 已发送已确认，数据已经发送给接收端并且接收端已经发送了该数据的ACK 已发送未确认，数据已经发送给接收端但是还未获取到接收端的确认信息 待发送数据，发送端已经准备好可以发送但是还没有发送的数据，这是我们接下来要重点讨论的数据 Linux的读缓冲区和TCP ACK报文中的WindowLiunx在内核中有一个socket的读缓冲区，操作系统的TCP协议栈在接收到数据之后会把数据存放在这里，因为操作系统会为每一个TCP连接维护一个状态机，所以每一个连接都拥有自己的读缓冲区。读缓冲区的大小依据操作系统不同而不同，用户也可以自行设定其大小。假设发送端不断地向接收端发送数据，但是接收端的用户处理程序却没能及时的从读缓冲区中把数据读走，那么读缓冲区的数据就会越来越多。接收端会根据此连接读缓冲区的剩余可用空间来判断接收端还能接受多少数据，公式如下： Window = MaxReadBuffer – ReadedBuffer 根据可接受数据的大小，操作系统会在回复给发送端的ACK报文中通过Window告知发送端接收端自己当前还能接受的数据量。 发送端如何根据TCP ACK报文中的Window控制流量让我们回到发送端，发送端在发送完数据接收到接收端的ACK之后，可以从ACK中得到接收端设定的窗口大小，根据接收端设置的窗口大小，发送端需要计算得到自己还能发送多少数据给接收端。 得到了Window的大小之后，发送端知道自己还能够发送多少数据。最极端的情况下，接收端的用户程序一直没去读取读缓冲区的数据，那么读缓冲区的数据不断增加最终导致接收端的读缓冲区满，此时接收端会在ACK报文中把Window的大小设置为0，发送端在发现接收端的Window为0之后就会停止向接收端发送数据。此时发送端当前连接的写缓冲区就不会再有数据被TCP协议栈取出，如果用户程序仍然在向这个连接发送数据，那么发送端的写缓冲区最终会满，此时write系统调用无法再继续写数据。此时write syscall分为两种情况： write为阻塞：用户程序将被阻塞直到写缓冲区有足够的空间接受当前写入的数据，此时数据被写到写缓冲区内，write方法返回； write为非阻塞：直接报错，告诉用户当前连接不可写； 与上面类似，如果发送端一直没发数据，那么接收端的读缓冲区的数据会不断减少，此时接收端的用户程序在调用read syscall的时候也会分为两种情况： read为阻塞：阻塞直到用户能从内核中读到足够的数据为止； read为非阻塞：直接报错，告诉用户当前连接不可读； 顺便说一下，发送端在发现接收端的窗口为0之后，会每隔一段时间发送一个Zero Window Probe(ZWP)包给接收端，接收端在这个包ACK中告诉发送端当前接收端最新的Window大小，以避免发送端无止境的等待下去。 对于单个连接，我们可以用下图来了解TCP的流量控制与Linux Socket缓冲区之间的关系： 需要注意的是，我们在创建一个TCP连接的时候会有client和server上的概念。但是一旦当TCP连接创建完成，由于TCP是全双工的，所以我们上面所说的发送端和接收端都既可以是客户端也可以是发送端。当客户端发送数据的时候它就是发送端，当客户端接受数据的时候它就是接收端，服务端同理。 滑动窗口与TCP的拥塞控制我们前面讲到了TCP协议的流量控制，流量控制是端到端的，即对发送端和接受端进行控制的操作。TCP协议除了有对链路两端进行协商的流量控制之外，还有对中间链路上的数据包进行控制的拥塞控制。 我们举个例子注1，假设战争时期后方向前线运送粮食。当粮食不断的运向前线，一段时间之后前线来信说前线粮食已经非常多了，不仅将士们吃不完，连粮仓都放不下了，此时后端就要放慢粮食的运送速度或者停止向前线运送粮食，这就是流量控制。 还是运送粮食的例子，假设后方运送到前方的粮食在路上总是被人抢走或者因为天气原因丢失，又或者运送粮食的车过多影响了军队的其它物资的运送，那么后方就要开始考虑减少粮食的运送，这就是拥塞控制。 关于拥塞控制就不多说了，拥塞控制本身还是比较复杂的，也涉及到了很多的算法，有兴趣的可以自行查阅资料了解相关的内容。 注1：例子参考了刘超的相关教程","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://www.nosuchfield.com/tags/Linux/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"TCP","slug":"TCP","permalink":"https://www.nosuchfield.com/tags/TCP/"}]},{"title":"一次CPU100%的排查","slug":"One-CPU-high-load-troubleshooting","date":"2018-07-22T14:22:26.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2018/07/22/One-CPU-high-load-troubleshooting/","link":"","permalink":"https://www.nosuchfield.com/2018/07/22/One-CPU-high-load-troubleshooting/","excerpt":"","text":"今天把最近写的代码放到测试环境去运行，发现在没有连接创建的时候进程CPU的使用率大约在5%，但是一旦创建了网络连接，进程的CPU使用会立即飙升到99%。发现了情况之后，就开始对代码进行排查。 首先在本地先执行一下代码，执行完毕之后sleep10秒钟观察进程的CPU使用状况，结果发现在本地的CPU占用同样达到了99%，那么就可以确定是代码最新的修改所引入的问题了，接下来就需要对新加入的代码进行仔细的排查。 我们先使用Pycharm的Profile选项来运行程序，之后结果显示大量的资源消耗在了sleep方法上，但是这并不能解决我们的问题，因为我们需要除了sleep方法之外的代码检测。之后想到了我们最新的代码中在select模型中加入了fd可写事件的监听，那么有没有可能是因为操作系统的写缓冲区一直处于空余的状态导致fd的可写事件一直能够被触发，因为我还会在fd可写的时候试图执行写操作，这样一来导致程序一直在执行空的写操作，从而导致CPU100%了呢？ 为了验证我的猜想，我停止在select模型中去监控fd的可写事件，取而代之的是在socket需要写数据的时候，立即把数据通过socket.send()方法写到操作系统的缓冲区中。在经过这个修改之后，再次启动进程发现进程的CPU的使用率降到了1.3%，可见我们之前的猜想都是正确的，确实是因为select模型中的可读事件一直能够被触发导致了CPU的高使用率。 至于为什么select模型会一直触发可写事件呢？这是因为select模型默认使用的是水平触发（Level Trigger）模型，所谓的水平触发就是只要现在的fd处于某个符合要求的状态，那么某个事件就会被一直触发。与之相对的是边沿触发（Edge Trigger），边沿触发只会在某个fd发生了某个符合要求的状态的变化的时候才会触发。水平触发和边沿触发是来自于通信领域的专用名词，例如下图： t1时刻电平从低变高，这就是一次边沿触发； t2和t3时刻电平一直处于1，这是水平触发，并且会触发高电平的事件两次； t4同样是一次边沿触发，事件为电平由高变低； … 知道了区别后我们再深入了解下，例如对于可写事件，边沿触发只会在fd从不可写状态变为可写状态的时候才会触发一次事件，而水平触发则是只要现在写缓冲区有空余空间就会被一直的触发。边沿触发是不会导致某个事件被一直触发的，不过因为事件只会被触发一次所以有可能会导致事件被丢失，开发时具体使用哪种模型要依据业务情况来考虑。 参考：https://stackoverflow.com/a/34009083/4614538","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://www.nosuchfield.com/tags/Python/"}]},{"title":"构建合理的ES索引策略","slug":"Building-Reasonable-ES-Indexing-Strategy","date":"2018-05-03T23:17:48.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2018/05/03/Building-Reasonable-ES-Indexing-Strategy/","link":"","permalink":"https://www.nosuchfield.com/2018/05/03/Building-Reasonable-ES-Indexing-Strategy/","excerpt":"","text":"关于索引的大小由于ES在后续的版本中已经不再支持type，所以建议每一个索引中只存放一个type类型的数据，避免在一个索引中创建多个type。 对于拥有大量数据的索引，我们应该对其进行合理的拆分。由于SaaS服务的特殊性，在SaaS服务中每一个用户都是一个独立的个体，而一个用户的所有的数据都必然是属于该用户的。因此我们选择的策略是根据每个客户的编号来计算其hash值，之后我们在命名ES索引的时候会添加上此hash值。例如对于商品数据，我们可以将索引的名字设置为 products-&#123;hashcode&#125;，这样的话根据用户编号计算出来的hash值不同将导致用户数据被存储到不同的索引上，如此一来就可以把本来需要保存在一个索引中的数据拆分到多个索引中。具体需要拆分为多少个索引可以根据不同的hash算法来决定，之后在查询数据的时候同样的根据用户编号计算一次hash值就可以得到索引的真实名称，此时只需要去对应的索引中进行数据查找就可以了。 上面这种方式存在两种问题： 一旦hash算法确定，之后就不能随意更改。假如我们已经把商品数据拆分到10个独立的索引中了，现在我们发现索引压力依旧较大想要增加索引的数量到20个，但是由于我们的hash算法已经固定所以不能直接添加，因为hash算法一旦改变将导致之前已经存储的数据查询出错，此时只能手动的把数据同步到新的索引中了，相当的麻烦； 逻辑上存在关系的数据不应该被拆分到多个索引中，由于我们能够保证一个用户的数据必然被保存在一个指定的索引上，而我们在查询数据的时候必然是根据用户的数据进行查询的，这就使得我们在查询的时候绝对不会出现跨索引查询的情况。如果由于业务上的特点导致无法将数据从逻辑上拆分到多个索引中，这必然会使得在进行数据查询的时候要跨索引，而跨索引的数据查询将必然导致查询操作的复杂化，这是应该被避免的； 索引模板建议在组建ES集群的时候设置一些合理的索引模板（Index Templates），它的好处在于之后每次创建一个新的索引的时候，都能够给这个索引自动的添加上一些合适的 settings 和 mappings 而不需要手动的去设置这些属性。而且由于索引模板支持通配符，所以我们可以更加细致的针对不同类型的索引来设置不同的配置。 除了Index Templates这个全局的配置，我们在创建索引的时候也可以手动的设置一个索引的mapping，需要注意的是mapping本身包含了 properties 和 dynamic template 这两种配置，前一种是手动的为每一个field设置其mapping，而后一个则是根据ES自动推断出来的此field的类型和field的名称来设置这个field的mapping，所以我们知道了一个field的mapping有三种设置方式： 根据mapping中properties来手动设定； ES自动的根据field的值来进行动态类型推断而确定一个field的mapping； dynamic template可以根据字段被自动推断出来的类型和字段名称来决定一个字段的mapping； 顺便说一下一旦一个字段的mapping被确定了之后就不能被更改了，这也是很容易产生bug的地方。除此之外，我们还应该避免使用动态变化的值作为字段的名称，否则将很容易导致Mapping Explosion。 构建ES集群的策略把重要且读写量较大的业务数据放到性能更为强劲的ES集群中，将其余的业务数据放到普通的ES集群中，通过这样的策略可以降低ES集群的压力并且提高系统的稳定性。","categories":[],"tags":[{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://www.nosuchfield.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"架构","slug":"架构","permalink":"https://www.nosuchfield.com/tags/%E6%9E%B6%E6%9E%84/"}]},{"title":"业务数据同步的限流策略","slug":"business-data-synchronize-sla","date":"2018-04-12T20:55:27.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2018/04/12/business-data-synchronize-sla/","link":"","permalink":"https://www.nosuchfield.com/2018/04/12/business-data-synchronize-sla/","excerpt":"","text":"为什么要限流限流的本质目的在于保护系统。一般来说，我们系统地运行状态都是可控的，我们也会给予系统足够的资源让其能够正常稳定的运行。但是在某些特殊的状态下（例如促销、秒杀、或者是系统BUG，我遇到过最多的是第三种情况），系统的压力可能会陡然增加，此时要保证系统能够提供稳定的运行而不至于挂掉就必须使用限流。限流是一种对系统自身的保护措施，保护系统不会因为瞬时的大量请求而崩溃。毕竟相较于系统处理速度放慢或者丢失一些数据而言，系统挂掉这个最糟糕的情况是我们无论如何都不愿意见到的。 实现限流的策略当我们需要把业务数据同步到搜索引擎的时候，我们可以有多种数据同步方案。最简单的一种策略就是直接在搜索引擎中开启一个REST接口，之后业务直接调用该接口即可实现数据的增删改，该方案的主要问题在于HTTP协议是有事务的，简单来说就是一个HTTP请求必然要对应一个HTTP响应，这就导致当搜索引擎实现限流时，前端的请求很有可能会超时，这显然不是我们所愿意看到的。 我们主要使用如下的方案来进行数据同步： 搜索引擎监听MQ中指定的Topic，并且对应此Topic中的msg定义了一系列的操作； 业务线向指定Topic中发送消息，搜索引擎在收到消息后，会把消息直接写到Redis中，等待后续处理； 搜索引擎的SLA会根据限流策略定时的从Redis取消息，之后对消息的内容进行解析； 根据解析的结果来决定操作的类型，如果是删除操作就直接删除该数据； 如果是更新或者新增数据，则搜索引擎根据预先定义好的内容去业务线的接口查询数据，之后把数据保存下来； 从上面可以看到，业务线现在只需要提供变更消息和数据查询接口，并且整个操作变成了异步的，这对实现限流操作是非常有益的。 在上数据同步操作的第三步中，我们根据定好的SLA策略从Redis中取消息，这是实现SLA的根本方法。事实上，我们可以从两个维度来定义不同的SLA： 业务线角度 用户角度 业务线角度来定义SLA的含义是，对于不同的业务线，我们给予不同的策略。例如，一般来说，商品数据的新增速度是远低于订单数据的新增速度的，这也很容易理解，因为一件商品一般都会对应多个订单。由于这个事实，我们可以给予商品数据与订单数据不同的限流策略，让订单数据的限流阈值高于商品数据。 而用户角度来定义SLA的含义则是给予流量大的用户更高的限流阈值。其实这也非常容易理解，某些大客户的日订单数是肯定要大于那些不活跃的用户的，那么此时再让这些用户使用同样的限流策略显然是不合理的。所以，除了业务线我们还可以对不同的用户实现不同的限流策略。 业务线 \\ 用户 大客户 小客户 商品数据 策略A 策略B 订单数据 策略C 策略D 如上面的表格所示，我们可以使用更为细致的SLA策略来保证系统在压力陡增时的稳定性并且不影响用户平时的正常使用。 限流算法考虑到用户操作的实际情况，一般来说用户是有可能在短时间内进行比较多的操作的，但是长时间的大量操作显然是不合理的。基于以上事实（或者是推断），我们可以限制用户在指定时间内的最大操作次数。例如，我们可以限制用户在5s内最多发起40次请求，这40次请求你可以选择在1s内用完也可以4s内用完，但是不论你花了多长时间，一旦你在5s内的请求数达到了40次，那么在5s内接下来的剩余时间里，所有的请求都会被延迟执行。 如果把整个时间轴看成离散的，那么每5s的时间就是一个点。假设我们已经定义好了一个开始时间t1，此时的请求数n为0，后面每次发生请求时我们都会把n+1，并且计算当前时间减去t1的结果t2 t2 &lt; 5 &amp;&amp; n &lt; 40，未达到阈值，系统正常运行； t2 &lt; 5 &amp;&amp; n &#x3D;&#x3D; 40，达到阈值，系统触发限流操作； t2 &gt;&#x3D; 5，进入下一个时间片，t1 &#x3D; 当前时间，n &#x3D; 0； 总结SLA的基本策略比较简单，但是要在系统中用好其实还是不容易的。一般来说好的SLA需要反复调整找到最合适的策略，并且还需要生产环境的检验，所以良好的日志记录是帮助提升SLA能力的关键。只有不断的根据系统的运行情况以及考虑到可能的突发情况，才能设计出一个比较实用的SLA模块。","categories":[],"tags":[{"name":"架构","slug":"架构","permalink":"https://www.nosuchfield.com/tags/%E6%9E%B6%E6%9E%84/"}]},{"title":"一个轻量级Web框架的实现","slug":"Geisha-Tiny-Java-MVC-Framework","date":"2017-11-08T22:15:03.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2017/11/08/Geisha-Tiny-Java-MVC-Framework/","link":"","permalink":"https://www.nosuchfield.com/2017/11/08/Geisha-Tiny-Java-MVC-Framework/","excerpt":"","text":"前言自从1990年蒂莫西·约翰·伯纳斯-李爵士发明了HTTP协议之后，近30年来HTTP服务已经成为了我们生活中必不可缺的一部分，倘若没有它世界也将缺少一分光彩。我们已经知道了HTTP协议是用于沟通HTTP服务器和客户端的一种协议，那么HTTP服务器作为服务的提供方其重要性自然不言而喻。在HTTP协议刚刚诞生不久的年代，HTTP服务器还只能处理静态网页，后来慢慢的出现了动态网页，在1993年CGI技术诞生，它可以被认为是最早期的Web框架之一。后来随着时间的推移，各种Web框架层出不穷，直到今天Web框架已经多的数不胜数，例如SpringMVC、Laravel、Rails和Flask等等。我因为对SpringMVC的注解式代码书写方式以及Spring容器的依赖注入非常好奇，所以便根据Spring的实现来书写了这个框架，故有了这篇文章。 什么是Web框架Web框架出现的目的主要是为了加快开发效率，事实上Web框架可能会在一定程度的降低程序的运行效率，但是我们并不在乎这一部分性能的损失。Web框架本质上还是依赖于HTTP协议，在客户端看来它的响应和我们手动书写的HTTP响应并没有什么不同，不过它可以提升代码的可重用性，还可以提供很多方便数据访问方式。 实现一个类似于SpringMVC的Web需要解决哪些问题我们已经知道了Web框架也需要依赖于HTTP协议，所以我们要做到能够处理HTTP请求并向客户端发回HTTP响应。除此之外，我们还需要实现Java的依赖注入功能，而且因为我们的框架是通过Java的注解做的请求映射，所以我们还需要实现注解的处理并将特定的请求转发指定的处理方法上去。 综上我们需要解决下面这几个问题： 处理HTTP请求并生成HTTP响应； 实现Java的依赖注入功能； 可以根据注解实现请求到方法的映射； HTTP请求的处理我在实现HTTP请求处理的时候使用了两种方式，在使用框架时可以通过配置文件的方式来选择使用哪种服务器 第一种是使用JavaNIO库手动的处理HTTP请求和响应，实现的比较简陋，但是足够完成基本的请求和响应； 使用Jetty这个Web容器来处理HTTP请求和响应，功能更为强大，这也是框架中默认选择的服务器； 两种实现分别对应NioServer.java和JettyServer.java，具体选择哪一个服务的代码如下所示 1234567891011// 获取服务器配置Map&lt;String, Object&gt; config = ConfigUtil.getConfig();String server = (String) config.get(&quot;server&quot;);int port = (Integer) config.get(&quot;port&quot;);// 启动HTTP服务器if (&quot;jetty&quot;.equals(server)) JettyServer.start(port);else if (&quot;nio&quot;.equals(server)) NioServer.start(port);else throw new RuntimeException(&quot;Unknown server type [&quot; + server + &quot;]&quot;); 实现依赖注入依赖注入的目的是让容器来管理JavaBean而不是开发者自己手动来管理，它在一定程度上降低了业务代码的复杂性。我们在Web框架下自己实现了依赖注入的功能，它的原理是通过Java的反射机制来创建用于所需要的Bean。它的核心逻辑如下所示 获取到当前ClassPath下的所有的Class，这一步的核心逻辑是根据文件IO获取到ClassPath下所有的*.class文件，之后做一定处理获取到该class文件的包名以及类名，最后通过 Class.forName() 方法来使用反射创建该类（该部分逻辑位于 java&#x2F;com&#x2F;nosuchfield&#x2F;geisha&#x2F;utils&#x2F;PackageListUtils.java）；1List&lt;Class&gt; classes = PackageListUtils.getAllClass(); 在第一步我们已经获取到了所有的class，在第二步我们扫描所有的class找出加上了 Component 和 Configuration 注解的类，通过反射创建这些类的对象并保存；123456// 扫描类并且创建bean，把bean保存到内存中for (Class clazz : classes) &#123; if (clazz.isAnnotationPresent(Component.class) || clazz.isAnnotationPresent(Configuration.class)) &#123; BeansPool.getInstance().setObject(clazz, clazz.newInstance()); &#125;&#125; 扫描所有加上了 Configuration 注解的类中加上了 Bean 注解的方法，并把该方法返回的对象保存；12345678910111213// 把用户自定义的Bean保存到内存中去for (Class clazz : classes) &#123; if (clazz.isAnnotationPresent(Configuration.class)) &#123; Method[] methods = clazz.getDeclaredMethods(); for (Method method : methods) &#123; if (method.isAnnotationPresent(Bean.class)) &#123; Object classObject = BeansPool.getInstance().getObject(clazz); Object o = method.invoke(classObject); // 获取方法的返回值对象 BeansPool.getInstance().setObject(o.getClass(), o); &#125; &#125; &#125;&#125; 把所有加上了 Resource 注解的变量进行注入；12345678910111213// 把内存中的bean注入到对象中去for (Class clazz : classes) &#123; Field[] fields = clazz.getDeclaredFields(); for (Field field : fields) &#123; if (field.isAnnotationPresent(Resource.class)) &#123; Object classObject = BeansPool.getInstance().getObject(clazz); Object fieldObject = BeansPool.getInstance().getObject(field.getType()); field.setAccessible(true); field.set(classObject, fieldObject); &#125; &#125;&#125; 通过以上这几步我们已经实现了一个简单的依赖注入功能，它可以使用注解来实现对象的创建、管理和注入。 实现HTTP请求映射其实在实现了依赖注入之后，请求的映射也变得很简单了。无非就是在系统启动时对另外一些注解做处理，把注解所代表的请求和指定方法映射起来，并且把这些映射关系保存起来。之后当有请求到来时，查阅请求关系获取到请求对应的处理方法，之后执行方法即可。 系统启动时的映射关系获取如下所示： 12345678910111213141516171819202122232425// 获取到所有的classList&lt;Class&gt; classes = PackageListUtils.getAllClass();for (Class clazz : classes) &#123; String classUrl = null; // 判断当前类是否有 RequestMapping 注解，如果有则获取注解的值 if (clazz.isAnnotationPresent(RequestMapping.class)) &#123; RequestMapping requestMapping = (RequestMapping) clazz.getAnnotation(RequestMapping.class); classUrl = requestMapping.value(); &#125; // 遍历该类的所有的方法 Method[] methods = clazz.getMethods(); for (Method method : methods) &#123; // 如果方法上有 RequestMapping 注解，则把注解的值取出来做处理然后保存到 UrlMappingPool 中 if (method.isAnnotationPresent(RequestMapping.class)) &#123; RequestMapping requestMapping = method.getAnnotation(RequestMapping.class); String methodUrl = requestMapping.value(); RequestMethod requestMethod = requestMapping.method(); // 只看方法上的HTTP METHOD // 把类上的URL和方法上的URL连接起来 methodUrl = classUrl == null ? methodUrl : classUrl + methodUrl; UrlMappingPool.getInstance().setMap(methodUrl, clazz, method, requestMethod); &#125; &#125;&#125; 通过上面的代码我们已经成功的把所有的请求和方法的映射关系保存了起来，之后我们看一看当HTTP请求到来我们是如何做处理的。我们以Jetty服务器为例（NIO的话要稍微复杂一些，因为我们还需要自己解析HTTp请求），看看我们是如何根据请求从 UrlMappingPool 中取出映射关系并处理的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/** * 解析请求并返回响应 */private static void doResponse(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; // 获取请求url String url = request.getRequestURI(); // 获取请求method RequestMethod requestMethod = RequestMethod.getEnum(request.getMethod()); // 从UrlMappingPool中根据请求url和method获取到对应的请求处理方法 MethodDetail methodDetail = UrlMappingPool.getInstance().getMap(url, requestMethod); // 如果找不到对应的匹配规则则返回404 if (methodDetail == null) &#123; response.setStatus(HttpServletResponse.SC_NOT_FOUND); response.getWriter().print(Constants.NOT_FOUND); return; &#125; // 从BeansPool中获取到该处理方法所在的类的对象 Class clazz = methodDetail.getClazz(); Object object = BeansPool.getInstance().getObject(clazz); if (object == null) throw new RuntimeException(&quot;can&#x27;t find bean for &quot; + clazz); // 获取参数并保存到requestParam中 Map&lt;String, String&gt; requestParam = new HashMap&lt;&gt;(); request.getParameterMap().forEach((k, v) -&gt; &#123; requestParam.put(k, v[0]); &#125;); List&lt;String&gt; params = new ArrayList&lt;&gt;(); // 最终的处理方法的参数 Method method = methodDetail.getMethod(); // 获取处理方法的所有的参数 Parameter[] parameters = method.getParameters(); for (Parameter parameter : parameters) &#123; String name = null; // 获取参数上所有的注解 Annotation[] annotations = parameter.getAnnotations(); for (Annotation annotation : annotations) &#123; if (annotation.annotationType() == Param.class) &#123; Param param = (Param) annotation; name = param.value(); break; &#125; &#125; // 如果请求参数中存在这个方法参数就把该值赋给方法参数，否则赋值null params.add(requestParam.getOrDefault(name, null)); &#125; // 调用该方法并获取返回值 Object result = method.invoke(object, params.toArray()); // 写回响应 response.setStatus(HttpServletResponse.SC_OK); response.getWriter().print(result);&#125; 至此一次请求就能够被成功处理了。 后记我实现的这个Web框架还是非常的简单的，大神请轻喷。而且我在实现class获取的时候并没有能够获取到jar包或者war包中的class信息，这也是一个比极大的缺点，以后也许会把该功能完成。 项目源码：https://github.com/RitterHou/Geisha","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"框架","slug":"框架","permalink":"https://www.nosuchfield.com/tags/%E6%A1%86%E6%9E%B6/"},{"name":"Web","slug":"Web","permalink":"https://www.nosuchfield.com/tags/Web/"}]},{"title":"聊聊数据库的索引","slug":"Talk-to-the-index-of-the-database","date":"2017-10-26T21:36:00.000Z","updated":"2025-08-22T15:42:13.348Z","comments":true,"path":"2017/10/26/Talk-to-the-index-of-the-database/","link":"","permalink":"https://www.nosuchfield.com/2017/10/26/Talk-to-the-index-of-the-database/","excerpt":"","text":"什么是索引，为啥要用索引使用索引的目的在于提高数据的访问速度。 假设不使用索引，对于数据库中的数据我们一般只能通过一条条的读取数据然后进行对比，直到找到符合我们要求的数据为止（即顺序查找）。很显然，这样的查找效率是非常低下的。更好的办法是我们构建一张表（这里的表不是指数据库中的表，而是数据结构中的表，可以看成是一种映射关系），这张表保存着某个数据和该数据所对应的整条记录在硬盘上所保存的真正的位置。有了这张表，我们就可以非常快速的找到我们想要查找的数据了。 例如对于上面的这张表映射关系，我们相当于对某张数据库表的 name 字段添加了索引，这样在添加或修改某条记录的时候，我们除了要修改真正的数据本身，还要同时修改这张映射表中的关系。例如我们要添加一条 name 为Feynman的记录，我们先把这条数据保存到硬盘上，然后在映射表中添加一条 name=Feynman 的记录，之后把刚刚数据保存在硬盘的具体位置信息保存到映射表中的这条记录上。 当以后我们要检索 name=Feynman 的数据的时候，因为 name 字段已经加上了索引，所以我们先从映射表中找到所有的 name=Feynman 的记录，之后根据映射表中保存的物理地址信息中去查找真实的数据，之后把真正的记录读取出来即可。 从上面我们可以发现索引本质上就是一张映射表，用来保存被检索字段和真实的数据位置信息的映射关系。索引本质上和书籍的目录是一回事，书籍的目录使用章节信息作为索引，因为章节与页码之间存在着映射关系，所以我们可以通过在目录中查找章节信息从而找到其对应的页码，最终把数据本身给读取出来。 B 树在上一小节中我们已经知道了索引其实就是被检索字段与真实数据位置信息之间的映射关系，那么索引应该怎么保存呢？最基本的办法就是在硬盘上面划一块空间，然后把索引保存进去，之后当我们要用的时候把它从硬盘读到内存里面，我们就可以使用它的映射关系了。 看上去是个不错的方案，不过索引一般其本身可能非常的大，一次性都读到内存中会导致大量的内存的占用，更何况全部读入的索引中有些被检索的字段我们可能根本就不会用到，所以这种方案被pass。我们想起来我们了解的红黑树或AVL树，那么我们可不可以这样：把索引本身以红黑树的形式保存到硬盘中，这样当我们要使用到某一条索引记录的时候就对红黑树执行查找操作。因为我们不会把整个索引读到内存中，与之相对的是只读入红黑树的一些节点，所以内存的占用会大大的降低。 例如对于上面这个例子，我们只需要读入四个节点就完成了检索操作，假设这棵树本身共有20个节点，那么我们使用红黑树构建索引的结构比把整个索引读入内存减少了4&#x2F;5的内存浪费。看起来还不错，我们已经节约了大量的内存，但是不要忘了硬盘的操作速度是很缓慢的，我们每读入一个红黑树的节点就意味着进行一次硬盘的读取操作，如果这个节点离根很远，那么就意味着大量的硬盘读取操作，这会导致索引本身的检索速度非常的慢。 全部读入内存，索引是完整的，但是浪费内存 使用红黑树，按照需要从硬盘中获取索引信息，但是多次读取硬盘效率低下 我们尝试了以上的两种策略，它们都存在着一定的问题，下面我们了解一下B树这种数据结构，它能比较好的解决上面两个策略存在的问题。B-Tree（即B树，那个横杆不是减号的意思，B-Tree写起来是一个整体）的定义如下注1： 为了描述B-Tree，首先定义一条数据记录为一个二元组[key, data]，key为记录的键值，对于不同数据记录，key是互不相同的；data为数据记录除key外的数据。那么B-Tree是满足下列条件的数据结构： d为大于1的一个正整数，称为B-Tree的度。 h为一个正整数，称为B-Tree的高度。 每个非叶子节点由n-1个key和n个指针组成，其中d&lt;&#x3D;n&lt;&#x3D;2d。 每个叶子节点最少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶节点的指针均为null 。 所有叶节点具有相同的深度，等于树高h。 key和指针互相间隔，节点两端是指针。 一个节点中的key从左到右非递减排列。 所有节点组成树结构。 每个指针要么为null，要么指向另外一个节点。 如果某个指针在节点node最左边且不为null，则其指向节点的所有key小于v(key1)v(key1)，其中v(key1)v(key1)为node的第一个key的值。 如果某个指针在节点node最右边且不为null，则其指向节点的所有key大于v(keym)v(keym)，其中v(keym)v(keym)为node的最后一个key的值。 如果某个指针在节点node的左右相邻key分别是keyikeyi和keyi+1keyi+1且不为null，则其指向节点的所有key小于v(keyi+1)v(keyi+1)且大于v(keyi)v(keyi)。 定义看起来很复杂，其实并只要对照下图注2来仔细的观察一下就能很容易的理解了。 B-Tree相较于红黑树的一个特性在于它的高度很低，这意味着从根节点到叶子节点只需要经过很少的路径，使用B-Tree就能够让我们的查找次数降低，同时就会意味着硬盘的读取操作次数减少，减少了硬盘查找这样的耗时操作就能够提高了索引的查找速度。在查找到我们想要的数据位于某个B-Tree的节点之后，我们就把整个节点读入内存，根据局部性原理，当我们使用到一个数据的时候，接下来我们很有可能还会用到这个数据附近的数据，所以如果之后再有数据查找操作，我们可以先对内存中已经存在的数据进行查找，如果没有再去硬盘中进行查找，这样就可以提高查找效率。除此之外，对于已经加载到内存中的数据，我们可以使用我们熟悉的红黑树或AVL进行组织，这样也能一定程度上提高数据的查找速度。 B-Tree还有很多的变种（B+Tree、B*Tree等等），它们都是为了提升某些具体的特性的，这里就不介绍了，感兴趣的朋友可以去了解了解。 InnoDB索引实现InnoDB的索引是用B+Tree实现的，不过它和我们之前说的不太一样的地方在于它的数据本身是存储在B+Tree的叶子节点上面的（也就是说索引和数据是存放在一起的，这种索引叫聚集索引），而这棵树是由这张表的主键来构建的，所以到这里你应该明白为啥InnoDB数据库会强制要求一张表必须包含有主键了，因为没有主键没法构建B+Tree，也就没有办法存储数据了啊╮（╯＿╰）╭。 InnoDB另一个有趣的地方在于它除了主键以外的索引都是指向了主键索引的，也就是说这些索引保存的不是记录的真正的地址，而是保存了该条数据的主键索引的值，查找过程为 索引 -&gt; 主键索引 -&gt; 真正的记录。理解了以上的过程之后对我们使用InnoDB的索引也是有指导意义的，例如使用自增的字段做主键可以保证B+Tree本身不会为了自身的有序性而频繁的改变结构，提高了插入的效率。 索引最左匹配原则我们知道索引可以不加在一个字段而是加在多个字段上面，这种称为联合索引。其实联合索引的工作方式很简单，例如我们利用 name 和 age 两个字段做联合索引，那么我们会先根据 name 字段来创建B+Tree，只有当name字段相等的时候我们则会使用age字段来决定数据插入的位置。这样的结果就是： 我们可以使用 name 和 age 两个字段来进行查找，我们优先使用name字段进行查找，当 name 相等的时候我们就使用age字段查找 我们可以依然可以单独使用 name 字段来进行查找，因为 name 字段本身在索引中就是有序的，所以查找效率依然很高 但是，我们不能单独使用 age 字段来在索引中进行查找，因为 age 字段的有序性是依赖于 name 字段的，从整个索引中来说 age 字段是无序的，所以单独使用 age 字段查找将会进行全表扫描，这是相当低效的 我们举个例子，例如要对某次考试的成绩进行排序，我们排序的第一条规则是总分，当总分相等时我们则会使用语文的分数进一步排序。那么我们想要找总分为350分的学生就很快，因为总分是有序的；我们找总分340分同时语文为150分的学生也很快，只要先找到总分为340分的学生，之后再根据顺序找到语文为150的学生即可；但是单纯查找语文成绩为160分的学生则非常慢，因为语文成绩本身是无序的，所以你必须遍历一遍所有的学生之后把成绩为160分的学生找出来才行，这自然耗时很长。 讲了这些其实就是想说我们在联合索引中因为只有最左边的字段是完全有序的，所以如果我们想只根据联合索引中某单个字段进行查找，那么这个字段只应该是联合索引的最左字段，因为除了最左字段之外的任何字段的查找都将导致全表扫描，效率十分低下。由此你也可以看出，索引最左匹配规则其实只在联合索引中才有意义。 注1：这些定义皆摘取于此篇文章：http://blog.codinglabs.org/articles/theory-of-mysql-index.html注2：图片摘自 http://blog.codinglabs.org/uploads/pictures/theory-of-mysql-index/2.png注3：关于最左匹配规则可以参考 mysql索引最左匹配原则的理解?","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"用Bitmap存储大量数据","slug":"Use-Bitmap-to-store-large-amounts-of-data","date":"2017-10-25T20:21:55.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2017/10/25/Use-Bitmap-to-store-large-amounts-of-data/","link":"","permalink":"https://www.nosuchfield.com/2017/10/25/Use-Bitmap-to-store-large-amounts-of-data/","excerpt":"","text":"Bitmap的核心思想是用元素的值的本身来保存其位置，所以一般要求元素的值不能重复。与之相对应的是一般排序算法没有以上要求，并且一般排序算法使用的是比较排序的策略。 例如我们有list [0, 2, 3, 4, 8, 10, 13, 14, 15, 16, 17, 19, 20, 22, 23]，那么我们只需要24个bit就可以存储这些元素，策略如下： 构建一个长度为24个bit的数组 对所有数字做遍历，把bit 1插入到bit数组中下标与该数字值相等的位置；例如，数字5就应该向bit数组的第5个位置中插入1，插入后结果是 100000 重复上面的操作，直到把所有的数字都插入到bit数组中，此时数字保存完毕、并且此时数组中的数字都是有序的，操作完成 下面我们有一个简单的例子 123456789101112131415161718192021222324252627282930313233343536import java.util.*;public class BitMap &#123; public static void main(String[] args) &#123; List&lt;Integer&gt; list = getList(); System.out.println(list); int s = 0; for (int i : list) &#123; // 把1左移i位的值等于2的i次方 // 之后把该值与s并上等于把该值上所有的1都插入s的对应位置上 s = s | 1 &lt;&lt; i; &#125; StringBuilder sb = new StringBuilder(Integer.toBinaryString(s)); System.out.println(sb.reverse()); // 对二进制做反转操作以方便观察🕵 &#125; /** * 生成随机的list */ private static List&lt;Integer&gt; getList() &#123; Set&lt;Integer&gt; set = new HashSet&lt;&gt;(); while (set.size() &lt; 15) &#123; int i = new Random().nextInt(); if (i &lt; 0) i = -i; i = i % 30; set.add(i); &#125; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); list.addAll(set); return list; &#125;&#125; 我们执行上面的例子得到以下结果 [0, 1, 3, 4, 5, 8, 12, 13, 15, 18, 19, 20, 22, 23, 24] 1101110010001101001110111 第一行是原始的值，第二行是用位图保存的值。我们发现位图的第0位、第1位、第3位、第4位 … 第23位、第24位上的值都为1，对应了这些下标所对应的值的存在，可见我们已经成功的把数字保存到了位图之中。 通过仔细的观察我们发现，在上面的例子中我们用一个int类型的值就可以保存15位大小在0~30之间的数字了，事实上一个int类型的值最多可以保存 4 * 8 = 32 个连续而不重复的数字，按照这样来算即使是1亿个连续而不重复的数字也只需要 100000000 / 32 * 32 / 1024 / 1024 = 94M 即只需要不到95M的内存我们就可以存下这些数字。如果我们不使用位图来保存则需要 100000000 * 4 * 8 / 1024 / 1024 = 3052M 差不多是3个G左右的内存，可见Bitmap对内存的节省还是相当夸张的。","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"Java中的return关键字","slug":"The-return-keyword-in-Java","date":"2017-10-24T20:07:32.000Z","updated":"2025-08-22T15:42:13.348Z","comments":true,"path":"2017/10/24/The-return-keyword-in-Java/","link":"","permalink":"https://www.nosuchfield.com/2017/10/24/The-return-keyword-in-Java/","excerpt":"","text":"关于在Java在异常中使用 return 关键字的情形我在网上搜索的一下，看了一会就感觉有点晕了，感觉大部分讲的不是很好。有一些博客甚至把这个当作一个概念或者特性来进行记忆了，在什么什么情况下该怎么怎么样，完全是靠死记硬背来区分的。 我觉得死记硬背是不对的，所以我就尝试使用反编译字节码来观察指令的方式来观察这个现象，发现问题其实很简单。比如我们先举个例子： 12345678910111213141516171819202122public class Test &#123; public static void main(String[] args) &#123; int j = test(); System.out.println(j); &#125; private static int test() &#123; int i; try &#123; i = 100; return i; &#125; catch (Exception e) &#123; e.printStackTrace(); i = 200; return i; &#125; finally &#123; i = 300; &#125; &#125;&#125; 请问这个例子中最终打印的 test() 方法的返回值 j 的值是多少呢？ 想要知道结果，其实并不需要复杂的人肉去分析整个流程，只需要简单的反编译一下字节码就足够了。 我们先对源码进行编译： javac Test.java 编译得到了 Test.class 文件，我们可以先执行一下看看 java Test 执行的结果是 100，那么这个结果是怎么得到的呢？我们尝试对字节码文件进行反编译 javap -c -private Test 反编译后我们得到如下结果注1 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Compiled from &quot;Test.java&quot;public class Test &#123; public Test(); Code: 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: return public static void main(java.lang.String[]); Code: 0: invokestatic #2 // Method test:()I 3: istore_1 4: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 7: iload_1 8: invokevirtual #4 // Method java/io/PrintStream.println:(I)V 11: return private static int test(); Code: 0: bipush 100 2: istore_0 3: iload_0 4: istore_1 5: sipush 300 8: istore_0 9: iload_1 10: ireturn 11: astore_1 12: aload_1 13: invokevirtual #6 // Method java/lang/Exception.printStackTrace:()V 16: sipush 200 19: istore_0 20: iload_0 21: istore_2 22: sipush 300 25: istore_0 26: iload_2 27: ireturn 28: astore_3 29: sipush 300 32: istore_0 33: aload_3 34: athrow Exception table: from to target type 0 5 11 Class java/lang/Exception 0 5 28 any 11 22 28 any&#125; 反编译得到的信息比较多，很多部分是我们不关心的，我们重点关心 test() 方法内部的执行过程，即第20~27行： 0: bipush 100 2: istore_0 3: iload_0 4: istore_1 5: sipush 300 8: istore_0 9: iload_1 10: ireturn 我们接下来了解下这几句指令做了什么事情： 向操作数栈中压入立即数 100 把操作数栈的栈顶元素弹出并且赋值给局部变量表中的第0个变量 把局部变量表中第0个元素压入栈顶 把栈顶元素弹出并赋值给局部变量表中的第1个变量 向操作数栈中压入立即数300 把栈顶元素赋值给局部变量表的第0个变量 把局部变量表中的第1个元素压入栈顶 从当前方法返回栈顶的int元素 以上指令执行的过程中局部变量和操作数栈的状态如下图所示： 我们重点发现在第4条指令中我们把栈顶元素（即 100）存入了第1个局部变量中，之后在第7条指令中又把第1个局部变量的值压入栈顶，之后立即执行 ireturn 指令把栈顶元素从当前方法返回。从分析中我们可以很清晰的得出返回值就是100的结论，有了指令的描述我们就不再需要看着源代码来猜测方法的运行结果了。 这里的例子是 return 关键字在正常的执行流程中生效的情况，对于 return 在异常或者finally中生效的情况，我们根本无需猜测或者查阅资料，只需要对源代码生成的字节码进行反编译即可。另外两种情况就留给读者自己去练习了，操作方式和和上面的一模一样，只需要仔细观察在执行 ireturn 的时候栈顶元素的值就可以了。 注1：如果对Java指令不熟悉可以参考《深入理解Java虚拟机:JVM高级特性与最佳实践》的附录B，如果没有书的话可以参考此链接：https://segmentfault.com/a/1190000008722128","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"自己构建连接池","slug":"Build-your-own-connection-pool","date":"2017-10-21T00:35:26.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2017/10/21/Build-your-own-connection-pool/","link":"","permalink":"https://www.nosuchfield.com/2017/10/21/Build-your-own-connection-pool/","excerpt":"","text":"使用连接池的目的在于降低因为反复创建连接所带来的时间损耗。我们知道，TCP协议创建连接的过程是比较复杂的，因此反复创建或关闭连接显然不是一个正确的选择，我把我们可以选择连接策略大概分为以下几种情况。 单个线程，单个链接（适用于并发量较小的场合） 多个线程，单个链接（线程在单个连接上同步将导致大量线程被阻塞，影响系统响应速度） 多个线程，多个链接 每个线程创建自己的链接（开销大，速度慢） 使用连接池（√） 正因为连接的创建和销毁都比较耗时，所以使用连接池是一种比较合理的选择，因而接下来的问题就变成了如何创建一个合适的线程池，一般策略是这样的： 在系统初始化的时候创建固定数量的连接 给连接添加一定的缓冲区，当连接数量不够时我们可以优先的把操作请求放入缓冲区中，之后当有连接空闲时就去执行缓冲区中请求 如果连接已经全部在工作并且缓冲区也已经被充满，那么我们可以动态的来创建新的连接（同时增大缓冲区），我们可以使用新创建的连接来处理多于的请求，从而增加系统的灵活性 如果请求进一步增多，连接也不断的被创建直到超过了最大连接数限制，那么此时即使请求更多也不能继续创建连接了，所以此时新的请求只能等待直到有新的资源 当请求数下降时，在运行时被新创建的连接已经进入空闲状态，我们设置一个idle time，当某个连接空闲时间超出这个时间时就会被关闭而减少系统的资源占用 连接数即使被不断减少，最低也不应该小于初始连接数的大小，即系统中应该常驻一定数量的连接数而不论当前请求数如何 我自己实现了一个简单的连接池demo，完整的代码位于 https://github.com/RitterHou/resource-pool首先需要创建一个用于模拟数据库（服务器）的类，它提供了执行一次请求的方法，在这个方法中我们假设每次执行操作都需要100ms。 我们还需要一个连接类，因为创建链接普遍比较耗时，所以我假设创建一个连接需要500ms，并且连接还需要指定一台服务器。连接还需要提供可以执行服务器命令的方法，我还记录了连接最后一次执行命令的时间来帮助记录连接的空闲时间。 有了服务器和连接之后我们就可以创建自己的连接池实现了，连接池的主要策略实现在获取和归还连接的方法中。除此之外，我们还实现了自动执行超时连接关闭的方法。 最后，我们就可以开始测试我们的连接池了。我创建了两个线程，分别使用单个连接和连接池来处理100个请求，观察它们的结果差异，我的运行结果如下： [Thread-1] INFO com.nosuchfield.pool.Application - 单个启动耗时：503 [Thread-2] INFO com.nosuchfield.pool.Application - 连接池启动耗时：5005 [Timer-0] INFO com.nosuchfield.pool.Pool - 5 个连接被移除，还剩 15 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 15 [Thread-2] INFO com.nosuchfield.pool.Application - 连接池执行耗时：3932 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Thread-1] INFO com.nosuchfield.pool.Application - 单个执行耗时：10012 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 0 个连接被移除，还剩 17 [Timer-0] INFO com.nosuchfield.pool.Pool - 7 个连接被移除，还剩 10","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Spring Boot Starters","slug":"Spring-Boot-Starters","date":"2017-10-15T01:07:35.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2017/10/15/Spring-Boot-Starters/","link":"","permalink":"https://www.nosuchfield.com/2017/10/15/Spring-Boot-Starters/","excerpt":"","text":"Spring Boot Starter是在SpringBoot组件中被提出来的一种概念，stackoverflow上面已经有人概括了这个starter是什么东西，想看完整的回答戳这里 Starter POMs are a set of convenient dependency descriptors that you can include in your application. You get a one-stop-shop for all the Spring and related technology that you need, without having to hunt through sample code and copy paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access, just include the spring-boot-starter-data-jpa dependency in your project, and you are good to go. 大概意思就是说starter是一种对依赖的synthesize（合成），这是什么意思呢？我可以举个例子来说明。 传统的做法在没有starter之前，假如我想要在Spring中使用jpa，那我可能需要做以下操作： 在Maven中引入使用的数据库的依赖（即JDBC的jar） 引入jpa的依赖 在xxx.xml中配置一些属性信息 反复的调试直到可以正常运行 需要注意的是，这里操作在我们每次新建一个需要用到jpa的项目的时候都需要重复的做一次。也许你在第一次自己建立项目的时候是在Google上自己搜索了一番，花了半天时间解决掉了各种奇怪的问题之后，jpa终于能正常运行了。有些有经验的人会在OneNote上面把这次建立项目的过程给记录下来，包括操作的步骤以及需要用到的配置文件的内容，在下一次再创建jpa项目的时候，就不需要再次去Google了，只需要照着笔记来，之后再把所有的配置文件copy&amp;paste就可以了。 像上面这样的操作也不算不行，事实上我们在没有starter之前都是这么干的，但是这样做有几个问题： 如果过程比较繁琐，这样一步步操作会增加出错的可能性 不停地copy&amp;paste不符合Don’t repeat yourself精神 在第一次配置的时候（尤其如果开发者比较小白），需要花费掉大量的时间 使用Spring Boot Starter提升效率starter的主要目的就是为了解决上面的这些问题。 starter的理念：starter会把所有用到的依赖都给包含进来，避免了开发者自己去引入依赖所带来的麻烦。需要注意的是不同的starter是为了解决不同的依赖，所以它们内部的实现可能会有很大的差异，例如jpa的starter和Redis的starter可能实现就不一样，这是因为starter的本质在于synthesize，这是一层在逻辑层面的抽象，也许这种理念有点类似于Docker，因为它们都是在做一个“包装”的操作，如果你知道Docker是为了解决什么问题的，也许你可以用Docker和starter做一个类比。 starter的实现：虽然不同的starter实现起来各有差异，但是他们基本上都会使用到两个相同的内容：ConfigurationProperties和AutoConfiguration。因为Spring Boot坚信“约定大于配置”这一理念，所以我们使用ConfigurationProperties来保存我们的配置，并且这些配置都可以有一个默认值，即在我们没有主动覆写原始配置的情况下，默认值就会生效，这在很多情况下是非常有用的。除此之外，starter的ConfigurationProperties还使得所有的配置属性被聚集到一个文件中（一般在resources目录下的application.properties），这样我们就告别了Spring项目中XML地狱。 starter的整体逻辑： 上面的starter依赖的jar和我们自己手动配置的时候依赖的jar并没有什么不同，所以我们可以认为starter其实是把这一些繁琐的配置操作交给了自己，而把简单交给了用户。除了帮助用户去除了繁琐的构建操作，在“约定大于配置”的理念下，ConfigurationProperties还帮助用户减少了无谓的配置操作。并且因为 application.properties 文件的存在，即使需要自定义配置，所有的配置也只需要在一个文件中进行，使用起来非常方便。 了解了starter其实就是帮助用户简化了配置的操作之后，要理解starter和被配置了starter的组件之间并不是竞争关系，而是辅助关系，即我们可以给一个组件创建一个starter来让最终用户在使用这个组件的时候更加的简单方便。基于这种理念，我们可以给任意一个现有的组件创建一个starter来让别人在使用这个组件的时候更加的简单方便，事实上Spring Boot团队已经帮助现有大部分的流行的组件创建好了它们的starter，你可以在这里查看这些starter的列表。 创建自己的Spring Boot Starter如果你想要自己创建一个starter，那么基本上包含以下几步0. 创建一个starter项目，关于项目的命名你可以参考这里 创建一个ConfigurationProperties用于保存你的配置信息（如果你的项目不使用配置信息则可以跳过这一步，不过这种情况非常少见） 创建一个AutoConfiguration，引用定义好的配置信息；在AutoConfiguration中实现所有starter应该完成的操作，并且把这个类加入spring.factories配置文件中进行声明 打包项目，之后在一个SpringBoot项目中引入该项目依赖，然后就可以使用该starter了 我们来看一个例子（例子的完整代码位于https://github.com/RitterHou/learn-spring-boot-starter） 首先新建一个Maven项目，设置 pom.xml 文件如下： 12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;http-starter&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;!-- 自定义starter都应该继承自该依赖 --&gt; &lt;!-- 如果自定义starter本身需要继承其它的依赖，可以参考 https://stackoverflow.com/a/21318359 解决 --&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starters&lt;/artifactId&gt; &lt;version&gt;1.5.2.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;!-- 自定义starter依赖此jar包 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- lombok用于自动生成get、set方法 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.10&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 创建proterties类来保存配置信息： 123456789@ConfigurationProperties(prefix = &quot;http&quot;) // 自动获取配置文件中前缀为http的属性，把值传入对象参数@Setter@Getterpublic class HttpProperties &#123; // 如果配置文件中配置了http.url属性，则该默认属性会被覆盖 private String url = &quot;http://www.baidu.com/&quot;;&#125; 上面这个类就是定义了一个属性，其默认值是 http://www.baidu.com/，我们可以通过在 application.properties 中添加配置 http.url=https://www.zhihu.com 来覆盖参数的值。 创建业务类： 12345678910111213141516171819202122232425@Setter@Getterpublic class HttpClient &#123; private String url; // 根据url获取网页数据 public String getHtml() &#123; try &#123; URL url = new URL(this.url); URLConnection urlConnection = url.openConnection(); BufferedReader br = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(), &quot;utf-8&quot;)); String line = null; StringBuilder sb = new StringBuilder(); while ((line = br.readLine()) != null) &#123; sb.append(line).append(&quot;\\n&quot;); &#125; return sb.toString(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return &quot;error&quot;; &#125;&#125; 这个业务类的操作非常简单，只包含了一个 url 属性和一个 getHtml 方法，用于获取一个网页的HTML数据，读者看看就懂了。 创建AutoConfiguration 12345678910111213141516171819@Configuration@EnableConfigurationProperties(HttpProperties.class)public class HttpAutoConfiguration &#123; @Resource private HttpProperties properties; // 使用配置 // 在Spring上下文中创建一个对象 @Bean @ConditionalOnMissingBean public HttpClient init() &#123; HttpClient client = new HttpClient(); String url = properties.getUrl(); client.setUrl(url); return client; &#125;&#125; 在上面的AutoConfiguration中我们实现了自己要求：在Spring的上下文中创建了一个HttpClient类的bean，并且我们把properties中的一个参数赋给了该bean。关于@ConditionalOnMissingBean 这个注解，它的意思是在该bean不存在的情况下此方法才会执行，这个相当于开关的角色，更多关于开关系列的注解可以参考这里。 最后，我们在 resources 文件夹下新建目录 META-INF，在目录中新建 spring.factories 文件，并且在 spring.factories 中配置AutoConfiguration： org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ com.nosuchfield.httpstarter.HttpAutoConfiguration 到此，我们的starter已经创建完毕了，使用Maven打包该项目。之后创建一个SpringBoot项目，在项目中添加我们之前打包的starter作为依赖，然后使用SringBoot来运行我们的starter，代码如下： 1234567891011@Componentpublic class RunIt &#123; @Resource private HttpClient httpClient; public void hello() &#123; System.out.println(httpClient.getHtml()); &#125;&#125; 正常情况下此方法的执行会打印出url http://www.baidu.com/ 的HTML内容，之后我们在application.properties中加入配置： http.url=https://www.zhihu.com/ 再次运行程序，此时打印的结果应该是知乎首页的HTML了，证明properties中的数据确实被覆盖了。","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"},{"name":"Spring","slug":"Spring","permalink":"https://www.nosuchfield.com/tags/Spring/"}]},{"title":"async and await","slug":"async-and-await","date":"2017-09-16T08:50:02.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2017/09/16/async-and-await/","link":"","permalink":"https://www.nosuchfield.com/2017/09/16/async-and-await/","excerpt":"","text":"为了帮助你了解一下历史的进程，我画了如下图来解释我们为啥要async和await 简介async和await是为了简化Promise模式而被提出来的一种解决方案，所以为了学习async和await我们需要先明白Promise模式是啥。 Promise模式的提出是为了替代JS中本身的回调语法，那么为啥要替代回调语法呢？我们知道，JS一般的实现都是单线程的，所以我们都使用回调函数来进行操作的同步。但是，回调函数写起来实在是太丑了，一段使用回调函数的代码可能是这样的（出自http://callbackhell.com/）： 因为写起来太难看了，而且理解起来也很不方便，所以人们就开始想办法解决回调函数的问题。此时，Promise模式被提出来了，要知道Promise模式是怎么替代回调函数的，参考如下代码： 最基本的回调函数方式 12345678var fs = require(&quot;fs&quot;)fs.readFile(&#x27;input.txt&#x27;, function (err, data) &#123; if (err) &#123; console.error(err) &#125; console.log(&quot;read data:&quot;, data.toString());&#125;) 改写为Promise模式 12345678910111213141516171819202122var fs = require(&quot;fs&quot;)var readFile = function (file) &#123; // 定义一个Promise对象 // 参数是一个方法，方法需要两个参数 return new Promise(function (resolve, reject) &#123; fs.readFile(file, function (err, data) &#123; if (err) &#123; reject(err) // 错误时执行reject方法 &#125; resolve(data) // 执行resolve方法 &#125;); &#125;)&#125;// 获取Promise对象并且执行then方法// then方法需要两个方法作为参数readFile(&#x27;input.txt&#x27;).then(data =&gt; &#123; // resolve 方法 console.log(&quot;promise read data:&quot;, data.toString())&#125;, err =&gt; &#123; // reject 方法 console.error(err)&#125;) Promise模式Promise类在nodejs中已经为我们构建好了（主流浏览器应该也都实现了这个类），所以我们可以直接使用。Promise的构造方法入参是一个方法，这个方法传入两个参数：resolve和reject。根据约定，当程序执行正常，方法resolve被执行；当程序出现异常，方法reject被执行。方法的执行条件已经定义完毕，下面就是方法体的定义了。方法readFile(&#39;input.txt&#39;)返回一个Promise对象，我们调用其 then 方法，这个方法传入两个方法。根据约定，第一个方法是为resolve方法的方法体，第二个方法是为reject方法的方法体。 也就是说，then 方法中的两个参数分别就是和Promise中传入的方法的两个参数相对应的。上面的resolve方法执行了，执行的就是then方法中的resolve方法方法体（参数也被正确的传递）；上面的reject执行了，执行的就是下面reject方法方法体。 async and await我们发现，Promise虽然在执行时避免了回调地狱，但是写这个 then 方法还是挺丑的，我们想要去掉这个 then。因此，async和await就出现了，它们的目的是___当调用___Promise对象的方法时候，能够简化操作。我们还是使用上面例子中的Promise对象的定义方式，而使用async和await来替代之前的Promise方法的执行方式，代码如下： 123456789101112131415161718192021222324var fs = require(&quot;fs&quot;)var readFile = function (file) &#123; // 定义一个Promise对象 // 参数是一个方法，方法需要两个参数 return new Promise(function (resolve, reject) &#123; fs.readFile(file, function (err, data) &#123; if (err) &#123; reject(err) // 错误时执行reject方法 &#125; resolve(data) // 执行resolve方法 &#125;); &#125;)&#125;var test = async (file) =&gt; &#123; try &#123; var data = await readFile(file) // 这里把resolve的入参返回给data console.log(&#x27;async and await:&#x27;, data.toString()) &#125; catch (err) &#123; console.error(err) &#125;&#125;test(&#x27;input.txt&#x27;) 我们定义了一个async方法，在方法内使用await关键字修饰了一个Promise对象，这个修饰符将会把resolve对象执行时的入参返回，我们用data变量接受这个参数。仔细想想，我们的核心目的不就是接受到resolve方法和reject方法的参数吗？因为方法体其实都是我们自己定义的，如此一来拿到了resolve方法的入参，我们就可以用这个参数执行我们想要的操作了；同样的，根据约定，在async方法中reject方法一旦执行就会触发异常，所以我们用 try catch 包裹了代码快，catch的参数就是reject方法执行时候的入参。 仔细观察上面的代码，这样一来代码就非常的整洁且容易理解了。虽然我们增加了一个Promise对象定义的操作，但这个增加是值得的，因为我们大大的提高了代码的可读性。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.nosuchfield.com/tags/JavaScript/"}]},{"title":"【译】用Java实现线程池","slug":"How-to-implement-Thread-pool-in-Java","date":"2017-08-28T22:09:43.000Z","updated":"2025-08-22T15:42:13.340Z","comments":true,"path":"2017/08/28/How-to-implement-Thread-pool-in-Java/","link":"","permalink":"https://www.nosuchfield.com/2017/08/28/How-to-implement-Thread-pool-in-Java/","excerpt":"","text":"原文地址：https://www.javacodegeeks.com/2016/12/implement-thread-pool-java.html 在程序执行的时候，每一个线程都是独立执行的。Java中的每一个线程都继承了java.lang.Thread类或者实现了java.lang.Runnable接口。 多线程意味着在一个任务中有两个或多个线程在执行。在多线程环境中，每个任务都可能同时有很多并发线程正在同步或异步的执行。你可以在这里看到我写的另一篇关于线程和多线程的教程。 1. 什么是线程池线程池包含了一组可以用来执行任务的线程，池中的每一个线程都可以被反复使用。当所有的线程都在运行的时候，如果此时有一个任务被提交了，那么此任务会进入一个等待队列，一直到线程组中某一个线程的当前任务执行完毕，此时该线程才会执行我们刚刚提交的任务。线程池内部使用 LinkedBlockingQueue 来实现任务的添加和删除。我们使用 wait() 和 notify() 方法让一个线程等待任务信号，从而把任务队列和线程池给结合起来。下面的例子中使用了一个 Runnable 对象的队列作为工作队列（你也可以使用 Thread 对象的队列），这是一个实现线程调度常见的方式。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package tutorials;import java.util.concurrent.LinkedBlockingQueue;public class ThreadPool &#123; private final int nThreads; private final PoolWorker[] threads; private final LinkedBlockingQueue queue; public ThreadPool(int nThreads) &#123; this.nThreads = nThreads; queue = new LinkedBlockingQueue(); threads = new PoolWorker[nThreads]; for (int i = 0; i &lt; nThreads; i++) &#123; threads[i] = new PoolWorker(); threads[i].start(); &#125; &#125; public void execute(Runnable task) &#123; synchronized (queue) &#123; queue.add(task); // 向队列中添加任务 queue.notify(); // 唤醒一个线程 &#125; &#125; private class PoolWorker extends Thread &#123; public void run() &#123; Runnable task; while (true) &#123; synchronized (queue) &#123; while (queue.isEmpty()) &#123; try &#123; queue.wait(); // 线程没有任务，进入睡眠 &#125; catch (InterruptedException e) &#123; System.out.println(&quot;An error occurred while queue is waiting: &quot; + e.getMessage()); &#125; &#125; // 线程被唤醒之后，会顺利执行到这里 task = queue.poll(); // 获取任务 &#125; // If we don&#x27;t catch RuntimeException, // the pool could leak threads try &#123; task.run(); // 执行任务 &#125; catch (RuntimeException e) &#123; System.out.println(&quot;Thread pool is interrupted due to an issue: &quot; + e.getMessage()); &#125; &#125; &#125; &#125;&#125; 为了控制线程对工作队列的访问，一定要给工作队列加上同步锁。 1234567891011121314package tutorials;public class Task implements Runnable &#123; private int num; public Task(int n) &#123; num = n; &#125; public void run() &#123; System.out.println(&quot;Task &quot; + num + &quot; is running.&quot;); &#125;&#125; 12345678910111213import tutorials.Task;import tutorials.ThreadPool;public class Main &#123; public static void main(String[] args) &#123; ThreadPool pool = new ThreadPool(7); for (int i = 0; i &lt; 5; i++) &#123; Task task = new Task(i); pool.execute(task); &#125;&#125; 在上面的例子中，我们使用 notify() 替代了 notifyAll() 方法。notify() 比 notifyAll() 有着更多的性能优势，例如一个对于服务器应用很重要的因素 —— notify() 需要更少的上下文切换。不过需要注意的是，在某些场景下使用 notify() 方法可能会存在一些微弱的风险，所以notify()方法只能使用在一些特定的场合下。 下面这张图展示了上面例子中线程池的设计理念： 2. 线程池的高效使用线程池是一个构建高效的多线程应用的方法，但是它也是存在风险的。用线程池构建的应用和其它的多线程应用一样存在着以下风险：死锁、系统抖动、同步或并发错误，线程泄漏或请求超载。 下面是一些建议： 不要把正在同步等待其它任务的任务入队列，否则将可能导致死锁 如果线程在等待I&#x2F;O操作这样的资源的时候，指定一个最大超时时间来让任务可以重新入队列执行。这样可以使得一个线程被释放，从而可以去执行其余的任务。 因为过小或过大的线程池大小都可能产生问题，所以应该设置合适的线程池大小。线程池的大小取决于可用的处理器核数和工作队列中任务的性质（译注：I&#x2F;O密集型任务或CPU密集型任务）。 3. 结论线程池对于组织服务器应用来说是相当有用的，并且正确的构建线程池可以避免死锁和复杂的 wait() 、 notify() 方法的使用问题。不过，相较于自己从头写一个线程池而言，我推荐使用 util.concurrent 包下的 Executor 类，例如 ThreadPoolExecutor。如果需要创建线程来执行时间极短的任务，那么你就可以考虑使用一个线程池了。 4. 下载源代码点击这里下载线程池教程的源码。","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"聊聊编译原理（三） - 语义分析","slug":"Talk-about-compilation-principles-3","date":"2017-08-20T15:46:53.000Z","updated":"2025-08-22T15:42:13.348Z","comments":true,"path":"2017/08/20/Talk-about-compilation-principles-3/","link":"","permalink":"https://www.nosuchfield.com/2017/08/20/Talk-about-compilation-principles-3/","excerpt":"","text":"在聊聊编译原理（二）中，我们详细的介绍了编译器工作流程中的第二个步骤：语法分析。在这篇文章中，我们开始学习编译过程中的第三个重要步骤：语义分析。 语义分析语义分析也称为类型检查、上下文相关分析，它负责检查程序（抽象语法树）的___上下文相关___的属性。 语义分析的操作十分依赖于该语言的语法格式，不同语言的语义分析有可能完全不一样。 符号表 在计算机科学中，符号表是一种用于语言翻译器（例如编译器和解释器）中的数据结构。在符号表中，程序源代码中的每个标识符都和它的声明或使用信息绑定在一起，比如其数据类型、作用域以及内存地址。","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"}]},{"title":"聊聊编译原理（二） - 语法分析","slug":"Talk-about-compilation-principles-2","date":"2017-07-30T00:55:55.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2017/07/30/Talk-about-compilation-principles-2/","link":"","permalink":"https://www.nosuchfield.com/2017/07/30/Talk-about-compilation-principles-2/","excerpt":"","text":"在聊聊编译原理（一）中，我们详细的介绍了编译器工作流程中的第一个步骤：词法分析。在这篇文章中，我们开始学习编译过程中的第二个重要步骤：语法分析。 语法分析如果把词法分析看作为字母组合成单词的过程，那么语法分析就是一个把单词组合成句子的过程。正如在词法分析中使用正则表达式来描述词法的规则一样，我们在语法分析中使用一种比RE表达能力更强的工具——上下文无关文法，来描述语言的语法规则。我们可以把某一种语言看成无数个符合语法规则的句子的集合，根据给定的上下文无关文法我们可以判断某一个Token串是否符合某个语法规则；如果符合，那么我们可以把此文法和对应输入的Token串组合起来生成一个句子。整个流程如下图所示： 上下文无关文法上下文无关文法（context-free grammar, CFG），是一种用来对某种语言进行形式化的、精确的描述的工具。有了这个工具，我们就可以很方便的定义一种语言的语法了。CFG是一个四元组（N, T, P, S），下面我们看一下CFG的组成： N是非终结符的集合； T是终结符的集合； P是一条产生式规则； S是（唯一的）开始符号； 这样描述不免抽象，下面我们来看一个例子。（除了下面的这种描述语法，你可能还看过其它的描述CFG的语法，其中比较有名的是巴科斯范式，它们的本质其实是一样的，都是对CFG的四元组的描述。） S –&gt; AB A –&gt; aA | ε B –&gt; b | bB 其中S A B就是非终结符，代表可以继续扩展或产生的符号；a b ε是终结符，表示其无法再产生新的符号了，其中ε表示一个空句子；上面的每一行就是一个产生式规则，代表了一种非终结符的转移方式；而S就是开始符号。 只有终结符的符号串称为 句子（sentence）。经过观察可知，这个语法所能推导出的所有句子的集合为： A : &#123; ε, a, aa, aaa, ... &#125; B : &#123; b, bb, bbb, ... &#125; S : &#123; b, bb, bbb, ..., ab, abb, ..., aab, aabb, ... &#125; 分析方法简介给定文法G和句子s，回答s是否能够从G推导出来，这是在语法分析器内部所要实现的功能，这里我们开始讨论语法分析器内部要如何才能实现这一功能。 在这里我们讨论的是语法分析器内部为了对G和s进行判断所实现或者使用到的数据结构与算法，下面介绍几种常用的算法： 自顶向下分析算法 递归下降分析算法 LL(1)分析算法 自底向上分析算法 1. 自顶向下分析算法自顶向下分析就是从起始符号开始，不断的挑选出合适的产生式，将中间句子中的非终结符的展开，最终展开到给定的句子。它的核心思想在于，当我们从左往右匹配这个句子的时候，每匹配一次需要从上往下遍历一次这个CFG从而找到合适的产生式，所以被称为自顶向下分析算法。我个人认为这种方法有点类似于“穷举法”（试错法），因为它的本质是不断的使用产生式规则来发现符合这个句子的语法。 不过自顶向下分析并不是无脑穷举的，当发现某一个产生式产生的终结符和句子的当前结构根本不匹配时，我们就不会再向下继续分析了，因为不管怎么分析也无法得到正确的结果。此时我们就需要回到最近的一次有效的规则，然后继续使用新的规则向后执行，这种行为称为“回溯”。 例如，我们同样取上面的aab句子，接下来我们用自顶向下分析算法来判断下面的CFG能否推导出句子aab。 S –&gt; AB A –&gt; aA | ε B –&gt; b | bB 第一步：从起始状态S开始，产生式只有一个 中间状态 使用的产生式 S S -&gt; AB AB 第二步：我们开始对A进行展开，可是A的展开式有两个。我们分析发现，句子aab的开头必须是a，所以ε这种展开形式就被剔除了，我们选用aA这个产生式进行展开 中间状态 使用的产生式 AB A -&gt; aA aAB 第三步：我们继续对A进行展开，此次展开和第二步使用同样的产生式 中间状态 使用的产生式 aAB A -&gt; aA aaAB 第四步：此时我们需要继续对A进行展开，此时我们分析发现，这里A必须使用A -&gt; ε 中间状态 使用的产生式 aaAB A -&gt; ε aaB 最后，使用B -&gt; b即可构建句子aab，说明句子aab是符合该文法的。 中间状态 使用的产生式 aaB B -&gt; b aab 我们可以把自顶向下分析算法总结如下： 12345678910111213tokens = []i = 0stack = [S] # S 是起始符号while stack is not None: if stack[top] is terminal t: if t == tokens[i]: i += 1 pop() else backtrace() # 回溯 else stack[top] is nonterminal T: pop() push(the next right hand of T) 2. 递归下降分析算法递归下降分析算法本质也是一种自顶向下分析算法，其基本思想如下： 对每一个非终结符构造一个分析函数 用前看符号指导产生式规则的选择 递归下降分析算法使用“分治法”来提高分析的效率，对于每一个产生式规则，都应该定义一个自己函数。因为在上下文无关文法中，终结符不可能出现在产生式的左边（可以在产生式左边出现终结符的文法叫做上下文有关文法），上下文无关文法中所有的产生式左边只有一个非终结符。所以我们在调用产生式规则的函数后，就分为两种情况： 遇到终结符，因为终结符本质上是token，所以直接把这个终结符和句子中对应位置的token进行比较，判断是否符合即可；符合就继续，不符合就返回 遇到非终结符，此时只需要调用这个非终结符对应的函数即可。在这里函数可能会递归的调用，这也是算法名称的来源。 简单来说，就是遇到非终结符就调用函数，遇到终结符就比较；例如，同样对于文法G： S –&gt; AB A –&gt; aA | ε B –&gt; b | bB 我们通过递归下降分析来判断aab是否符合该文法，算法如下（_parser.py_）： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546EOF = &#x27;\\n&#x27; # 用换行符作为EOF符号class Parser(object): def __init__(self, sentence): self.sentence = sentence self.current_pos = 0 # 当前的token下标 def parse_S(self): self.parse_A() self.parse_B() def parse_A(self): token = self.get_next_token() # 从句子中取出一个Token if token == &#x27;a&#x27;: # 和CFG中的Token进行比较 self.parse_A() # 执行非终结符所对应的函数 elif token != &#x27;a&#x27;: self.put_token_back() def parse_B(self): token = self.get_next_token() if token == &#x27;b&#x27;: token = self.get_next_token() if token == EOF: pass else: self.parse_B() else: raise Exception(&#x27;非终结符 B 解析异常&#x27;) def get_next_token(self): if self.current_pos == len(self.sentence): raise Exception(&#x27;数组越界&#x27;) next_token = self.sentence[self.current_pos] self.current_pos += 1 return next_token def put_token_back(self): self.current_pos -= 1if __name__ == &#x27;__main__&#x27;: sentence = &#x27;aab&#x27; parser = Parser(sentence + EOF) parser.parse_S() 以上代码只要能正常运行结束而不出现异常，就说明句子’aab’符合此文法。 让我们来分析一下代码中的逻辑： 因为S的产生式是非终结符A和B，所以只需要调用A和B的函数即可 A产生式涉及到了终结符，所以我们需要先从句子取一个Token，然后根据Token的值进行逻辑判断：如果token是a，则获取到非终结符A，继续递归执行A的函数；如果不是a，那么不做任何操作，还要把当前的token放回到句子中 B产生式第一个token是一样的，无法进行区分，我们可以用第二个token判断：如果已经到了句子结尾（也就是说此token不是b），不做任何操作；如果还有token，则继续执行 3. LL(1)分析算法LL(1)算法也是一个自顶向下的分析算法，它的定义为：从左（L）向右读入一个程序，最左（L）推导，采用一个（1）前看符号。LL(1)算法和自顶向下分析算法本质上是一致的，它们的区别就在于LL(1)算法使用了一种称为分析表的工具来避免了回溯操作，提高了效率。在现实中，我们可以根据某种LL(1)分析器来生成分析表，之后根据分析表来进行语法分析操作，我们可以认为这种方法是一种半自动的语法分析方法。LL(1)的总体工作方式如下所示： 例如对于文法（注意我们这里给每个产生式加上了序号，方便区分） S → F S → ( S + F ) F → 1 之后我们根据这个文法来构建一张分析表_（分析表的构建方式会在下面讲到，这里先不做讨论）_如下： |N\\T|（|）|1|+|$||:–:|:–:|:–:|:–:||S|2|-|1|-|-||F|-|-|3|-|-| 有了上面这个分析表之后，我们开始从左向右对句子（例如：( 1 + 1 )）进行分析，它的分析流程如下： 12345678910111213tokens = []i = 0stack = [S] # S 是起始符号while stack is not None: if stack[top] is terminal t: if t == tokens[i]: i += 1 pop() else error() else stack[top] is nonterminal T: pop() push(the correct right hand of T) 仔细观察我们就知道这里的流程和自顶向下分析算法的流程的区别就在于13行和第10行，在第13行我们如果能够一次就取到正确的产生式规则而不是使用穷举去猜测，那么算法效率自然可以提高。关键就在于我们要怎么样才能一次性取到正确的产生式，分析表能够帮助我们完成这样的操作。我们详细的执行一次语法分析过程来看分析表是怎么工作的： 最开始栈中的元素为：S；执行else中的代码，把S pop出去。此时第一个token为 (，查阅分析表可得我们应该执行产生式2，所以被push进行stack的值为 ( S + F ) 此时栈为： ( S + F )；栈顶元素(等于当前的token，( 被pop，token向后移一位 栈：S + F)；当前token为1，栈顶元素S，查分析表可得产生式1，栈变为 F + F) 栈：F + F)；栈顶F，token 1 栈：1 + F)；栈顶1，token 1 栈：+ F)；栈顶+,token + 栈：F)；栈顶F，token 1 栈：1)；栈顶1，token 1 栈：)；栈顶 )，token ) 栈：None；token为空。流程结束 因为以上流程并未报错，所以我们可以推出(1 + 1)可以被此文法描述。至此我们了解到分析表的强大，它避免了回溯操作，大量降低操作时间，提高解析速度。那么问题来了，如此有用的分析表是怎么被构造出来？_（从上面的工作图我们已经知道了分析表可以通过手动和自动两种方式来创建，我们这里的算法原理讲的是LL(1)的手动生成分析表的方式，自动方式读者可以查阅相关资料和软件。）_我们需要先了解几个在构造分析表的时候所要用的集合：first集和follow集，以及nullable集合。 nullable集合： 产生式 x -&gt; 空，则X属于nullable集合； x -&gt; Y1…Yn，Y1到Yn都是非终结符且都属于nullable集合，则 X 属于 nullable 集合； nullable集合的计算方法： 12345678nullable = &#123;&#125;while nullable is changing: for p: x - &gt; β in productions: # 遍历所有的产生式 if β is 空： nulable.append(x) if β is Y1..Yn: if Y1 in nullable and ... and Yn in nullable: nulable.append(x) first集合：对于产生式 x -&gt; β1…βn， 如果β1是终结符：first(x) &#x3D; {β1} β1是非终结符，first(x) U&#x3D; first(β1)； 如果β1属于nullable，first(x) U&#x3D; first(β2)； 如果β2属于nullable，first(x) U&#x3D; first(β2)； … fisrt集合的计算方法： 123456789101112for nonterminal n in all_nontermials: fisrt(n) = &#123;&#125; # 初始化所有的first集while some set is changing: # 有集合发生了变化 for p: x - &gt; β1..βn in productions: # 遍历所有的产生式 for βi in β1 to βn: if βi is terminal: first(x).append(βi) break elif βi is nonterminal: first(x).append(first(βi)) if βi not in nullable: # 如果βi属于nullable，则还要继续向下计算 break follow集合：follow（后继）字符集合可以看成所有可以合法的站在此非终结符后面的终结符（可能包括结束符 $ 、但不包括 ε ）的集合。 follow集合的计算方法： 123456789101112131415for nonterminal n in all_nontermials: fisrt(n) = &#123;&#125; # 初始化所有的first集while some set is changing: # 有集合发生了变化 for p: x - &gt; β1..βn in productions: # 遍历所有的产生式 tmp = follow(x) # follow表示跟在x后面的符号集合 for βi in βn to β1: # 逆序 # 下面的所有tmp都代表的是后一个元素的first集合 if βi is terminal: tmp = &#123;βi&#125; # 作为一个新的follow符 elif βi is nonterminal: follow(βi).append(tmp) # 把此follow符加入到非终结符的follow集合中 if βi not in nullable: tmp = first(βi) # 不为空，则前面一个非终结符的follow集合应为此非终结符的first集合 else: tmp.append(first(βi)) # first集合为空，无法独立存在了，只能把加上去了 follow集合存在意义在于如果某个产生式右部的非终结符的first集合全都是 ε，则此时取follow集。 我们至此已经可以获取到nullable集、first集和follow集，现在我们可以根据这几个集合来构建first_s集，然后我们可以把first_s集合看作是对每一条产生式的计算规则。有了first_s集，之后再和产生式结合就可以创建分析表了。first_s集的生成方式如下： 12345678910111213for p in productions: first_s(p) = &#123;&#125; # 集合初始化为空# 获取一个产生式的 p 的first_s集get_first_s(p: N -&gt; β1..βn): for βi in β1 to βn: if βi is terminal: first_s(p).append(βi) return if βi is nonterminal: # 非终结符 first_s(p).append(first(βi)) if βi not in nullable: return first_s(p).append(follow(N) # 如果全是空，那么会运行到这里，此时把N的follow集加到first_s里面 有了first_s集之后，我们就可以构造分析表了。我们把first_s集合与产生式结合起来，把first_s集合的值作为横坐标，非终结符作为纵坐标，产生式规则作为值，就可以创建出一张分析表了。这里说的创建分析表的方式不免有些抽象，下面我们借助一个例子来完整的看一下一个分析表是怎么被创建出来的。 我们还是使用上面的例子来进行说明，假设我们已经有了一个文法G： S → F S → (S + F) F → 1 我们想要用此文法生成一个分析表。 首先我们生成nullable集合，根据上面的nullable集合的生成方式可知，此处的nullable集合为空集 {}。first集合的计算过程参考上面的计算方式，计算结果如下： first(F): &#123; 1 &#125; first(S): &#123; ( &#125; U &#123; 1 &#125; = &#123; (, 1 &#125; # 取两个的并集 follow集合根据计算结果为： follow(S): &#123; +, ) &#125; follow(F): &#123; ) &#125; 有了nullable，first和follow集合，我们可以计算出first_s集合，这里的序号和产生式中的序号是一一对应的： 1.S -&gt; &#123; 1 &#125; 2.S -&gt; &#123; ( &#125; 3.F -&gt; &#123; 1 &#125; 接着我们用first_s集和产生式集合来构建分析表，构建方式很简单。横轴为终结符，纵轴为非终结符，找到对应的产生规则把序号填入表中即可： N\\T ( ) + 1 S 2 - - 1 F - - - 3 对比可以发现，这里的分析表和我们上面用来进行句子识别的分析表是一样的，说明我们的构建是正确的。 小结：上面我们讲了LL(1)算法的主要内容，需要理解LL(1)算法其实就是对于每个非终结符，能够通过查阅分析表找到正确的产生式规则，这种类似于“偷看”的策略能够避免“回溯”操作，可以有效的提高语法分析的效率。 ⚠&amp;nbsp;需要注意的是，LL(1)文法不能拥有左递归，否则会导致递归到死，所以如果使用LL(1)文法则需要 消除左递归。 4. 自底向上分析算法自底向上分析算法是语法分析的另一类重要算法，它包含了LR(0)算法、SLR算法和LR(1)算法。自底向上分析算法的主要方式是根据句子的Token，使用产生式来自右向左进行分析，即把右侧的内容“收缩”为左侧的非终结符，这种行为我们称为规约（reduce）。 由于精力有限（其实是懒），这里就不对自底向上分析算法做介绍了，想要了解的读者可以自行查阅相关的资料来进行学习。 语法制导翻译语法制导翻译（Syntax-directed translation，SDT），是在解析（parse）输入的Token时，给每一个产生式规则附加一个语义动作（一个代码片段），即把语法“翻译”成一串“动作”，故名“语法制导翻译”。 例如，我们可以在语法动作中加入生成抽象语法树的行为。 分析树和抽象语法树语法分析不但要判断给定的句子是否符合语法结构，而且还要分析出该句子符合哪些结构，也就是说，要分析出这个句子是怎么从起始符号开始产生出来的，并根据产生过程生成语法树。例如，对于 “我吃饭” 这句话，单纯的知道这句话符合某一个CFG是没有意义的，只有我们知道了 主语、谓语和宾语 分别对应的是那个词，我们才能真正理解这句话的含义。 以第一小节的CFG为例，我们要从它推导出句子aab，则推导方式如下： S &#x3D;&gt; AB &#x3D;&gt; aAB &#x3D;&gt; aaAB &#x3D;&gt; aaB &#x3D;&gt; aab，这个推导过程可以用下面的（语法）分析树来表示： 可以去掉此分析树中一些多余的节点，并进一步浓缩，得到抽象语法树（Abstract Syntax Tree, AST）： ⚠&amp;nbsp;需要注意的是，CFG是可能存在二义性的（歧义），例如下面这个例子。 E -&gt; num | E + E | E * E 上面这个CFG，对于句子 1 + 2 * 3，它可以生成以下两种AST： CFG的二义性将导致同一个程序有多个不同的含义，使得程序的运行结果不唯一。解决二义性的方法就是对文法进行重写，例如把上面的文法改写成如下形式即可。 E -&gt; E + T | T T -&gt; T * num | num 具体语法和抽象语法： 具体语法是语法分析器使用的语法 抽象语法是用来表达语法结构的内部表示 参考：http://pandolia.net/tinyc/ch9_context_free_grammar.htmlhttp://pandolia.net/tinyc/ch10_top_down_parse.html","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"}]},{"title":"聊聊编译原理（一） - 词法分析","slug":"Talk-about-compilation-principles-1","date":"2017-07-16T23:17:27.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2017/07/16/Talk-about-compilation-principles-1/","link":"","permalink":"https://www.nosuchfield.com/2017/07/16/Talk-about-compilation-principles-1/","excerpt":"","text":"编译器（Compiler），是一种计算机程序，它会将用某种编程语言写成的源代码（原始语言），转换成另一种编程语言（目标语言）。—— 维基百科 把实现编译器过程中所用到的策略与方法总结起来，这就是编译原理，其主要包含了编译器的构造与优化。 一般来说编译器的内部包含了如下的工作步骤： 词法分析； 语法分析； 语义分析； 生成中间表示（intermediate representation，IR）； 代码生成； 优化； 一般来说到生成中间表示这过程中的操作被称为编译器的“前端”，而从IR到最终结果被称为编译器的“后端”。也就是说1 ~ 4步为编译器的前端，而5 ~ 6步为编译器的后端。IR的目的在于保证编译器的跨平台，对于不同的平台，它们的IR表示是一样的，区别只在于代码生成和优化阶段。有了IR，我们在不同平台上编译器的前端就可以复用了，只需要对应不同的平台开发其对应的后端就可以了，减少了工作量。 词法分析词法分析是编译工作的第一步，它的主要工作是把输入的程序源代码字符流转化为记号（Token）流。例如，对于如下语句，在进行了词法分析操作之后，对应的会生成 int，a，=，0，;这几个记号。 1int a = 0; 一般来说词法分析的实现主要有两种方式： 手工编码构造词法分析器，手动构造词法分析器的优点是方便对细节进行控制，缺点是比较复杂且容易出错； 使用词法分析器的生成器（例如：JavaCC, Yacc, Lex），词法分析器的生成器是一种根据给定的规则把输入构建成Token并输出的程序，其优点时使用简单； 出于学习的目的，我们这里主要讨论手工构造词法分析器的方式；至于词法分析器的生成器的方式，你可以任选一个流行的生成器进行深入了解。 数学工具词法分析阶段会用到以下几个数学工具： 正则表达式（Regular Expression, RE） 确定性有限状态自动机（DFA） 非确定性有限状态自动机（NFA） 手工构造词法分析器的步骤如下，我们通过RE来实现对Token的描述： 下面我们按照此图中的顺序，了解一下在这几个步骤中所用到的算法以及它们的实现方式。 1. Thompson算法我们已经知道一个RE可能会包含如下几种情况： ε：代表空； c：代表一个输入字符； e1 e1：两个re的连接关系； e1|e2：两个re的选择关系； e1*：闭包，代表一个re重复0次或多次 例如，对于RE a(b|c)*，我们可以创建如下的NFA： 我们发现，RE和NFA的对应关系还是很清晰的，事实上只需要一些简单的递归操作即可以实现从RE到NFA的转换。 2. 子集构造算法通过不断的构建一个个的状态集合，这些集合都是自动机的所有状态的子集，这就是子集构造算法名字的意义。这种转化算法的本质在于对于每一个状态集合，给该集合一个输入，会得到一个新的状态的集合，通过这种方式来把一个NFA转化为一个DFA。 例如下面这个NFA，我们可以先把它状态集合的转移情况列出来，并用一个二维表来表示： 二维表表示集合间的转移关系： 表中的第一列表示不需要任何输入（即输入ε）进行状态转移； 第二列表示了在当前状态的集合下，对于每个状态输入a，之后把得到的状态组合起来作为一个新的集合； 第三列表示对所有状态输入b，得到最终的状态集合； 上表是对所有的状态集进行a和b的输入操作，之后把新得到的状态集再次输入a和b进行转移得到新的状态集，如此反复输入并转移直到最终到达接受状态。 如果把上表的每个状态集合取个别名，例如1、2、3…，那么我们可以把上表改写成如下的形式，这样使得结构更加的清晰，不过集合和别名之间的对应关系需要被保存下来。 之后，根据上表我们可以的得到这样的一个DFA。至此，NFA到DFA的转化结束。 3. Hopcroft算法Hopcroft算法是DFA到DFA的转化，其目的是减少DFA的状态和边，对DFA进行简化，这样可以使得后面的操作变得简单。 首先我们需要知道最小状态DFA所需要遵守的规则： 没有多余状态； 什么是多余状态？ 从这个状态没有通路到达终态：S1；从开始状态出发，任何输入串也不能到达的那个状态：S2 如何消除多余状态？ 删除 没有两个状态是互相等价；互相等价需满足下面两个条件： 兼容性（一致性）条件——同是终态或同是非终态 传播性（蔓延性）条件——对于所有输入符号，状态s和状态t必须转换到等价的状态里 DFA最小化分为以下几步，它主要是根据上面的不可互相等价规则来进行操作的： 把DFA拆分为非接受状态（N）和接受状态（A）这两个集合； 对于同样的输入，某个集合中的状态产生了不同的结果（这里的结果不同指的是转移状态所处的集合不同），那么根据结果集合的不同应该把这些状态从该集合拆分为新的集合； 反复进行第2步，直到不可再拆分，此时的集合就可以构成一个新的DFA； 例如，对于如下的DFA，我们对其进行最小化操作。 我们根据N和A对其进行拆分，得到集合N {q0, q1, q2, q4}, A {q3, q5} 对于集合A，任何输入都不能对它们区分，则它们已不可拆分 对集合N，我们输入e，q0和q1转移到集合N，q2和q4转移到集合A，则集合N可以拆分为N1 {q0, q1}和 N2 {q2, q4} 集合N2只接受e且转移结果一致（都是转移到A），其不可再区分 集合N1输入e，q0转移到N1（因为它还是q0状态），q1转移到N2，则N1可以再被拆为{q0}和{q1} 所有的集合都不可再拆分，现有集合为 {q0}, {q1}, {q2, q4}, {q3, q5} 我们把这些集合生成一个新的DFA，这个新的DFA比初始的6个状态少了两个状态，结构变得简单了。 4. DFA结构解析并生成词法分析器在上面的我们已经生成了一个符合要求的DFA，现在我们把这个DFA作为输入读入到程序中，然后通过某种方式把这个DFA转化为某种程序易描述的数据结构（例如数组），之后程序利用该结构对输入的字符流（即某种语言的源代码）进行解析。 例如：利用二维数组对DFA结构进行描述，左侧表示当前状态，上方表示输入，框中表示转移结果 从概念上来说，DFA实际上是一个有向图。我们可以通过转移表、跳转表等代码表示来实现对DFA的识别和Token的解析。 对于识别出来的Token，有些Token只有类型（例如：if），有些Token既有类型又有值（例如：101）。 参考： 【编译原理】:NFA转变为DFA的子集构造法","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"}]},{"title":"Keepalived实现站点高可用","slug":"Using-Keepalived-to-make-the-site-highly-available","date":"2017-06-19T23:25:38.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2017/06/19/Using-Keepalived-to-make-the-site-highly-available/","link":"","permalink":"https://www.nosuchfield.com/2017/06/19/Using-Keepalived-to-make-the-site-highly-available/","excerpt":"","text":"为了提高系统的可用性，避免单点故障，在分布式系统中，我们可以使用Keepalived来实现站点的高可用，下面就稍微介绍一下Keepalived的配置和使用。 因为我并没有多台主机，所以目前所选择的方案是在本机上使用Docker构建多台容器来实现集群，这种方式成本低，实现起来也比较简单。如果你对Docker不太熟悉，可以看我之前的文章使用 Docker 来构建一个 Tomcat 服务来快速了解一下Docker。 1. 安装Keepalived和Nginx并创建为一个Docker镜像我假设你已经有了一个Ubuntu的Docker镜像，如果你还没有可以通过以下命令安装 docker pull hub.c.163.com/public/ubuntu:16.04-tools 之所以选择网易的镜像是因为其在国内的访问速度比较快（很奇怪在deepin操作系统上只能使用Docker官方的镜像，163的镜像无法使用，目前还不知道为什么）。 在这里我们的Ubuntu镜像的ID是1196ea15dad6，我们让这个镜像以守护进程（-d）的方式运行，并且给这个运行的容器起名 keepalived docker run -d --privileged=true --name=keepalived 1196ea15dad6 此时Ubuntu容器已经开始运行了，执行命令 docker ps 应该能够看到一个名为 keepalived 的容器在运行了。接下来我们使用以下命令进入keepalived容器的bash docker exec -it --privileged=true keepalived bash 成功进入bash之后，执行以下命令来安装Keepalived和Nginx（如果安装速度慢可以考虑更换国内的镜像源） apt-get update apt-get install keepalived apt-get install nginx 安装完毕后，创建文件 /etc/keepalived/keepalived.conf，并在文件中保存以下内容： 1234567891011121314vrrp_instance VI_1 &#123; state MASTER interface eth0 virtual_router_id 51 priority 100 advert_int 1 authentication &#123; auth_type PASS auth_pass MrUse &#125; virtual_ipaddress &#123; 172.17.0.99 &#125;&#125; 文件修改完毕后执行 exit 命令退出bash，之后执行命令 docker stop keepalived 停止此容器，此时查看Docker运行中的容器已经看不到keepalived容器了，之后执行命令 docker commit keepalived keepalived 把容器keepalived提交为一个名叫keepalived的镜像，之后执行命令 docker images 可以看到已经创建了一个名为keepalived的镜像，接下来我们就可以直接使用这个镜像来执行我们想要的操作了。 PS: 如果你想要跳过搭建镜像这一步，可以直接选择使用我已经构建好的镜像，使用如下命令可以获取此镜像： docker pull hub.c.163.com/derobuka1/keepalived:latest 如果你使用我这个镜像，那么在下面使用到这个镜像的时候，要注意镜像的名称应该为hub.c.163.com&#x2F;derobuka1&#x2F;keepalived:latest 2. 配置并启动Keepalived服务在上面我们已经创建好了一个安装了Nginx和Keepalived的Docker镜像，下面我们就使用这个镜像来创建Keepalived服务。首先我们使用keepalived镜像创建一个名为master的容器并使其作为守护进程执行 docker run -d --privileged=true --name=master keepalived 之后通过命令 docker exec -it --privileged=true master bash 进入到master容器的bash中，然后使用以下命令来启动服务 service keepalived start service nginx start 之后执行 ip addr 可以看到虚拟地址 172.17.0.99 已经被绑定到了此台机器上。 之后我们可以同样使用命令 docker run -d --privileged=true --name=backup keepalived 来创建一个名为backup的备用机器，以同样的方式进入备用机器的bash，修改 /etc/keepalived/keepalived.conf 文件中keepalived的优先级低于master机器，例如为该改优先级为90： ··· priority 90 ··· 备用机器上只需要做这一个改动即可。保存配置文件，之后启动备用机器上的Keepalived和Nginx。 如果需要，我们可以再创建更多的备用机器，只需要保证这些备用机器的 priority 比90还要低即可。priority 的取值范围是1 - 250，超出的数值会被当作是100，优先级最高的机器会被当作master机器。 3. 模拟单点故障以测试Keepalived的功能为了更直观的查看，我把master机器上的Nginx主页内容改为master，backup的主页改为backup。之后在宿主机上执行docker命令 docker run -it 1196ea15dad6 bash 进入一台测试机器的bash，在测试机上执行命令 curl 172.17.0.99 看到如下结果 此时请求落在了master机器上。执行命令 docker stop master 停止master容器模拟主节点失去服务的情况，此时在测试机器上再执行一次请求，得到如下结果 该结果说明我们的请求在master失去服务的情况下自动发往了backup机器，此时在备用机器上执行命令 ip addr 可以发现虚拟IP已经绑定到了备用机器上，这一结果符合我们预期。执行命令 docker start master 启动master容器，之后再启动master上的Nginx和Keepalived服务，随后在测试机器再执行一次请求，发现新的请求自动的切回到了master上，这样模拟了master恢复服务时的场景。 参考： 使用keepalived搭建主备切换环境 Nginx+Keepalived实现站点高可用 如果想要以守护进程的方式创建一个容器，那么对创建这个容器所使用到的镜像有一些要求。要求就是，这个镜像在被创建的时候，创建这个镜像所使用到的容器的COMMAND（使用docker ps命令可以看到）应该为 /usr/bin/supervisord，而不是 bash。","categories":[],"tags":[{"name":"架构","slug":"架构","permalink":"https://www.nosuchfield.com/tags/%E6%9E%B6%E6%9E%84/"}]},{"title":"k-近邻算法实现数字识别","slug":"K-Nearest-Neighbor-Algorithm-for-Digital-Recognition","date":"2017-05-26T22:32:10.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2017/05/26/K-Nearest-Neighbor-Algorithm-for-Digital-Recognition/","link":"","permalink":"https://www.nosuchfield.com/2017/05/26/K-Nearest-Neighbor-Algorithm-for-Digital-Recognition/","excerpt":"","text":"机器学习（Machine Learning, ML）是人工智能（Artificial Intelligence, AI）的一个重要的分支，机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。K-NN（K Nearest Neighbor）算法是机器学习中最基础也是最简单的算法之一，下面我们就来了解一下这个算法是怎么工作以及是怎么帮助我们解决问题的。 1. kNN算法的原理kNN算法的原理极其简单，即首先存在一个训练样本数据集，且训练集中的每一个数据都会存在一些特征，并且该数据会拥有一个已知的分类。在输入未知分类的测试数据的时候，根据它的特征内容将测试数据和每一条训练数据进行比较，然后提取出训练数据中与测试数据最相似的k个数据（这就是kNN算法名称的来历），然后取出这个k个数据中出现次数最多的分类，作为测试数据的分类。 2. 如何通过特征来比较训练数据和测试数据的相似度通过特征值来计算相似度需要用到一点点的数学内容，如果训练数据称为A，测试数据为B，这个数据共有1, 2, …, n个特征，则它们的相似度可以使用如下公式表示： x&#x3D;∑i&#x3D;1n(Ai−Bi)2 方法很简单，就是取它们的特征之差的平方和，之后开平方得到x，x越小则说明这两个数据在当前特征下越相似。 但是，不同的数据之间可能存在数值上的差异。例如，对于一个上市公司，其营业额是必然大于其员工数的，那么此时把营业额的差值和员工数的差值同等对待显然是不合适的。利用下面的公式可以把任意取值范围的特征值转化到0到1区间之内的值： newValue&#x3D;oldValue−minmax−min 其中min和max分别为数据集中的最小特征值和最大特征值。接下来，只需要使用newValue作为新的特征值就可以了，虽然这样增加了计算量，不过我们必须这样做。至此我们已经知道了kNN算法的基本工作方式，下面我们通过一个实际的例子来了解一下KNN算法是如何工作的。 3. kNN算法实现数字识别想要通过kNN算法实现数字识别，首先我们需要提供大量已知数字值的训练数据，之后把测试数据扔到任务中去与训练数据比对，最终分析出该数字的可能值。 这里存放了一些训练数据，每一个文件都对应一个数字，并且数字的真实值在文件名中表示了出来。测试数据也同样的是一个文件对应一个数字，我们的任务就是把测试数据文件中的数字值给识别出来。 下面我们使用Python来实现kNN算法（需要安装numpy模块），程序主要就分为这几步： 读入训练数据构造为一个矩阵，把训练文件的字符串通过取出每一行然后首尾相连的方式构造为一个字符数组，每一个训练数组都作为矩阵的一行； 通过同样的方式把测试数据构造为一个只有一行的矩阵； 把测试数据同每一条训练数据做比较，选出差异最小的k条训练数据； 把k条数据中所占比例最大的数字作为测试数字的识别结果； 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103# -*- coding: utf-8 -*-import operatorfrom os import listdirfrom numpy import zeros, tileTRAINING_PATH = &#x27;digits/trainingDigits/&#x27;TRAINING_REAL_NUMS = [] # 训练数据的真实数字TEST_PATH = &#x27;digits/testDigits/&#x27;TEST_REAL_NUMS = [] # 测试数据的真实数字def _make_matrix_by_file(file): &quot;&quot;&quot; 把指定文件内的数据生成一个一维矩阵 :param file: :return: &quot;&quot;&quot; file_data_array = zeros((1, 1024)) # 创建一个只有一行且存储文件所有数据的矩阵 with open(file) as lines: # 把文件的所有数据存储在矩阵中 for line_num, line in enumerate(lines): for i in range(32): file_data_array[0, 32 * line_num + i] = int(line[i]) return file_data_arraydef generate_training_matrix(): &quot;&quot;&quot; 读取所有训练文件的数据并且转化为一个矩阵 :return: &quot;&quot;&quot; training_file_list = listdir(TRAINING_PATH) # 获取训练文件列表 training_matrix = zeros((len(training_file_list), 1024)) # 创建一个矩阵，行数为训练文件数，列数为每个训练文件的字符数 for file_index, training_file in enumerate(training_file_list): TRAINING_REAL_NUMS.append(training_file.split(&#x27;.&#x27;)[0].split(&#x27;_&#x27;)[0]) # 把正确的数字保存在列表中 # 把所有的训练文件数据存储在一个矩阵中 training_matrix[file_index, :] = _make_matrix_by_file(TRAINING_PATH + training_file) return training_matrixdef generate_test_matrix_list(): &quot;&quot;&quot; 读取所有测试文件的数据并且转化为一个矩阵list :return: &quot;&quot;&quot; test_file_list = listdir(TEST_PATH) # 获取测试文件列表 test_matrix1_list = [] for test_file in test_file_list: TEST_REAL_NUMS.append(test_file.split(&#x27;.&#x27;)[0].split(&#x27;_&#x27;)[0]) # 把所有的测试文件矩阵保存为一个list test_matrix1_list.append(_make_matrix_by_file(TEST_PATH + test_file)) return test_matrix1_listdef classify(training_matrix, test_matrix, k=3): &quot;&quot;&quot; 通过训练矩阵对测试数据进行数字判断 :param training_matrix: 完整的训练矩阵 :param test_matrix: 测试数据 :param k: 取最相似的k个训练数据 :return: 分类结果 &quot;&quot;&quot; training_matrix_lines = training_matrix.shape[0] # 训练矩阵的总行数，也就是训练文件数 test_matrix = tile(test_matrix, (training_matrix_lines, 1)) # 对测试矩阵进行行复制，使其行数和训练矩阵行数一样多 distances = (((test_matrix - training_matrix) ** 2).sum(axis=1)) ** 0.5 # 获取测试数据和所有的训练数据的差异值list sorted_distances_index = distances.argsort() # 对差异值按从小到大进行排序，把排序前list的下标作为新list的值组成一个列表 num_count = &#123;&#125; # 记录某个数字的出现次数 for i in range(k): # 根据下标获取到训练数据中该条数据所对应的真实数字（至于最终选不选该数字依赖于其出现的频率） one_possible_number = TRAINING_REAL_NUMS[sorted_distances_index[i]] # 先获取该数字当前的出现次数（没有就为0），之后把当前次数加一作为新的出现次数 num_count[one_possible_number] = num_count.get(one_possible_number, 0) + 1 # 对数字出现的频次进行排序，从高到低 sorted_num_count = sorted(num_count.items(), key=operator.itemgetter(1), reverse=True) # 返回出现频次最高的数字 return sorted_num_count[0][0]def run(): training_matrix = generate_training_matrix() test_matrix_list = generate_test_matrix_list() right = 0 # 正确的个数 total = 0 # 总个数 for idx, test_matrix in enumerate(test_matrix_list): real = TEST_REAL_NUMS[idx] guess = classify(training_matrix, test_matrix, 3) if real == guess: right += 1 total += 1 print(&#x27;real: &#x27;, real, &#x27;, guess: &#x27;, guess) fail = total - right print(fail, &#x27; fails, fail rate is &#x27;, fail / total)if __name__ == &#x27;__main__&#x27;: run() 上述代码的主要流程和操作已经在注释中做了比较详细的介绍，可能只有第67行的矩阵运算需要略作介绍，下面使用一个例子来介绍这里是怎么运算的。首先我们在66行中已经构造了一个和训练数据矩阵行数和列数都一样的测试数据矩阵，之后我们发现第67行一共做了如下几个操作： 两个矩阵相减； 求矩阵平方（即矩阵相乘）； 对矩阵进行行求和； 对矩阵进行开方操作； 我们先构造两个如下的矩阵： a = array([[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]) b = array([[3, 4, 5, 6], [0, 0, 0, 0], [9, 8, 7, 6]]) 之后两个矩阵相减，得到如下结果，可见相减是矩阵中每个对应位置的元素都做了减法操作 array([[-1, -1, -1, -1], [ 3, 4, 5, 6], [-5, -3, -1, 1]]) 之后再对上面得到的矩阵做平方，也就是自己乘以自己，实际上是对每个对应位置的元素都做了乘法操作，平方结果如下 array([[ 1, 1, 1, 1], [ 9, 16, 25, 36], [25, 9, 1, 1]]) 之后对矩阵的每一行求和，使用方法 matrix.sum(axis=1) 可以简单做到，行求和后结果如下 array([ 4, 86, 36]) 最后再做一次开方，实际上就是对矩阵中的每个元素做开方，结果如下 array([ 2. , 9.2736185, 6. ]) 下面是我在IPython中的操作过程 完整的代码和数据可以从这里获取到。","categories":[],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://www.nosuchfield.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"Python","slug":"Python","permalink":"https://www.nosuchfield.com/tags/Python/"}]},{"title":"Java中的Future模式","slug":"Future-mode-in-Java","date":"2017-03-22T21:20:55.000Z","updated":"2025-08-22T15:42:13.338Z","comments":true,"path":"2017/03/22/Future-mode-in-Java/","link":"","permalink":"https://www.nosuchfield.com/2017/03/22/Future-mode-in-Java/","excerpt":"","text":"1. synchronized关键字的类锁和对象锁synchronized关键字的作用位置可能包含以下几种情况： 非静态方法上（在执行该方法时，对这个方法所属的对象进行加锁）； 静态方法上（在执行该方法时，对该方法对应的整个类进行加锁）； 直接在代码块中对某个对象加锁（在执行该代码块时，对该对象进行加锁）； 直接在代码块中对某个类进行加锁（在执行该代码块时，对这个类进行加锁）； 这里我们先写一个线程不安全的实例： 12345678910111213141516171819202122232425public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); Thread thread = new Thread(new Thread1()); service.submit(thread); service.submit(thread); service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; @Override public void run() &#123; System.out.println(&quot;线程开始...&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程结束...&quot;); &#125;&#125; 1.1. 对非静态方法进行同步上面这个例子不能让一个线程连续的打印出线程开始和线程结束语句，这里我们只需要在run方法上面加上synchronized关键字就可以保证线程的同步执行，代码如下： 12345678910111213141516171819202122232425public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); Thread thread = new Thread(new Thread1()); service.submit(thread); service.submit(thread); service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; @Override public synchronized void run() &#123; System.out.println(&quot;线程开始...&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程结束...&quot;); &#125;&#125; 但是需要注意的是，千万不要认为给run方法加上了synchronized关键字就万事ok了，在上面的这个例子中确实是这样，但是这是因为我们两个线程使用的是同一个Thread对象（还记得我前面说的非静态方法上的synchronized关键字是对该方法所属的对象进行加锁），所以这个run方法对应的对象会被加锁而导致了同步。但是如果这个run方法是属于两个不同的对象，那么即使你对run方法加上了synchronized关键字，虽然各自的Thread对象会被加锁，但是这两个线程却仍然会交替执行，如下： 12345678910111213141516171819202122232425public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); // 创建的是两个不同的对象，synchronized只会对自己方法所对应的对象加锁 service.submit(new Thread1()); service.submit(new Thread1()); service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; @Override public synchronized void run() &#123; System.out.println(&quot;线程开始...&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程结束...&quot;); &#125;&#125; 了解了非静态方法的synchronized关键字的含义和用法之后，我们再来了解一下静态方法的synchronized关键字的含义。 1.2. 对静态方法进行同步我们看这样的一个例子： 1234567891011121314151617181920212223242526272829303132public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); service.submit(new Thread1()); service.submit(new Thread1()); service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; @Override public void run() &#123; Test.sayHello(); &#125;&#125;class Test &#123; static void sayHello() &#123; System.out.println(&quot;线程开始...&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程结束...&quot;); &#125;&#125; 两个线程都会试图执行Test类的sayHello()静态方法，如果不进行同步操作，将会打印出如下语句： 线程开始... 线程开始... 线程结束... 线程结束... 但是当我们在sayHello()方法上加上了synchronized关键字之后，就能够保证这两个线程在执行sayHello()静态方法的时候不会产生竞争条件了，修改后的代码如下： 1234567891011121314151617181920212223242526272829303132public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); service.submit(new Thread1()); service.submit(new Thread1()); service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; @Override public void run() &#123; Test.sayHello(); &#125;&#125;class Test &#123; synchronized static void sayHello() &#123; System.out.println(&quot;线程开始...&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程结束...&quot;); &#125;&#125; 讲完了synchronized关键字对方法的修饰方式之后，我们来了解一下synchronized关键字在代码块中的操作，首先我们了解一下synchronized关键字在代码块中对对象进行同步的操作。 1.3. 对代码快进行同步：锁住对象synchronized关键字在代码块中锁对象的最简单的操作就是锁住 this 对象，这种情况的操作其实和把synchronized加在非静态方法上的效果是一样的，都是表示在这些代码执行的时候，对当前对象进行加锁，他们的区别只是作用的粒度的大小而已，下面就是一个很简单的例子： 123456789101112131415161718192021222324252627public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); Thread thread = new Thread(new Thread1()); service.submit(thread); service.submit(thread); service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; @Override public void run() &#123; synchronized (this) &#123; System.out.println(&quot;线程开始...&quot;); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程结束...&quot;); &#125; &#125;&#125; 这里的效果和直接在方法 run 上加synchronized关键字的效果是一致的。除了锁当前对象之外，对于这种情况，我们还可以对其余的任意一个对象进行加锁，当某一个线程进入该代码块执行程序时，就会对这个对象进行加锁，防止其余线程对这个对象进行操作。下面就是一个例子： 123456789101112131415161718192021222324252627282930313233343536373839404142434445public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); Test test = new Test(); service.submit(new Thread1(test, 1)); // 线程 1 service.submit(new Thread1(test, 2)); // 线程 2 service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; private Test test; private int name; Thread1(Test test, int name) &#123; this.test = test; this.name = name; &#125; @Override public void run() &#123; if (name == 1) &#123; test.i = 100; // 线程 1 休眠一段时间，让线程 2 有机会改变 test 的对象的值 try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程1：&quot; + test.i); &#125; else &#123; test.i = 200; System.out.println(&quot;线程2：&quot; + test.i); &#125; &#125;&#125;class Test &#123; int i;&#125; 我们发现，线程1打印的值也变成了200，这不是我们想要的，下面我们通过锁操作来避免这种情况的产生： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); Test test = new Test(); service.submit(new Thread1(test, 1)); // 线程 1 service.submit(new Thread1(test, 2)); // 线程 2 service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; private Test test; private int name; Thread1(Test test, int name) &#123; this.test = test; this.name = name; &#125; @Override public void run() &#123; synchronized (test) &#123; if (name == 1) &#123; test.i = 100; // 线程 1 休眠一段时间，让线程 2 有机会改变 test 的对象的值 try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程1：&quot; + test.i); &#125; else &#123; test.i = 200; System.out.println(&quot;线程2：&quot; + test.i); &#125; &#125; &#125;&#125;class Test &#123; int i;&#125; 如上所示，我们对 test 对象进行了加锁操作，保证在指定的代码块执行的时候，test对象身上是有锁的，避免了多个线程能够同时操作test对象，保证了不会发生竞争条件。 1.4. 对代码块进行同步：锁住类同样我们先提供一个产生了竞争条件的程序，它使得两个线程可以同时的改变一个类的静态属性的值： 123456789101112131415161718192021222324252627282930313233343536373839404142public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); service.submit(new Thread1(1)); // 线程 1 service.submit(new Thread1(2)); // 线程 2 service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; private int name; Thread1(int name) &#123; this.name = name; &#125; @Override public void run() &#123; if (name == 1) &#123; Test.i = 100; // 线程 1 休眠一段时间，让线程 2 有机会改变 Test 类的静态属性值 try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程1：&quot; + Test.i); &#125; else &#123; Test.i = 200; System.out.println(&quot;线程2：&quot; + Test.i); &#125; &#125;&#125;class Test &#123; static int i;&#125; 以上程序的执行结果为： 线程2：200 线程1：200 显然这种结果是不符合要求的，下面我们通过对类进行加锁来避免这种情况的发生，修改后的代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); service.submit(new Thread1(1)); // 线程 1 service.submit(new Thread1(2)); // 线程 2 service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; private int name; Thread1(int name) &#123; this.name = name; &#125; @Override public void run() &#123; synchronized (Test.class) &#123; if (name == 1) &#123; Test.i = 100; // 线程 1 休眠一段时间，让线程 2 有机会改变 Test 类的静态属性值 try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;线程1：&quot; + Test.i); &#125; else &#123; Test.i = 200; System.out.println(&quot;线程2：&quot; + Test.i); &#125; &#125; &#125;&#125;class Test &#123; static int i;&#125; 我们通过给Test类上锁，来避免两个线程同时操作类的属性，避免了竞争条件的产生。 1.5. 小结上面一共有四种情况，不外乎就是方法、代码块、类、对象的四种组合。如果你稍微了解JVM，那么应该知道JVM中只有堆内存区和方法区是线程共享的，而诸如程序计数器、栈（包含Java栈和本地方法栈）这样的内存空间是各个线程各自独有的，所以我们的关注点自然就放到了堆和方法区中了。此外我们还知道，对象是存储在堆中、类属性是保存在方法区中的，所以我们只需要了解这些基础知识就可以很容易的了解内存中数据的操作情况了。 2. 线程间的协作（wait和notify关键字）我们知道，线程的状态一般可以分为就绪、阻塞、运行这三种状态，而所谓的wait和notify方法只是分别让线程进入了阻塞和就绪的状态而已。 当一个线程上的同步对象调用wait方法时（只能是同步对象才能调用，否则会产生异常，notify方法也是同理），会使得当前线程进入阻塞；而notifyAll方法则是让所有在该对象上的阻塞线程进入就绪态，其中notify方法只是从所有的阻塞线程中随机的选择一个线程进入就绪态，一般不推荐使用。 了解了wait和notifyAll方法的运行原理，下面看一个实际使用了这两个方法的例子，这个例子的目的是使得两个线程绝对的交替执行。 12345678910111213141516171819202122232425262728293031323334353637383940public class TestThread &#123; public static void main(String[] args) &#123; ExecutorService service = Executors.newCachedThreadPool(); Test test = new Test(); service.submit(new Thread1(test, 1)); // 线程 1 service.submit(new Thread1(test, 2)); // 线程 2 service.shutdown(); &#125;&#125;class Thread1 implements Runnable &#123; private Test test; private int name; Thread1(Test test, int name) &#123; this.test = test; this.name = name; &#125; @Override public void run() &#123; synchronized (test) &#123; while (true) &#123; test.notifyAll(); // 唤醒所有在 test 对象上阻塞的线程，使他们进入就绪态 System.out.println(name); try &#123; test.wait(); // 当前线程进入阻塞态 Thread.sleep(1000); // 降低打印速度，方便看清输出 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125;class Test &#123;&#125; 上面这个程序的执行中，两个线程的状态我们可以如下这张表来表示： 时间片 线程1状态 线程2状态 1 运行 就绪 2 阻塞 就绪 3 阻塞 运行 4 就绪 运行 5 就绪 阻塞 6 运行 阻塞 7 运行 就绪 8 … … 上面这个过程将会一直的执行下去，如此往复，保证了控制台能够交替稳定的打印出1和2。 3. Java 实现Future模式所谓的future设计模式，简单来说，就是把客户端的请求改为异步，当客户端进行某种请求时，可以立即返回，可以方便客户端去做接下来的其他事情。接下来，当服务端的请求完成时，客户端再去执行相应的操作，从而提高了效率。 Future模式本质上其实是创建了一个新的线程，利用这个新的线程来去进行真实的请求和响应接受操作，下面就是一个简单的例子（这个例子参考了这里，如有侵权请告知删除）。 例子中我们一共会包含以下几个文件： ├── root │ ├── Data.java │ ├── RealData.java │ ├── FutureData.java │ ├── Client.java │ ├── Test.java Data.java 是一个接口，定义了 String getResult() 方法； RealData.java 实现了Data接口，是 getResult() 方法的业务实现的类（方法真正需要实现的操作就放在这里面）； FutureData.java同样实现了Data接口，它是Future设计模式的核心，它将会在内部获取一个 RealData 的对象，并执行该对象的 getResult() 方法； Client.java是一个类，他封装了Future设计模式中的一些核心操作，来提供给调用者使用，抽象了Future模式，降低了使用者的操作成本（我会在最后再提供一个不使用Client类来实现Future模式的Demo，它们的原理都是一样的）； Test.java是测试类，包含了我们的 main 方法； Data.java 123interface Data &#123; String getResult() throws InterruptedException;&#125; RealData.java 12345678910111213141516171819202122class RealData implements Data &#123; private String data; RealData(String data) &#123; // 利用sleep方法来表示RealData构造过程是非常缓慢的 // 表示我们正在调用一个执行很慢的函数，它要很久才能返回 try &#123; System.out.println(&quot;RealData生成中...&quot;); Thread.sleep(4000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; this.data = data; &#125; @Override public String getResult() &#123; return &quot;RealData: &quot; + data; &#125;&#125; FutureData.java 123456789101112131415161718192021222324252627class FutureData implements Data &#123; private RealData realData; // 是否已经设置了realData private boolean isReady = false; synchronized void setRealData(RealData realData) &#123; if (isReady) // 如果已经设置了RealData，那么直接返回就可以了 return; this.realData = realData; isReady = true; System.out.println(&quot;FutureData中已经设置好了RealData数据了&quot;); notifyAll(); &#125; @Override public synchronized String getResult() throws InterruptedException &#123; if (!isReady) &#123; System.out.println(&quot;FutureData中的RealData还没有设置好，等待ing&quot;); wait(); // 一直等到RealData注入到FutureData中 System.out.println(&quot;RealData已经被设置到FutureData中了&quot;); &#125; return realData.getResult(); &#125;&#125; Client.java 123456789101112131415161718class Client &#123; // 创建一个 Data static Data request(final String string) &#123; System.out.println(&quot;试图构建一个RealData...&quot;); final FutureData futureData = new FutureData(); new Thread(() -&gt; &#123; // RealData的构建很慢，所以放在单独的线程中运行 RealData realData = new RealData(string); futureData.setRealData(realData); &#125;).start(); System.out.println(&quot;立即返回futureData&quot;); return futureData; &#125;&#125; Test.java 1234567public class Test &#123; public static void main(String[] args) throws InterruptedException &#123; Data data = Client.request(&quot;真实的结果&quot;); System.out.println(&quot;后台已经开始异步处理数据了，这个时候干点什么好呢，不如果傻傻的等2s钟吧ʅ（´◔౪◔）ʃ&quot;); System.out.println(&quot;查看真实数据返回（如果还没有返回堵塞等待）= &quot; + data.getResult()); &#125;&#125; 上面的注释已经讲得比较清楚了，要理解Future的核心就在于创建了一个新的线程来帮助我们去执行一些比较耗时的操作，此线程在执行的操作完成之后，此时可以分为两种情况： 主线程阻塞在了该方法的调用上，那么就主动提醒主线程操作已经执行完成，此时主线程可以继续向下执行； 主线程在执行其它的操作，当主线程想要查看这个操作的执行结果的时候，如果该操作还没结束，那么主线程就会阻塞，变成情况1；如果此时异步线程的操作已经结束了，那么主线程就直接返回结果，操作结束，主线程继续向下执行； 示例代码我在GitHub上面也放了一份，可能查阅起来更清晰一点，地址在这里。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"设计模式","slug":"设计模式","permalink":"https://www.nosuchfield.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"把博客托管到了腾讯云上了","slug":"The-blog-hosted-on-the-qcloud","date":"2017-01-22T18:49:37.000Z","updated":"2025-08-22T15:42:13.348Z","comments":true,"path":"2017/01/22/The-blog-hosted-on-the-qcloud/","link":"","permalink":"https://www.nosuchfield.com/2017/01/22/The-blog-hosted-on-the-qcloud/","excerpt":"","text":"因为之前博客的访问速度比较慢，所以买了腾讯云主机把博客托管在了上面，下面稍微记录下操作的步骤。 1. 配置NginxNginx 的配置比较简单，其中证书使用的是Let’s Encrypt的免费证书注1，具体配置如下： 1234567891011121314151617181920212223242526272829303132# HTTP 请求会被重定向到 HTTPS 请求server &#123; listen 80; server_name www.nosuchfield.com; return 301 https://www.nosuchfield.com$request_uri;&#125;# HTTPS 请求，直接访问博客的静态文件，配置好证书并且开启 HSTSserver &#123; listen 443 ; server_name www.nosuchfield.com; ssl on; ssl_certificate /etc/letsencrypt/live/www.nosuchfield.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.nosuchfield.com/privkey.pem; location / &#123; add_header Strict-Transport-Security &quot;max-age=31536000&quot;; root /home/ritterhou.github.io; index index.html; &#125; # 因为静态文件不会修改，所以启用浏览器缓存能够提高访问速度 location ~ .*\\.(css|js|woff)(.*) &#123; root /home/ritterhou.github.io; expires 30d; &#125;&#125; 其中文件夹 ritterhou.github.io 中的文件是从我的个人仓库中直接clone下来的。 2. 配置GitHub Webhook虽然托管方式变了，但是我的博客还是由Hexo生成的，博客写完之后也会自动push到GitHub上面去，所以我使用GitHub Webhook来使得每当GitHub上的博客仓库有push操作时，VPS会自动的抓取最新的静态文件到本地，从而完成博客的自动部署功能。 GitHub的配置如下： 每当发生push操作的时候，GitHub会对域名 http://webhook.nosuchfield.com/ 发起一次post请求，所以我们需要对这个请求做出一定的响应，因此我们需要把以上域名解析到VPS的IP地址上，之后执行一段脚本，Nginx配置如下： 12345678server &#123; listen 80; server_name webhook.nosuchfield.com; location / &#123; proxy_pass http://localhost:8000; &#125;&#125; 之后，我们用Python写一个脚本并监听在 8000 端口，具体脚本如下： 1234567891011from wsgiref.simple_server import make_serverimport osdef application(environ, start_response): os.system(&#x27;cd /home/ritterhou.github.io &amp;&amp; git pull&#x27;) start_response(&#x27;200 OK&#x27;, [(&#x27;Content-Type&#x27;, &#x27;text/html&#x27;)]) return &#x27;hello, webhook!&#x27;httpd = make_server(&#x27;&#x27;, 8000, application)httpd.serve_forever() 这个脚本的功能就是每当有请求来到时，打开我们的静态文件文件夹并执行 git pull 操作来获取最新的博客网页。想要让以上脚本在后台执行，可以执行命令注2： nohup python pull.py &amp; 注1：具体的证书生成操作可以参考这里注2：nohup即no hup，具体可以参考以下两篇文章： Linux进程KILL－－Quit,INT,HUP,QUIT,和TERM的解释 如何实现SSH断开后 进程仍然在后台运行 注3：如果想要给网站开启HTTP2（我已经开启），可以参考这篇文章。 注4：为了避免在服务器迁移的时候再次对这些内容进行配置，我把整个博客的服务端打包成了一个Docker镜像。以后在新的环境中安装并获取该镜像，之后只需要通过如下命令来运行： docker run -d -p 443:443 -p 80:80 blog","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://www.nosuchfield.com/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"从16位实模式到32位保护模式","slug":"From-16-bit-real-mode-to-32-bit-protected-mode","date":"2017-01-19T20:37:54.000Z","updated":"2025-08-22T15:42:13.338Z","comments":true,"path":"2017/01/19/From-16-bit-real-mode-to-32-bit-protected-mode/","link":"","permalink":"https://www.nosuchfield.com/2017/01/19/From-16-bit-real-mode-to-32-bit-protected-mode/","excerpt":"","text":"本文是从零开始写个操作系统吧的系列文章之一。 到目前为止，我们在bootsect中所使用的地址计算方式皆为 段地址 * 16 + 偏移地址 ，也就是16位实模式下的计算方式。但是接下来我们需要介绍另外一种完全不同的计算方式，即32位保护模式下的计算方式。 1. 32位保护模式16位保护模式很好用，并且也很简单。既然如此，那么为什么那么我们还要使用32位保护模式呢？事实上，32位保护模式主要有如下两个优势： 扩大CPU的寻址范围 提升安全性 32位保护模式下的地址计算方式和16为实模式不一样，在32位保护模式下，真正的地址不再等于 段地址 * 16 + 偏移地址。在32位保护模式下，段寄存器中存储的地址不再叫段地址，而是叫 段选择子。段选择子包含如下三个部分的数据： 请求特权级RPL（Requested Privilege Level）； TI，TI&#x3D;0表示描述符在GDT中，TI&#x3D;1表示描述符在LDT中； 索引值（Index）,查询GDT的时候所使用的就是这部分的索引值; 我们根据段选择子的索引去查询 全局描述符表，可以获得 段描述符，段描述符中存在着一个部分叫做 基地址，我们获取基地址之后再加上偏移地址，就可以获取到真正的内存中的地址了。以上步骤稍微有点复杂，不过复杂的部分只在段地址的计算的部分，偏移地址部分和16位实模式并没有任何区别，所以接下来我详细的介绍一下段地址的这一系列的转化的详情。这一系列步骤可以用下图来表示： 通过上面的观察可以发现，GDT（全局描述符表）在这转换之中承担了一个非常重要的角色，所以接下来我们就详细的了解一下这个表的结构。 2. GDT（全局描述符表）GDT在本质上是一个数组，而我们之前提到的段选择子就是这个数组的下标，我们可以通过段选择子去查阅这个数组从而得到数组中一个指定的段描述符。GDT存在于内存中，CPU通过一个名叫 gdtr 的寄存器保存GDT的位置信息，所以我们在设定好了GDT之后，要把GDT的位置信息保存在gdtr中。所以我们可以使用如下的公式来计算出段描述符的位置： 段描述符的位置 = 段选择子的索引 * 一个段描述符的长度 + gdtr的值 OK，我们已经知道GDT是一个数组，并且也知道如何让CPU找到我们的GDT在内存中的位置了。下面我来详细介绍一下GDT中的每一项（即段描述符）会存储哪些东西，正是依靠这些存储的内容我们才能获取到比16位实模式更好的内存使用方式。 段描述符的大小为8个字节，主要包含了以下三个部分： 基址（32位），定义了这个段在物理内存的起始地址； 段大小（20位），定义了这个段的大小； 其他各种标志位（12位），包含了特权级以及读写权限等内容。 下面就是一个段描述符的图示： 标志位包含了这个段的读写权限、特权级等等一系列重要的属性，各个标志位的具体含义以及相应数值的意义请自行查阅资料获取。 在上面我们接触到了GDT、段选择子、段描述符等概念，如果理解起来稍有困难，下面这张图清晰地揭示了这些概念之间的关系： 其中查阅GDT，找到对应的段描述符的步骤就是使用了公式 段描述符的位置 = 段选择子 * 一个段描述符的长度 + gdtr的值 来完成的。 现在，你应该已经基本上明白了段选择子、GDT、段描述符这些概念之间的关系了，接下来我们就要进入32位保护模式的世界了，不过在进入之前，我们还需要先根据需要来初始化一个GDT以供32位保护模式下的CPU使用。 3. 初始化GDTGDT可以存放在内存中的任意位置，不过设置好GDT之后需要把GDT在内存中的位置（大小为32位）和长度（大小为16位）保存在gdtr中，之后CPU就可以根据gdtr寄存器中的数据来寻找GDT在内存中的位置了。 了解了一些与GDT相关的概念之后，我们开始在内存中手动的创建一个GDT，并且使用 lgdt 指令把GDT的属性信息（即位置和长度信息）保存在gdtr中。下面就是一个我们创建GDT并把其信息保存在gdt中的汇编实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293[org 0x7c00]lgdt [gdt_descriptor] ; 把 gdt 的位置保存到 gdtr 中cli ; 屏蔽中断; 把 cr0 的最低位置为 1，开启 32 位保护模式mov eax, cr0or eax, 0x1mov cr0, eax; jmp CODE_SEG:init_pm ; 进行一次远跳转来刷新 CPU 缓存，存在问题; 初始化段寄存器的值并设置栈的位置init_pm: mov ax, DATA_SEG mov ds, ax mov ss, ax mov es, ax mov fs, ax mov gs, ax mov ebp, 0x90000 ; 现在栈顶指向 0x90000 mov esp, ebp call BEGIN_PM ; 开始执行保护模式的代码BEGIN_PM: mov ebx, STRING ; 被打印字符的地址 mov edx, VIDEO_MEMORY ; 显存的初始地址 mov ah, WHITE_ON_BLACK ; 设置文字的颜色 call print_string_pm jmp $print_string_pm: mov al, [ebx] cmp al, 0 je done mov [edx], ax ; al 为字符，ah 为颜色，修改显存对应位置的值即可显示字符 add ebx, 1 ; 字符的位置加一 add edx, 2 ; 显存的地址加二 jmp print_string_pmdone: retVIDEO_MEMORY equ 0xb8000 ; 显存位置WHITE_ON_BLACK equ 0x0f ; 背景色的控制STRING db &#x27;We are in protected mode!&#x27;, 0 ; 打印的字符; ******** GDT 开始的标记 ********gdt_start:; GDT 的第一项必须为 0gdt_null: dd 0x0 ; dd，4 个字节 dd 0x0; 代码段描述符，一段很机械的的定义，参考 Intel 手册即可gdt_code: ; base=0x0, limit=0xfffff , ; 1st flags: (present)1 (privilege)00 (descriptor type)1 -&gt; 1001b ; type flags: (code)1 (conforming)0 (readable)1 (accessed)0 -&gt; 1010b ; 2nd flags: (granularity)1 (32-bit default)1 (64-bit seg)0 (AVL)0 -&gt; 1100b dw 0xffff ; Limit (bits 0-15) dw 0x0 ; Base (bits 0-15) db 0x0 ; Base (bits 16-23) db 10011010b ; 1st flags , type flags db 11001111b ; 2nd flags , Limit (bits 16-19) db 0x0 ; Base (bits 24-31); 数据段描述符，一段很机械的的定义，参考 Intel 手册即可gdt_data: ; Same as code segment except for the type flags: ; type flags: (code)0 (expand down)0 (writable)1 (accessed)0 -&gt; 0010b dw 0xffff ; Limit (bits 0-15) dw 0x0 ; Base (bits 0-15) db 0x0 ; Base (bits 16-23) db 10010010b ; 1st flags , type flags db 11001111b ; 2nd flags , Limit (bits 16-19) db 0x0 ; Base (bits 24-31); 在这里放置一个标记方便我们计算 gdt 的长度gdt_end:; GDT descriptiorgdt_descriptor:dw gdt_end - gdt_start - 1 ; Size of our GDT, always less one of the true sizedd gdt_start ; Start address of our GDT; 把描述符的位置通过常量的值保存下来CODE_SEG equ gdt_code - gdt_startDATA_SEG equ gdt_data - gdt_starttimes 510-($-$$) db 0dw 0xaa55 汇编如上的代码并运行，能够得到如下的结果，红线中的字符就是我们通过改变显存中的数据从而打印出来的： 到这里，你大概已经对 32 位保护模式有了一定的了解了，如果想要更加详细的对此进行了解，强烈推荐阅读Linux内核完全剖析的第四章：80X86保护模式及其编程。 4. 总结这这篇文章中，我们了解到了32位保护模式和GDT的概念，以及如何通过设置GDT来帮助我们切换到32位保护模式。","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"通过 BIOS 中断读取磁盘数据到内存","slug":"Reads-disk-data-into-memory-via-BIOS-interrupt","date":"2017-01-17T22:33:48.000Z","updated":"2025-08-22T15:42:13.345Z","comments":true,"path":"2017/01/17/Reads-disk-data-into-memory-via-BIOS-interrupt/","link":"","permalink":"https://www.nosuchfield.com/2017/01/17/Reads-disk-data-into-memory-via-BIOS-interrupt/","excerpt":"","text":"本文是从零开始写个操作系统吧的系列文章之一。 在上篇文章中我们讲到了一些基础知识，然后通过BIOS中断成功的在屏幕上打印出了一个字符。不过我之前也提到了，把kernel从磁盘读到内存中也是bootsect的任务之一，所以这一次我们就来讲一讲如何通过BIOS中断把磁盘中的数据读取内存之中。 1. 磁盘的构造关于磁盘构造这块我不太想多说了，毕竟网上都能查到。我们需要重点观点关注就是磁盘的三个属性：磁头（Heads）、柱面(Cylinder)、扇区(Sector)，也就是一般称为CHS的东西。只要使用这三个参数，我们就能定位到一个指定的扇区，接下来我就演示一下如何使用汇编语言操纵磁盘来从磁盘中读取数据到内存中。 2. 通过BIOS中断读取磁盘扇区中的数据到内存中以下为代码实现： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758[org 0x7c00]; 打印启动信息mov bx, BOOT_MESSAGEcall print_string; 开始读取call disk_load; 打印成功信息mov bx, BOOT_SUCCESScall print_string; 为了验证磁盘中的数据是否已经被成功读取到内存中了，我们把内存中对应位置的数据读取出来进行查看mov dx, [0x9000] ; 打印 0x9000 处的字节，也就是第二个扇区的第一个字节call print_hexmov dx, [0x9000 + 512] ; 打印 0x9512 处的字节，也就是第三个扇区的第一个字节call print_hexjmp $disk_load: mov bx, 0x9000 ; 把磁盘指定扇区中的数据加载内存中的 0x0000(ES):0x9000(BX) 处 mov ah, 0x02 ; BIOS 读取扇区的方法 mov al, 2 ; 读取 2 个扇区 mov ch, 0x00 ; CHS 中的 cylinder 为 0 mov dh, 0x00 ; CHS 中的 head 为 0 mov cl, 0x02 ; 从第 2 个扇区开始读（即接在 bootsect 后面的扇区） int 0x13 ; 使用 BIOS 13 号中断开始从磁盘读数据到内存 jc disk_error ; 中断调用时会设置 carry flag，如果未设置，则发生了错误 mov bl, 2 cmp bl, al ; BIOS 在读取时会把真正读取到的扇区数赋给 al jne disk_error ; 如果 al 不为 2，则说明读取发生了错误 retdisk_error: mov bx, DISK_ERROR_MSG call print_string jmp $; 为了使代码保持整洁，我们把打印函数都放到 print.asm 文件中，这里的 include 和 C 语言中 include 的功能一样。%include &quot;print.asm&quot;; 用于打印的字符串，0x0a 和 0x0d 分别是换行和 Enter，你可以去掉其; 中一个来看一下打印出来的效果，这样可以方便你对这两个字符的理解BOOT_MESSAGE: db &#x27;Karen is booting...&#x27;, 0x0a, 0x0d, 0BOOT_SUCCESS: db &#x27;The kernel has been loaded.&#x27;, 0x0a, 0x0d, 0DISK_ERROR_MSG db &quot;Disk read error!&quot;, 0times 510-($-$$) db 0dw 0xaa55; dw 是两个字节，256 * 2 个字节 = 512 个字节，也就是说在结尾我们再加上两个 512 个字节的内容，现在汇编后的文件大小; 是 1.5kb，占用磁盘的前三个扇区。也就是说现在我们除了存有 bootsect 的第一个扇区之外还有存有数据的第二和第三个扇区了。times 256 dw 0x1234times 256 dw 0xface 下面是 print.asm 文件中关于打印操作的打印代码： 12345678910111213141516171819202122232425262728293031323334353637383940; 打印字符串print_string: mov ah, 0x0e mov cl, [bx] cmp cl, 0 jne bx_add retbx_add: mov al, [bx] int 0x10 add bx, 1 jmp print_string; 打印两个个字节的 16 进制（不过顺序是反的，这个我没能解决）print_hex: cmp dx, 0 ; 需要被打印的字节存储在 dx 中 je end ; 如果 dx 为 0，说明已经打印完毕，方法返回 mov cx, dx shr dx, 4 ; dx 逻辑右移 4 位 and cl, 0xf ; cl = dx 的低八位，这里再通过与操作得到 cl 的低四位，也就是 dx 的低四位 cmp cl, 10 jl less_ten ; 如果此时 cl &lt; 10，执行方法 less_then cmp cl, 10 jge great_ten ; 如果此时 cl &gt;= 10，执行方法 great_thenend: retless_ten: add cl, 48 ; 数字的 ASCII 码是从 48 开始的，数字 + 48 = 数字对应的 ASCII 码 mov al, cl mov ah, 0x0e int 0x10 jmp print_hex ; 继续打印下一个字符great_ten: add cl, 55 ; 大写字母的 ASCII 码是从 55 开始的，数字 + 55 = 字母对应的 ASCII 码 mov al, cl mov ah, 0x0e int 0x10 jmp print_hex 汇编（汇编的时候只需要使用第一个文件即可，print.asm 文件会自动被nasm找到并且引用进来）并且使用虚拟机运行这个文件，运行结果应该如下所示： 在这篇文章里我们主要了解到了BIOS 13号中断的使用以及如何打印一个字节的16进制，磁盘的读取实际上是一段比较机械的代码，主要是设置从什么地方开始读取磁盘、磁盘需要读取的扇区数以及这些数据要被读取到内存中的什么位置等等，这些都设置好之后执行一下中断就可以完成相关的操作了。","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"通过BIOS中断在屏幕上打印出一行启动信息","slug":"Through-the-BIOS-interrupt-to-print-out-bootstrap-information-on-the-screen","date":"2017-01-13T22:29:21.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2017/01/13/Through-the-BIOS-interrupt-to-print-out-bootstrap-information-on-the-screen/","link":"","permalink":"https://www.nosuchfield.com/2017/01/13/Through-the-BIOS-interrupt-to-print-out-bootstrap-information-on-the-screen/","excerpt":"","text":"本文是从零开始写个操作系统吧的系列文章之一。 我们已经知道，CPU的工作方式就是不断的取指执行，而x86系列的CPU的PC(program counter)是通过寄存器CS和IP所定位的，CPU就是这样不知疲倦的一条一条指令执行下去来完成我们交给它的任务。下面我简单介绍一下从按下开机按钮到操作系统的kernel被从磁盘加载到内存中这段时间内所发生的事情。 1. BIOS控制着一切在按下开机按钮之后，此时CPU复位，PC被重置。当前CPU处于一个比较复杂的模式（具体可以看着这里，看不懂也没关系），此时CPU的PC所指向的内存地址位于BIOS内存空间，所以CPU就开始执行BIOS内已经固化好的一些指令。为什么CPU的PC最开始要指向BIOS的内存空间内呢？因为在刚开机的时候，内存中是没有指令的（内存为空），所以CPU没法从内存中读指令，那么我们必须弄一个在刚开机的时候就能够让CPU读取指令的区域，BIOS就是承担这一重任的部件。 说句题外话，计算机在上面的时间段内执行过程叫做boot，这个词源于一句谚语： pull oneself up by one’s bootstraps 也就是“提着自己的靴子把自己提起来”，这显然是做不到的。计算机启动的时候也是一样，如果不使用一些在开机前就已经存在的指令，那又怎么能让CPU工作起来呢？ CPU会执行一段时间的BIOS的指令，BIOS中包含了一些开机器自检、读取硬件参数、初始化一个中断向量表等等的操作。除此之外，BIOS还会试图读取磁盘的第一个扇区（512byte）中的内容，如果这个512个字节的最后两个字节是0xaa55，那么BIOS会认为这是一个可以启动的设备，就会把这512个字节读到内存中起始地址为0x7c00的位置；如果最后两个字节不是0xaa55，那么BIOS就会认为这不是个可启动的设备，就会继续尝试读取下一个可能的启动设备。当BIOS中所需要执行的操作都执行完毕之后，BIOS的最后一条指令是让PC跳转到内存中0x7c00的地址处，也就是磁盘第一个扇区被读入到内存中所处的位置。接下来，因为PC指向了0x7c00处，所以从磁盘读到内存中的指令就开始被执行了，整个过程滴水不漏。这整个步骤大约如下所示： 我们现在所需要做的工作就是图上的第三步，也就是调用BIOS已经初始化好的中断向量表在屏幕上打印出计算机的启动信息。在实际写代码之前，我们需要了解一下Intel CPU的两种模式。 2. Intel CPU的模式所谓的模式就是CPU定位内存中指定地址的操作方式。在前面，我只用PC或者CS、IP等等这样含糊不清的方式来表示了CPU操作内存的方式，现在我们更详细的了解一下x86 CPU是怎么定位内存中的指定地址的。首先需要知道，x86架构的CPU比较常用的模式有如下两种： 16位实模式 32位保护模式 32位保护模式我们会在后面的文章中接触到，目前不用管它，我们先了解一下16位实模式即可。所谓的16位保护模式，听起来感觉名字高大上，其实就是代表了 实际地址 = 段地址 * 16 + 偏移地址 的这种计算方式（如果看到这里你不理解段地址和偏移地址是什么意思，那么还是先看一下汇编语言（第2版）补充一些基础知识为好）。这就是16位实模式，我们也只需要了解一下它的地址的计算方式就足够了。 在跳转到0x7c00地址的时候，CPU就已经处于了16位实模式，所以我们存放在磁盘第一个扇区中的代码必须要使用16位实模式的方式来进行计算。事实上存放在磁盘第一个扇区中的代码并不是操作系统，而是我们一般称为bootsect的存在，bootsect的主要任务之一就是从磁盘上再把我们真正的操作系统（kernel）从磁盘读入到内存中。为什么要这么麻烦呢，为什么不直接把操作系统放在第一个扇区呢？原因就在于一般来说操作系统都是要比512个字节大的，所以第一个磁盘扇区放不下它，因此我们要兜一个圈子依靠bootsect才能把操作系统加载到内存中。整个流程如下所示： 3. 调用BIOS中断打印出启动信息了解了以上的一些基础知识之后，我们就可以开始着手写我们的bootsect了，首先我们新建一个名为boot.asm的文件，用你喜欢的编辑器打开它，然后写入如下的代码： 12345mov ah, 0x0e ; 调用 10 号中断时 ah 默认应为此值mov al, &#x27;X&#x27; ; al 等于 X 的 ASCII 码的值int 0x10 ; 调用 10 号中断，把寄存器 al 所对应的字母在屏幕上打印出来times 510-($-$$) db 0 ; $ 表示文件的当前位置，$$ 表示文件的起始位置，times 表示重复执行某个操作，db 表示放一个 0 在这个位置dw 0xaa55 ; 再填入 aa 和 55 两个字节，保证该文件大小为 512 个字节，使得该文件可以合法的被 BIOS 加载到内存中 上面可能就是第4行代码稍微需要解释一下，假设 510 - ($ - $$)的值为n，那么我们在当前位置（也就是当前位置减去起始位置的值，即$ - $$）的基础再填充n个字节就能使得当前文件的大小为510个字节，即 510 - ($ - $$) + ($ - $$) &#x3D; 510，最后再加上两个字节0xaa55，那么这个文件就妥妥的是512个字节了。 代码写好之后保存一下，之后执行以下命令对源码进行汇编操作： 1nasm boot.asm -f bin -o boot.bin 其中 -f bin 表示输出完全原生的二进制代码，执行完命令后，就会有一个 boot.bin 文件被生成出来了。之后执行命令 1qemu-system-i386 boot.bin 会让虚拟机执行我们生成的 bootsect 文件，如果没什么问题的话，会在虚拟机的屏幕上打印出一个字母X。 OK，至此为止我们已经了解一些基础知识，创建了一个bootsect并且加载到内存中执行，通过10号中断成功的在屏幕上打印出我们想要的东西了。 4. 一点扩展通过上面的学习我们已能够在屏幕上打印出我们想要的东西了，下面是一个稍微复杂一点的例子，我定义了一个名为 print_string 的函数，它的作用是打印出字符串。这个程序中的指令稍微多一点，而且还涉及到了 栈 和我们之前的提到的16位保护模式的概念，如果有不理解的还是希望能看一看我前面提到的那本书，对于加强对代码理解是很有帮助的。 1234567891011121314151617181920212223242526[org 0x7c00] ; means all the address in this file is begining in 0x7c00(equals to segment value is 0x7c0)mov ah, 0x0e ; BIOS interupt 0x10 need ah is 0x0e, no reasonmov bx, STRING ; STRING is just a addresscall print_stringjmp $ ; jmp to current addressSTRING: db &#x27;test&#x27;, 0 ; build a string in this address, and it end with a 0print_string: mov cl, [bx] ; the value of bx is STRING, so [bx] is the value which in address STRING cmp cl, 0 ; cmp cl with 0 jne bx_add ; if cl not equals 0, jmp to bx_add(until [bx] is 0, this instruction is running) retbx_add: mov al, [bx] int 0x10 ; when execute BISO interupt 0x10, it with print the value of register al into screen add bx, 1 ; bx plus one, means bx is pointing the next letter noe jmp print_stringtimes 510-($-$$) db 0 ; $ means current address, $$ means the start address, so 510-($-$$) means how many 0 we should write in this file after current address, then we can make this file is 510b. times x i means run i x times, so this instruction means we just run db 0(write a 0 here) 510-($-$$) times.dw 0xaa55 ; write word(2 bytes) 0xaa55 at the end of this file, it will make this file bootable. 参考：计算机是如何启动的？ - 阮一峰的网络日志","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"从零开始写个操作系统吧","slug":"Write-an-operating-system-from-scratch","date":"2017-01-12T23:01:43.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2017/01/12/Write-an-operating-system-from-scratch/","link":"","permalink":"https://www.nosuchfield.com/2017/01/12/Write-an-operating-system-from-scratch/","excerpt":"","text":"操作系统（英语：operating system，缩写：OS）是管理计算机硬件与软件资源的计算机程序，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出装置、操作网络与管理文件系统等基本事务。操作系统也提供一个让使用者与系统互动的操作界面。&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;—— 维基百科 操作系统最重要的任务就是管理硬件然后给上层用户提供一个封装良好的使用环境，使得上层用户可以直接使用操作系统提供的某些抽象概念而不需要去了解底层的硬件的操作与交互。 一般来说，操作系统对硬件的管理会涉及到以下的管理方式以及一些概念的抽象： 硬件 抽象 处理器 多进程 内存 分段、分页 磁盘 文件系统 各种其他硬件 外设 从零开始写个操作系统吧（目录） 从零开始写个操作系统吧 - 通过BIOS中断在屏幕上打印出一行启动信息 从零开始写个操作系统吧 - 通过 BIOS 中断读取磁盘数据到内存 从零开始写个操作系统吧 - 从 16 位实模式到 32 位保护模式 需要注意的是，在写操作系统之前需要一些基础知识，比如CPU的工作方式，一定的汇编语言基础和C语言基础，如果你觉得自己基础有所欠缺，推荐阅读以下两本书： 汇编语言（第2版） C程序设计语言 如果有能力的话，能把深入理解计算机系统（原书第2版）读一遍也是极好的。 本系列所针对的CPU都是Intel的x86系列的，使用的汇编是nasm格式的汇编（一直觉得AT&amp;T的汇编有点反人类 :|）。使用的操作系统是Linux（cinnamon发行版），事实上Windows和MacOS也是可以的，但是我选用Linux写代码的原因是Liunx下的工具比较多并且使用起来都比较方便，如果可以的话，也推荐你最好也使用Linux来进行开发工作。在开发的过程会使用到以下的软件： qemu - 运行我们的操作系统的虚拟机 nasm - 汇编器 gcc以及一些编译链接的套件 - 编译C语言并生成可执行文件 … 以上这些工具都可以使用Debian的包管理工具apt-get进行安装，Linux的好处在此就体现出来了。","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"计算机的计算（三） - 图灵机","slug":"Turing-machine","date":"2017-01-09T22:11:34.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2017/01/09/Turing-machine/","link":"","permalink":"https://www.nosuchfield.com/2017/01/09/Turing-machine/","excerpt":"","text":"本文是计算机的计算系列的第三篇。 1. 图灵机20 世纪 30 年代，阿兰·图灵（Alan Turing）想要制造出一种可以替代人来进行计算的机器，他在论文《论可计算数及其在判定性问题上的应用》中提出了一种通用的计算机器。具体做法是给一台机器配上一条无限长的空纸带（实际上是一个两端都能随需增长的一维数组），并且允许在纸带上的任意位置读写字符。一条纸带既做存储又做输入：可以在纸带上预先填满字符串当作输入，然后机器在执行过程中可以读取这些字符并在必要的时候覆盖它们。 能访问一条无限长纸带的有限状态自动机叫作图灵机（Turing Machine，TM ）。和下推自动机相比，图灵机不再只被限制在一个栈中，它可以随意的读取纸带上的任意一个位置。不过传统的图灵机并没有使用随意读取纸带任意一个位置的这种方式，而是使用了一个更为简单的方式： 用一个纸带头（tape head）指向纸带的一个特定位置，并且只能在那个位置读取或写入字符。每一步计算之后，纸带头都可以向左或者向右移动一个方格。 这种只进行左移或者右移的操作并没有降低图灵机的计算能力（虽然有些降低了图灵机的执行速度，但是这种牺牲是值得的），却提高了图灵机的简单性。此外，为了进一步保持图灵机的简单，我们在纸带上只会写两个数：0和1。 现在我们已经了解了图灵机的构造及所包含的基本操作了，下面我们开始了解图灵机的转移规则，下面是一组转移规则的示例： 当前状态 读入当前格子的数 写数字到当前的格子 转移到的状态 纸带头移动方向 1 1 0 2 R 1 0 1 3 L 上面是个非常简单的转移规则的例子，第一条是当前状态为1，读入为1，此时向格子上写入0，然后进入状态2，接着纸带头右移；第二条则是当前状态为1，读入为0，此时向个格子上写入1，然后进入状态3，接着纸带头左移。 转移规则还是很容易理解，需要注意的是图灵机把状态机的输入和纸带中的数据联系了起来。想想在下推自动机中，自动机的输入和栈中的数据是割裂开来的，但是在图灵机中，自动机中的输入就是纸带上的数据，这种联系使得图灵机更加简单，因为我们此时只需要考虑纸带就可以，而不再去考虑一个额外的输入了。 其实这种方式有着一个更为重要的优点，也就是我们可以在上一步的转移操作中为下一步的转移操作设计好一个输入，这在下推自动机中是做不到的，因为下推自动机的输入只能由我们人类来给出，而不能由机器给出。我们为图灵机设计好一个最初始的输入和转移规则之后，图灵机可以通过自己给自己设计输入然后永远的执行下去。 同样,我们可以使用示意图来模拟一个图灵机，例如下面这个就代表了一个图灵机，它对应的规则在后面给出了。 处于状态 1 并且读入一个 0 时，写入一个 1，右移，然后进入状态 2； 处于状态 1 并且读入一个 1 时，写入一个 0，左移，然后保持在状态 1； 处于状态 1 并且读到一个空白时，写入一个 1，右移，然后进入状态 2； 处于状态 2 并且读到一个 0 时，写入一个 0，右移，然后保持在状态 2； 处于状态 2 并且读入一个 1 时，写入一个 1，右移，然后保持在状态 2； 处于状态 2 并且读到一个空白时，写入一个空白，左移，然后进入状态 3。 到这里我们已经大致的了解了图灵机的基本构造。同样的，图灵机也分为确定型图灵机和非确定型图灵机，下面我们将分别进行讨论。 2. 确定型图灵机确定型图灵机意味着该图灵机的转移规则不会存在冲突，同时也意味着不会有转移规则的缺失问题。对于第二点，因为较为复杂，所以我们和前面一样不予考虑，我们目前只对唯一性进行限制。下面是一个用Python所模拟的图灵机： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165&quot;&quot;&quot;能访问一条无限长纸带的有限状态自动机叫作图灵机（Turing Machine，TM ）&quot;&quot;&quot;# 纸带class Tape(object): def __init__(self, left, middle, right, blank): self.left = left self.middle = middle self.right = right self.blank = blank # 纸带头写当前位置 def write(self, character): return Tape(self.left, character, self.right, self.blank) # 纸带头左移 def move_head_left(self): # 让纸带可以自动扩展 if len(self.left) == 0: self.left = [&#x27;_&#x27;] # -1 在右边的时候是不被包含的 return Tape(self.left[:-1], self.left[-1], [self.middle] + self.right, self.blank) # 纸带头右移 def move_head_right(self): # 让纸带可以自动扩展 if len(self.right) == 0: self.right = [&#x27;_&#x27;] return Tape(self.left + [self.middle], self.right[0], self.right[1:], self.blank) def __str__(self): # 最后一个是空白字符的代表 return str(self.left + [&#x27;[&#x27; + self.middle + &#x27;]&#x27;] + self.right + [&#x27;&lt;&#x27; + self.blank + &#x27;&gt;&#x27;])tape1 = Tape([&#x27;1&#x27;, &#x27;0&#x27;, &#x27;1&#x27;], &#x27;1&#x27;, [], &#x27;_&#x27;)# print(tape1)# tape1 = tape1.move_head_left()# print(tape1)# tape1 = tape1.write(&#x27;0&#x27;)# print(tape1)# tape1 = tape1.move_head_right()# print(tape1)# tape1 = tape1.write(&#x27;0&#x27;)# print(tape1)# tape1 = tape1.write(&#x27;1&#x27;)# print(tape1)# 和前面的一样，一个图灵机的配置是一个状态和一条纸带的组合class TMConfiguration(object): def __init__(self, state, tape): self.state = state self.tape = tape def __str__(self): return str(self.state) + &#x27; -&gt; &#x27; + str(self.tape)# 图灵机的一个转移规则class TMRule(object): # 参数：当前状态，读入纸带，下一个状态，写入纸带，纸带头移动方向 def __init__(self, state, read_character, next_state, write_character, direction): self.state = state self.read_character = read_character self.next_state = next_state self.write_character = write_character self.direction = direction # 当一个配置的状态和它当前的读入字符与某一个转移规则的状态和读入字符相等时， # 我们可以认为此配置符合该转移规则 def applies_to(self, configuration): return self.state == configuration.state and self.read_character == configuration.tape.middle # 根据当前规则，计算出当前配置的下一个配置（注：当前配置必须是已经符合当前转移规则的一个配置） def follow(self, configuration): return TMConfiguration(self.next_state, self.__next_tape(configuration)) # 计算出纸带的下一个状态 def __next_tape(self, configuration): written_tape = configuration.tape.write(self.write_character) if self.direction == &#x27;L&#x27;: return written_tape.move_head_left() elif self.direction == &#x27;R&#x27;: return written_tape.move_head_right()rule1 = TMRule(1, &#x27;0&#x27;, 2, &#x27;1&#x27;, &#x27;R&#x27;)print(rule1.applies_to(TMConfiguration(1, Tape([], &#x27;0&#x27;, [], &#x27;_&#x27;))))print(rule1.applies_to(TMConfiguration(1, Tape([], &#x27;1&#x27;, [], &#x27;_&#x27;))))print(rule1.applies_to(TMConfiguration(2, Tape([], &#x27;0&#x27;, [], &#x27;_&#x27;))))print(rule1.follow(TMConfiguration(1, Tape([&#x27;&#x27;], &#x27;0&#x27;, [&#x27;&#x27;], &#x27;_&#x27;))))# 把一个图灵机的规则整理起来就是一个转移规则集合了class DTMRulebook(object): def __init__(self, rules): self.rules = rules # 根据当前配置找到下一个配置 def next_configuration(self, configuration): return self.__rule_for(configuration).follow(configuration) # 根据当前配置去规则集合中找符合要求的转移规则 def __rule_for(self, configuration): for rule in self.rules: if rule.applies_to(configuration): return rule raise Exception(&quot;找不到可供使用的规则 ...&quot;)rulebook1 = DTMRulebook([ TMRule(1, &#x27;0&#x27;, 2, &#x27;1&#x27;, &#x27;R&#x27;), TMRule(1, &#x27;1&#x27;, 1, &#x27;0&#x27;, &#x27;L&#x27;), TMRule(1, &#x27;_&#x27;, 2, &#x27;1&#x27;, &#x27;R&#x27;), TMRule(2, &#x27;0&#x27;, 2, &#x27;0&#x27;, &#x27;R&#x27;), TMRule(2, &#x27;1&#x27;, 2, &#x27;1&#x27;, &#x27;R&#x27;), TMRule(2, &#x27;_&#x27;, 3, &#x27;_&#x27;, &#x27;L&#x27;)])configuration1 = TMConfiguration(1, tape1)print(configuration1)configuration1 = rulebook1.next_configuration(configuration1)print(configuration1)configuration1 = rulebook1.next_configuration(configuration1)print(configuration1)configuration1 = rulebook1.next_configuration(configuration1)print(configuration1)# 对上面的图灵机进行一些封装class DTM(object): def __init__(self, current_configuration, accept_states, rulebook): self.current_configuration = current_configuration self.accept_states = accept_states self.rulebook = rulebook # 判断当前配置是否是可接受的 def accepting(self): return self.current_configuration.state in self.accept_states # 转移到下一个配置 def step(self): self.current_configuration = self.rulebook.next_configuration(self.current_configuration) # 不断的把配置转移到下一个直到处于接受状态 def run(self): while not self.accepting(): self.step() # 直接可以接受时才返回当前的配置 return self.current_configurationdtm = DTM(TMConfiguration(1, tape1), [3], rulebook1)print(dtm.current_configuration)print(dtm.accepting())print(dtm.step)print(dtm.current_configuration)print(dtm.accepting())print(dtm.run())print(dtm.current_configuration)print(dtm.accepting()) 阅读完并理解以上代码之后你就会发现，图灵机相比于下推自动机要容易理解一点，因为“简单性”也是图灵机的重要性质之一。阿兰·图灵设计这种机器的时候特意让它们保持简单以便容易构建和推导，所以图灵机更容易被模拟出来。 3. 非确定型图灵机对于一台图灵机，“不确定性”意味着每个状态和字符的组合会允许多于一个的规则，因此从一个起始配置开始会有多个可能的执行路径，这就是我们所说的非确定型图灵机。 和NFA与DFA的关系一样，任意一台非确定型图灵机都可以用一台DTM（Deterministic Turing Machine，确定型图灵机）表示出来，所以我们说： 非确定型图灵机并不能比DTM拥有更大的计算能力 事实上，确定型图灵机代表了从有限计算机器到全能机器的临界点。也就是说，通过升级图灵机规范以使其更强大的任何尝试都注定失败。《计算的本质》中作者还举出了其他的一些计算模型，然而这些模型无一例外地都和图灵机的计算能力等价，因此邱奇、图灵和哥德尔提出了著名的邱奇-图灵论题： 一切直觉上能计算的函数都可用图灵机计算，反之亦然。 4. 通用图灵机通过把Tape、TMRule、DTMRulebook以及DTM重新实现成图灵机的规则，我们能设计一台图灵机，它能通过从纸带读取其规则、接受状态以及起始配置然后单步执行，模拟任何其他确定型图灵机，本质上这扮演着图灵机规则手册解释器的角色。完成这种工作的机器叫作通用图灵机（Universal Turing Machine，UTM） 。 这里需要理解的是，通用图灵机本身也是一台确定型图灵机，只是这台图灵机能够在内部模拟出其它的图灵机，正是因为其可以模拟出其它的图灵机，所以它的规则就不再是硬编码的。我们使用这台通用图灵机的时候，可以根据需要来模拟一台不同的图灵机，而这台新的图灵机的转移规则可以在模拟的时候进行规定，所以此时这台通用图灵机的操作就不再是硬编码的了，而是可以根据需要来进行创建。 5. 从图灵机到CPU我假设你已经明白了类似于半加器、全加器这样的计算电路，这种电路被称之为组合逻辑电路。它的任一时刻的稳态输出，仅仅与该时刻的输入变量的取值有关，而与该时刻以前的输入变量取值无关。 与组合逻辑电路相对应的时序逻辑电路，时序逻辑电路是指电路任何时刻的稳态输出不仅取决于当前的输入，还与前一时刻输入形成的状态有关。看到了时序逻辑电路，是不觉得它和自动机的性质非常相似？事实上，给定任何确定自动机，我们都可以设计这样一个时序电路。所以我们可以根据通用图灵机的性质来设计一个时序电路，而这样的一个电路，就是CPU。 但是需要注意的是，CPU不一定非要是由电路构成，因为通用图灵机本身是一个抽象的模型，所以我们自然可以通过各种来实现这个抽象模型。事实上，第一个把计算和电子元件联系起来的人是香农，他在论文《对继电器和开关电路中的符号分析》中首次提出通过电器元件来进行数学计算，并证明了可以通过继电器电路来实现布尔代数的逻辑运算。 现代CPU的执行流程主要包括如下几步（CSAPP 4.3.1节）： 取指（fetch） 译码（decode） 执行（execute） 访存（memory） 写回（write back） 更新PC（PC update） 这几个步骤大致相当于图灵机的： 读纸带 寻找对应的转移规则 找到规则，执行 向纸带上写回数据 更新状态 读写头向左或向右移动 下面可以通过一个表格来进行更直观的对比： CPU 图灵机 取指 读纸带 译码 寻找对应的转移规则 执行 找到规则，执行 访存 向纸带上写回数据 写回 （同上） 更新PC 更新状态，读写头向左或向右移动 我们可以发现图灵机和CPU的执行过程十分相似，因为CPU本来就是根据图灵的计算模型而设计出来的。 到这里图灵机就讲的差不多了，这里有一篇文章也是讲图灵机的，算是一篇科普文，讲的也是比较不错的，有兴趣的可以看看。","categories":[],"tags":[{"name":"计算","slug":"计算","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97/"},{"name":"计算机","slug":"计算机","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}]},{"title":"计算机的计算（二） - 下推自动机","slug":"Pushdown-automata","date":"2017-01-07T21:38:52.000Z","updated":"2025-08-22T15:42:13.345Z","comments":true,"path":"2017/01/07/Pushdown-automata/","link":"","permalink":"https://www.nosuchfield.com/2017/01/07/Pushdown-automata/","excerpt":"","text":"本文是计算机的计算系列的第二篇。 1. 下推自动机自带栈的有限状态机叫作下推自动机（PushDown Automaton，PDA）。 上面给出了下推自动机的概念，那么为什么我们要在有限自动机的基础上给其增加一个栈来构建下推自动机呢？其根本原因在于有限状态机本身无法存储数据，而加上了栈之后的下推自动机则具有了数据存储能力。具有了存储能力之后，下推自动机的计算能力相较于有限自动机得到了进一步的增强。 我们已经知道，有限自动机在进行状态转移的时候，需要读取一个输入，然后根据当前状态已经输入来进行状态转移。下推自动机在进行状态转移的时候同样要依赖于当前状态和输入，不过，因为下推自动机有了栈的概念，所以在进行状态转移的时候我们还需要一点别的东西——读栈和写栈操作。例如下图这样的一个下推自动机： 我们可以把这个下推自动机用这样的转移列表列出来，注意这里的 $ 符号，因为栈为空的状态并不是很好判断，所以我们添加了这个字符来代表栈为空，也就是说栈的最底部永远应该保持有 $ 这个字符。最下面的虚线代表着当栈为空且状态为2时（我们使用虚线来代表不需要有输入的转移情形，即自由移动），此时不需要任何输入，栈会自动的弹出 $ 然后再压入 $，随后状态从2变为1。 当前状态 输入字符 转移状态 栈顶字符（读入&#x2F;弹出） 压入字符 1 ( 2 $ b$ 2 ( 2 b bb 2 ) 2 b 不压入 2 无输入 1 $ $ 相对于有限自动机，下推自动机只是增加了一个入栈和出栈的操作，可以说并不复杂，但是需要提醒的一点是：对于下推自动机，栈顶的元素也是转移的规则之一。怎么理解这句话呢？下面我通过一个小例子来说明。 有如下两个转移规则 当前状态 输入字符 转移状态 栈顶字符（读入&#x2F;弹出） 压入字符 1 a 2 x $ 1 a 3 y $ 当在状态1读到输入a的时候，此时并不能决定到底要转移到那一个状态，而是要根据此时的栈顶元素（x或是y）来判断要进行哪一种的转移操作，所以说栈顶元素也是转移的规则之一。《计算的本质》中是这样描述这个特性的： 在某种程度上，下推自动机还能控制自己。在规则和栈之间有一个反馈环——栈的内容影响机器应该遵守的规则，而按照某个规则执行也会影响栈的内容——这允许PDA在栈中存储一些信息，这些信息可以影响它将来的执行。 因为下推自动机是有限自动机的扩充，所以下推自动机也分为确定性下推自动机和非确定性下推自动机，下面将会详细介绍。 2. 确定性下推自动机什么是确定性？即 无冲突、无遗漏。 对于无冲突，我们只要保证下推自动机在进行状态转移的时候不会产生模棱两可的规则即可； 而无遗漏这个要求操作起来就比较的棘手，因为下推自动机一般很难把所有的转移规则都覆盖到，所以一般的做法是忽略这个约束并允许DPDA（确定性下推自动机，Deterministic PushDown Automaton）只定义完成工作所需的规则，并且假定一台DPDA在没有规则可用时将进入停滞状态。 了解DPDA的定义后，就开始使用Python来模拟一个下推自动机吧，代码实现如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108&quot;&quot;&quot;确定性下推自动机，Deterministic PushDown Automaton&quot;&quot;&quot;# 定义一个栈class Stack(object): # 初始时栈底的元素 def __init__(self, init): self.__storage = init def top(self): return self.__storage[-1] def push(self, p): # 压入的内容做遍历，靠近后面的内容应该先被压入 for i in reversed(p): self.__storage.append(i) def pop(self): return self.__storage.pop()# 名词[配置]表示一个状态和一个栈的组合，其实上相当于以前的[一个状态]# 为什么要定义[配置]呢？目的在于把状态和栈这两种元素组合起来形成一个整体，方便使用class PDAConfiguration(object): def __init__(self, state, stack): self.state = state self.stack = stack# DDPA的转移规则class PDARule(object): # 参数：当前状态，输入，下一个状态，（栈）弹出字符，压入字符 def __init__(self, state, character, next_state, pop_character, push_characters): self.state = state self.character = character self.next_state = next_state self.pop_character = pop_character self.push_characters = push_characters # 下一个配置：1. 下一个状态就是 next_state 参数，2. 下一个配置的栈由方法 next_stack 根据当前的栈信息算出 def follow(self, configuration): return PDAConfiguration(self.next_state, self.__next_stack(configuration.stack)) # 判断指定配置执行指定输入时是否可用当前的转移规则 def applies_to(self, configuration, character): return self.state == configuration.state \\ and self.pop_character == configuration.stack.top() and self.character == character # 下一个栈的计算，先弹出再压入即可 def __next_stack(self, stack): stack.pop() # 弹出 stack.push(self.push_characters) # 压入 return stack# 转移规则集合class DPDARulebook(object): def __init__(self, rule_set): self.ruleSet = rule_set # 用于获取下一个配置 def next_configuration(self, configuration, character): return self.__rule_for(configuration, character).follow(configuration) # 根据当前的配置和输入来查找对应的转移规则 def __rule_for(self, configuration, character): for rule in self.ruleSet: if rule.applies_to(configuration, character): return rule raise Exception(&quot;找不到可供使用的规则 ...&quot;)rulebook = DPDARulebook([ PDARule(1, &#x27;(&#x27;, 2, &#x27;$&#x27;, [&#x27;b&#x27;, &#x27;$&#x27;]), PDARule(2, &#x27;(&#x27;, 2, &#x27;b&#x27;, [&#x27;b&#x27;, &#x27;b&#x27;]), PDARule(2, &#x27;)&#x27;, 2, &#x27;b&#x27;, []), PDARule(2, None, 1, &#x27;$&#x27;, [&#x27;$&#x27;])])class DPDA(object): # 参数：初始配置，接受状态，规则集合 def __init__(self, current_configuration, accept_states, rule_book): self.current_configuration = current_configuration self.accept_states = accept_states self.rule_book = rule_book # 判断当前的状态是否是接受状态 def accepting(self): return self.current_configuration.state in self.accept_states # 输入 def read_character(self, character): self.current_configuration = self.rule_book.next_configuration(self.current_configuration, character) # 同样为了简化操作，方便连续输入 def read_string(self, string): for c in string: self.current_configuration = self.rule_book.next_configuration(self.current_configuration, c)if __name__ == &#x27;__main__&#x27;: dpda = DPDA(PDAConfiguration(1, Stack([&#x27;$&#x27;])), [1], rulebook) print(dpda.accepting()) dpda.read_string(&#x27;(()&#x27;) print(dpda.accepting()) 虽然代码的实现看上去挺复杂的，但是我们只需要牢记两点： 下推自动机只是有限自动机增加了一个栈而已，所以我们只是增加了栈的压入和弹出操作 下推自动机的转移规则还需要指定栈顶元素，栈顶元素不一样的不能算为同样的转移规则 3. 非确定性下推自动机在介绍非确定性下推自动机之前，我们写来了解一下使用非确定性下推自动机有什么好处。观察下面这张图，这是一个用来检测一个输入是否是回文的确定性下推自动机。 处于状态1且输入了a或者b的时候，每输入一个输入就会在栈顶把这个输入加上去（和之前不一样，我们在这里把直接把输入入栈了，也就是把输入和栈联系了起来。在之前，输入和栈内元素我们都是区分开来的）； 在输入了 m 之后，又会把栈内元素根据输入顺序弹出来（也就是当栈顶为a时，我们必须输入a，之后a被弹出，下一个元素继续进行同样的操作）。 在有了这种机器之后，我们就能识别出类似于 babbamabbab 这样的回文了。但是我们还需要一个额外的 m 来进行分割的操作，这样感觉并不是很优美。我们可以使用非确定性下推自动机来完成同样的操作（出于简单考虑，该自动机只支持偶数个字母的判断）： 上面这个机器除了状态1到状态2的转移操作和之前的DPDA不一样，其余完全一样。也就是说从状态1到状态2的转移不需要任何的确定性的约束，这种没有确定性约束的下推自动机叫作非确定性下推自动机。下面就是一个非确定性下推自动机的模拟： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145&quot;&quot;&quot;非确定性下推自动机&quot;&quot;&quot;# 定义一个栈class Stack(object): # 初始时栈底的元素 def __init__(self, init): self.__storage = init def top(self): return self.__storage[-1] def push(self, p): # 压入的内容做遍历，靠近后面的内容应该先被压入 for i in reversed(p): self.__storage.append(i) def pop(self): return self.__storage.pop() # 相当于 Java 的 toString 方法 def __str__(self): return str(self.__storage)# 名词[配置]表示一个状态和一个栈的组合，其实上相当于以前的[一个状态]# 为什么要定义[配置]呢？目的在于把状态和栈这两种元素组合起来形成一个整体，方便使用class PDAConfiguration(object): def __init__(self, state, stack): self.state = state self.stack = stack def __str__(self): return str(self.state) + &#x27;:&#x27; + str(self.stack)# DDPA的转移规则class PDARule(object): # 参数：当前状态，输入，下一个状态，（栈）弹出字符，压入字符 def __init__(self, state, character, next_state, pop_character, push_characters): self.state = state self.character = character self.next_state = next_state self.pop_character = pop_character self.push_characters = push_characters # 下一个配置：1. 下一个状态就是 next_state 参数，2. 下一个配置的栈由方法 next_stack 根据当前的栈信息算出 def follow(self, configuration): return PDAConfiguration(self.next_state, self.__next_stack(configuration.stack)) # 判断指定配置执行指定输入时是否可用当前的转移规则 def applies_to(self, configuration, character): return self.state == configuration.state \\ and self.pop_character == configuration.stack.top() and self.character == character # 下一个栈的计算，先弹出再压入即可 def __next_stack(self, stack): stack.pop() # 弹出 stack.push(self.push_characters) # 压入 # print(stack) return stack&quot;&quot;&quot;↑↑↑ 上面内容和 DPDA 完全一样 ↑↑↑&quot;&quot;&quot;# 非确定性下推自动机转移规则集合class NPDARulebook(object): def __init__(self, rule_set): self.ruleSet = rule_set # 用于获取下面的多个配置 def next_configurations(self, configuration, character): configurations = [] for config in configuration: rules = self.__rules_for(config, character) for rule in rules: configurations.append(rule.follow(config)) return configurations # 根据当前的[配置]和[输入]来查找对应的转移规则 # 与 DPDA 不同，这里可能会对应多个不同的转移规则，我们用集合来存放这些转移规则 def __rules_for(self, configuration, character): rules = [] for rule in self.ruleSet: if rule.applies_to(configuration, character): rules.append(rule) return rulesrulebook = NPDARulebook([ PDARule(1, &#x27;a&#x27;, 1, &#x27;$&#x27;, [&#x27;a&#x27;, &#x27;$&#x27;]), PDARule(1, &#x27;a&#x27;, 1, &#x27;a&#x27;, [&#x27;a&#x27;, &#x27;a&#x27;]), PDARule(1, &#x27;a&#x27;, 1, &#x27;b&#x27;, [&#x27;a&#x27;, &#x27;b&#x27;]), PDARule(1, &#x27;b&#x27;, 1, &#x27;$&#x27;, [&#x27;b&#x27;, &#x27;$&#x27;]), PDARule(1, &#x27;b&#x27;, 1, &#x27;a&#x27;, [&#x27;b&#x27;, &#x27;a&#x27;]), PDARule(1, &#x27;b&#x27;, 1, &#x27;b&#x27;, [&#x27;b&#x27;, &#x27;b&#x27;]), PDARule(1, None, 2, &#x27;$&#x27;, [&#x27;$&#x27;]), PDARule(1, None, 2, &#x27;a&#x27;, [&#x27;a&#x27;]), PDARule(1, None, 2, &#x27;b&#x27;, [&#x27;b&#x27;]), PDARule(2, &#x27;a&#x27;, 2, &#x27;a&#x27;, []), PDARule(2, &#x27;b&#x27;, 2, &#x27;b&#x27;, []), PDARule(2, None, 3, &#x27;$&#x27;, [&#x27;$&#x27;])])class NPDA(object): # 参数：初始配置，接受状态，规则集合 def __init__(self, current_configuration, accept_states, rule_book): self.current_configuration = [current_configuration] self.accept_states = accept_states self.rule_book = rule_book # 判断当前的状态是否是接受状态 def accepting(self): for current_config in self.current_configuration: if current_config.state in self.accept_states: return True return False # 输入 def read_character(self, character): for i in self.current_configuration: print(i) # 转移到下一个配置 self.current_configuration = self.rule_book.next_configurations(self.current_configuration, character) # 同样为了简化操作，方便连续输入 def read_string(self, string): for c in string: self.read_character(c)if __name__ == &#x27;__main__&#x27;: dpda = NPDA(PDAConfiguration(1, Stack([&#x27;$&#x27;])), [3], rulebook) print(dpda.accepting()) dpda.read_string(&#x27;babba&#x27;) dpda.read_character(None) dpda.read_string(&#x27;abbab&#x27;) dpda.read_character(None) print(dpda.accepting()) 我们同样使用集合来保存非确定性下推自动机的配置的可能情况，具体的思想可以参考DFA到NFA的转化方式。 4. 不等价我们已经了解了任意的一个NFA都可以转化为一个与其等价的DFA，那么任意一个NPDA都可以转化为一个与其等价的DPDA吗？非常遗憾，答案是否定的。 所以不幸的是，我们的 NPDA 模拟的行为并不像一台 DPDA，也不存在 NDPA 到 DPDA的算法。无标记的回文问题就是这样一个例子，NPDA 能完成这个问题，但 DPDA 不能，因此非确定性下推自动机确实比确定性的能力要强。","categories":[],"tags":[{"name":"计算","slug":"计算","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97/"},{"name":"计算机","slug":"计算机","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}]},{"title":"计算机的计算（一） - 有限自动机","slug":"Finite-automaton","date":"2017-01-05T22:16:51.000Z","updated":"2025-08-22T15:42:13.334Z","comments":true,"path":"2017/01/05/Finite-automaton/","link":"","permalink":"https://www.nosuchfield.com/2017/01/05/Finite-automaton/","excerpt":"","text":"本文是计算机的计算系列的第一篇。 1. 有限自动机有限自动机（finite automaton），也叫有限状态机（finite state machine），是一台极简的计算机模型。下面是一个非常简单的有限自动机： a被称之为输入； 圆圈1和2我们称之为状态，其中1为起始状态，2为接受状态； 在状态1的时候输入了a，此时会转移到状态2，这种转移我们可以称之为转移规则； 如果一系列的输入能够使得一台有限自动机最终处于接受状态，那么这个输入是可以被这台有限自动机接受的，这个输入的内容可以称之为这台有限自动机的正则语言；否则，这种输入就是被该有限自动机拒绝的； 下面是一台稍微复杂点的有限自动机，对照上面的概念，自己看看能不能理解这些概念： 如上所示： 这台有限自动机一共有1、2、3三种状态，其中1是输入状态，3是接受状态； 一共有两种输入，即a和b； 转移规则如下表所示： 当前状态 输入 目标状态 1 a 2 1 b 1 2 a 2 2 b 3 3 a 3 3 b 3 怎么样，很简单吧。OK，我们已经理解了有限自动机的概念了，接下来我们聊聊有限自动机下的两个不同类型：确定性有限自动机和非确定性有限自动机。 2. 确定性有限自动机具有以下这两个性质的有限自动机可以称为确定性有限自动机： 没有冲突：一个状态对于同样的输入，不能有多个规则，即每个输入只能有一个转移规则； 没有遗漏：每个状态都必须针对每个可能的输入字符有至少一个规则； 说的通俗点就是一个状态对应一个输入只会有一个转移规则；而每个状态都必须包含有所有输入的转移规则，不可以有遗漏；这就是确定性有限自动机。 理解了什么是确定性有限自动机了，接下来就让我们用代码来实现它： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&quot;&quot;&quot;DFA，确定性有限自动机&quot;&quot;&quot;# 定义了一个转移规则class FARule(object): # 初始化 def __init__(self, state, character, next_state): self.state = state self.character = character self.nextState = next_state # 通过判断当前的状态和输入和此规则是否相等来决定是否应该使用该种规则 def applies(self, state, character): return self.state == state and self.character == character # 获取下一个规则 def next_state(self): return self.nextState# 如果上面的类是一个转移规则，那么这里就是存储了一个有限自动机的转移规则的集合class FARuleBook(object): def __init__(self, rule_set): self.ruleSet = rule_set def rules(self): return self.ruleSet# 初始化一个有限自动机的规则集合rulebook = FARuleBook([ FARule(1, &#x27;a&#x27;, 2), FARule(1, &#x27;b&#x27;, 1), FARule(2, &#x27;a&#x27;, 2), FARule(2, &#x27;b&#x27;, 1)])# 定义一个确定性有限自动机class DFA(object): # 初始化有限自动机时包含了初始状态、接受状态和转移规则的集合 def __init__(self, current_state, accept_state, rule_book): self.currentState = current_state self.acceptState = accept_state self.ruleBook = rule_book.rules() # 当输入一个字符时，根据当前状态和输入去转移规则中寻找对应的转移规则， # 根据规则获取下一个状态，并把下一个状态置为当前状态 def input_character(self, character): for r in self.ruleBook: if r.applies(self.currentState, character): self.currentState = r.next_state() # 根据当前状态来判断是否是输入状态 def is_accept(self): return self.currentState == self.acceptState # 为了方便操作，同时也提供了一个可以输入字符串的方法 def input_string(self, string): for c in string: self.input_character(c)# 初始化一个DFAdfa = DFA(1, 2, rulebook)# 读入字符串dfa.input_string(&#x27;aaaaaaaaaaaaaaaaaaab&#x27;)# 判断当前是否处于接受状态print(dfa.is_accept()) 上面就是一个用Python模拟的DFA了，很简单吧。 3. 非确定性有限自动机所谓非确定性有限自动机（NFA），就是没有了DFA那两条限制的机器，即： 对于某一个状态，读入某一个输入的时候，可能会有多种转移规则； 对于某一个状态，它可能会缺少对应某种输入的转移规则； 说的再多不如示意图来的直观，下面就是一个NFA： 通过观察上图可以发现，在状态1输入b的时候，可能跳转到状态1，也可能跳转到状态2；而状态4则对任何输入不会有转移。这样的机器就是NFA。 OK，了解NFA的定义之后我们同样可以用Python来对其进行模拟。因为NFA的状态转移可能会对应多种的转移结果，所以与确定性有限自动机不一样，在非确定性有限自动机中我们用一个集合来保存所有可能转移到的状态。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&quot;&quot;&quot;NFA，非确定性有限自动机&quot;&quot;&quot;# 定义了一个转移规则class FARule(object): # 初始化 def __init__(self, state, character, next_state): self.state = state self.character = character self.nextState = next_state # 通过判断当前的状态和输入和此规则是否相等来决定是否应该使用该种规则 def applies(self, state, character): return self.state == state and self.character == character # 获取下一个规则 def next_state(self): return self.nextState# 同样，我们需要一个规则转移的集合class FARuleBook(object): # 传入一个规则集合 def __init__(self, rule_set): self.ruleSet = rule_set # 通过当前的状态集合和输入，根据转移规则集合，计算出所有可能的输出状态 def get_next_states(self, current_states, character): next_states = [] rule_set = self.ruleSet for current_state in current_states: for rule in rule_set: if rule.applies(current_state, character): next_states.append(rule.next_state()) # 使用 set 有助于去除重复的集合 return set(next_states)# 初始化一个NFA的规则集合rulebook = FARuleBook([ FARule(1, &#x27;a&#x27;, 1), FARule(1, &#x27;b&#x27;, 1), FARule(1, &#x27;b&#x27;, 2), FARule(2, &#x27;a&#x27;, 3), FARule(2, &#x27;b&#x27;, 3), FARule(3, &#x27;a&#x27;, 4), FARule(3, &#x27;b&#x27;, 4)])# 非确定性有限自动机class NFA(object): # 初始化包括初始状态、接受状态、规则转移集合 def __init__(self, current_state, accept_state, rule_book): self.current_state = current_state self.accept_state = accept_state self.rule_book = rule_book # 通过判断接受状态是否处于当前状态之中来测试当前是否可能处于接受状态 def applies(self): return self.accept_state in self.current_state # 读入一个输入，根据当前状态获取到所有的可能的输出状态的集合 def read_character(self, character): self.current_state = self.rule_book.get_next_states(self.current_state, character) # 同理，制作一个方便读入字符串的方法 def read_string(self, string): for c in string: self.read_character(c)# 创建一个NFA，切记输入状态应该是一个集合nfa = NFA([1], 4, rulebook)# 读入 bbbnfa.read_string(&#x27;bbb&#x27;)# 判断输入是否可能被接受（即输入是否是该有限自动机的正则语言）print(nfa.applies()) 如果你看懂了上面程序，其实上面的代码所模拟的就是上面图例中的NFA。 需要注意的是，NFA有一点和DFA极其不一样的地方就在于NFA存在着一种名为自由移动的操作，所谓自由移动也就是说在NFA中某一种状态可以自由的转移到另一个状态而不需要任何的输入，下图就是一个例子： 从状态1到状态2或者状态4的转移操作就叫做自由移动，不需要任何的输入就可以完成状态转移的操作。如果想用代码来描述的话，方式如下： 12FARule(1, None, 2)FARule(1, None, 4) 4. 从NFA转为DFA我们已经了解NFA和DFA，仔细的研究NFA，思考它和DFA有什么区别吗？之后观察下图： 如果我们把一个NFA用上面的这种形式表现出来，那么它是不是就变成了一个DFA了呢？答案是肯定的。通过上图的这种转化方式，我们可以将任意一个NFA转化为DFA，具体的实现就不给出了，读者有兴趣可以自己实现。如果觉得有困难，可以参考计算的本质的3.4节。 5. 总结有限自动机是一种非常简单但是又很重要的计算模型，我们后面提到的下推自动机和图灵机都是在有限自动机的基础上构造的，所以在查看后面的文章前请务必要先理解有限自动机这种计算模型。","categories":[],"tags":[{"name":"计算","slug":"计算","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97/"},{"name":"计算机","slug":"计算机","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}]},{"title":"计算机的计算（目录）","slug":"Computation-of-computers","date":"2017-01-05T21:24:23.000Z","updated":"2025-08-22T15:42:13.332Z","comments":true,"path":"2017/01/05/Computation-of-computers/","link":"","permalink":"https://www.nosuchfield.com/2017/01/05/Computation-of-computers/","excerpt":"","text":"computer这个词最早指的是一个人，并且很有可能是一个女人。在上个世纪二三十年代，名为computer的人的主要工作是进行大量繁杂而又无趣的科学计算。当时有一个数学家，致力于发明一种可以用于计算的机器，希望从本质上解决这些计算问题。这个人就是图灵，而这个被他发明出来用于计算的机器就被称之为图灵机。 在这个系列博客中，我想要详细介绍以下的三种机器：有限自动机、下推自动机以及图灵机，它们的计算能力依次增强。本系列博客大量参考计算的本质这本书中的第二部分，并且把书中Ruby代码都重新用Python实现了出来（毕竟会Python的人更多一点）。强烈建议读者在读完本博客之后去看原书，书中除了以上机器的介绍，还探讨了lambda以及停机问题等等，对于理解计算机大有裨益。 计算机的计算 - 有限自动机（包括确定性有限自动机和非确定性有限自动机） 计算机的计算 - 下推自动机（包括确定性下推自动机和非确定性下推自动机） 计算机的计算 - 图灵机（以及通用图灵机） 虽然我们把图灵机放在最后才讲，但是事实上图灵机是早于其他的自动机发明的。图灵机是图灵在20世纪30年代发明的，后来在20世纪40和50年代，许多研究者在图灵机的基础上，研究出了一些比图灵机简单的机器，这才是我们所称的有限自动机。 参考： 自动机理论、语言和计算导论(原书第3版) 图灵的秘密 他的生平、思想及论文解读 计算的本质：深入剖析程序和计算机","categories":[],"tags":[{"name":"计算","slug":"计算","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97/"},{"name":"计算机","slug":"计算机","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}]},{"title":"Java 中的 λ 表达式","slug":"The-λ-Expression-in-Java","date":"2016-12-05T21:01:43.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2016/12/05/The-λ-Expression-in-Java/","link":"","permalink":"https://www.nosuchfield.com/2016/12/05/The-%CE%BB-Expression-in-Java/","excerpt":"","text":"一般来说我们会认为在编程领域通用的lambda意义就是匿名函数（关于为什么叫做lambda可以参考这里），1958年Lisp首先采用匿名函数，不过随着时间的推移，越来越多的语言开始采用这种语法（比如PHP，C++，Python，等等）。这种趋势正好验证了Paul Graham在The roots of Lisp（Lisp之根源）所提出的一种观点 我认为目前为止只有两种真正干净利落， 始终如一的编程模式：C语言模式和Lisp语言模式。此二者就像两座高地，在它们中间是尤如沼泽的低地。随着计算机变得越来越强大，新开发的语言一直在坚定地趋向于Lisp模式。二十年来，开发新编程语言的一个流行的秘决是，取C语言的计算模式，逐渐地往上加Lisp模式的特性，例如运行时类型和无用单元收集。 我个人对上面的这句话无比的赞同，因为我们也可以观察到，不论PHP、C++还是Python，又或者是最近火的不行的要写天写地写宇宙的JavaScript，他们最初的语法都是借鉴了C，然后又开始逐渐的汲取Lisp的的语言特性，这正是上面所提到的取C语言的计算模式，逐渐地往上加Lisp模式的特性。 Java在版本8中加入了 λ 表达式，不过这个新添加的语法糖和Lisp不一样并不是用来实现匿名函数的（Java中没有匿名函数），而是用于匿名内部类，新添加的 λ 表达式相当于增加了一种新的书写匿名内部类的方式。 1. 匿名内部类Java中的匿名内部类使得程序员可以创建一个继承自某一个类或者实现了某一个接口的匿名类，这个类在实现的时候不需要有名字，而可以直接创建一个对象供使用。请看例子 123public interface Lelouch &#123; void geass(String s);&#125; 1234567Lelouch lelouch = new Lelouch() &#123; @Override public void geass(String s) &#123; System.out.println(s); &#125;&#125;;lelouch.geass(&quot;ルルーシュ·ヴィ·ブリタニアが命じる&quot;); 上面我们定义了一个名叫鲁鲁修的接口，在接口中定义了一个方法叫做geass，方法包含了一个String类型的参数。然后我们使用了匿名内部类来创建了一个实现了鲁鲁修这个接口的实现类，并且在匿名类中我们重写了geass这个方法，方法很简单，就是打印这个参数中的字符串。通过匿名内部类的方式创建了一个实现了Lelouch接口的对象之后，创建一个指向了这个对象的类型为Lelouch名为lelouch的引用，之后通过这个引用执行匿名对象的geass方法，成功打印出了ルルーシュ·ヴィ·ブリタニアが命じる这句话。 2. lambda表达式上面这个例子中我们创建了匿名内部类使用了6行代码，接下来，我们使用lambda表达式只需要一行就能够搞定，并且实现的的效果匿名内部类的效果一样。不过需要注意的是，lambda表达式和匿名内部类还有些不太一样的地方： 匿名内部类可以通过继承类或者实现接口实现，lambda表达式只适用于实现接口的情况 使用了lambda表达式的接口必须有且仅有一个方法 我们把上面的代码改写如下 1Lelouch lelouch = (s) -&gt; System.out.println(s); 上面这行代码就是一个实现了和上面的代码相同的效果的lambda表达式，我们来解释下(s)、-&gt;和System.out.println(s)是什么意思。 (s)代表了接口Lelouch中唯一的方法的参数。如果只有一个参数，可以不加括号；如果没有参数，使用()即可；如果有多个参数，只需要按顺序把参数输进去，形如(x, y)。 -&gt;，lambda的操作符，使用了它就代表使用了lambda表达式。 System.out.println(s)是一个方法执行的区域，可以使用第一个括号中所定义好的参数。如果只有一条语句，直接写出来即可；如果有多条语句，需要使用&#123;&#125;把代码括起来。 上面就是对lambda表达式的解释，很简单，很容易。只要把它和匿名内部类对照起来看，就很明了了。下面是一个稍微复杂点的例子： 123public interface Lelouch &#123; void geass(String name, String s);&#125; 123456789Lelouch lelouch = (name, s) -&gt; &#123; if (&quot;ルルーシュ&quot;.equals(name)) &#123; System.out.println(s); &#125; else &#123; System.out.println(&quot;Yes, your majesty.&quot;); &#125;&#125;;lelouch.geass(&quot;ルルーシュ&quot;, &quot;ルルーシュ·ヴィ·ブリタニアが命じる&quot;);lelouch.geass(&quot;king&quot;, &quot;&quot;); 打印结果为 ルルーシュ·ヴィ·ブリタニアが命じる Yes, your majesty. 这里我们把参数由一个添加为了两个，并且把一行执行代码变为了一个代码块，这在lambda表达式中也是合法的。 如果lambda表达式中只有一条执行语句，并且lambda表示的参数和这条执行语句所需要的参数一致，那我们就可以用::来调用方法进行执行。例如对于第一个例子 1Lelouch lelouch = (s) -&gt; System.out.println(s); 因为geass方法和System.out.println所需要的参数是一模一样的（都为s），那么我们就可以使用如下的这种lambda表达式来实现 1Lelouch lelouch = System.out::println; 上面这条语句是对原始的lambda表达式的进一步的简写，这种语法对参数的个数是没有限制的，只需要保证接口中的方法参数和所执行的语句的方法参数一致就可以了。下面是对这种语法的一个稍微复杂一点的示例，能够加深你的理解 123public interface Person &#123; void info(String name, int age, String location);&#125; 123456789101112public class Lambda &#123; public static void main(String[] args) &#123; Person person = new Lambda()::printInfo; person.info(&quot;张三&quot;, 20, &quot;南京&quot;); &#125; void printInfo(String name, int age, String location) &#123; System.out.println(&quot;[name = &quot; + name + &quot;, age = &quot; + age + &quot;, location = &quot; + location + &quot;]&quot;); &#125;&#125; 需要知道的是，lambda表达式只是Java的一个语法糖，这种操作在编译的时候编译器就会把它的语法转化为内部类的语法，之后的操作就和内部类的操作是一样的了，也就是说lambda语法不会涉及到JVM中的相关操作。 参考：Java SE 8: Lambda Quick Start","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"深入Java字符串","slug":"Depth-Java-String","date":"2016-12-02T15:19:29.000Z","updated":"2025-08-22T15:42:13.333Z","comments":true,"path":"2016/12/02/Depth-Java-String/","link":"","permalink":"https://www.nosuchfield.com/2016/12/02/Depth-Java-String/","excerpt":"","text":"String应该是每一个Java程序员在工作和学习中使用频率最高的一个类了，正是因为它的使用频率是如此之高，所以Java的设计者对String类型做了一定程度的优化，下面我们来探讨一下String类的几个比较有趣的性质。 1. String类的不变性（Immutable）在Java中，String对象的值是不可能发生改变的。 和C语言中的字符串表示方式一样，String类在其内部也是通过一个字符数组来保存字符串的所有的字符的（这应该已经算是一个常识了，大家都知道）。观察String类的源码就可以发现： 字符数组 value 被关键字 private 和 final 所修饰； String类本身也只可能在执行构造方法的时候才会去修改value的值； String类本身也被声明为final的，意味着String类无法被继承； 以上几个条件保证了String类只会在执行构造方法（即初始化）的时候才会修改字符数组的值，SUN的工程师通过这一系列的技巧来保证String对象的值绝对不会被修改。 写到这里就会有同学跳出来说了：你胡说，我明明就修改了String的值啊，而且修改的很频繁，比如下面这个例子。 123// 关于为什么不使用 new 也能创建一个 String 对象会在下一小结谈到，这里不需要管String s1 = &quot;1&quot;;s1 = s1 + &quot;2&quot;; // 或 s1 += &quot;2&quot;; 如果我们这里打印s1的值，会发现s1的值变成了12，这是不是就意味着s1所指向的String对象被修改了呢？当然没有，下面这个例子可以证明String对象并没有被修改： 12345String s1 = &quot;1&quot;;String s2 = s1;s1 = s1 + &quot;2&quot;;System.out.println(s1); // 结果为 12System.out.println(s2); // 结果为 1 我们可以发现，s2所指向的对象”1”并没有被修改，说明了String是不变的。 我们隐约感觉到上面的操作可能和 + 和 += 这两个操作有关，那么String类型的 + 和 += 操作是怎么实现的呢？答：+ 和 += 是Java中的唯一两个重载的操作符，他们只适用于String对象的操作（不是String类型的对象如果使用了这个操作符，则会调用其 toString() 方法来返回一个String对象）。在使用 + 或者 += 操作符的时候，实际上是使用了 StringBuilder 这个类来实现了所有的操作。String s = &quot;1&quot; + &quot;2&quot;; 的真实过程如下所示： 123StringBuilder sb1 = new StringBuilder(&quot;1&quot;);StringBuilder sb2 = new StringBuilder(&quot;2&quot;);String s = sb1.append(sb2).toString(); 这样我们就明白了，String对象确实是不可变的，而且String对象在执行 + 和 += 操作的时候原来是通过StringBuilder来协助完成操作的。 2. 为什么不使用new也能创建String对象String类型和Java中的其他类型（不包括基本类型）的最大区别大概就在于他不需要 new 就可以创建一个对象了，这种实现方法很类似于基本类型的创建方式，难道说String类型和基本类型之间存在着什么联系吗？答案是否定的。 我们先了解一下Java中是如何对字符串进行操作的： 在Java文件被编译为class文件之后，在class文件中（即字节码文件中），有一个区域叫做常量池（Constant Pool Table），常量池中主要保存两个东西：字面量（Literal）和符号引用(Symbolic References)。顾名思义，字面量就是能显示出值的常量，而引用就是对另外一个地方的值进行了引用的常量，我们所关注的字符串就被保存为字面量。 当class被加载到JVM中时，原来的class文件常量池中的内容会被加载到运行时常量池中，运行时常量池位于方法区。但是字符串并没有被加载到运行时常量池，而是会根据字符串的内容进行判断：如果字符串常量区中还没有一个引用所指向的堆内存中的对象与这个字符串中的内容一样，就会在堆内存中创建一个对应的String对象，然后会在字符串常量池（String Literal Pool）中创建一个指向这个对象的引用。字符串常量池是所有类共享，位于方法区外。注意，以上的String对象创建和字符串常量池中创建引用的操作在类加载时就会执行，并且执行完毕。 之后，如果新建的字符串是 String s = &quot;1&quot;; 的这种格式，虚拟机会在字符串常量区中进行查找，当找到了一个指向堆内存中值为”1”的的对象的引用时，就把这个引用复制给s，也就是说让s也指向堆内存中的那个字符串对象，s的赋值完成。 如果是 String s = new String(&quot;1&quot;); 这种格式，虚拟机会在堆内存中直接创建一个值为1的字符串对象，然后让s指向这个对象，显然这个新创建的对象和上面的那种String s = &quot;1&quot;;的操作方式所指向的不是同一个对象。但是，在这里有个必须要强调的地方，当使用new方式来创建String对象的时候，会执行String的构造方法，我们看一下String对应的这个构造方法 1234public String(String original) &#123; this.value = original.value; this.hash = original.hash;&#125; 我们发现这个新建的对象中的内容实际上是来自于 original 的内容（注意是内容，即那个保存字符串的数组），也就是说，这个新的对象的内容等于 original 的内容。original 其实是一个在class加载的时候就保存在堆内存中的对象，其在字符串常量区中会有一个指向它的引用。所以我们可以说这种通过new来创建字符串对象的方式会在堆内存中创建两个对象，一个是在加载时创建的被所有方法区都可以使用的在字符创常量区有一个指向其的引用的对象；另一个就是new出来的字符串对象，不过它的value是前面的那个 original 对象赋给它的。更进一步，这两个字符串其实指向的是同一个字符数组，如果能把这两个对象的value变量比较一下的话（不过做不到，因为value是private的），它们肯定是相等的。 看到这里我们就明白了，之所以不使用new也能创建一个String对象，是因为这个String对象在class被载入到方法区的时候就已经被创建在堆内存中了。之后在执行 String s = &quot;xxx&quot;; 语句的时候，其实是把字符串常量区中的对应的引用复制给s。相反的，当使用 String s = new String(&quot;xxx&quot;); 的时候，和其他的对象的创建方式就一样了，是直接在堆内存中创建了一个全新的对象。 123456String s1 = &quot;s&quot;; // 在字符串常量区拥有同一个引用String s2 = &quot;s&quot;;String s3 = new String(&quot;s&quot;);String s4 = new String(&quot;s&quot;);System.out.println(s1 == s2); // 打印 trueSystem.out.println(s3 == s4); // 打印 false 上面这个例子证实了我们的理论，s1和s2之所以相等，就是因为它们都是复制于字符串常量区中的同一个引用，所以它们指向的就是同一个对象，自然也就相等；而s3和s4因为它们指向的是堆内存中的不同的对象（它们都分别创建了自己对象），所以自然不会相等。那么s1和s3比较呢，是否相等？如果你已经理解了上面的过程，那么应该已经知道答案了。 了解了上面两种创建String对象的方式的区别之后，我再提一下String对象的 intern 方法，SUN对intern方法的功能介绍如下： When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned. 简单说来当一个String对象调用 intern 方法的时候，分为以下两种情况 如果字符串常量区存在一个和这个String对象equals的string，那么就返回这个string 如果不存在，就在字符串常量区创建一个指向这个String Object的引用，然后返回 通过intern方法，能够把通过new关键字创建的string也和字符串常量区联系起来了，下面这两个例子就很好的说明这一点例子1： 1234String s1 = &quot;1&quot;;String s2 = new String(&quot;1&quot;);System.out.println(s1 == s2.intern()); // 打印结果为 trueSystem.out.println(s2 == s2.intern()); // 打印结果为 false 在例子1中，因为s1是在字符串常量区中的，又因为s2的intern方法会直接返回&quot;1&quot;这个对象在字符串常量区中引用，所以它们自然相等，所以打印结果1为true；又因为s2所指向的对象和s1所指向的对象（也就是字符串常量区中的引用所指向的对象）不相等，所以打印结果2为false。例子2： 1234String s1 = &quot;1&quot;;String s2 = &quot;2&quot;;String s3 = new String(s1 + s2);System.out.println(s3 == s3.intern()); // 打印结果为 true 在例子2中，为了避免在字符串常量区中创建”12”，我们把s3通过两个字符串分开创建然后再组合起来。因为s3在调用intern方法的时候，其返回的字符串常量区中的引用也是指向了堆内存中的同样一个对象，所以他们自然相等。 3. String和StringBuilder和StringBuffer的适用场景 我们已经知道了String是不可变的了，所以String一般用于字符串不会产生变化的时候； StringBuilder一般用于字符串会变化的情况，因为其线程不安全，所以用于单线程下字符串会变化的情况； StringBUffer是线程安全的，一般用于多线程下字符串会变化的情况 下面是一个比较这三个类的效率的小demo 123456789101112131415161718long time1 = System.nanoTime();String s = &quot;a&quot;; // 固定字符串s = s + &quot;b&quot;;s = s + &quot;c&quot;;long time2 = System.nanoTime();System.out.println(&quot;String\\t\\t&quot; + (time2 - time1));long time3 = System.nanoTime();StringBuilder sb = new StringBuilder(&quot;a&quot;); // 变化的字符串，非线程安全，单线程下使用sb = sb.append(&quot;b&quot;);sb = sb.append(&quot;c&quot;);long time4 = System.nanoTime();System.out.println(&quot;StringBuilder\\t&quot; + (time4 - time3));long time5 = System.nanoTime();StringBuffer sb1 = new StringBuffer(&quot;a&quot;); // 变化的字符串，线程安全，多线程下使用sb1 = sb1.append(&quot;b&quot;);sb1 = sb1.append(&quot;c&quot;);long time6 = System.nanoTime();System.out.println(&quot;StringBuffer\\t&quot; + (time6 - time5)); 在我的电脑上测试打印结果如下： String 3422 StringBuilder 933 StringBuffer 25503 由此可见，StringBuilder的变化效率最高，String其次，StringBuffer最慢。因此如果字符串经常变化，而且是在单线程情况下，请使用StringBuilder来替代String和StringBuffer吧。 参考 Strings, Literally 请别再拿“String s &#x3D; new String(“xyz”);创建了多少个String实例”来面试了吧 String str&#x3D;new String(“Hello”)到底创建了几个对象？ 《Java编程思想》第13章","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"深入 Java TreeMap","slug":"Depth-Java-TreeMap","date":"2016-11-26T17:19:59.000Z","updated":"2025-08-22T15:42:13.333Z","comments":true,"path":"2016/11/26/Depth-Java-TreeMap/","link":"","permalink":"https://www.nosuchfield.com/2016/11/26/Depth-Java-TreeMap/","excerpt":"","text":"0. 引入Java自带基础类库中的TreeMap也是一个实现了Map接口的类，它同HashMap一样用于存储键值对。与HashMap不一样的是，TreeMap内的数据是有序的，并且其内部是由一棵红黑树来实现的。也因为以上的原因，所以TreeMap的插入查找删除的速度都比HashMap慢，所以TreeMap一般在需要对数据进行排序的时候才会使用到。 1. 二叉查找树红黑树和AVL树一样也是一种二叉查找树，关于二叉查找树的内容可以看我之前写过的二叉查找树与 AVL 树。我们已经知道，AVL树是通过调节左右子树的高度来控制插入和查找的速度的，红黑树虽然也是一棵二叉查找树，但是和AVL树不一样，它是通过给节点标记上不同的颜色来提高数据的插入和查找速度的。 AVL树为了保持自身的平衡，会频繁的进行旋转操作，而旋转操作是比较耗费时间的。红黑树会尽量的减少旋转操作，所以一般认为红黑树的操作效率会高于AVL树。 2. 红黑树的性质红黑树的性质如下（摘自维基百科）： 节点是红色或黑色。 根是黑色。 所有叶子都是黑色（叶子是NIL节点）。 每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。） 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点。 关于为什么通过这些性质就能使红黑树保证其高效率的证明，可以参考维基百科中的相关页面。 3. Entry&lt;K,V&gt;类想要购建一颗树，首先需要构建出树中的的每一个节点。每一个节点中所包含的内容应该要合适、能够包含有所有我们需要用到数据即可。Java中是通过Entry&lt;K,V&gt;类来保存红黑树中的每一个节点信息的，具体实现代码如下： 1234567891011121314151617181920// 通过 bool 类型来保存红色和黑色的状态private static final boolean RED = false;private static final boolean BLACK = true;static final class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; K key; // Key V value; // Value Entry&lt;K,V&gt; left; // 左子节点 Entry&lt;K,V&gt; right; // 右子节点 Entry&lt;K,V&gt; parent; // 父节点 boolean color = BLACK; // 节点颜色默认黑色 // 初始化一个节点，包含了 key、value 和 parent 三个参数 Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123; this.key = key; this.value = value; this.parent = parent; &#125;&#125; 4. 红黑树插入一个节点红黑树插入一个节点和二叉查找树的插入操作是一样的，对二叉查找树插入的过程不太了解可以查看二叉查找树与 AVL 树来进行了解。连接中二叉查找树的插入操作是通过递归来实现的，而TreeMap中是通过迭代来实现，不过其本质都是一样，都是通过和对应节点的值进行大小比较最终把要插入的值插入到合适的位置。 下面就是TreeMap中的插入操作，我省略掉了其中的一些不重要的步骤： 123456789101112131415161718192021222324252627public V put(K key, V value) &#123; Entry&lt;K,V&gt; t = root; // 如果根节点为空，就插入根节点（根据性质 2，根节点默认为黑色） if (t == null) &#123; root = new Entry&lt;&gt;(key, value, null); return null; &#125; int cmp; // 记录比较的值 Entry&lt;K,V&gt; parent; // 记录当前的节点，如果在当前节点下插入了新节点，那么此节点就为新节点的父节点 do &#123; parent = t; cmp = cpr.compare(key, t.key); // 如果小于当前节点，向左递归；如果大于，向右递归 if (cmp &lt; 0) t = t.left; else if (cmp &gt; 0) t = t.right; else return t.setValue(value); // 已经存在该值的时候就不插入了，返回旧节点 &#125; while (t != null); // 根据 key 的值来循环直到叶子节点 Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent); // 创建新节点，其父节点为当前的叶子节点 if (cmp &lt; 0) parent.left = e; // 如果小于就把该节点作为当前节点左孩子 else parent.right = e; // 如果大于就把该节点作为当前节点右孩子 fixAfterInsertion(e); // 插入了新节点之后，如果想要保持好红黑树的性质，需要进行红黑树的修复操作（参见第 5 节） return null;&#125; 插入操作很简单，就是根据二叉查找树的性质在进行一个循环之后把节点插入在合适的叶子节点的位置，并把其父节点设置为上一个叶子节点，并且新插入的节点是上一个叶子节点的左（右）子节点。 5. 插入之后红黑树的修复*红黑树和AVL都是二叉查找树，所以插入操作都是一样的，它们的差别就在于插入之后的修复操作不一样。因为红黑树和AVL的性质不一样，所以修复的方式也不一样。AVL树修复的目的是为了是树的高度降低，而红黑树的修复操作就是根据红黑树的5条性质而进行的。 首先我们会保证新插入的节点的颜色必然为红色，这样会使得情况变得比较简单（如果新插入的节点是黑色，那么必然会违背性质5，会增加修复开销）。当新插入的节点是红色的时候： 如果插入的是根结点，因为原树是空树，此情况只会违反性质2，所以直接把此结点涂为黑色； 如果插入的结点的父结点是黑色，由于此不会违反性质2和性质4，红黑树没有被破坏，所以此时也是什么也不做。 但是，以下三种情况则需要进行修复操作： 插入修复情况1：当前结点的父结点是红色，叔叔结点是红色；对策：将当前结点的父结点和叔叔结点涂黑，祖父结点涂红，把当前结点指向祖父结点，从新的当前结点（即祖父节点）重新开始算法。 插入修复情况2：当前结点的父结点是红色，叔叔结点是黑色，当前结点是其父结点的右子；对策：当前结点的父结点做为新的当前结点，以新当前结点为支点左旋。 插入修复情况3：当前结点的父结点是红色，叔叔结点是黑色，当前结点是其父结点的左子；对策：父结点变为黑色，祖父结点变为红色，在祖父结点为支点右旋。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101// 红黑树性质的修复private void fixAfterInsertion(Entry&lt;K,V&gt; x) &#123; x.color = RED; // 把新节点设置为红色可以使得修复操作中需要进行旋转操作的概率降低 while (x != null &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123; // 只有当前节点不为空不为根节点且其父节点是红色的时候才需要修复 if (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123; // 如果 x 的父亲是 x 的祖父的左子节点 Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x))); // 那么 x 的叔叔 y 节点就是 x 祖父的右子节点 if (colorOf(y) == RED) &#123; // 如果叔叔是红色，修复情况 1 setColor(parentOf(x), BLACK); setColor(y, BLACK); setColor(parentOf(parentOf(x)), RED); // 这一步修改了当前节点的祖父节点的性质，因为其祖父节点的性质变化可能会引入新的影响红黑树性质的因素，所以需要把祖父节点作为新的当前节点来进行一次新的判断，这就是修复的时候需要循环的原因 x = parentOf(parentOf(x)); // 把祖父节点作为新的当前节点 &#125; else &#123; if (x == rightOf(parentOf(x))) &#123; 修复情况 2 x = parentOf(x); rotateLeft(x); &#125; // 修复情况 3 setColor(parentOf(x), BLACK); setColor(parentOf(parentOf(x)), RED); rotateRight(parentOf(parentOf(x))); &#125; &#125; else &#123; Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x))); // 相反的，x 的叔叔 y 节点就是 x 祖父的左子节点 if (colorOf(y) == RED) &#123; setColor(parentOf(x), BLACK); setColor(y, BLACK); setColor(parentOf(parentOf(x)), RED); x = parentOf(parentOf(x)); &#125; else &#123; // 所有操作与上面成镜像操作 if (x == leftOf(parentOf(x))) &#123; x = parentOf(x); rotateRight(x); &#125; setColor(parentOf(x), BLACK); setColor(parentOf(parentOf(x)), RED); rotateLeft(parentOf(parentOf(x))); &#125; &#125; &#125; root.color = BLACK;&#125;// 左旋private void rotateLeft(Entry&lt;K,V&gt; p) &#123; if (p != null) &#123; Entry&lt;K,V&gt; r = p.right; p.right = r.left; if (r.left != null) r.left.parent = p; r.parent = p.parent; if (p.parent == null) root = r; else if (p.parent.left == p) p.parent.left = r; else p.parent.right = r; r.left = p; p.parent = r; &#125;&#125;// 右旋private void rotateRight(Entry&lt;K,V&gt; p) &#123; if (p != null) &#123; Entry&lt;K,V&gt; l = p.left; p.left = l.right; if (l.right != null) l.right.parent = p; l.parent = p.parent; if (p.parent == null) root = l; else if (p.parent.right == p) p.parent.right = l; else p.parent.left = l; l.right = p; p.parent = l; &#125;&#125;// 下面 5 个都是工具方法，在 fixAfterInsertion 方法中使用到了private static &lt;K,V&gt; boolean colorOf(Entry&lt;K,V&gt; p) &#123; return (p == null ? BLACK : p.color);&#125;private static &lt;K,V&gt; void setColor(Entry&lt;K,V&gt; p, boolean c) &#123; if (p != null) p.color = c;&#125;private static &lt;K,V&gt; Entry&lt;K,V&gt; parentOf(Entry&lt;K,V&gt; p) &#123; return (p == null ? null: p.parent);&#125;private static &lt;K,V&gt; Entry&lt;K,V&gt; leftOf(Entry&lt;K,V&gt; p) &#123; return (p == null) ? null: p.left;&#125;private static &lt;K,V&gt; Entry&lt;K,V&gt; rightOf(Entry&lt;K,V&gt; p) &#123; return (p == null) ? null: p.right;&#125; 上面代码中的前三个方法都有一个 /** From CLR */ 的注释，表示它们其实是借鉴了C#的 Common Language Runtime 中的代码，可能Java的开发者是在看了CLR的源码之后才开发的TreeMap XD。 在进行了修复操作之后，红黑树又恢复其本身的性质，接下来我们看看红黑树的删除操作。 6. 红黑树的删除红黑树的删除和普通的二叉查找树的删除操作是一样的，删除一个节点会分为以下三种情况： 没有儿子，即为叶结点。直接把父结点的对应儿子指针设为NULL，删除儿子结点就OK了； 只有一个儿子。那么把父结点的相应儿子指针指向儿子的独生子，删除儿子结点也OK了； 当被删除结点存在左右孩子的时候，真正被删除的点应该是该节点的左子树的最大的节点（或者是右子树的最小的节点，根据实际需要来进行选择即可），之后当前节点的值被替换为真正被删除掉的节点的值（即把子节点的值保存在当前节点了），这样一来问题就变成了第1或者第2种情况了。 我们先来看一下Java中是如何进行进行删除操作的，具体实现如下： 123456789101112131415161718192021222324252627282930313233343536private void deleteEntry(Entry&lt;K,V&gt; p) &#123; modCount++; size--; // 1. 删除点 p 有左右两个子节点，对应上面的情况 3，需要执行 successor 函数来把问题转化为第 1 或者第 2 种情况 if (p.left != null &amp;&amp; p.right != null) &#123; Entry&lt;K,V&gt; s = successor(p); p.key = s.key; p.value = s.value; p = s; &#125; Entry&lt;K,V&gt; replacement = (p.left != null ? p.left : p.right); if (replacement != null) &#123;// 2. 删除点 p 只有一个子节点 replacement.parent = p.parent; if (p.parent == null) root = replacement; else if (p == p.parent.left) p.parent.left = replacement; else p.parent.right = replacement; p.left = p.right = p.parent = null; if (p.color == BLACK) fixAfterDeletion(replacement);// 调整 &#125; else if (p.parent == null) &#123; root = null; &#125; else &#123; // 3. 删除点 p 的左右子树都为空 if (p.color == BLACK) fixAfterDeletion(p);// 调整 if (p.parent != null) &#123; if (p == p.parent.left) p.parent.left = null; else if (p == p.parent.right) p.parent.right = null; p.parent = null; &#125; &#125;&#125; 观察上面的源码就可以知道，Java会先对要删除的节点进行判断，分为以下三种情况，对应了我们在上面所说的三种理论情况 左右两个子树都不为空，就执行 successor 方法来把问题转化为只有一个子树或没有子树的情况（successor方法就是把当前节点和其右子树的最小值进行替换的方法，或者说把其右子树的最小值赋给当前节点，比较简单，就不贴出来了，相信你自己肯定也能够写出来）； 只有一个子树，把子节点接在父节点上，当前节点删除； 没有子节点，即叶子节点，直接删除即可。 上面的三种情况中，左右都不为空的情况会转化为子节点为一个或者没有子节点的情况，也就是说真正执行了删除操作的其实只是后两种情况。而在执行了删除操作之后，红黑树的性质可能发生了变化，所以在后两种情况执行了删除操作之后就要执行方法 fixAfterDeletion 来修复红黑树的性质。 我在之前的博客二叉查找树与 AVL 树有过介绍二叉查找树的删除操作，也可以做作为参考。 执行了删除操作之后，红黑树的性质可能分已经发生了改变，需要进行红黑树的修复操作，需要执行方法 fixAfterDeletion。 7. 删除之后红黑树的修复*红黑树删除后的修复操作的源码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859private void fixAfterDeletion(Entry&lt;K,V&gt; x) &#123; while (x != root &amp;&amp; colorOf(x) == BLACK) &#123; // 只有在删除的节点为黑色的时候才会破坏红黑树性质 if (x == leftOf(parentOf(x))) &#123; // 当 x 为左子节点的时候（下面还存在着一种对称的情况） Entry&lt;K,V&gt; sib = rightOf(parentOf(x)); // x 的兄弟节点 if (colorOf(sib) == RED) &#123; // 情况 1 setColor(sib, BLACK); setColor(parentOf(x), RED); rotateLeft(parentOf(x)); sib = rightOf(parentOf(x)); &#125; if (colorOf(leftOf(sib)) == BLACK &amp;&amp; colorOf(rightOf(sib)) == BLACK) &#123; // 情况 2 setColor(sib, RED); x = parentOf(x); &#125; else &#123; // 情况 3 if (colorOf(rightOf(sib)) == BLACK) &#123; // 情况 4 setColor(leftOf(sib), BLACK); setColor(sib, RED); rotateRight(sib); sib = rightOf(parentOf(x)); &#125; setColor(sib, colorOf(parentOf(x))); setColor(parentOf(x), BLACK); setColor(rightOf(sib), BLACK); rotateLeft(parentOf(x)); x = root; &#125; &#125; else &#123; // 和上面的那种情形成对称 Entry&lt;K,V&gt; sib = leftOf(parentOf(x)); if (colorOf(sib) == RED) &#123; setColor(sib, BLACK); setColor(parentOf(x), RED); rotateRight(parentOf(x)); sib = leftOf(parentOf(x)); &#125; if (colorOf(rightOf(sib)) == BLACK &amp;&amp; colorOf(leftOf(sib)) == BLACK) &#123; setColor(sib, RED); x = parentOf(x); &#125; else &#123; if (colorOf(leftOf(sib)) == BLACK) &#123; setColor(rightOf(sib), BLACK); setColor(sib, RED); rotateLeft(sib); sib = leftOf(parentOf(x)); &#125; setColor(sib, colorOf(parentOf(x))); setColor(parentOf(x), BLACK); setColor(leftOf(sib), BLACK); rotateRight(parentOf(x)); x = root; &#125; &#125; &#125; setColor(x, BLACK);&#125; 下面这张图从两种不同的初始状态开始，对应了红黑树的修复操作。虽然两颗红黑树的初始状态不一致，但是事实上还是符合上面源代码中所写的流程的。只不过在这两棵树中因为 sib 的左子树的左儿子颜色不一样，导致了对应情况 2和情况3两种情况（即第13行的那个判定条件，左边流程图对应情况2，右边的流程图对应情况3）。 从第29行开始，是一种和上面的那种操作构成镜像的情形，不多说了。然后之所以在这里我们需要进行一个循环操作是因为情况2中会把当前节点的父节点作为新的当前节点，这步操作可能会引入新的问题，所以需要再对当前节点进行性质判断，由此引发了一个迭代的过程，最终完成红黑树的性质的修复，操作完成。 参考： 教你透彻了解红黑树 TreeSet and TreeMap","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"Java中的值传递","slug":"Value-passing-in-Java","date":"2016-11-21T21:20:35.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2016/11/21/Value-passing-in-Java/","link":"","permalink":"https://www.nosuchfield.com/2016/11/21/Value-passing-in-Java/","excerpt":"","text":"1. 由一个问题引出的疑问今天在看java.io.FileInputStream源码的时候，突然发现Java程序中是可以改变对象的值的，有点违反我以前的认知。因为在我的想法中，局部变量的值的修改是不会影响到原来的值的，但是事实却是被调用函数中参数值的变化导致了原来方法中的值的变化。下面就是一个很简单的例子： 12345678910public void test() &#123; int[] i = &#123; 0 &#125;; System.out.println(i[0]); setValue(i); // 值传递 System.out.println(i[0]);&#125;private void setValue(int[] array) &#123; array[0] = 100;&#125; 输出结果如下： 0 100 很显然，数组 i 在调用方法 setValue 时进行的值传递，但是为什么 i[0] 的值还是被修改了呢，这里我们需要先了解一下JVM的内存模型。 2. JVM内存模型Java的虚拟机中内存区域被分为以下几个部分： 程序计数器 Java虚拟机栈 本地方法栈 Java堆 方法区 我们这里需要涉及到的内存区域为Java虚拟机栈和Java堆。当一个Java方法被调用时，Java虚拟机栈中就会被压入一个新的栈帧，栈帧中的其中一个部分叫做局部变量区，这个地方专门用于存放方法参数和局部变量。所以结果很明了了，当一个方法被调用时，Java虚拟机栈中被压入一个新的栈帧，而调用这个方法的那个对象（或方法）会把该方法的方法参数压入到栈帧中。这里需要注意的是这里压入的栈帧里面的方法参数是从上一个栈帧（即调用该方法的方法的栈帧）中复制出来的，而其本身并不是上一个栈帧中的值，他只是和上一个栈帧中的对应参数有一样的值而已。 具体过程可以参见下图： 上面的那个栈帧是一个名为addAndPrint的方法的，它在内部调用了一个名为addTwoTypes的栈帧，中间那幅图的下面的栈帧就是在调用方法addTwoTypes时所产生的addTwoTypes的栈帧，可以发现参数1和88.88都是值传递。 通过以上例子我们可以断言：Java中的所有方法方法调用时候的参数引用都是值传递。那么第一节中的那种情况又是为什么呐？ 除了Java虚拟机栈，我们还需要了解到Java中的堆内存，Java中的所有的对象都是保存在堆内存中的。如果我们在进行方法调用的时候传入的参数并不是一个纯粹的值（即不是基本的数据类型），而是一个引用类型，那么事情就变得不一样了。因为引用类型是一个指向堆内存中的对应对象的指针，所以在进行方法调用的时候，栈中压入新的栈帧，新栈帧中的引用是从上一个栈帧中复制过来的。但是，因为是从上一个栈帧中复制过来的，所以这个栈帧中的引用类型与前一个栈帧中的对应的引用类型指向的是堆内存中的同一个对象，因为堆内存中的对象只有一份（不过要注意目前有两个引用都指向了这个对象），所以在方法中对该对象进行操作，对象确实被修改了，之后再回到上一个栈帧，对象也还是会处于被修改的状态。所以第一节中的情况是合理的。 3. 总结以上的情况如果要总结的话，可以用一句话来概括： Java方法调用时只存在值传递，但是如果传递的参数是对某一个对象的引用，那么对应的对象也会被修改。 下面这两个链接有兴趣的可以再看看，能够加深理解，并且讲解的也很详细 Is Java “pass-by-reference” or “pass-by-value”? Chapter 8. Classes Java规范中关于方法调用有这么一句话（可以在上面链接2的页面中找到）： When the method or constructor is invoked (§15.12), the values of the actual argument expressions initialize newly created parameter variables, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the formal parameter. 这里讲的已经很明白了，再结合JVM中的内存模型一起来看，就很清晰了。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"开了博客的这一年","slug":"The-year-after-opening-the-blog","date":"2016-11-20T22:24:07.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2016/11/20/The-year-after-opening-the-blog/","link":"","permalink":"https://www.nosuchfield.com/2016/11/20/The-year-after-opening-the-blog/","excerpt":"","text":"算了算，从去年11月23号开始到今天写博客差不多也快有一年了。 从最开始去年3月份注册了GitHub，不过之后一直没用过。然后直到去年10月份研究了下GitHub Pages，之后便买了域名nosuchfield.com，开始试着在GitHub Pages上面写博客。话说这个域名真的是非常的nerd，因为是模仿http://stackoverflow.com/来起名字的，不过用了这么久感觉也还不错，前不久还给它续费了，应该会一直使用下去。 最开始博客的页面样式是抄的http://linux.im/，当时使用获得了作者的同意（不过linux.im现在的页面已经修改，不再是之前的样子了）。刚开始写博客的方式真的很傻，那时候还是把内容直接写在HTML里面然后push到GitHub上面去，因为还要处理各种标签和样式，也是写的比较的辛苦。后来了解到有一种非常神奇的工具叫做Hexo，可以生成非常美观的静态博客，而且书写只需要使用Markdown语法就行了，所以果断的去了解了一下。了解了之后感觉很不错，就把博客切换到Hexo的方式来部署了，不过还是托管在GitHub上面，在今年三月份的时候因为打开页面的时候老是被运营商劫持，还通过https://www.cloudflare.com/给博客加上了自定义域名的HTTPS功能。 其实写第一篇博客的那天白天我还去上海的一家公司去面试了，后来虽然拿了offer但是最终还是没有去。那天面试完晚上回来貌似就开始写了第一篇博客，不过具体的事情现在已经记不太清了。这一年来博客也写了几篇，但是看来看去却总会感觉没什么干货。 仔细想想这一年感觉整个人也是没有太大的进步，除了年纪增长了一岁之外，其他的部分好像都在原地踏步，也是在为此而深深的苦恼着。目前这家公司还不知道自己能呆多久，下一次想要去一家大型一点的公司，感觉小公司从各方面来讲还是都会有所欠缺一点。对工作的回报的最直观的体现就是工资了，只希望自己接下来工资能多涨涨，虽然在南京这个城市不论如何工资总是会感觉少得可怜。 还是要继续努力，毕竟自己的未来只能靠自己，希望越来越好。 body {background-image: url(/images/20161120/bg.png); background-size: 100%;} #container {opacity:0.8;}","categories":[],"tags":[{"name":"随想","slug":"随想","permalink":"https://www.nosuchfield.com/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"深入 Java HashMap","slug":"Depth-Java-HashMap","date":"2016-11-16T08:49:14.000Z","updated":"2025-08-22T15:42:13.333Z","comments":true,"path":"2016/11/16/Depth-Java-HashMap/","link":"","permalink":"https://www.nosuchfield.com/2016/11/16/Depth-Java-HashMap/","excerpt":"","text":"HashMap是Java自带的基础类库中使用频率极高的一个类，其内部使用java.util.HashMap.Entry&lt;K, V&gt;对象来保存键值对，并且使用哈希表作为内部的存储数据结构，读写效率极高，但是其本身存储的数据是无序的。HashMap位于rt.jar的java.util包下，最初于JDK1.2中首次发布。 这篇文章所分析的HashMap的源码对应JDK的版本为1.7，该版本HashMap的代码出自鼎鼎大名的Doug Lea之手。在JDK1.8中HashMap被重写，与1.7版本中的源码差异比较大，敬请读者注意。 1. 使用Entry&lt;K, V&gt;来存储每一组数据HashMap的最基本单元是Entry&lt;K,V&gt;，每一个 Entry 对象包含了如下的四个属性： 1234final K key; // 保存一组数据的 keyV value; // 保存一组数据的 valueEntry&lt;K,V&gt; next; // 保存该对象所指向的下一个 Entry 对象int hash; // 保存 key 所对应的 hash 值 Entry 的构造方法如下，构造方法的目的是对上面的四个参数进行初始化： 123456789/** * Creates new entry. */Entry(int h, K k, V v, Entry&lt;K,V&gt; n) &#123; value = v; next = n; key = k; hash = h;&#125; Entry 类还包含了 getKey()、getValue()、setValue等等这样的方法，因为这些方法的实现比较简单，就不一一赘述了。 下面我们来讨论一下Entry类所对应的这4个全局变量，理解它们的含义： 变量key与变量value 这两个变量对应的是我们要保存的键值对的key和value，也是HashMap的核心数据。每一个被put到HashMap中的键值对都会创建一个对应的Entry对象，而该Entry对象中的key和value属性就保存了我们put进去的键值对的key和value的值。 其中类型 K 和 V 是Java中的泛型一种写法，泛型保证了HashMap中所保存的所有的key的类型一致，所保存的所有的value的类型也一致。 变量next HashMap中的哈希表使用的是数组+链表的形式，所以Entry类需要是设计成一种可以构成链表的结构。Entry对象中的next变量就是一个指向Entry链表中的下一个Entry对象的指针，通过这个变量，就可以把Entry对象通过链表的形式连接起来。关于哈希表数据结构的更多信息，可以参见我之前所写的HashTable 的 Python 实现。 变量hash 把当前对象的key所对应的hash值保存起来，方便之后调用。 以上就是Entry类所对应的几个变量和方法，都比较简单。需要知道的是，Entry类是HashMap的一个内部类，并且实现了java.util.Map.Entry&lt;K,V&gt;接口。接下来我们看看HashMap是通过何种方式来构建哈希表的。 2. 通过Entry数组来构建一个哈希表结构HashMap一共有四个构造方法，抛开一个用来从其他Map对象构建HashMap的构造方法不谈，另外三个构造分别方法是： public HashMap(int initialCapacity, float loadFactor); public HashMap(int initialCapacity); public HashMap(); 第2和第3个构造方法都是在调用第一个构造方法，只是把某些参数设为了默认值而已，所以现在我们重点看看第一个构造方法的两个参数所代表的意义。 initialCapacity 的意思是初始化容量，回想一下Hash表的结构，这里所谓的初始化容量其实对应的就是保存哈希值的数组的初始长度（对哈希表结构不清楚的同学还是建议先看看文章HashTable 的 Python 实现），同时也表示了所有可能产生的哈希值的数量。如果不主动设置，哈希表的初始容量会被设置为16。 loadFactor 的意思是加载因子，在任一个时刻，如果数组已经使用的容量（即已经保存有值、非空的位置）大于或等于临界值，那么数组就需要把自己的容量扩大到原来的容量的两倍。而在HashMap中临界值threshold的计算方式为[当前数组的容量 * 加载因子]，所以加载因子就是用来控制数组容量的增长速度的。如果不主动设置，那么加载因子默认为0.75。 讲了哈希表的初始化方法，我们就可以了解HashMap中的哈希表的结构了。哈希表其实在本质上就是一个Entry类型的数组，因为Entry本身可以构成一个链表，所以这就和经典的哈希表的结构一致起来了。下面看一下哈希表的初始内容： 123456789/** * An empty table instance to share when the table is not inflated. */static final Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;/** * The table, resized as necessary. Length MUST Always be a power of two. */transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE; 可以发现，哈希表的初始化只是把变量table设置为一个空的Entry数组而已，接下来我们所有的数据都将会保存在这个数组里面。 3. 向HashMap中放入数据吧！好了，既然已经了解了哈希表是怎么构成的了，是时候向HasMap中放入数据了，让我们来看一下HasMap的public V put(K key, V value)是如何实现的。 下面这个方法主要是对table和key进行了空判断并进行了相应的操作，之后根据key来计算hash值和数组的下标。然后在指定的数组下标中，对这个数组项对应的Entry链表进行遍历，如果发现之前已经有对应该key的值存在了链表里面，则把旧的值替换为新的要保存的值并把旧的值返回，操作完成。 123456789101112131415161718192021222324252627282930public V put(K key, V value) &#123; // 如 table 为空，则需要把 table 扩展到默认容量的大小 if (table == EMPTY_TABLE) &#123; inflateTable(threshold); &#125; // 如果 key 为空，则会把其保存在数组的第 0 位 if (key == null) return putForNullKey(value); // 根据 key 计算对应的 hash 值 int hash = hash(key); // 根据 hash 值和数组的长度计算出这个 hash 值对应的数组的下标 int i = indexFor(hash, table.length); // 因为已经知道数组的下标，所以只对数组中与该 key 的 hash 一致的那个链表进行一次遍历操作就可以了，如果发现连表中的某 // 个节点的 key 与我们所要 put 的 key 是一样的，那么只需要把旧的值覆盖掉置换为新的值就行了，然后把旧的值返回 for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123; V oldValue = e.value; e.value = value; e.recordAccess(this); // 可以忽视此操作 // 返回旧的值 return oldValue; &#125; &#125; modCount++; // 可以忽视此操作 // 如果在链表中没能够找到一致的 key，则需要插入新的 Entry 对象用来保存新值 addEntry(hash, key, value, i); return null;&#125; 如果没能在链表中找到对应的key值，则意味着需要在表中插入新的值了，下面这个方法就表示了这种情况。这里会分成两种情况： 若数组容量达到了扩容的条件，则需要先对哈希表进行扩容，扩容之后对哈希表进行重新排列，然后再把值插入哈希表中； 如果不需要扩容，则直接把对应的值插入到哈希表中即可；12345678910void addEntry(int hash, K key, V value, int bucketIndex) &#123; // 如果当前数组的容量已经大于或等于临界值且这个 hash 值对应的链表不为空，那么就需要扩容 if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123; resize(2 * table.length); // 扩容 hash = (null != key) ? hash(key) : 0; // 扩容之后重新计算 hash 值 bucketIndex = indexFor(hash, table.length); // 重新计算对应的下标 &#125; createEntry(hash, key, value, bucketIndex);&#125; 我们先讨论一下不需要扩容的单纯的插入操作，因为这一步比较简单，扩容操作后面会再说。插入节点对应着两步操作： 把新节点的 next 指针指向当前数组上对应下标位置的头结点； 把当前节点置换为新的头结点。 具体的实现在下面，比较简单，就不多说了。 12345void createEntry(int hash, K key, V value, int bucketIndex) &#123; Entry&lt;K,V&gt; e = table[bucketIndex]; table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e); size++;&#125; 下面我们重点来讲一下扩容的相关操作，我们先看一下HashMap中是怎么实现扩容操作的： 12345678910111213void resize(int newCapacity) &#123; Entry[] oldTable = table; int oldCapacity = oldTable.length; if (oldCapacity == MAXIMUM_CAPACITY) &#123; // 如果容量已达扩展上限，把临界值改为 int 最大值 threshold = Integer.MAX_VALUE; return; &#125; Entry[] newTable = new Entry[newCapacity]; // 创建新的数组 transfer(newTable, initHashSeedAsNeeded(newCapacity)); // 复制元素 table = newTable; threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1); // 修改临界值&#125; 首先是判断了一下当前数组的容量，如果容量已达上限，就把临界值改为 int 最大值，意味着不会再进行扩展。 如果没有达到容量上限，那么首先会创建一个新的 Entry 数组，其容量是当前数组的容量的两倍，之后会把当前的哈希表中的值全部转移到新的数组中去（这一步极其耗费时间），之后再根据新容量把临界值修改一下即可。下面我们再讨论一下如何把旧表中的值转移到新建的表中，具体实现如下： 123456789101112131415void transfer(Entry[] newTable, boolean rehash) &#123; int newCapacity = newTable.length; for (Entry&lt;K,V&gt; e : table) &#123; while(null != e) &#123; Entry&lt;K,V&gt; next = e.next; if (rehash) &#123; e.hash = null == e.key ? 0 : hash(e.key); &#125; int i = indexFor(e.hash, newCapacity); e.next = newTable[i]; newTable[i] = e; e = next; &#125; &#125;&#125; 其实原理也很简单，就是把旧表中的所有的值全部遍历一遍，然后每从旧表中查到一个值，就把它插入到新的表中。 因为这一步的操作非常耗时，所以我们在操作HashMap的时候要尽量避免频繁的对表进行扩容操作。如果能够大概的估算出HashMap所需要的容量大小，那么在定义HashMap的时候最好就指定好其容量，这样就能避免在频繁扩容的时候带来的性能的损失。 最后，放上一张HashMap中的插入操作的流程图： 4. 从HashMap中查找数据在从HashMap中查找数据的时候，同样需要对key进行是否为空的判断。如果key为空，因为之前我们把key为空的值都保存在table[0]中了，所以这一次在取得时候也只需要从table[0]去取就行了。 1234567public V get(Object key) &#123; if (key == null) return getForNullKey(); Entry&lt;K,V&gt; entry = getEntry(key); return null == entry ? null : entry.getValue();&#125; 如果key不为空，就调用Entry&lt;K,V&gt; getEntry(Object key)方法，getEntry方法的实现很简单，分为以下这几步： 通过key来计算出对应hash值； 通过hash计算出对应的table下标； 通过下标已知了table中的槽位，然后对该槽位的链表做个遍历，找到了符合要求的Entry就返回，否则返回 null； 实际的实现代码如下： 12345678910111213final Entry&lt;K,V&gt; getEntry(Object key) &#123; if (size == 0) &#123; return null; &#125; int hash = (key == null) ? 0 : hash(key); for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)]; e != null; e = e.next) &#123; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; &#125; return null;&#125; 5. 从HashMap中删除数据删除操作同样也很非常简单，只是对key所对应的槽位的链表做一次遍历，之后找出对应的Entry就把其删除掉。 不过删除需要注意的一点是删除的节点是否是头结点： 如果是头结点，那么就让头结点的下一个节点成为新的头结点，头结点删除完成； 如果不是头结点，就让对应节点的前一个节点的next指向要删除节点的下一个节点，指定节点删除完成； 具体实现如下： 12345678910111213141516171819202122232425262728final Entry&lt;K,V&gt; removeEntryForKey(Object key) &#123; if (size == 0) &#123; return null; &#125; int hash = (key == null) ? 0 : hash(key); int i = indexFor(hash, table.length); Entry&lt;K,V&gt; prev = table[i]; Entry&lt;K,V&gt; e = prev; while (e != null) &#123; Entry&lt;K,V&gt; next = e.next; Object k; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) &#123; modCount++; size--; if (prev == e) table[i] = next; else prev.next = next; e.recordRemoval(this); return e; &#125; prev = e; e = next; &#125; return e;&#125; 6. 更多HashMap是Java中最常用的数据结构之一，除此之外还有几个比较常见的类： HashTable，与HashMap相比，HashTable是线程安全的并且不可插入空值，其余部分基本一样； TreeMap，这也是一种实现了Map接口的实现类，与HashMap相比，其内部实现的数据结构为红黑树，操作效率略低于HashMap，不过其存储的数据是有序的，TreeMap适用于需要对数据进行有序存储的场合； ConcurrentHashMap，是HashMap的线程安全的实现版本，同样出自于Doug Lea之手； 本文所讲解的HashMap的内容源于JDK版本1.7，HashMap的实现在JDK1.8中被重写了，如果想了解JDK1.8中相关的操作的实现方法，可以参考：Java HashMap工作原理及实现","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"理解 Java 中的类装载器","slug":"Understand-Java-ClassLoader","date":"2016-11-13T15:18:51.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2016/11/13/Understand-Java-ClassLoader/","link":"","permalink":"https://www.nosuchfield.com/2016/11/13/Understand-Java-ClassLoader/","excerpt":"","text":"0. 类的生命周期类装载器是 Java 中的一项创新，它使得 Java 虚拟机可以在执行的过程中再把一个 Java 类读入虚拟机，提高了程序的灵活性。在Java中，类的信息是被保存在方法区中的。在介绍类装载器之前，我们先了解一下 Java 中类的生命周期。Java 中一个类的生命周期可以划分为以下 6 个步骤： 装载，通过类加载器，把一个类的二进制读入到虚拟机中，并最终生成一个 Class 实例对象； 链接，把二进制数据合并到虚拟机的运行时状态中去，这一步又可以分为以下三个部分： 验证，确保二进制的格式正确； 准备，在方法区中为该类分配它所需要的内存； 解析，把常量池中的符号引用转化为值引用（这一步也可以在变量被使用到时再进行，即懒加载） 初始化： 如果该类的父类尚未初始化，则先初始化其父类； 如果该类存在一个初始化方法&lt;clinit&gt;()，则执行此方法（初始化方法由编译器生成，程序员不可手动在 Java 源代码中添加）； 对象的创建，如果程序中发现如下关键字new, newInstance, clone, getObject，则意味着需要在堆内存中创建一个对象，创建对象时会调用到&lt;init&gt;()方法（对应类的构造方法），初始化方法执行前必须先调用父类的初始化方法； 对象的终结，如果一个对象不再被引用，则会在垃圾收集程序执行时被垃圾收集器收集，一个对象在被垃圾收集程序收集的时候会显式的调用其void finalize()方法（如果定义了该方法的话）； 类的卸载，如果一个类不再使用，则也会被垃圾收集器收集。只有用户自定义的 ClassLoader 所装载的类才会被卸载，BootStrapClassLoader 所装载的类不会被卸载。 其中，以上的 1 ~ 3 步可以统称为类的初始化，类的初始化只可能在以下 5 种情况中发生（类初始化只会执行一次，如果类已经初始化了并且没有被卸载，则下次使用时不需要再进行初始化）： 遇到 new, getstatic, putstatic, invokestatic 关键字的时候； 使用 java.lang.reflect 包对类进行反射调用的时候； 当初始化一个类时，如果其父类尚未初始化，则会先初始化其父类； 当虚拟机启动时，包含 main() 方法的那个类会被初始化； 当使用 JDK1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例的最后解析结果是 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄的时候； 1. 类加载器基本概念这篇文章所要讨论的类装载器对应的是类的生命周期中的第一步：装载。 顾名思义，类装载器的作用就是把一个Java的字节码数据加载到JVM中，并且生成一个java.lang.Class类的实例。每个这样的实例用来表示一个 Java 类，通过此实例的 newInstance()方法就可以创建出该类的一个对象。 我们可以通过java.lang.ClassLoader类来对一个字节码数据进行加载，该类主要包含以下和类加载相关的方法： 方法 说明 getParent() 返回该类加载器的父类加载器 loadClass(String name) 加载名称为 name的类，返回的结果是 java.lang.Class类的实例 findClass(String name) 查找名称为 name的类，返回的结果是 java.lang.Class类的实例 findLoadedClass(String name) 查找名称为 name的已经被加载过的类，返回的结果是 java.lang.Class类的实例 defineClass(String name, byte[] b, int off, int len) 把字节数组 b中的内容转换成 Java 类，返回的结果是 java.lang.Class类的实例。这个方法被声明为 final的 resolveClass(Class&lt;?&gt; c) 链接指定的 Java 类 其中最核心的就是方法是defineClass方法，它负责把一连串的字节码二进制数据转化为一个Class类的实例，而不论的这些字节码来自于什么地方。 2. JVM提供的类加载器系统类加载器是由 JVM 提供的、可以直接使用的类加载器，JVM中的系统类加载器有如下三个： 引导类加载器（bootstrap class loader）：它用来加载 Java 的核心库，该加载器由C++实现，不继承自 java.lang.ClassLoader。它负责加载Java的基础类，主要是 %JRE_HOME/lib/ 目录下的rt.jar、resources.jar、charsets.jar和class等，如果想要使用引导类加载器来加载我们自己的jar包，可以使用如下的方式来实现 我们可以在运行时使用如下参数： -Xbootclasspath:完全取代系统Java classpath.最好不用。 -Xbootclasspath/a: 在系统class加载后加载。一般用这个。 -Xbootclasspath/p: 在系统class加载前加载,注意使用，和系统类冲突就不好了. win32 java -Xbootclasspath/a: some.jar;some2.jar; -jar test.jar unix java -Xbootclasspath/a: some.jar:some2.jar: -jar test.jar win32系统每个jar用分号隔开，unix系统下用冒号隔开 扩展类加载器（extensions class loader）：它用来加载 Java 的扩展库，主要是 %JRE_HOME/lib/ext 目录下的jar和class文件，你可以把需要加载的jar都扔到%JRE_HOME%/lib/ext下面，这个目录下的jar包会在Bootstrap Classloader工作完后由Extension Classloader来加载。 系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的，可以通过 ClassLoader.getSystemClassLoader() 来获取它。如果想要让指定的jar被加载，只需要在MANIFEST.MF中添加如下代码：Class-Path: lib/demo.jar lib/demo1.jar，就可以把指定的jar添加到CLASSPATH中了。 其中，Bootstrap ClassLoader由JVM启动，然后初始化sun.misc.Launcher ，sun.misc.Launcher初始化Extension ClassLoader、App ClassLoader。除了Bootstrap ClassLoader，其余的类加载器本身也由其它的类加载器进行加载，所以某个类加载器的父类加载器就是加载了这个类加载器的那个加载器。在JVM提供的加载器中，系统类加载器的父类加载器是扩展类加载器，扩展类加载器的父类加载器是引导类加载器。 3. 自定义类加载器如果JVM提供的类加载器无法满足我们的需求，那我们就需要实现自己的类加载器。 自定义类加载器十分简单，只需要通过调用ClassLoader类的Class&lt;?&gt; java.lang.ClassLoader.defineClass(String name, byte[] b, int off, int len)方法即可，不过由于该方法是final并且protected的，所以我们必须要继承ClassLoader类并且使用super.xxx()的格式来调用。下面是一个demo 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import java.io.File;import java.io.FileInputStream;import java.lang.reflect.Method;public class MyClassloader &#123; public static void main(String[] args) throws Exception &#123; ClassLoaderSub classLoaderSub = new ClassLoaderSub(); Class&lt;?&gt; clazz = classLoaderSub.getClassByFile(&quot;C:\\\\Users\\\\admin\\\\Desktop\\\\A.class&quot;); System.out.println(&quot;类的名字：&quot; + clazz.getName()); System.out.println(&quot;类的加载器：&quot; + clazz.getClassLoader()); Object obj = clazz.newInstance(); Method method = clazz.getMethod(&quot;test&quot;); method.invoke(obj, null); &#125;&#125;class ClassLoaderSub extends ClassLoader &#123; /** * 调用父类的 defineClass 来生成 Class 实例 * @param name * @param b * @param off * @param len * @return */ public Class&lt;?&gt; defineClassByName(String name, byte[] b, int off, int len) &#123; Class&lt;?&gt; clazz = super.defineClass(name, b, off, len); return clazz; &#125; /** * 读入字节码文件并把其转换为字节数组 * * @param fileName * @return * @throws Exception */ @SuppressWarnings(&quot;finally&quot;) public Class&lt;?&gt; getClassByFile(String fileName) throws Exception &#123; File classFile = new File(fileName); byte bytes[] = new byte[1024 * 100]; FileInputStream fis = null; Class&lt;?&gt; clazz = null; try &#123; fis = new FileInputStream(classFile); int j = 0; while (true) &#123; int i = fis.read(bytes); if (i == -1) break; j += i; &#125; clazz = defineClassByName(null, bytes, 0, j); &#125; finally &#123; fis.close(); return clazz; &#125; &#125;&#125; A.class的内容很简单，编译前的源码如下： 1234567public class A &#123; public void test() &#123; System.out.println(&quot;我被加载成功并且方法执行了！&quot;); &#125;&#125; 执行main()方法，打印出以下内容： 类的名字：A 类的加载器：ClassLoaderSub@15db9742 我被加载成功并且方法执行了！ 以上代码的主要功能就是把 A.class的字节码读入到JVM中并且创建一个对应该字节码所对应的类的Class实例。然后根据该类来创建一个该类的对象并且调用其test()方法，方法成功执行。自定义的类加载器的核心组件就是defineClass方法，这个需要重点理解。 4.类加载器的树状组织结构如果把JVM类加载器和自定义类加载器结合起来看的话，那么会构成一个继承的层次结构。我们已经知道，JVM的三个类加载器有继承关系，那么加上自定义类加载器之后继承关系会变成什么样呢，下面这张图很清晰的描述了这种结构 由于这种目录结构，JVM提出了类加载器的双亲委派机制，即 如果某个类加载器需要加载一个类，那么此类加载器会调用它的父类加载器来加载这个类（如果某个类加载器的父类加载器为 null，那么就直接调用bootstrap class loader来进行类加载操作），一直向上直到bootstrap class loader被调用了，那么bootstrap class loader不会再调用父类加载器（也没有可以调用的），而是会自己对该类进行加载； 如果bootstrap class loader的类加载操作失败了，那么就会调用其子类加载器进行加载；如果还是失败，就继续向下调用，直到成功为止。如果一直无法成功，则会抛出找不到类的异常。 双亲委派机制保证了JVM的安全性，因为恶意程序无法把自己伪造成JVM所信任的类。例如，我伪造了一个java.lang.Object类，想让JVM把它加载进去，但是由于双亲委派机制的存在，JVM默认会使用bootstrap class loader来加载java.lang.Object类，而因为bootstrap class loader默认会加载%JRE_HOME/lib/下的 java.lang.Object 文件，所以我的攻击自然失效。 那么，如果我更换一种攻击方式呢。我想让启动类加载器加载一个由我书写的名为java.lang.Attack的带有攻击代码类，那么我的攻击能成功吗？答案是不能。因为对于不同的类加载器所加载的类，它们将属于不同的运行时包。运行时包这个词在《Java虚拟机规范第2版》中第一次出现，如果两个类是由不同的类加载器进行加载的，那么他们就不可以进行相互访问。更典型的，如果我使用了两个类加载器加载了同一个类，那么这两个类是不一样的，如果让这两个类之中的某一个类的对象由另一个类来进行强制类型转换，会产生异常。 5. 关于Class.forName()方法：Class.forName() 是一个静态方法，同样可以用来加载类。该方法有两种形式：Class.forName(String name, boolean initialize, ClassLoader loader)和 Class.forName(String className)。第一种形式的参数 name表示的是类的全名，initialize表示是否是初始化类，loader表示加载时使用的类加载器；第二种形式则相当于设置了参数 initialize的值为 true，loader的值为当前类的类加载器。 Class.forName()方法本身已经包含了类的加载过程。除此之外，Class.forName()还包括了第0节中的第2、3步操作，也就是说Class.forName()方法不仅会加载一个类，还会初始化这个类。这个方法一般被用于加载数据库的驱动，我们可以打开MySQL的驱动com.mysql.jdbc.Driver的源码看一下，可以发现如下代码： 1234567static &#123; try &#123; java.sql.DriverManager.registerDriver(new Driver()); &#125; catch (SQLException E) &#123; throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;); &#125;&#125; 如上static代码块中的代码仅会在类初始化时才能执行，所以只能使用Class.forName()方法才能加载数据库的驱动。如果单纯的使用ClassLoader来加载数据库驱动，因为缺失了类初始化的操作，所以驱动加载将会失败。 参考： 深入探讨 Java 类加载器 深入Java虚拟机(原书第2版) class文件的动态加载 - Java综合 - Java - ITeye论坛 运行jar应用程序引用其他jar包的四种方法 图解classloader加载class的流程及自定义ClassLoader 深入分析Java ClassLoader原理 URLClassLoader使用方法和实例","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"使用 Netty 与 Nginx 构建一个在线聊天网页","slug":"Use-Netty-and-Nginx-to-build-an-online-chat-page","date":"2016-10-22T11:06:55.000Z","updated":"2025-08-22T15:42:13.350Z","comments":true,"path":"2016/10/22/Use-Netty-and-Nginx-to-build-an-online-chat-page/","link":"","permalink":"https://www.nosuchfield.com/2016/10/22/Use-Netty-and-Nginx-to-build-an-online-chat-page/","excerpt":"","text":"Netty 框架1.1 Netty 简介 Netty 是一个高性能、异步事件驱动的 NIO 框架，它提供了对 TCP、UDP 和文件传输的支持，作为一个异步 NIO 框架，Netty 的所有 IO 操作都是异步非阻塞的，通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果。 本文并不会详细的讨论的 Netty 框架的使用方法，关于其详细的使用方法，可以参考 Netty in Action 一书，书中对 Netty 的相关原理和使用方法做了非常细致的讲解。本文虽然只会使用到 Netty 的一小部分特性，但是对于没有接触过 Netty 的读者来说，可以使其快速的了解 Netty 的整体结构，然后方便其对 Netty 的进一步学习。本文通过 Netty 构建了一个非常具有代表性的 IM 服务端（同时也说明本文并没有介绍 Netty 的客户端使用方法，有兴趣的读者可自行查阅），然后通过 WebSocket 协议从而实现了一个在线聊天系统。 1.2 通过 Netty 构建一个 WebSocket 服务器 我们把一个 Netty 服务分为三部分（分别对应了 3 个 Java 类）来讲： ServerBootStrap ChannelInitializer Handler ServerBootStrap，用于启动一个 Netty 服务，执行了监听端口、获取请求等等这样的操作；具体实现代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243public class WebSocketServer &#123; private int port; public WebSocketServer(int port) &#123; this.port = port; &#125; public void run() throws Exception &#123; EventLoopGroup bossGroup = new NioEventLoopGroup(); EventLoopGroup workerGroup = new NioEventLoopGroup(); try &#123; ServerBootstrap b = new ServerBootstrap(); b.group(bossGroup, workerGroup) .channel(NioServerSocketChannel.class) .childHandler(new WebSocketServerInitializer()) // 创建了 WebSocketServerInitializer .option(ChannelOption.SO_BACKLOG, 128) .childOption(ChannelOption.SO_KEEPALIVE, true); System.out.println(&quot;WebSocketServer 启动了&quot; + port); ChannelFuture f = b.bind(port).sync(); f.channel().closeFuture().sync(); &#125; finally &#123; workerGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); System.out.println(&quot;WebSocketServer 关闭了&quot;); &#125; &#125; public static void main(String[] args) throws Exception &#123; int port; if (args.length &gt; 0) &#123; port = Integer.parseInt(args[0]); &#125; else &#123; port = 8080; &#125; new WebSocketServer(port).run(); &#125;&#125; ChannelInitializer，看它的名字就知道它是一个和初始化有关的类。确实，它是用来初始化 ChannelPipeline，并且向其中加入各种我们需要用到的 Channel 的；具体实现代码： 12345678910111213public class WebSocketServerInitializer extends ChannelInitializer&lt;SocketChannel&gt; &#123; @Override public void initChannel(SocketChannel ch) throws Exception &#123; ChannelPipeline pipeline = ch.pipeline(); pipeline.addLast(new HttpServerCodec()); pipeline.addLast(new HttpObjectAggregator(64*1024)); pipeline.addLast(new ChunkedWriteHandler()); pipeline.addLast(new WebSocketServerProtocolHandler(&quot;/ws&quot;)); pipeline.addLast(new WebSocketFrameHandler()); // 使用了 WebSocketFrameHandler 来对 Channel 进行处理 &#125;&#125; 第 2 条中提到了 Channel 的概念，其实你可以把 Channel 看做成一个连接，多个 Channel 就会构成一个 ChannelGroup。我们在这里定义了一个 Handler 管理这些 Channle，Handler 本身会包含了各种回调函数，比如 read、added、removed 等等，当事件发生时，就会触发这些函数的执行，从而实现管理 Channle 的目的。具体实现代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public class WebSocketFrameHandler extends SimpleChannelInboundHandler&lt;TextWebSocketFrame&gt; &#123; public static ChannelGroup channels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE); // 这里存储了所有的 Channel @Override protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception &#123; Channel incoming = ctx.channel(); for (Channel channel : channels) &#123; if (channel != incoming)&#123; channel.writeAndFlush(new TextWebSocketFrame(&quot;[&quot; + incoming.remoteAddress() + &quot;]&quot; + msg.text())); &#125; else &#123; channel.writeAndFlush(new TextWebSocketFrame(&quot;[you]&quot; + msg.text() )); &#125; &#125; &#125; @Override public void handlerAdded(ChannelHandlerContext ctx) throws Exception &#123; Channel incoming = ctx.channel(); // Broadcast a message to multiple Channels channels.writeAndFlush(new TextWebSocketFrame(&quot;[SERVER] - &quot; + incoming.remoteAddress() + &quot; 加入&quot;)); channels.add(incoming); System.out.println(&quot;Client:&quot;+incoming.remoteAddress() +&quot;加入&quot;); &#125; @Override public void handlerRemoved(ChannelHandlerContext ctx) throws Exception &#123; Channel incoming = ctx.channel(); // Broadcast a message to multiple Channels channels.writeAndFlush(new TextWebSocketFrame(&quot;[SERVER] - &quot; + incoming.remoteAddress() + &quot; 离开&quot;)); System.out.println(&quot;Client:&quot;+incoming.remoteAddress() +&quot;离开&quot;); // A closed Channel is automatically removed from ChannelGroup, // so there is no need to do &quot;channels.remove(ctx.channel());&quot; &#125; @Override public void channelActive(ChannelHandlerContext ctx) throws Exception &#123; Channel incoming = ctx.channel(); System.out.println(&quot;Client:&quot;+incoming.remoteAddress()+&quot;在线&quot;); &#125; @Override public void channelInactive(ChannelHandlerContext ctx) throws Exception &#123; Channel incoming = ctx.channel(); System.out.println(&quot;Client:&quot;+incoming.remoteAddress()+&quot;掉线&quot;); &#125; @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception &#123; Channel incoming = ctx.channel(); System.out.println(&quot;Client:&quot;+incoming.remoteAddress()+&quot;异常&quot;); // 当出现异常就关闭连接 cause.printStackTrace(); ctx.close(); &#125;&#125; 通过以上这三个类，我们已经构建好了一个 WebSocket 服务器，可以用于与浏览器进行 WebSocket 连接并且通信了，完整的代码在 GitHub 上可以找到。 WebSocket 协议2.1 WebSocket 简介 WebSocket 协议是作为一种对 HTTP 协议的补充而提出来的。因为 HTTP 协议的无状态特性，导致服务器无法主动的向客户端进行消息推送，如果我们想要实现一个网页聊天功能，在以前，就必须要由客户端不断的向服务器进行轮询，通过这种不断发送请求的方式来检查服务器是否有新消息发送。显而易见，这种方式十分低效并且浪费资源。 WebSocket 并不依赖于 HTTP 来实现，他们相互独立。WebSocket 是一种在 TCP 上直接进行全双工通讯的协议，它是有连接的。 如果想要与服务器进行 WbeSocket 连接，客户端需要先在某一个 HTTP 请求中显示的发送一个 WebSocket 连接请求，服务器收到请求后，会发出一个回应，然后与客户端构建一个 WebSocket 连接，这个过程通常称为“握手”。“握手”成功之后，客户端和服务器就可以通过已经构建好的这个 WebSocket 连接进行通讯了，这个通讯是有链接的。此外，这个 WebSocket 的连接不会对接下来的客户端与服务器其他的 HTTP 请求产生任何影响。 下图是一个客户端请求 WebSocket 连接以及服务器返回的相应的响应数据，着重观察红色方框中的内容，它表示了一个 HTTP 请求是如何升级为一个 WebSocket 的： 2.2 使用 Nginx 搭建一个静态文件服务器并设置反向代理 想要实现 WebSocket 需要浏览器的支持，不过现代浏览器已经都支持了这一项特性。接下来我们通过 Nginx 来搭建一个 Web 服务器用来存放静态的聊天网页并且对 WebSocket 的链接进行反向代理，配置如下所示： 123456789101112131415161718server &#123; listen 80; server_name 127.0.0.1; location / &#123; root /home/html; index index.html; &#125; location /ws &#123; proxy_pass http://127.0.0.1:8080; proxy_http_version 1.1; proxy_read_timeout 300s; # Nginx 的 WebSocket 超时配置，默认 60s 自动断开链接 proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; &#125;&#125; 可以看到： 我们部署了一个服务监听在 80 端口，然后这个 Web 服务器会默认打开 index.html 页面，这个就是我们接下来在前台通过 JavaScript 实现 WebSocket 功能的前台聊天页面，具体实现会在下面详细说明； 第二个 location 是对路径为 &#x2F;ws 的请求进行了反向代理，这个对应的就是 WebSocket 的连接。可以看到，此链接被反向代理到 8080 端口，也就是上面我们所写的 Netty 服务器所运行的端口，至于路径为什么是 &#x2F;ws 我会在下面进行解释。另外的三个代理参数表示了这个代理的连接是一个 HTTP 的升级连接，在这里就是 WebSocket 连接。 2.3 JavaScript 实现 WebSocket 客户端 浏览器内部可以通过 js 来实现 WebSocket 的相关操作，具体实现如下： 1234567891011121314151617181920212223242526272829if (!window.WebSocket) &#123; window.WebSocket = window.MozWebSocket; // 如果浏览器不支持 WebSocket，那就使用 MozWebSocket&#125;var socket; // 定义一个连接if (window.WebSocket) &#123; socket = new WebSocket(&quot;ws://127.0.0.1/ws&quot;); // 打开一个新的连接 socket.onmessage = function(event) &#123; // 收到信息的回调函数 console.log(&#x27;收到信息：&#x27; + event.data); &#125;; socket.onopen = function(event) &#123; // 连接打开的回调函数 console.log(&#x27;连接开启！&#x27;); &#125;; socket.onclose = function(event) &#123; // 连接关闭的函数函数 console.log(&#x27;连接关闭！&#x27;); &#125;;&#125; else &#123; alert(&quot;你的浏览器不支持 WebSocket！&quot;);&#125;function send(message) &#123; if (!window.WebSocket) &#123; // 若不支持 WebSocket，不执行发送操作 return; &#125; if (socket.readyState == WebSocket.OPEN) &#123; // 如果连接已打开，执行发送操作 socket.send(message); &#125; else &#123; alert(&quot;连接没有开启.&quot;); &#125;&#125; 查看上面的第 6 行代码，我所设置的请求连接地址为ws://127.0.0.1/ws，第一个 ws 定义了使用 WebSocket 协议，第二个 ws 就和上面的 Nginx 中路径匹配相对应起来了，也就是对 &#x2F;ws 路径进行反向代理操作。点击这里可以看到完整的前台页面实现代码。","categories":[],"tags":[{"name":"网络编程","slug":"网络编程","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"使用 Docker 来构建一个 Tomcat 服务","slug":"build-a-tomcat-service-by-docker","date":"2016-10-11T20:56:56.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2016/10/11/build-a-tomcat-service-by-docker/","link":"","permalink":"https://www.nosuchfield.com/2016/10/11/build-a-tomcat-service-by-docker/","excerpt":"","text":"Docker 作为一种轻量级的虚拟机技术，目前已经得到了广泛的应用。Docker 能够把你从繁琐的项目配置中拯救出来，并且提高项目的统一性，开发人员在开发好了项目之后，完全可以把项目打包成为一个 Docker 镜像，然后把其交给运维即可。 1. 安装 Docker如果你是在 Ubuntu 上（需要 64 位操作系统），只需要一行命令就可以搞定 sudo apt-get install docker.io 此时可以运行以下命令来查看 Docker 的相关信息 docker info 在其它的操作系统上安装 Docker 可以参考官方文档。 2. 理解容器容器就是我们在 Docker 中运行服务的地方，一个宿主机上可以运行着多个容器，他们可以分别包含着不同的服务。 例如，我们现在运行着三个容器，分别运行了 MySQL、Tomcat 和 Nginx（不同的服务其实是可以运行在同一个容器中的，但是我们一般还是建议不同的服务应该运行在不同的容器中）这三个服务，那么我们就好像拥有了三台不同的物理机一样，这三台机器是相互独立的，你可以把其想象成三台运行着服务的真正的机器。Docker 提供了三台机器间互相通信的方式，但在这里我们不会做过多的涉及，因为这一次我们只会构建一个容器。 想要查看当前主机上运行着的容器，可以使用命令 docker ps 想要查看当前主机上所有（包括已停止）的容器，使用命令 docker ps -a 目前我们还启动任何容器，所以列表为空。 3. 理解镜像上面已经讲到了容器的概念，镜像其实就是由容器生成的一种只读的文件。 打个比方，小 A 自己花了三个小时，手动构建了一个容器，小 A 感到很高兴。此时小 A 的同事小 B 也想要用小 A 的这个容器，该怎么办呢？此时小 A 可以通过以下命令把他自己构建的容器打包成为一个镜像 docker commit -m &quot;Build a image&quot; &lt;容器ID&gt; &lt;镜像名称&gt; -m 就是构建镜像的时候提交的相关信息，这里的-m是可选项。容器 ID 就是容器的唯一的标识，在显示容器列表的时候可以查看到，而镜像名称就是你想给自己镜像所取的名字，这里镜像名字也是有一套规则的，但是本着简单起见，本文不做涉及，读者有兴趣可自行查阅。 Docker 提供了以下几种方式来获得&#x2F;创建一个镜像： 直接从外部仓库中 pull 别人已经做好的镜像； 自己手动的构建好一个容器，然后然后把其 commit 为一个镜像（就是上面提到的那种方式）； 通过 Dockerfile 来以文本的方式记录下你创建一个容器的过程，别人可以直接用这个文件来生成对应的镜像； 关于 docker-compose.yml，其作用就是对多个 Dockerfile 进行处理，即处理包含有多个镜像的过程； 其中方式 1 和方式 3 使用的较多，如果想要获取一个别人已经制作好的镜像，可选择方式 1，如果想要自定义一个镜像，一般选择方式 3。 4. 从外部仓库获取一个镜像上面介绍了一点容器和镜像的基础知识，想必你已经能够大概的明白容器和镜像的概念了，下面我就来获取我们的第一个镜像，这里我们就以 Tomcat 镜像为例。执行以下命令 docker pull hub.c.163.com/public/tomcat:7.0.28 关于中央仓库： Docker 中的中央仓库就是存放了大量的 Docker 镜像的地方，如果你用过 Maven 或者 Python 的 pip 命令，那么你对这种概念一定不会陌生，全球最大的中央仓库是 Docker 官方的docker hub。不过在这里我使用的是网易蜂巢的 Docker 镜像服务，其服务器在国内，速度也会更快一点。 上面的命令会执行一系列的下载操作，执行完毕之后，如果不出错，那么你已经获取到了一个 Tomcat 的镜像。此时执行命令 sudo docker images 将会列出所有的镜像列表，我的镜像列表如下所示 可以看到，这是一个从 163 仓库下载下来的镜像，并且他的名字是十分有规律的。至此，我们已经成功得从远程仓库获取了一个 Tomcat 镜像，下面我会讲如何启动这个镜像使其成为一个容器并运行。 关于 DockerfileDockerfile 也是一种创建镜像的及其常用并且也是非常重要的方式，有些时候可能会是唯一的方式（比如在使用 Daocloud 服务的时候）。 我们可以手动书写一个 Dockerfile 文件，然后 通过 EXPOSE 来开放镜像端口； 通过 COPY 来复制宿主机文件到镜像中的指定位置； 其他的一些命令； 最后，根据 Dockerfile 文件创建一个名为image-name的镜像：docker build -t image-name .。 关于 Dockerfile 的内容也非常多，在这里我们不会更多的涉及，有兴趣的读者可自行查阅相关资料学习。 5. 通过镜像来启动一个容器通过上面的步骤，我们已经成功的拥有了一个 Tomcat 的镜像，接下来，是时候把他启动起来了。执行命令 docker run --name tomcat -d -p 80:8080 8e17306cf050 run 表示要通过一个镜像启动一个容器； --name tomcat 是给这个启动的容器起了个名字，名字是 tomcat。如果不加此项，Docker 会自动给这个容器起一个名字； -d 表示此容器会以守护进程（daemon）的方式来执行。如果想要以命令行的方式来执行，可以使用 -it 选项，并且需要在最后加上bash命令，即： docker run –name tomcat -it -p 80:8080 8e17306cf050 bash 事实上，更加一般的做法是先以守护进程的方式启动容器，之后通过命令 docker exec -it 8e17306cf050 bash来进入容器的bash，我比较推荐使用第二种做法注； -p 80:8080 表示把当前宿主机的 80 端口映射到容器的 8080 端口； 8e17306cf050 就是上面的 Tomcat 镜像的 ID，通过 docker images 可以查看到，表示我们想要启动的容器是对应于这个镜像的。 启动完毕后，在浏览器中打开http://127.0.0.1/，应该能够看到如下内容，表示容器已成功启动，并且对应的 Tomcat 服务已经在正常运行。 之后，执行以下命令显示所有正在运行的容器 docker ps 我们可以查看到正在运行的名称叫做 tomcat 的容器，并且可以查看到它的容器 ID。 为了后面的操作能够顺利进行，我们需要先执行 docker stop &lt;容器ID&gt; 和 docker rm &lt;容器ID&gt; 来停止并删除这个容器。 如上图所示，在这里我们只能显示 Tomcat 的初始网页，怎么样才能让容器运行我们自己所写的代码呢？观察之前在浏览器中所所打开的页面，其中有一行 This is the default Tomcat home page. It can be found on the local filesystem at: /var/lib/tomcat7/webapps/ROOT/index.html 也就是说 /var/lib/tomcat7/webapps/ROOT/ 就是项目的根目录，我们只需要把自己的 Java 项目放到这个文件夹下就能执行我们自己的代码了。那么要怎么做？执行命令 docker run --name tomcat -d -p 80:8080 -v /home/derobukal/Desktop/html:/var/lib/tomcat7/webapps/ROOT/ 8e17306cf050 这条启动容器的命令和上面的相比多了个 -v /home/derobukal/Desktop/html:/var/lib/tomcat7/webapps/ROOT/，表示把当前文件夹的 /home/derobukal/Desktop/html 目录（必须是绝对路径）挂载到 /var/lib/tomcat7/webapps/ROOT/ 上，此时对文件夹 html 的操作就相当于在操作容器中 tomcat 下的 ROOT 文件夹。我们在 html 文件夹下新建一个文件，命名为index.html，在之中输入hello, world，然后刷新浏览器页面，显示结果如下 至此我们已经可以成功的部署 Tomcat 应用了。 如果你需要重启 Tomcat，可以执行命令 docker restart &lt;容器ID&gt; 可以通过以下命令来删除一个 Docker 镜像 docker rmi &lt;镜像ID&gt; 总结：在 Docker 中需要清晰的区分镜像和容器的概念，并且要明白他们所对应的操作有什么不同。如果能理解了他们之中的差异，那么也就能够快速的理解 Docker 的相关操作了。 本文只是对 Docker 进行了一个简单的介绍，想要了解更多关于 Docker 的内容，读者可以参阅 Docker 技术入门与实战 一书，这里介绍了关于 Docker 的大量细节，如果你想要更加深入的了解 Docker，那么你一定不能错过这本书籍。 参考： Docker简明教程 如何在docker中部署tomcat,并且部署java应用程序","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"},{"name":"容器","slug":"容器","permalink":"https://www.nosuchfield.com/tags/%E5%AE%B9%E5%99%A8/"}]},{"title":"二叉查找树与 AVL 树","slug":"binary-search-tree-with-AVL-tree","date":"2016-09-06T22:15:10.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2016/09/06/binary-search-tree-with-AVL-tree/","link":"","permalink":"https://www.nosuchfield.com/2016/09/06/binary-search-tree-with-AVL-tree/","excerpt":"","text":"在计算机科学中，存在着表、树、图等等这样的常见数据结构。相较于一维的表，树存在着很多的优势。树的定义参见维基百科 树（英语：tree）是一种抽象资料型别（ADT）或是实作这种抽象资料型别的数据结构，用来模拟具树状结构性质的资料集合。它是由n（n&gt;&#x3D;1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。 下图是一个典型的树 如果一个树它的任意一个节点的子节点数都不超过两个，那我们就称这个树为二叉树。二叉树存在着一些特殊的性质，同时因为可以通过儿子-兄弟-表示法把任意一个树转化为二叉树，所以树问题的研究最终都可以简化为对二叉树的研究。 1.二叉查找树如果一个树是二叉树，同时对于这个树的每一个节点，该节点的左子树中的所有节点的值都小于该节点的值；该节点的右子树中的所有节点的值都大于该节点的值，那我们就可以称这个树是二叉查找树。 如上图所示，只有左边的是二叉树，右边的树的节点 7 的值大于 6，所以不是二叉查找树。 二叉查找树一般会有contains、insert、remove、findMin、findMax等等这样的操作，而且一般都可以通过递归来完成以上操作。这里需要着重讲解的是remove操作，该操作相对于其他操作而言略显复杂。 remove操作所对应的节点可以被归为三类，分别是： 叶子节点，对于这种情况，只需要直接删除该节点即可； 含有一个子节点的节点，此种情况需要把原本指向该节点的指针指向其原本所拥有的唯一子节点即可； 有两个子节点的情况，此种情况稍微复杂一些。解决方式是在该节点的左子树中找出最大值（或者在右子树中找到最小值），然后把找到的节点的值赋给此要删除的节点，最后删除之前所找到的最大值（或最小值）的节点（因为此节点必然是叶子节点，所以此问题变成了叶子节点的删除问题）。因为左子树中的最大值（或者右子树中的最小值）必然大于左子树中的所有的值并且小于右子树中的所有值，所以可以保证二叉查找树的性质不变。 下面是 Java 实现二叉查找树的代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176public class BinarySearchTree &#123; private class BinaryNode &#123; int value; BinaryNode left; BinaryNode right; BinaryNode(int value, BinaryNode left, BinaryNode right) &#123; this.value = value; this.left = left; this.right = right; &#125; &#125; private BinaryNode root; public BinarySearchTree() &#123; root = null; &#125; /** * 把树置为空 */ public void empty() &#123; root = null; &#125; /** * 判断树是否为空 * * @return 结果 */ public boolean isEmpty() &#123; return root == null; &#125; /** * 查询树中是否包含某个元素 * * @param value 元素的值 * @return 查询结果 */ public boolean contains(int value) &#123; return contains(value, root); &#125; private boolean contains(int value, BinaryNode node) &#123; if (node == null) return false; if (value &lt; node.value) &#123; return contains(value, node.left); &#125; else if (value &gt; node.value) &#123; return contains(value, node.right); &#125; else &#123; return true; &#125; &#125; /** * 查询树中的最小值 * * @return 最小值 */ public int findMin() throws Exception &#123; if (root == null) throw new Exception(&quot;root is null&quot;); BinaryNode node = root; while (node.left != null) node = node.left; return node.value; &#125; /** * 查询树中的最大值 * * @return 最大值 */ public int findMax() throws Exception &#123; if (root == null) throw new Exception(&quot;root is null&quot;); BinaryNode node = root; while (node.right != null) node = node.right; return node.value; &#125; /** * 向树中插入一个元素 * * @param value 插入的元素 */ public void insert(int value) &#123; root = insert(value, root); &#125; private BinaryNode insert(int value, BinaryNode node) &#123; if (node == null) // 如果遇到一个空的节点，就创建一个新的节点并把值放进去 return new BinaryNode(value, null, null); if (value &lt; node.value) &#123; node.left = insert(value, node.left); &#125; else if (value &gt; node.value) &#123; node.right = insert(value, node.right); &#125; return node; &#125; /** * 从树中删除一个元素 * * @param value 删除的元素 */ public void remove(int value) &#123; root = remove(value, root); &#125; private BinaryNode remove(int value, BinaryNode node) &#123; if (node == null) return null; if (value &lt; node.value) &#123; node.left = remove(value, node.left); &#125; else if (value &gt; node.value) &#123; node.right = remove(value, node.right); &#125; else &#123; if (node.left != null &amp;&amp; node.right != null) &#123; // 两个子节点的情况 /* 把右子树中的最小值赋给要删除的值所对应的节点（保证其符合二叉查找树的规则） */ BinaryNode rightMin = node.right; while (rightMin.left != null) rightMin = rightMin.left; node.value = rightMin.value; /* 删除右子树中的最小值所对应的节点即可（即删除一个叶子节点，问题得到了简化） */ node.right = remove(rightMin.value, node.right); &#125; else &#123; // 一个子节点或叶子节点 /* 如果左节点不为空，则把左节点变成该节点；右节点道理类似；如果左右都是空，把该节点置为空（叶子节点） */ node = (node.left != null) ? node.left : node.right; &#125; &#125; return node; &#125; /** * 打印树的结构 */ public void echo() &#123; String space = &quot;|----- &quot;; // 格式化了一下输出 echo(root, space); &#125; private void echo(BinaryNode node, String space) &#123; if (node != null) &#123; System.out.println(space + node.value); space = &quot;| &quot; + space; echo(node.left, space); echo(node.right, space); &#125; &#125; public static void main(String[] args) throws Exception &#123; BinarySearchTree tree = new BinarySearchTree(); tree.insert(2); tree.insert(1); tree.insert(3); tree.insert(4); tree.insert(-1); tree.echo(); System.out.println(tree.findMin()); System.out.println(tree.findMax()); tree.remove(2); tree.echo(); &#125;&#125; 2.AVL 树在前一节中，我们已经了解了如何构建一个二叉查找树以及如何对这个二叉查找树进行元素的增加、删除等等操作。但是这样的二叉查找树可能会存在性能上的问题，具体如下图所示： 因为 1 &lt; 2 &lt; 3 &lt; 4 &lt; 5，并且除了 5 之外所有的节点都拥有一个子节点，所以这确实是一棵二叉查找树，但事实上这棵树却给人一种链表的感觉。二叉查找树的性能和树的高度密切相关，所以树的的高度越低，元素的操作速度越快。想要二叉查找树的高度低，那么就应该保证最好每个节点都能够拥有两个子节点才好，也就是像下图这样： 如上的树被称作AVL树，即带有平衡条件的二叉树。具体定义如下： 对于任何一个节点，其左子树和右子树的高度差不能超过 1 的二叉查找树。 显然 AVL 树可以降低一个普通二叉查找树的高度，所以我们需要做的就是把一个普通的二叉查找树转变为 AVL 树。因此我们需要在上面二叉查找树代码的基础上稍微做点修改： 给每个节点添加一个 height 属性（记录此节点的高度）； 增添一个实现普通的树转化为 AVL 树的算法。 具体代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132public class AVLTree &#123; private class BinaryNode &#123; int value; BinaryNode left; BinaryNode right; int height; // 记录节点高度 BinaryNode(int value, BinaryNode left, BinaryNode right) &#123; this.value = value; this.left = left; this.right = right; height = 0; &#125; &#125; private BinaryNode root; public AVLTree() &#123; root = null; &#125; public void insert(int value) &#123; root = insert(value, root); root = avl(root); // 每次插入结束后执行 AVL 算法 &#125; private BinaryNode insert(int value, BinaryNode node) &#123; if (node == null) return new BinaryNode(value, null, null); if (value &lt; node.value) &#123; node.left = insert(value, node.left); &#125; else if (value &gt; node.value) &#123; node.right = insert(value, node.right); &#125; node.height = Math.max(height(node.left), height(node.right)) + 1; // 计算节点的高度 return node; &#125; /* 核心的 AVL 算法 */ private BinaryNode avl(BinaryNode node) &#123; if (node != null) &#123; if (height(node.left) - height(node.right) == 2) &#123; if (node.left.left != null) node = rotateWithLeftChild(node); else node = doubleWithLeftChild(node); &#125; else if (height(node.right) - height(node.left) == 2) &#123; if (node.right.right != null) node = rotateWithRightChild(node); else node = doubleWithRightChild(node); &#125; node.left = avl(node.left); node.right = avl(node.right); &#125; return node; &#125; /* 左左：单旋转 */ private BinaryNode rotateWithLeftChild(BinaryNode node2) &#123; BinaryNode node1 = node2.left; node2.left = node1.right; node1.right = node2; node2.height = Math.max(height(node2.left), height(node2.right)) + 1; node1.height = Math.max(height(node1.left), node2.height) + 1; return node1; &#125; /* 左右：双旋转 */ private BinaryNode doubleWithLeftChild(BinaryNode node3) &#123; node3.left = rotateWithLeftChild(node3.left); return rotateWithLeftChild(node3); &#125; /* 右右：单旋转 */ private BinaryNode rotateWithRightChild(BinaryNode node2) &#123; BinaryNode node1 = node2.right; node2.right = node1.left; node1.left = node2; node2.height = Math.max(height(node2.right), height(node2.left)) + 1; node1.height = Math.max(height(node1.right), node2.height) + 1; return node1; &#125; /* 右左：双旋转 */ private BinaryNode doubleWithRightChild(BinaryNode node3) &#123; node3.right = rotateWithRightChild(node3.right); return rotateWithRightChild(node3); &#125; private int height(BinaryNode node) &#123; return node == null ? -1 : node.height; &#125; public void echo() &#123; String space = &quot;|----- &quot;; // 格式化了一下输出 echo(root, space); &#125; private void echo(BinaryNode node, String space) &#123; if (node != null) &#123; System.out.println(space + node.value); space = &quot;| &quot; + space; echo(node.left, space); echo(node.right, space); &#125; &#125; public static void main(String[] args) throws Exception &#123; AVLTree tree = new AVLTree(); tree.insert(1); tree.insert(2); tree.insert(3); tree.insert(4); tree.insert(5); tree.insert(6); tree.insert(7); tree.insert(8); tree.insert(9); tree.insert(10); tree.insert(11); tree.insert(12); tree.insert(-5); tree.echo(); &#125;&#125; 如上所示，添加了height参数用来记录节点高度，并且实现了 AVL 算法。对于任意一个未平衡的节点，其可能存在四种情况：左节点的左节点过高、左节点的右节点过高、右节点的右节点过高、右节点的左节点过高，分别对应了代码中的四种转化实现方式。 这样一来我们就实现了一个把普通二叉查找树转化为 AVL 树的算法，并且在每次插入操作执行完之后立即执行转化操作，所以即使插入导致树变形也可以立即使其恢复为 AVL 树。 这里在实现 AVL 的时候是把其单独提出来作为一个独立的函数来完成的，并且是在插入操作结束后再执行一次 AVL 函数来完成整个操作。但是，仔细观察可以发现，插入操作和 AVL 算法都是通过对一棵树进行反复递归来实现的，所以上面这种实现方式相当于我们对树做了两次的递归（插入递归一次、AVL 函数递归一次），这实际上是对资源的浪费，我们完全可以在一次的递归中就完成插入和树结构的变化操作，具体实现如下： 12345678910111213141516171819202122232425262728public void insert(int value) &#123; root = insert(value, root);// root = avl(root); 不再需要执行，因为对应操作在 insert 中已完成&#125;private BinaryNode insert(int value, BinaryNode node) &#123; if (node == null) return new BinaryNode(value, null, null); if (value &lt; node.value) &#123; node.left = insert(value, node.left); if (height(node.left) - height(node.right) == 2) if (value &lt; node.left.value) // 左左 node = rotateWithLeftChild(node); else // 左右 node = doubleWithLeftChild(node); &#125; else if (value &gt; node.value) &#123; node.right = insert(value, node.right); if (height(node.right) - height(node.left) == 2) if (value &gt; node.right.value) // 右右 node = rotateWithRightChild(node); else // 右左 node = doubleWithRightChild(node); &#125; node.height = Math.max(height(node.left), height(node.right)) + 1; // 计算节点的高度 return node;&#125; 如上，我们成功的把 AVL 算法整合到了 insert 操作中，提高了程序的效率，但是可能不如前面的那个实现方式那样好理解，并且如果要添加删除功能，那么前面的方法可在删除操作执行完毕之后直接使用，无需增加新的代码。 总结：二叉查找树与 AVL 树都是非常重要的数据结构，并且 AVL 树存在着更好的执行效率，这两种数据结构都应该需要能够熟练的掌握。","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"HashTable 的 Python 实现","slug":"the-python-implementationp-of-HashTable","date":"2016-07-29T22:50:53.000Z","updated":"2025-08-22T15:42:13.354Z","comments":true,"path":"2016/07/29/the-python-implementationp-of-HashTable/","link":"","permalink":"https://www.nosuchfield.com/2016/07/29/the-python-implementationp-of-HashTable/","excerpt":"","text":"HashTable 是一种非常常见且用途十分广泛的数据结构，使用 HashTable 可以大大的提高数据的检索速度，是一种非常优秀的结构。 1.Hash 算法既然要说到 HashTable,那首先需要明白 Hash 是什么意思。Hash 的中文中翻译是“散列”，这里我感觉这个翻译还是比较奇怪的，并不能够做到让人见名知意。 Hash 是一类算法的统称，下面引用维基百科中对 Hash 函数的介绍 散列函数（或散列算法，又称哈希函数，英语：Hash Function）是一种从任何一种数据中创建小的数字“指纹”的方法。 还是有点抽象？其实，Hash 函数就是对某一个复杂数据进行计算，然后得到一个不是那么复杂的数据，但是这个新的数据又能够代表它的原始数据，这就不难理解维基百科中称哈希函数创建的是数据的“指纹”了，很容易理解，现实生活中指纹是对某一个特定的人的代表，而相对于对整个人的处理，指纹的处理则简单得多。 和每个人的指纹都不同不一样，不同的数据的散列值是有可能会一样的，不同的数据产生了同样的散列值的情况称之为“碰撞”，优秀的哈希函数应该尽可能的降低产生数据碰撞的几率。 正是因为“碰撞”的存在，所以 Hash 函数是不能够从散列值计算出原值的（读者可以想一想为什么）。与此同时，散列函数必须不具有可逆性，这一特性使得 Hash 函数在密码学领域得到了极其广泛的应用。 一个典型的 Hash 算法是将整数除以一个常量并且取余法，得到的余数就是散列值，本文是用的是这种算法。 2.HashTable当我们在对数据进行增删查操作的时候，如果数据本身很大，则会严重的降低数据的操作效率。HashTable 的核心思想是对于每一个数据，根据某种给定的 Hash 函数，计算出数据的散列值，然后根据散列值来进行查找。因为散列值在设计之初就是十分精简的，所以能够很好的提升数据的操作速度。 使用散列值来进行值的查找已经很好能够很好的提高数据的查询速度了，但这样仍然是存在问题的，问题的起因就是因为“碰撞”。由于散列函数本身的性质，导致多个不同的数据可能会有相同的散列值，此时光靠散列值肯定无法进行值的查找，一种比较典型的解决方式是通过链表这种数据结构来保存散列值相同的数据。 当进行数据插入到哈希表的时候，如果发现该数据的散列值在之前已经存在，则把散列值一样的数据做成一个链表，把最新的数据插入到该链表的尾部，而该链表本身则会把插入到“槽”中，这是一种由数组和链表组合的数据结构。 如上图所示，左边的槽保存的是散列值，拥有同样的散列值的数据会被存放在同一个槽中，而槽的右边则是一个链表，用来把散列值相同的数据给区分并保存起来。 我们可以把 HashTable 类比为一本书，这里的散列值对应的就是书的目录，我们可以把书中具体的数据用目录的中的页码表示出来。书的目录会存在很多的章节，这里章节就对应的是 HashTable 中的槽部分，同样，书也会存在多个小节属于同一个章节的情况，所以每个槽（即章节）又可以由多个链表的节点（对应目录中的小节）组成。 3.HashTable 的 Python 实现这里给出了 HashTable 的一种 Python 实现方式，包含了初始化（隐式的）、插入、查找、删除以及打印表结构这几个方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#!/usr/bin/python# -*- coding: utf-8 -*-num = 10# 一个数据节点class Node(object): def __init__(self, data): self.data = data self.next_node = None def set_next(self, node): self.next_node = node def get_next(self): return self.next_node def get_data(self): return self.data def data_equals(self, data): return self.data == dataclass HashTable(object): def __init__(self): self.value = [None] * num def insert(self, data): if self.search(data): return True i = data % num node = Node(data) if self.value[i] is None: self.value[i] = node return True else: head = self.value[i] while head.get_next() is not None: head = head.get_next() head.set_next(node) return True def search(self, data): i = data % num if self.value[i] is None: return False else: head = self.value[i] while head and not head.data_equals(data): head = head.get_next() if head: return head else: return False def delete(self, data): if self.search(data): i = data % num if self.value[i].data_equals(data): self.value[i] = self.value[i].get_next() else: head = self.value[i] while not head.get_next().data_equals(data): head = head.get_next() head.set_next(head.get_next().get_next()) return True else: return False def echo(self): i = 0 for head in self.value: print str(i) + &#x27;:\\t&#x27;, if head is None: print None, else: while head is not None: print str(head.get_data()) + &#x27; -&gt;&#x27;, head = head.get_next() print None, print &#x27;&#x27; i += 1 print &#x27;&#x27;if __name__ == &#x27;__main__&#x27;: hashTable = HashTable() hashTable.insert(10) hashTable.insert(11) hashTable.insert(1) hashTable.echo() hashTable.delete(1) hashTable.echo() 参考：1.散列函数 - 维基百科，自由的百科全书2. 一步一步写算法（之hash表）","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"Peterson算法解决竞争条件问题","slug":"peterson-algorithm-for-solving-competition-conditions","date":"2016-07-22T20:23:49.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2016/07/22/peterson-algorithm-for-solving-competition-conditions/","link":"","permalink":"https://www.nosuchfield.com/2016/07/22/peterson-algorithm-for-solving-competition-conditions/","excerpt":"","text":"我在文章Java多线程中的竞争条件、锁以及同步的概念中提到过竞争条件的问题，当时只是提了一下怎么调用Java的API来实现这种同步，其实在目前已经有了多种进程同步的解决方式，比如 屏蔽中断 锁变量 严格轮换法 Peterson算法 TSL指令 这里介绍一下 Peterson算法，其实现以及测试代码如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#define FALSE 0#define TRUE 1#define N 2 // Num of processint flag;int turn; // 现在轮到的那个进程int interested[N]; // TRUE means interested, default is FALSE.void enter_region(int process);void leave_region(int process);int main(int argc, char const *argv[]) &#123; pid_t fpid = fork(); if(fpid &gt; 0) &#123; while(TRUE)&#123; enter_region(1); &#125; &#125; else if(fpid == 0)&#123; while(TRUE)&#123; enter_region(0); &#125; &#125; return 0;&#125;void enter_region(int process) &#123; int other = 1 - process; // Get another process interested[process] = TRUE; turn = process; while (turn == process &amp;&amp; interested[other] == TRUE); /* TEST */ if(process == 0)&#123; flag = 0; printf(&quot;%d ==&gt; %d\\n&quot;, process, flag); &#125;else&#123; flag = 1; printf(&quot;%d ==&gt; %d\\n&quot;, process, flag); &#125; leave_region(process);&#125;void leave_region(int process) &#123; interested[process] = FALSE;&#125; 其中enter_region是进程进入临界区时的方法，leave_region是离开临界区时执行的方法，方法参数为进程编号。 我们先来重点关注一下while (turn == process &amp;&amp; interested[other] == TRUE);这句代码，这种代码的执行方式被称之为忙等待，顾名思义，这是一种比较浪费CPU资源的方式。 假设有两个进程，第一个进程是 0，第二个进程是 1。一开始，没有任何进程处于临界区，现在进程0调用enter_region。他通过设置其数组元素和将turn置为0来标识他希望进入临界区。由于进程 1 并不想进入临界区，所以enter_region很快便返回。如果进程 1 现在调用enter_region，进程1将在此处挂起直到interested[0]变成 FALSE，该事件只有在进程 0 调用leave_region退出临界区时才会发生。 现在考虑两个进程几乎同时调用enter_region的情况。他们都是将自己的进程号存入 turn，但只有后被保存进去的进程号才有效，前一个因被重写而丢失。假设进程 1 是后存入的，则 turn 为 1，当两个进程都运行到 while 语句时，进程 0 将循环 0 次进入临界区，而进程 1 则将不停的循环不能进入临界区，直到进程 0 退出临界区为止。 参考资料： 现代操作系统【第三版】 Peterson算法","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"IEEE二进制浮点数算术标准","slug":"IEEE-Binary-floating-point-arithmetic-standard","date":"2016-06-14T14:50:50.000Z","updated":"2025-08-22T15:42:13.340Z","comments":true,"path":"2016/06/14/IEEE-Binary-floating-point-arithmetic-standard/","link":"","permalink":"https://www.nosuchfield.com/2016/06/14/IEEE-Binary-floating-point-arithmetic-standard/","excerpt":"","text":"IEEE二进制浮点数算术标准（IEEE 754），是一个由 IEEE 制定的、用来在计算机中表示浮点数的标准，该标准目前已经被广泛的使用在计算机中。 IEEE 浮点数表示法是一个把浮点数用一个二进制整数表示出来的方法，而这个整数经过一定的转换，也可以重新转换为我们所需要的浮点数。为了介绍这一方法，首先需要介绍一个浮点数的表示公式：v &#x3D; (-1)S x M x 2E。其中： S 用来保存数字的正负 M 我们称之为尾数（Mantissa），或者叫做有效数字（Significand） E 叫做指数（Exponent） 2 叫做基数（Base） 接来看一个例子：例如小数 9.62510，首先我们把其转换为二进制小数 1001.1012（如果你对转化不熟悉，可以参考十进制小数转二进制小数方法），然后把 1001.101 转换为 1.001101 x 23（IEEE要求必须且只能保留一位整数），此时对应上面的公式，S 应为0，M 应为1.001101，E 应为3。好了，我们已经成功的把一个小数用公式表达出来了，下一步就是怎么把我们得到的值用整数形式存储起来呢？ 浮点数的存储方式有很多种方式，这里介绍两种使用最频繁的方式：单精度格式和双精度格式。 1.单精度格式的存储在使用单精度存储时，需要使用到 4 个字节（32位）的存储空间，存储空间的使用如下图所示： 其中： 0 ~ f 共有 23 位小数 fraction，他们是用来保存对应公式 M 处的值的，即用 0 ~ 22 位来保存尾数。在这里是按照从左到右的顺序来排放的数字的，即小数最高位在左侧，向右依次减小。又因为 IEEE 中的 M 的第一位必然为 1，所以一般只从第二位（小数的第一位）开始计算。 23 ~ 30 位用来保存指数部分，如图所示 exponent (exp)。其中，exp &#x3D; Bias + E。我们已经知道，E 表示的是指数部分的值，而对于单精度类型而言，Bias 为127。所以对于上面的例子： exp &#x3D; 127 + 3 &#x3D; 130，转化为二进制就是 ‭10000010‬。 31 位用来保存 S，正为0，负为1。 根据如上面描述，我们例子中的 9.625 的单精度表示值就为 0 ‭10000010‬ 00110100000000000000000（记得去掉 M 的整数位，位数不够就在后面补零，位数过多就直接截取）。 2.双精度格式的存储双精度和单精度的存储非常相似，只是双精度的存储需要占用8个字节。其中 fraction 提升到了 52 位（0 ~ 51），exp 占据 52 ~ 62，S 依旧占据最高位。此外，对于双精度存储而言， Bias（偏移量）的值为 1023，这是与单精度存储所不相同的。 参考：1.浮点数与IEEE 754 - 狼の禅 - 博客园2.IEEE 754 - 维基百科，自由的百科全书","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"在Ubuntu下安装Nginx与PHP5-FPM","slug":"install-Nginx-and-PHP5-FPM-on-Ubuntu","date":"2016-06-01T08:29:48.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2016/06/01/install-Nginx-and-PHP5-FPM-on-Ubuntu/","link":"","permalink":"https://www.nosuchfield.com/2016/06/01/install-Nginx-and-PHP5-FPM-on-Ubuntu/","excerpt":"","text":"PHP-FPM是一个PHPFastCGI管理器，是只用于PHP的，我们可以通过安装 Nginx 与 PHP5-FPM 来搭建一个 Linux 下的 PHP 运行环境。 1.安装与配置Nginx可以通过命令 apt-get install nginx 来安装 Nginx。安装完毕之后，我们可以在以下4个地方任选一个对 Nginx 的配置作出修改： 1234/etc/nginx/nginx.conf/etc/nginx/conf.d/*.conf/etc/nginx/sites-enabled/*/etc/nginx/sites-available/default 这里我们选择在 /etc/nginx/sites-available/default 中对 Nginx 的配置进行修改，在配置中新增一个 Server 如下： 12345678910111213141516171819server &#123; listen 80; server_name 127.0.0.1; root /var/www/html; location / &#123; index index.html index.php; &#125; location ~ \\.php$ &#123; try_files $uri =404; fastcgi_pass 127.0.0.1:9000; #PHP运行在9000端口 fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # $document_root意味着PHP使用root的文件夹，此处也可以自定义不同的PHP文件夹 include fastcgi_params; &#125;&#125; 以上配置设置好之后，对应的工作文件夹就是 /var/www/html。接下来，开始进行 PHP 的配置。 2.安装与配置PHP-FPM执行以下命令安装PHP-FPM的相关组件： 123456sudo apt-get install php5-fpmsudo apt-get install php5-gd # Popular image manipulation library; used extensively by Wordpress and it&#x27;s plugins.sudo apt-get install php5-cli # Makes the php5 command available to the terminal for php5 scriptingsudo apt-get install php5-curl # Allows curl (file downloading tool) to be called from PHP5sudo apt-get install php5-mcrypt # Provides encryption algorithms to PHP scriptssudo apt-get install php5-mysql # Allows PHP5 scripts to talk to a MySQL Database 查看php5运行进程： ps -waux | grep php5 打开关闭php5进程 sudo service php5-fpm stop sudo service php5-fpm start sudo service php5-fpm restart sudo service php5-fpm status 修改PHP-FPM的配置文件/etc/php5/fpm/pool.d/www.conf，把listen = /var/run/php5-fpm.sock改为listen = 127.0.0.1:9000，然后重新启动PHP与Nginx。访问127.0.0.1应该就可以访问到/var/www/html下对应的文件了。 参考：1.ubuntu14.04 +nginx+php5-fpm - Bonker - 博客园2.nginx对PHP文件报File not found.错 | 学步园3.实战Nginx与PHP（FastCGI）的安装、配置与优化 - 爱维Linux - 51CTO技术博客","categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://www.nosuchfield.com/tags/PHP/"}]},{"title":"6.828 Lab1 Part1 - [PC Bootstrap]","slug":"6-828-Lab1-Part1-PC-Bootstrap","date":"2016-05-18T22:18:01.000Z","updated":"2025-08-22T15:42:13.329Z","comments":true,"path":"2016/05/18/6-828-Lab1-Part1-PC-Bootstrap/","link":"","permalink":"https://www.nosuchfield.com/2016/05/18/6-828-Lab1-Part1-PC-Bootstrap/","excerpt":"","text":"6.828的第一节的Part1的主要内容是把课程提供的操作系统源代码编译并启动编译好的操作系统。 1.编译操作系统课程的源代码被放在https://pdos.csail.mit.edu/6.828/2014/jos.git上，通过 Git 获取到源代码之后，可以开始执行编译操作。这里的编译器是用的是 GNU 的 gcc 编译器，需要使用到make命令。在进入源码的文件夹之后，执行make命令，即可以编译文件生成操作系统的镜像文件。我在这里遇到了一些问题，最开始我是在 Windows 下进行的编译，一直失败，于是我开始怀疑是编译器的原因（懒得搞交叉编译），因而决定在 Linux 下进行编译，刚好有一个树莓派，就决定在树莓派下进行编译，依然失败，于是意识到因为树莓派的 CPU 不是 x86 指令集，所以便安装了虚拟机，接着在虚拟机下安装了 Ubuntu 来进行编译，编译成功，生成kernel.img的操作系统镜像文件。 2.启动操作系统接下来进行操作系统的引导和启动，这里使用 QEMU 来模拟机器并启动操作系统（QEMU 支持 Windows 和 Linux，这里我使用的是 Windows）。下载并安装 QEMU，为了接下来的操作方便，可以把 QEMU 的文件夹加入到环境变量中。之后到kernel.img所在的文件夹中，执行qemu-system-i386 kernel.img命令，可以启动我们的操作系统 :) 如上就是我们我们的执行结果，该操作系统只支持两条命令help与kerninfo，至此，我们就完成了操作系统的启动~~~ 3.调试如果需要查看到 QEMU 在启动时所执行的指令（instructions），可以使用 GDB 工具，GDB的使用也很简单，操作如下： 启动操作系统时，把执行命令更换为qemu-system-i386 -s -S kernel.img，其中s表示运行虚拟机时将1234端口开启成调试端口，S表示“冷冻”虚拟机，等待调试器发出继续运行命令，执行完毕之后，QEMU 的情况如下图所示，它处于一个等待调试并卡住的情况： 启动一个命令行，输入gdb，会进入调试模式，然后执行target remote 127.0.0.1:1234，此时该 gdb 就会通过 1234 端口远程连接上 QEMU，接下来就可使开始进行调试。比如，可以执行调试命令 c，会发现操作系统开始执行了，更多的命令可以参考GDB。在 GDB 中调试启动程序：","categories":[],"tags":[{"name":"MIT-6.828","slug":"MIT-6-828","permalink":"https://www.nosuchfield.com/tags/MIT-6-828/"},{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"同步、异步、阻塞和非阻塞的那些事","slug":"synchronous-asynchronous-blocking-and-non-blocking","date":"2016-05-08T21:39:26.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2016/05/08/synchronous-asynchronous-blocking-and-non-blocking/","link":"","permalink":"https://www.nosuchfield.com/2016/05/08/synchronous-asynchronous-blocking-and-non-blocking/","excerpt":"","text":"在日常工作中，我们常常会遇到同步、异步、阻塞和非阻塞这些名词，并且很可能的会把他们的概念混淆掉，这里就聊聊他们之间的联系和区别以加深理解。 首先说一说阻塞和非阻塞，这两个概念其实是比较好理解的，所谓阻塞就表示在某一个时间内，某一个进程或操作等等，处于等待状态，在这个等待状态结束之前，不可以继续接下来的操作；而非阻塞就是在某一个时间，我们不需要傻傻的等待，而可以去做其他的事情，很明显，非阻塞方式解放了生产力，提升了效率。 而同步和异步这两种方式，则主要是体现在了消息的处理机制上面。简单来说，同步是一种主动询问的消息处理机制，即当程序运行时，我们需要不间断的、反复的去询问程序的运行状态，调用者为了得到这个调用结果，必须不停的从被调用者处获取最新状态；而异步的处理机制则完全不一样，在调用者发出了调用申请之后，不需要去反复询问被调用者当前的运行状态，相反，被调用者在程序执行到指定的状态的时候，会主动的给调用者发送一条消息，报告自己已经达到了某种的运行状态，这就是异步操作的方式。 注：除了以上几个，我们可能还听过回调，其实，回调只是异步的实现手段之一。一般来说，我们可以把程序分为系统程序和用户程序，系统程序为用户程序提供API，用户程序调用系统程序提供的API来实现所需要的功能。但是在某些时候，我们可以这样做：在系统程序中设置一个函数指针，之后在用户程序中实现一个函数，用户可以把用户程序传回给系统程序，系统程序把函数指针指向用户自定义的函数，从而导致用户程序的执行。这就导致了一种非常有意思的现象：一般说来，都是用户程序调用系统程序的函数，而在上一种情况中；很明显，是系统程序调用(严格来说应该不能称之为调用)了用户程序中所定义的函数，即可以指定系统程序在特定时间执行自定义的客户程序，这种现象就是回调。 参考：聊聊同步、异步、阻塞与非阻塞","categories":[],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"MySQL实现双服务器主从同步","slug":"MySQL-implementation-of-dual-server-master-slave-synchronization","date":"2016-04-29T21:30:19.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2016/04/29/MySQL-implementation-of-dual-server-master-slave-synchronization/","link":"","permalink":"https://www.nosuchfield.com/2016/04/29/MySQL-implementation-of-dual-server-master-slave-synchronization/","excerpt":"","text":"对于一个网站，当其用户数量到达一定级别之后，其性能就开始要经受严格的考验了。其中，数据库作为可能制约性能的最大的瓶颈，第一步要做的就是要对数据库拆封。数据库的拆封一般分为两种，一种是分库分表，还有一种就是读写分离，这里简单介绍一下MySQL中如何实现数据库的读写分离以及双机热备以实现较好的数据库容灾功能。 1.安装MySQL在两台服务器上分别安装 mysql-server 和 mysql-client，把其中一台定义为主数据库，另一台设定为从数据库。尽可能的保证两台服务器上的数据库的版本一致，防止发生未知的情况。 2.修改MySQL配置文件，配置主从数据库 修改主数据库master： 找到MySQL的my.cnf文件（一般位于&#x2F;etc&#x2F;mysql&#x2F;my.cnf），配置[mysqld]的属性如下： [mysqld] log-bin=mysql-bin //[必须]启用二进制日志 server-id=222 //[必须]服务器唯一ID，默认是1，一般取IP最后一段 修改从数据库slave： 同样找到my.cnf文件，在[mysqld]中配置如下： [mysqld] log-bin=mysql-bin //[不是必须]启用二进制日志 server-id=226 //[必须]服务器唯一ID，默认是1，一般取IP最后一段 完成以上两步之后，执行 /etc/init.d/mysql restart操作，重启MySQL使配置生效 3.建立主从账户并且进行相关的配置 在主数据库中建立 master 并授权 slave 在主数据库中执行 grant replication slave on *.* to &#39;backup&#39;@&#39;192.168.10.198&#39; identified by &#39;123&#39;; 这里创建了一个slave的用户授权，示表同意ip地址为192.168.10.198的主机通过用户名为backup和密码为123的slave来链接主数据库。 执行了上面这条语句之后，可以通过执行语句show master status来观察master的状态，一般来说此时我们可以得到File和Position这两个属性，这两个属性需要记录下来，在后面slave的配置中会使用到。 注意：以上两个参数可能会随着master的重启或者关闭等操作而改变，所以在执行了以上设置之后，尽可能不要再对master进行配置相关操作。 在从数据库中建立slave获取授权并链接到master 在从数据库中执行 change master to master_host=&#39;192.168.10.188&#39;,master_user=&#39;backup&#39;,MASTER_PORT=3306,master_password=&#39;123&#39;,master_log_file=&#39;mysql-bin.000179&#39;,master_log_pos=107; 其中的参数都是在上一步的主数据库中所设置的，最后两个参数就是我们之前在master中记录的值，把对应的写进去即可。 需要注意的是，如果在master中没有添加slave的IP地址，那么slave是无法链接到master的。 以上操作执行成功之后，就可以通过执行start slave来启动slave进行主从数据库的同步。 之后我们可以通过语句show slave status来观察slave的运行状态，这里需要重要关注的两个参数是Slave_IO_Running和Slave_SQL_Running。 Slave_SQL_Running表示了本地slave的运行状态，一般来说，只要本地的slave配置正确，这里就应该显示为YES，如果显示为NO，就需要对原因进行排查。 Slave_IO_Running表示了slave与master的链接情况，如果为YES表示一切正常，此时就可以开始进行主从数据库的数据同步操作了；如果为NO，也需要进行相关的排查；还有一种情况下，这里的状态会一值显示为connecting，这种情况就表示slave和master之间的链接出现了问题，这里提供几个排查思路： 第一检查master的端口号在slave中是否写正确；第二检查防火墙是否对master的端口号进行了屏蔽。 如果以上两个参数都显示为YES，那么此时就可以通过主从数据库来进行主从操作或读写分离了。需要注意的，此种主从方式只会把master的操作同步到slave，而不会把slave的操作同步到master，所以此时我们应该只操作master数据库，而把slave作为只读数据库。 Wiki：关于乱码的问题： 这里需要统一的把主从数据库的编码方式都更改为utf-8，从而可以避免乱码问题的出现。 我们可以通过执行show variables like &#39;char%&#39;;查看到数据库的编码方式； 之后，通过更改配置文件可以修改数据库的默认编码方式，我们需要对my.cnf文件做一些修改，加上两行对字符集做设定的语句： [client] default-character-set=utf8 #增加这一行，指定字符集 port = 3306 socket = /var/run/mysqld/mysqld.sock ............. [mysqld] character_set_server=utf8 #增加这一行，指定字符集 user = mysql pid-file = /var/run/mysqld/mysqld.pid 对主从数据库的字符集都进行了相关的修改之后，重启数据库，使修改生效（此时你可能需要重新查看master的授权属性是否更改并以此做基准对slave的连接配置做更改，之后重启salve生效）。","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"生产者消费者(Java实现)","slug":"producer-consumer-Java-implementation","date":"2016-04-24T12:49:20.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2016/04/24/producer-consumer-Java-implementation/","link":"","permalink":"https://www.nosuchfield.com/2016/04/24/producer-consumer-Java-implementation/","excerpt":"","text":"生产者消费者问题已经是计算机领域在多线程方面的一个经典的问题了，这里提供一种Java的实现版本。 1.创建产品这里我们直接使用数字来作为产品的代号 1234567891011121314public class Product &#123; private int id; public Product(int id) &#123; this.id = id; &#125; @Override public String toString() &#123; return &quot;产品:&quot; + id; &#125;&#125; 2.创建仓库仓库是生产者消费者问题中的一个十分重要部件，因为不论是生产者还是消费者，他们使用的都是同一个仓库，这样才能让消费者可以消费生产者所生产的产品。仓库拥有两个方法： 获取并保存产品 输出自己的产品并从仓库把其剔除掉 这里通过队列这种数据结构来作为仓库的实现 12345678910111213141516171819202122232425import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingQueue;public class Repertory &#123; BlockingQueue&lt;Product&gt; queues = new LinkedBlockingQueue&lt;Product&gt;(10); public void push(Product p) &#123; try &#123; queues.put(p); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; public Product pop() &#123; try &#123; return queues.take(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125; 3.生产者消费者生产者是生成产品并把其放到仓库中，而消费者则是从仓库中取出产品并消费掉 生产者： 1234567891011121314151617181920212223242526public class Producer implements Runnable &#123; private String name; private Repertory repertory; public Producer(String name, Repertory repertory) &#123; this.name = name; this.repertory = repertory; &#125; @Override public void run() &#123; while (true) &#123; Product product = new Product((int) (Math.random() * 10000)); repertory.push(product); System.out.println(name + &quot;:开始生产 --&gt;&quot; + product); // 防止显示太快 try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 消费者： 123456789101112131415161718192021222324252627public class Consumer implements Runnable &#123; private String name; private Repertory repertory; public Consumer(String name, Repertory repertory) &#123; this.name = name; this.repertory = repertory; &#125; @Override public void run() &#123; while (true) &#123; Product product = repertory.pop(); System.out.println(name + &quot;:开始消费 --&gt;&quot; + product); // 防止显示太快 try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125; 4.测试，使生产者消费者模型运作起来1234567891011121314151617181920212223import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class Test &#123; public static void main(String[] args) &#123; Repertory repertory = new Repertory(); ExecutorService service = Executors.newCachedThreadPool(); Producer p1 = new Producer(&quot;小1&quot;, repertory); Producer p2 = new Producer(&quot;小2&quot;, repertory); Producer p3 = new Producer(&quot;小3&quot;, repertory); Consumer c1 = new Consumer(&quot;小A&quot;, repertory); Consumer c2 = new Consumer(&quot;小B&quot;, repertory); Consumer c3 = new Consumer(&quot;小C&quot;, repertory); service.submit(p1); service.submit(p2); service.submit(p3); service.submit(c1); service.submit(c2); service.submit(c3); &#125;&#125; 输出结果如下： 小3:开始生产 --&gt;产品:5788 小C:开始消费 --&gt;产品:5788 小1:开始生产 --&gt;产品:5508 小2:开始生产 --&gt;产品:2277 小A:开始消费 --&gt;产品:5508 小B:开始消费 --&gt;产品:2277 小3:开始生产 --&gt;产品:7109 小B:开始消费 --&gt;产品:4547 小2:开始生产 --&gt;产品:4547 小1:开始生产 --&gt;产品:6464 小A:开始消费 --&gt;产品:6464 小C:开始消费 --&gt;产品:7109 小3:开始生产 --&gt;产品:863 小B:开始消费 --&gt;产品:1262 小2:开始生产 --&gt;产品:3230 小A:开始消费 --&gt;产品:863 小1:开始生产 --&gt;产品:1262 小C:开始消费 --&gt;产品:3230 小B:开始消费 --&gt;产品:9596 小C:开始消费 --&gt;产品:6798 小A:开始消费 --&gt;产品:9231 小2:开始生产 --&gt;产品:9231 小3:开始生产 --&gt;产品:9596 小1:开始生产 --&gt;产品:6798 总结：生产者消费模型其实还是比较简单的，其核心就是多个线程对一个资源的使用，然后完成我们想要的目标。多线程是计算机发展中的一个里程碑般发明，同时多线程也十分复杂并且充满挑战性的。关于更多的多线程相关的知识，可以搜寻一些操作系统的相关书籍来进行更加深入的学习。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"通过Github-Pages搭建博客并设置 HTTPS 协议访问","slug":"build-a-blog-with-Github-Pages-and-set-up-HTTPS-protocol-access","date":"2016-04-15T20:29:10.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2016/04/15/build-a-blog-with-Github-Pages-and-set-up-HTTPS-protocol-access/","link":"","permalink":"https://www.nosuchfield.com/2016/04/15/build-a-blog-with-Github-Pages-and-set-up-HTTPS-protocol-access/","excerpt":"","text":"Github Pages 是一个Github平台的子项目，可以用来托管静态页面，所以便被一些人用来搭建自己的个人博客了。这里的静态博客页面可以自己手写，也可以通过各种静态页面生成工具生成（例如：使用 Hexo 创建博客）。 1.创建你的 Github 帐号没什么好说的，在github.com新建一个帐号就行 2.设置静态页面的存放仓库这里有两种方式： 在Github中建立一个名为&#123;username&#125;.github.io的仓库（&#123;username&#125;对应的是 Github 账户的用户名）,之后在这个仓库中的任何网页文件都可以通过网址&#123;username&#125;.github.io来访问到，这样我们就可以使用这个页面来作为我们的博客网页存放仓库了，之后所有的网页只要存放在该仓库中就可被访问到。 在Github中随便建立一个仓库，然后给这个仓库新建一个名称为gh-pages的分支，在这个分支下面的所有的网页也可以通过网址&#123;username&#125;.github.io/&#123;repository_name&#125;来访问的到。 在这里推荐第一种方式，因为我们毕竟没有真正的项目要存放在仓库中，我们只需要存放个人静态网页而已。第二种方式更一般的是作为一个项目的说明页面用来存放网页的。 3.自定义域名如果想要设置自定义域名访问自己的博客，可以把域名的DNS解析设置为CNAME（在域名服务提供商的后台操作面板中可以进行设置），然后指向&#123;username&#125;.github.io。接着我们在&#123;username&#125;.github.io这个仓库中添加一个CNAME文件，在CNAME文件中写入你要解析的域名即可，稍等片刻之后，你就会发现你可以通过你的自定义域名访问的你的Github Pages个人博客了。 4.为个人博客添加 HTTPS 协议访问得益于大陆网络运营商对于网站HTTP请求和响应的劫持，现在越来越多的网站服务提供商开始使用 HTTPS 协议来构建自己的网站。 HTTPS 协议是一种在运行在 SSL 协议之上的安全的协议，可以有效的避免传输的数据被窃取或监听。接下来我们就要给我们的个人博客添加上 HTTPS 协议。 Github Pages 是支持 HTTPS 协议的，但是因为我们无法操作 Github Pages 的服务器，所以也就无法在服务器上直接添加安全证书。这里有一个免费并且十分方便的方法来解决这个问题。 CloudFlare 为用户提供了免费的 HTTPS 安全证书，并且在目前看来依然还在稳定的提供服务。 注册了 CloudFlare 的账号之后，按照提示走，你会被提示输入一个域名，在这里直接输入你自己购买并且已经解析到了你的个人博客上的自定义域名，点确认，CloudFlare就会开始解析该域名的信息。 大约1分钟后，CloudFlare 会给出你的域名解析结果，查看结果无误，一直点击下一步知道进入最终的结果界面。此时 CloudFlare 会给你提供新的 DNS 解析路径，所以你需要把你自己注册的域名的 DNS 服务器更改为 CloudFlare 提供给你的服务器，更改完之后稍等几分钟，在 CloudFlare 界面中应该就能看到如下的页面了： 你可以在 CloudFlare 的操作面板中做各种各样的个性化的设置，这里 SSL 的等级建议设置为 Full，然后你就发现你可以通过 HTTPS 来访问你自己的博客了。 如果想要禁止访问自己的非 HTTPS 的博客页面，可以在网页代码中 插入如下的代码来对 HTTP 请求作出重定向即可：1&quot;https:&quot;!=window.location.protocol&amp;&amp;(window.location.protocol=&quot;https:&quot;)","categories":[],"tags":[{"name":"Wiki","slug":"Wiki","permalink":"https://www.nosuchfield.com/tags/Wiki/"}]},{"title":"使用ngrok将web服务映射到公网","slug":"use-ngrok-to-map-web-services-to-the-public-network","date":"2016-04-06T23:28:49.000Z","updated":"2025-08-22T15:42:13.354Z","comments":true,"path":"2016/04/06/use-ngrok-to-map-web-services-to-the-public-network/","link":"","permalink":"https://www.nosuchfield.com/2016/04/06/use-ngrok-to-map-web-services-to-the-public-network/","excerpt":"","text":"当使用树莓派在本地搭建了Web服务器之后，如果想要在公网也能访问已经搭好的网站，那么可以借助于ngrok来实现。 1.建立ngrok帐号目前ngrok的官网好像在墙外（不过生成的映射网址在墙内也可以访问），所以想要注册的话必须要翻墙才可以。 我们在官网上先注册一个账号，然后进入到如下的页面，这里会指导我们如何操作： 2.下载ngrok程序ngrok提供了多种平台的应用程序，因为这次我是在树莓派3上搭建的服务器，所以选择 Linux/ARM 这个格式安装包并下载解压缩，然后放到 /home/pi 文件夹下，接着修改 ngrok 文件的权限（rwx），使其变成可执行的文件。 3.执行ngrok文件在Linux下，首先执行./ngrok authtoken 88BMnETngS3x9Gx9ZobDX_5ch61BcUBVkm6NFm76Q4J（后面的那个认证码是每个人不同的，可以在个人信息中找到）来生成自己的配置文件，生成的配置文件为~.ngrok2/ngrok.yml，之后我们就不再需要配置个人信息了，ngrok在每次执行的时候会自动调用配置文件中的个人信息。 接着，执行./ngrok http 8080来监听我们机器的8080端口（假设我们的服务器运行在8080端口），然后ngrok就会生成如下信息： 其中的两个Forwarding就是用来转发我们的请求的外网连接，现在我们就可以直接通过这两个连接来在公网直接访问我们的Web项目了。 拓展阅读：搭建自己的ngrok服务","categories":[],"tags":[{"name":"杂项","slug":"杂项","permalink":"https://www.nosuchfield.com/tags/%E6%9D%82%E9%A1%B9/"}]},{"title":"获取Servlet的响应并修改其内容","slug":"gets-the-servlet's-response-and-modifies-its-contents","date":"2016-03-29T21:31:21.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2016/03/29/gets-the-servlet's-response-and-modifies-its-contents/","link":"","permalink":"https://www.nosuchfield.com/2016/03/29/gets-the-servlet's-response-and-modifies-its-contents/","excerpt":"","text":"有的时候我们需要批量的修改Servlet中的响应的内容，这时候我们就可以通过HttpServletResponseWrapper这个类，在Filter中先获取响应的内容，接着修改响应的内容，最后再把修改完之后的内容作为响应返回给客户端。代码如下演示： 1.创建一个继承自HttpServletResponseWrapper的类12345678910111213141516171819202122232425262728293031323334import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpServletResponseWrapper;import java.io.CharArrayWriter;import java.io.PrintWriter;/** * Created on 2016/3/29 19:54. */public class ResponseWrapper extends HttpServletResponseWrapper &#123; private PrintWriter cachedWriter; private CharArrayWriter bufferedWriter; public ResponseWrapper(HttpServletResponse response) &#123; super(response); // 这个是我们保存返回结果的地方 bufferedWriter = new CharArrayWriter(); // 这个是包装PrintWriter的，让所有结果通过这个PrintWriter写入到bufferedWriter中 cachedWriter = new PrintWriter(bufferedWriter); &#125; @Override public PrintWriter getWriter() &#123; return cachedWriter; &#125; /** * 获取原始的HTML页面内容。 * * @return */ public String getResult() &#123; return bufferedWriter.toString(); &#125;&#125; 2.在过滤器中修改响应的内容12345678910111213141516171819202122232425262728293031323334353637383940414243444546package cn.iduoka.util.format;import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;/** * Created on 2016/3/29 19:55. */@WebFilter(filterName = &quot;FormatFilter&quot;, urlPatterns = (&quot;/&quot;))public class FormatFilter implements Filter &#123; @Override public void destroy() &#123; // TODO Auto-generated method stub &#125; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; // 使用我们自定义的响应包装器来包装原始的ServletResponse ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse) response); // 这句话非常重要，注意看到第二个参数是我们的包装器而不是response chain.doFilter(request, wrapper); // 获取到我们所截获的值 --&gt; 做处理之前所获取到的值 String result = wrapper.getResult(); // 对返回的结果做处理操作 result = result.replace(&quot;&lt;/html&gt;&quot;, &quot;&lt;div style=&#x27;display: none;&#x27;&gt;hello world&lt;/div&gt;\\n&lt;/html&gt;&quot;); // 重置响应输出的内容长度 response.setContentLength(-1); // 输出最终的结果 --&gt; 做完处理之后再把这个值返回回去 PrintWriter out = response.getWriter(); out.write(result); out.flush(); out.close(); &#125; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; // TODO Auto-generated method stub &#125;&#125; 参考资料：servlet中使用HttpServletResponseWrapper截获返回的页面内容","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"通过 儿子 - 兄弟 表示法把任意一个树转化为二叉树","slug":"any-number-is-converted-into-a-binary-tree-by-the-son-sibling-notation","date":"2016-03-23T23:05:59.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2016/03/23/any-number-is-converted-into-a-binary-tree-by-the-son-sibling-notation/","link":"","permalink":"https://www.nosuchfield.com/2016/03/23/any-number-is-converted-into-a-binary-tree-by-the-son-sibling-notation/","excerpt":"","text":"树是一种十分重要的数据结构，在计算机科学中有着十分广泛的应用。二叉树作为一种特殊的树，可以更加方便的研究它的的性质。我们通过一种叫做儿子 - 兄弟表示法的方式，可以把任意一个树转化为二叉树。 如图所示，这是一颗普通的树，我们可以把每一个节点的子节点(1)和右兄弟节点提取出来，然后通过链表的方式连接起来，就构成了下图所示的这种结构。可以发现，下图是一个二叉树。也就是说，任意一种结构的树都可以通过 儿子- 兄弟 节点表示法转化为一颗二叉树，这样一来只要研究二叉树就可以了，大大的简化对树的研究。","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"Java 中缀表达式转后缀表达式并进行计算","slug":"the-Java-infix-expression-turns-the-postfix-expression-and-evaluates-it","date":"2016-03-21T23:59:42.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2016/03/21/the-Java-infix-expression-turns-the-postfix-expression-and-evaluates-it/","link":"","permalink":"https://www.nosuchfield.com/2016/03/21/the-Java-infix-expression-turns-the-postfix-expression-and-evaluates-it/","excerpt":"","text":"关于括号的优先级这一块还没有完成，目前只支持简单的四则运算。相关代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106import java.util.Stack;public class PostfixExpression &#123; // 中缀表达式转化为后缀表达式 public String suffix(String infix) &#123; infix = infix.replaceAll(&quot; &quot;, &quot;&quot;); StringBuffer suffixExpression = new StringBuffer(); char[] chars = infix.toCharArray(); String[] letters = new String[chars.length]; for (int i = 0; i &lt; letters.length; i++) &#123; letters[i] = String.valueOf(chars[i]); &#125; Stack&lt;String&gt; stack = new Stack&lt;String&gt;(); for (int i = 0; i &lt; letters.length; i++) &#123; if (letters[i].matches(&quot;^[0-9]*$&quot;)) &#123; if (i &gt; 1 &amp;&amp; letters[i - 1].matches(&quot;^[0-9]*$&quot;)) &#123; suffixExpression.append(letters[i]); &#125; else &#123; suffixExpression.append(&quot; &quot; + letters[i]); &#125; &#125; else &#123; // 表达式的判断 if (&quot;(&quot;.equals(letters[i])) &#123; stack.push(&quot;(&quot;); &#125; else if (&quot;)&quot;.equals(letters[i])) &#123; String s = stack.pop(); while (!&quot;(&quot;.equals(s)) &#123; suffixExpression.append(&quot; &quot; + s + &quot; &quot;); s = stack.pop(); &#125; &#125; else &#123; if (stack.isEmpty()) &#123; stack.push(letters[i]); &#125; else &#123; String top = stack.firstElement(); if ((&quot;-&quot;.equals(top) || &quot;+&quot;.equals(top)) &amp;&amp; (&quot;x&quot;.equals(letters[i])) || &quot;/&quot;.equals(letters[i])) &#123; stack.push(letters[i]); &#125; else &#123; while (!((&quot;-&quot;.equals(top) || &quot;+&quot;.equals(top)) &amp;&amp; (&quot;x&quot;.equals(letters[i])) || &quot;/&quot;.equals(letters[i]))) &#123; suffixExpression.append(&quot; &quot; + stack.pop() + &quot; &quot;); if (stack.isEmpty()) &#123; break; &#125; else &#123; top = stack.firstElement(); &#125; &#125; stack.push(letters[i]); &#125; &#125; &#125; &#125; &#125; while (!stack.isEmpty()) &#123; suffixExpression.append(&quot; &quot; + stack.pop() + &quot; &quot;); &#125; return suffixExpression.toString(); &#125; // 计算后缀表达式 public double calculate(String expression) &#123; Stack&lt;String&gt; stack = new Stack&lt;String&gt;(); String[] values = expression.split(&quot; &#123;1,&#125;&quot;); for (int i = 0; i &lt; values.length; i++) &#123; String value = values[i]; if (value.matches(&quot;^[0-9]*$&quot;)) &#123; stack.push(value); &#125; else &#123; try &#123; stack.push(this.calculate(stack.pop(), stack.pop(), value)); &#125; catch (Exception e) &#123; System.out.println(&quot;输入的表达式有误&quot;); &#125; &#125; &#125; return Double.valueOf(stack.pop()); &#125; // 计算两个数的值 private String calculate(String s2, String s1, String operator) throws Exception &#123; double num1 = Double.valueOf(s1); double num2 = Double.valueOf(s2); double num; if (&quot;+&quot;.equals(operator)) &#123; num = num1 + num2; &#125; else if (&quot;x&quot;.equals(operator)) &#123; num = num1 * num2; &#125; else if (&quot;-&quot;.equals(operator)) &#123; num = num1 - num2; &#125; else if (&quot;/&quot;.equals(operator)) &#123; num = num1 / num2; &#125; else &#123; throw new Exception(&quot;Can&#x27;t explain this operator&quot;); &#125; return String.valueOf(num); &#125; public static void main(String[] args) &#123; PostfixExpression p = new PostfixExpression(); String expression = &quot;1x100+90x2/2+2&quot;; String suffixExpression = p.suffix(expression); System.out.println(suffixExpression); System.out.println(p.calculate(suffixExpression)); &#125;&#125; 理论支撑：","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"有穷状态自动机","slug":"finite-state-automaton","date":"2016-02-05T10:12:11.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2016/02/05/finite-state-automaton/","link":"","permalink":"https://www.nosuchfield.com/2016/02/05/finite-state-automaton/","excerpt":"","text":"有穷自动机（finite automation，FA），也叫做有限状态自动机，是一种在计算机学领域非常重要的计算模型。 1.有穷自动机我们先看一个有穷自动机 M： 接下来，我们可以用形式化的方式来描述这个FA：M&#x3D;(Q, Σ, δ, q0, F) 其中： Q &#x3D; {q1, q2, q3} Σ &#x3D; {0, 1} δ 描述为 q1 是起始状态 F &#x3D; {q2} 根据以上规则，我们已经可以定义一个 FA 了。其中： Q 表示的是该状态机所有的状态，即该 FA 所有的存在的状态都包含在此集合中 Σ 表示的是所有的输入状态的集合，即所有可能的输入都包含在之中 δ 描述的函数关系式，即从某一个状态转移到另一个状态时所遵循的规则 q1 是起始状态，即该 FA 最开始的时候的状态 F 是接受状态，或者也称为最终状态，无论一个状态机经过了怎样的变换，最后的一部转移必须转移到接受状态，否则就是非法的。符合这种转移要求的语言是可以被此台 FA 识别的，被称为正则语言。 2.确定型有穷自动机与非确定型有穷自动机确定型有穷自动机（DFA）：每个状态对于字母表中的每一个符号总是恰好有一个转移箭头射出 非确定型有穷自动机（NFA）：一个状态对于字母表中的每一个符号可能有 0 个、1 个或多个箭头，NFA 中还可以存在有带有标号 ε 的箭头 每一台 NFA 都可以转换成一台等价的 DFA，而构造 NFA 有时比直接构造 DFA 容易 如果两台机器识别同样的语言，则称他们是等价的；每一台非确定型有穷自动机都等价于某一台确定型有穷自动机 参考文献：计算理论导引 机械工业出版社 2006-7","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"}]},{"title":"URL encode 与 URL decode","slug":"URL-encode-and-URL-decode","date":"2016-01-28T19:53:41.000Z","updated":"2025-08-22T15:42:13.349Z","comments":true,"path":"2016/01/28/URL-encode-and-URL-decode/","link":"","permalink":"https://www.nosuchfield.com/2016/01/28/URL-encode-and-URL-decode/","excerpt":"","text":"在国际标准中，HTTP 请求的 URL 中只能包含英文、阿拉伯数字和一些标点符号，不可以包含中文这类的字符。当我们想要在 URL 中表示中文信息的时候，就需要对中文信息进行编码，然后把编好码的数据发送给服务器，服务器收到这些编好码的数据之后再对应的解码就可以的到想要的数据。 在 Java 中，我们可以通过 URLEncode 类来进行编码，通过 URLDecode 类来进行解码。在编码和解码的时候，需要加上字符集来表示把字符转化为某个字符集中该字符所对应的编码。","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"计算机网络笔记","slug":"computer-network-notes","date":"2016-01-20T20:45:36.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2016/01/20/computer-network-notes/","link":"","permalink":"https://www.nosuchfield.com/2016/01/20/computer-network-notes/","excerpt":"","text":"计算机网络从上个世纪开始发展，到今天已经已经有了一套成熟的解决方案。 我们一般把计算网络分层五层，分别是应用层、传输层、网络层、数据链路层和物理层，结构如下图所示： 以上的这种分层是我们比较常用的一种方式，从下到上的过程也是一层一层的抽象过程，每上一层也增加了一层抽象。其实，除了这种分层之外，ISO也提供了一种分层方式，但是不太常用，我们只讨论以上这一种分层的方式。 1.物理层和数据链路层物理层和数据链路层提供了点到点的数据传输方式，这两个协议提供了点到点的数据传输。 物理层是用来传输数据的物理介质，一般是由光纤、双绞线、同轴电缆等物理材料构成，保证从节点 A 到节点 B 能够传输数据。因为信号的高低电平的保持时间不好计算，所以我们一般用信号的变化情况来传输信号（曼彻斯特编码）。 数据链路层则是用来控制数据在物理介质上面传输的一种方式，它尽可能的保证数据能够从节点 A 传输到节点 B。 2.网络层网络层的主要目的是把所有节点的主机构建成为一张网，这样才能称之为网络，网络层的主要功能是对网络中节点进行操作。因为物理层和数据链路层已经保证了数据可以在节点到节点之间传输了，而网络层的作用就是保证数据从某一个节点出发，使信号可以传送到一条正确的数据链路上。 如上图所示，从节点 A 到节点 F 之间要经过多个路由器，那么当数据到达了某一个路由器节点之后，路由器应该怎么做呢？ 其实，路由器会对数据进行解析，读取它的报文头部，分析应该把数据传送什么方向，然后把数据发送到和路由器相连的某一条链路上，数据就在链路上继续前进，遇到了新的路由器的时候，新的路由器会进行类似的操作，然后一直到数据被发送到目的地。在这里我们可以看到，数据最终是通过 A → C → E → F 这样的顺序被从源地址发送到了目的地址，中间经过了 2 个路由器。 在这里我们可以做一个类比，把网络类比成一个快递公司，而网络中的数据就是快递的包裹。 源主机打包数据，给源数据加上网络报文；寄件人给包裹写上收件地址，把包裹送到快递公司。 数据在网络中传输，这里传输的物理介质可能是光纤、双绞线等等；快递开始被运送，运送的交通工具可能是飞机、火车等等。 数据到达路由器，由路由器根据数据网络报文来判断数据接下来应该被发往哪条数据线路，这里使用到了路由选择的技术；快递到达城市快递中转中心，中转中心根据包裹的收件地址来判断接下来包裹应该被发往什么地方，随后被放到相应的交通工具上继续运送。 有类网中的 IP 路由选择：当一个数据到达某一个路由器时，路由器读取数据报文中的目的地址，然后把目的地址与路由器内部的路由表进行比对，由该 IP 地址得出接下来应该把数据发往与当前路由器相连哪一个路由器，并且得出应该由当前路由器的哪一个接口发出数据。如果目的地址主机直接与当前路由器相连，则路由器不再把数据发往其他路由器，而是直接把数据发送给目标主机。（如果路由表中查不到该 IP 地址，则把该数据发往路由表中的默认路由器；如果路由表中未设置默认路由器，则丢弃该数据）如下图[1]： 遇到新的路由器，重复步骤三；包裹送到了新的中转中心，重复步骤三。 数据到达最终节点，传输完成；包裹被送到收件人手中，快递完成。 下面这张图可以体现以上这种过程[1]： 在网络层，我们最常使用的协议就是 IP 协议，IP 协议主要是给网络数据打上了一个 IP 报文，这个报文可以帮助路由器来决定把数据发送到哪里去。 IP 报文内容比较多，可以在查到，这里介绍几个比较常用的。 TTL（TIME-TO-LIVE）：即跳数（hop），用于限制数据报在因特网上所经过的路由器数，每经过一个路由器，就 -1，如果路由器发现心跳小于 0，就把该数据丢弃。 目标地址：数据应该被发送到的的目标主机的 IP 地址。 用 IP 来标识一个主机，会使用到 IP 地址，此时该主机拥有一个独一无二的 IP 地址，相当于日常生活中的门牌号，我们可以通过这个 IP 地址来给该主机发送数据。 IP 地址的组成：网络号 + 主机号 3.Wiki NAT：网络地址转换技术 NAPT&#x2F;PAT&#x2F;过载NAT：端口地址转换技术,即一个子网络对应一个路由器端口号 ARP 协议：从某一个主机的 IP 地址得到它的 MAC 地址的方式。源主机通过广播的方式发送一个 IP 地址，然后在所有收到此 IP 地址的主机中，符合要求的主机(IP 地址和广播的 IP 地址一致的)就会把它的 MAC 地址发送回来 DHCP 协议：可以使客户机动态的获取一个 IP 地址 注[1]：图片摘自网易云课堂计算机网络之构造互联网 - 张永民","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"使用 lombox 来自动生成 Java POJO 中属性的 get 和 set 方法","slug":"use-lombox-to-automatically-generate-the-get-and-set-methods-for-the-properties-in-Java-POJO","date":"2016-01-06T14:05:20.000Z","updated":"2025-08-22T15:42:13.354Z","comments":true,"path":"2016/01/06/use-lombox-to-automatically-generate-the-get-and-set-methods-for-the-properties-in-Java-POJO/","link":"","permalink":"https://www.nosuchfield.com/2016/01/06/use-lombox-to-automatically-generate-the-get-and-set-methods-for-the-properties-in-Java-POJO/","excerpt":"","text":"你是否在为 Java 中无穷无尽的 set 和 get 方法感到厌烦呢？lombox的作者就给我们提供了另一种方便的解决方式，你可以在他的官网上查看到更多的信息，我在这里只是做一下简要的介绍。 lombox 的去 set、get 的解决方案是通过 Java 的注解方式实现的，你只要在 POJO 类的上面加上 @Getter 和 @Setter 注解，那么当你调用这个 POJO 的时候就可以直接使用属性的 get 和 set 方法而不需要自己手动去写实现。 例如： 我们在上面的 POJO 实现中并没有给 name 和 condition 属性添加 set 和 get 方法，下面我们可以对这个类进行测试。 如上所示，我们在测试中可以调用到 name 的 get 方法和 condition 的 is 方法（ boolean 类型默认生成的是 is 而不是 get 方法），这样我们就从繁琐的 get 和 set 方法中解放出来了。 注：因为 lombox 的注解是在编译期才执行的，所以如果你使用的是 IDE 的话，IDE 会报出无法解析 get 和 set 的错误，这时候需要给 IDE 安装对应的插件。 最后，别忘了引入 lombox 的相关 jar 包： &lt;!-- lombok --&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.6&lt;/version&gt; &lt;/dependency&gt;","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"在 JavaWeb 中设置网站图标","slug":"set-the-website-icon-in-JavaWeb","date":"2016-01-05T18:24:26.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2016/01/05/set-the-website-icon-in-JavaWeb/","link":"","permalink":"https://www.nosuchfield.com/2016/01/05/set-the-website-icon-in-JavaWeb/","excerpt":"","text":"网站的图标是网站的风格和内涵的一种概括，给网站制作一个好的图标是非常重要的。那么，怎么在 JavaWeb 中设置网站图标呢？ 首先我们要知道，之所以我们在浏览网页的时候会在标题栏上显示出图标，是因为浏览器会隐式的发送一个 domain:port&#x2F;favicon.ico 的请求，那么我们只要拦截这个请求然后把我们的图标作为响应发送回去，就可以让浏览器解析我们的图标并且显示了。这里我们可以通过 JavaWeb 中的过滤器来实现，具体实现如下： 1234567891011121314151617181920212223242526272829303132333435363738394041package cn.iduoka.util;import org.apache.log4j.Logger;import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletResponse;import java.io.*;/** * Created on 2016/1/5 17:20. */@WebFilter(filterName = &quot;FaviconFilter&quot;, urlPatterns = (&quot;/favicon.ico&quot;))public class FaviconFilter implements Filter &#123; Logger logger = Logger.getLogger(FaviconFilter.class); @Override public void init(FilterConfig filterConfig) throws ServletException &#123; logger.info(&quot;FaviconFilter is working.&quot;); &#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; InputStream is = FaviconFilter.class.getClassLoader().getResourceAsStream(&quot;/favicon.ico&quot;); byte[] b = new byte[10 * 1024]; is.read(b); HttpServletResponse response = (HttpServletResponse) servletResponse; ServletOutputStream sos = response.getOutputStream(); sos.write(b); sos.flush(); is.close(); sos.close(); &#125; @Override public void destroy() &#123; logger.info(&quot;FaviconFilter has been destroyed.&quot;); &#125;&#125; 我们看到，我们拦截了 &#x2F;favicon.ico 请求，然后其中的 doFilter 方法就是把我们的图标以流的形式读进来，然后再放在响应中发送给客户端，这样客户端就可以收到我们的图标并解析显示了。","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"使用 Hexo 创建博客","slug":"create-a-blog-using-Hexo","date":"2015-12-31T16:54:00.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2015/12/31/create-a-blog-using-Hexo/","link":"","permalink":"https://www.nosuchfield.com/2015/12/31/create-a-blog-using-Hexo/","excerpt":"","text":"昨天试着用 Hexo 来搭建了自己的个人博客，中间照着网上的各种教程，但是还是遇到了各种的坑，这里简要介绍下如何快速的使用 Hexo 搭建一个个人博客，最主要的也是把自己踩的这些坑分享出来，希望能够帮到别人。 1.安装 Git、Node.js 和 Hexo这里就简要的介绍一下，网上教程还是比较充足的 Git 的相关操作可以参考Git教程 - 廖雪峰的官方网站 Node.js 的下载 Hexo 的安装需要在命令行使用 npm install -g hexo 2.创建 Hexo 文件夹，安装依赖包 创建一个空的文件夹，执行 hexo init 即可创建一个 Hexo 的文件夹，创建后的目录如下所示 |-scaffolds |-source |-themes |-.gitignore |-_config.yml |-package.json themes 文件夹是用来放主题的，你从网上搞到的各种主题都可以放在这个文件夹下面。通过改变 _config.yml 文件中的 theme 属性，我们可以灵活的选择我们想要的主题。 这里需要注意一下的是，在整个我们的文件夹中会存在多个 _config.yml 文件，其中根目录下有一个，每一个主题包中也会有一个，我们这里所说的是根目录下的 _config.yml 文件 source 文件夹是用来存放我们所书写的博客，当我们用 markdown 格式写好了博客之后，使用命令 hexo g 就会生成一个 &#x2F;public 文件夹，而这里面就是静态的 html 博客了，此时直接把 public 文件夹下的内容推送到 Github Pages 上，你的博客就可以访问了。 在当前文件夹下执行 npm install，安装 Hexo 的相关依赖 安装好了之后会在文件夹下生成一个 node_modules 文件夹，这个文件夹不要随便改，里面都是一些库文件。 依赖安装好了之后，就可以开始写博客了 在命令行使用 hexo new &quot;hello world&quot; 可以在 source_posts 文件夹中创建一个名为 hello-world.md 的文件，直接书写就可以了。如果想要一边写一边看效果，那么就可通过使用命令 hexo s 来执行一个本地的服务器，然后直接访问 127.0.0.1:4000 来看自己所写内容了，如果想要热部署，可以使用 hexo s --debug 来自动即时的发布已写的博客。 感觉写好了，通过命令 hexo -g 将在 \\public 文件夹中生成静态博客，然后把 \\public 文件夹中的内容发布到网络上去就可以了。 或者，这里有一个更简单的方案，我们可以在(根目录的) _config.yml 文件中添加 # 自动部署到 Github deploy: type: git repository: git@github.com:RitterHou/ritterhou.github.io.git branch: master 然后在命令行执行 npm install hexo-deployer-git --save 来安装一个自动部署到 Github 的插件 接着执行 hexo d 或者 hexo deploy 即可自动发布网站到 Github 了。 3.注意事项Hexo 语法极其严格，在_config.yml文件中，所有的属性在冒号之后都需要空一格，例如 name: zhangsan。包括你的 markdown 博客中，例如如果有一些 title、date 之类的内容，不要忘了写成 title: helloworld 这样的形式，如果不空格，生成的时候就会报错。 把 CNAME、LICENSE 之类的文件放到 source 文件夹下就可以在发布的时候同时发布到 public 文件夹之中了。如果想要生成(generate)的时候跳过 README.md 文件，可以在 _config.yml 文件中添加 skip_render: README.md 来忽略生成 README.md 文件 4.附录hexo g → 生成静态文件的命令，全称是 hexo generate hexo s → 启动本地服务器，全称是 hexo server","categories":[],"tags":[{"name":"杂项","slug":"杂项","permalink":"https://www.nosuchfield.com/tags/%E6%9D%82%E9%A1%B9/"}]},{"title":"在 JSP 中禁用 Session","slug":"disable-session-in-JSP","date":"2015-12-31T15:46:00.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2015/12/31/disable-session-in-JSP/","link":"","permalink":"https://www.nosuchfield.com/2015/12/31/disable-session-in-JSP/","excerpt":"","text":"前两天在写一个 Servlet 的时候遇到一件特别奇怪的事情，就是我明明已经设置了 HttpSession session = request.getSession(false)，但是我在第一次发起请求的时候，打印出 session 确实是 null，但是我第二次再发起请求时，session 却能够打印出来值了，我真是百思不得其解，因为按道理来说无论如何，这个 session 都应该依然是 null 才对。 后来问题解决了，其根本原因是我在这个请求的后面的阶段又访问了一个 JSP 页面，因为在 JSP 页面存在一个隐式的 HttpSession session = request.getSession(true)，所以无论我在前面如何设置，在后面请求到达 JSP 页面的时候都会使得 session 不为空，这也就解释了为什么我第一次发起请求的时候 session 为空，而后面的请求 session 就不为空了。解决方法也很简单，只要在 JSP 页面设置 &lt;%@ page language=&quot;java&quot; session=&quot;false&quot;%&gt;，这样一来，在 JSP 页面就禁用掉了 session，也就是 JSP 页面不再存在隐式的存在HttpSession session = request.getSession(true)这行代码了。所以此时的 session 只能够在 Servlet 中被取得，同时 Servlet 中又不再创建新的 session，所以自然 session 就不会再莫名其妙的被创建出来了。","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"博客开始使用Hexo了","slug":"The-blog-started-using-Hexo","date":"2015-12-31T15:10:00.000Z","updated":"2025-08-22T15:42:13.348Z","comments":true,"path":"2015/12/31/The-blog-started-using-Hexo/","link":"","permalink":"https://www.nosuchfield.com/2015/12/31/The-blog-started-using-Hexo/","excerpt":"","text":"用 Hexo 搭建这个博客花了我差不多快十个小时的时间，从昨天晚上下班之后开始做，然后今天早上起床后也是开始继续研究。 虽然之前一直就在 Github Pages 上面搭建博客了，但是毕竟没有前端的功底，做的网页也就是勉强能看的地步。昨天看了 Hexo 之后就想着给博客弄个新的风格，虽然这之间被坑的有点惨，但是好歹最后还是把这博客搭建起来了，也算是不枉费我的一番辛苦了。 今天也是 2015 年的最后一天，回顾我的 2015 年，感觉这之中有收获，但是也还有很多不足，但是时间的流逝是不能够阻挡的，那么就只能希望在 2016 年更加努力的去拼搏了和奋斗了。 希望未来会越来越好。","categories":[],"tags":[]},{"title":"使用 git add . 把空的文件夹添加到 Git 的暂存区","slug":"use-git-add-to-add-empty-folders-to-Git's-staging-area","date":"2015-12-29T00:00:00.000Z","updated":"2025-08-22T15:42:13.354Z","comments":true,"path":"2015/12/29/use-git-add-to-add-empty-folders-to-Git's-staging-area/","link":"","permalink":"https://www.nosuchfield.com/2015/12/29/use-git-add-to-add-empty-folders-to-Git's-staging-area/","excerpt":"","text":"做了一回标题党，事实上标题所说的这件事目前还无法做到，这也许算的上是 Git 的一个小缺陷吧，Linus 在写 Git 的时候可能默认就是把所有的文件夹默认为不是空的的。 今天新建了一个新的分支，就因为空的文件夹这个问题被坑了。因为我在 master 分支下有一些空文件夹存在，但是之前也并没有在意，然后我新建了一个分支，当我切换到新的分支的时候，发现在这个新的分支下居然有一些奇怪的文件夹，于是就顺手把它们都删了。后来当我切回到 master 分支的时候，毫无意外的发现少了一些文件夹 … 其实原理很简单，就是前面的 master 分之下，当使用 git add . 时，空文件夹并没有被加入到暂存区里面，这些文件夹还是被当作成普通的文件夹的。当我切换到另一个分支时，这些文件夹还是被当作成普通的文件夹放在了那里，所以我相当于把普通的文件夹给删除了，而且因为这些文件夹并没有被添加到 Git 中，所以也没有办法恢复，我最后还是手动又把这些文件夹创建了出来 … 解决这个问题其实也比较简单，就是在所有的空文件夹中添加一个文件（比如 .gitkeep），这样在使用 git add . 的时候，就能够成功的把所有的文件都保存到 Git 中了。","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.nosuchfield.com/tags/Git/"}]},{"title":"Intellj Idea 修改默认的 Jsp 页面模板","slug":"Intellij-Idea-Modify-the-default-Jsp-page-template","date":"2015-12-27T00:00:00.000Z","updated":"2025-08-22T15:42:13.341Z","comments":true,"path":"2015/12/27/Intellij-Idea-Modify-the-default-Jsp-page-template/","link":"","permalink":"https://www.nosuchfield.com/2015/12/27/Intellij-Idea-Modify-the-default-Jsp-page-template/","excerpt":"","text":"选择 File → Settings… → File and Code Templates → Other → Web → Jsp files → Jsp File.jsp，然后修改 Jsp File.jsp 中的内容就可以了","categories":[],"tags":[]},{"title":"log4j.properties 文件的配置","slug":"log4j-properties-file-configuration","date":"2015-12-26T11:22:53.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2015/12/26/log4j-properties-file-configuration/","link":"","permalink":"https://www.nosuchfield.com/2015/12/26/log4j-properties-file-configuration/","excerpt":"","text":"1.全局log4j.rootLogger的配置log4j.rootLogger是用来配置log4j的全局配置的，一般可以写为： log4j.rootLogger = [ level ] , appenderName, appenderName, … 其中，level表示的是日志记录优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别。log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。当定义了一个级别时，低于该级别的优先级就被忽略。例如，如果定义级别为INFO，那么DEBUG级别的日志信息就会被忽略了。 appenderName 是在 Appender 配置中使用的名称信息，一个 lo4j.rootLogger 中可以定义多个 appenderName ，然后通过他们的不同的名字来在 Appender 中分别使用。 例如，下面这个语句表示定义了一个优先级别为DEBUG、有5个输出位置的log4j： log4j.rootLogger = debug,stdout,D,I,W,E 2.Appender的配置 配置日志的输出方式 log4j的输出方式的配置有以下几种类型，他用来控制log的输出位置： org.apache.log4j.ConsoleAppender（控制台） org.apache.log4j.FileAppender（文件） org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件） org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件） org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方） 使用方式如下所示： log4j.appender.appenderName = xxx 配置日志信息的格式（布局） log4j的layout有以下几种的配置方式，他用来控制log的输出格式： org.apache.log4j.HTMLLayout（以HTML表格形式布局）， org.apache.log4j.PatternLayout（可以灵活地指定布局模式）， org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）， org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息） 使用方式如下所示： log4j.appender.appenderName.layout = xxx 如果我们使用了org.apache.log4j.PatternLayout这个配置，那我们就可以使用类似于 C 的格式化输出的方式来更灵活的控制我们的 log 的输出格式，格式化输出命令如下所示： %m 输出代码中指定的消息 %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL %r 输出自应用启动到输出该log信息耗费的毫秒数 %c 输出所属的类目，通常就是所在类的全名 %t 输出产生该日志事件的线程名 %n 输出一个回车换行符，Windows平台为&quot;\\r\\n&quot;，Unix平台为&quot;\\n&quot; %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d&#123;yyy MMM dd HH:mm:ss,SSS&#125; %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数 使用方式如下所示： log4j.appender.appenderName.layout.ConversionPattern = %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n 其他的一些属性配置信息 Threshold属性，用来控制输出日志的优先级别，同 log4j.rootLogger 中的 level 类似，但是 Threshold 只对当前的 appender 有效 使用方式如下所示： log4j.appender.appenderName.Threshold = DEBUG File 和 Append 属性，当我们要把日志输出到文件的时候，需要用这两个属性来配置日志的输出位置和是否覆盖原来文件中日志（显然一般是不覆盖，而是在后面追加新的日志的） 使用方式如下所示： log4j.appender.appenderName.File = $&#123;webapp.root&#125;/WEB-INF/logs/log.log log4j.appender.appenderName.Append = true 把日志输出到系统的标准输出上： log4j.appender.appenderName.Target = System.out 3.一个典型的例子### 定义了log4j.rootLogger，优先级为debug，即包含了所有的优先级日志 ### ### 定义了三个 Appender，分别为 stdout, D, E ### log4j.rootLogger = debug,stdout,D,E ### 设置 stdout，它实现了控制台日志输出 ### log4j.appender.stdout = org.apache.log4j.ConsoleAppender log4j.appender.stdout.Target = System.out ### 使用了自定义的布局模式 ### log4j.appender.stdout.layout = org.apache.log4j.PatternLayout ### 自定义了输出模式 ### log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n ### 设置 D，它实现了把日志输出到文件，优先级为DEBUG ### log4j.appender.D = org.apache.log4j.DailyRollingFileAppender ### 把日志输出到指定的文件之中 ### log4j.appender.D.File = $&#123;webapp.root&#125;/WEB-INF/logs/log.log ### 在现有的日志后面追加新的日志 ### log4j.appender.D.Append = true log4j.appender.D.Threshold = DEBUG log4j.appender.D.layout = org.apache.log4j.PatternLayout log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m%n ### 输出ERROR 以上级别的日志到 logs/error.log ### log4j.appender.E = org.apache.log4j.DailyRollingFileAppender log4j.appender.E.File = $&#123;webapp.root&#125;/WEB-INF/logs/error.log log4j.appender.E.Append = true log4j.appender.E.Threshold = ERROR log4j.appender.E.layout = org.apache.log4j.PatternLayout log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m 关于如何搭建 log4j 的使用环境，可以参阅搭建一个 log4j 使用环境","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"搭建一个 log4j 使用环境","slug":"build-a-log4j-use-environment","date":"2015-12-26T00:00:00.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2015/12/26/build-a-log4j-use-environment/","link":"","permalink":"https://www.nosuchfield.com/2015/12/26/build-a-log4j-use-environment/","excerpt":"","text":"最近在搭建一个开发环境的时候使用到了 log4j，所以就记录下使用方法以便以后查阅。 1.引入log4j的相关jar包jar包的引入非常简单，只需要在pom.xml中加入以下的log4j关联就行。 &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.9&lt;/version&gt; &lt;/dependency&gt; 2.创建并使用log4j.properties文件在&#x2F;WEB-INF&#x2F;文件夹下创建一个log4j.properties文件，在其中添加如下的内容： ### 设置### log4j.rootLogger = debug,stdout,D,E ### 输出信息到控制抬 ### log4j.appender.stdout = org.apache.log4j.ConsoleAppender log4j.appender.stdout.Target = System.out log4j.appender.stdout.layout = org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n ### 输出DEBUG 级别以上的日志到 logs/log.log ### log4j.appender.D = org.apache.log4j.DailyRollingFileAppender log4j.appender.D.File = $&#123;webapp.root&#125;/WEB-INF/logs/log.log log4j.appender.D.Append = true log4j.appender.D.Threshold = DEBUG log4j.appender.D.layout = org.apache.log4j.PatternLayout log4j.appender.D.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m%n ### 输出ERROR 级别以上的日志到 logs/error.log ### log4j.appender.E = org.apache.log4j.DailyRollingFileAppender log4j.appender.E.File = $&#123;webapp.root&#125;/WEB-INF/logs/error.log log4j.appender.E.Append = true log4j.appender.E.Threshold = ERROR log4j.appender.E.layout = org.apache.log4j.PatternLayout log4j.appender.E.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [ %t:%r ] - [ %p ] %m 然后在web.xml中添加以下内容以完成对log4j.properties的调用： &lt;!-- log4j.properties文件 --&gt; &lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt; &lt;/context-param&gt; &lt;!-- Spring的log4j监听器 --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt; &lt;/listener&gt; 3.添加log文件，用来保存log信息在&#x2F;WEB-INF&#x2F;logs文件夹下创建log.log文件和error.log文件，那么在log4j.properties中所定义的相关log信息就会被写入到对应的.log文件中。 我在这里被一个问题困扰了好久，就是无论我怎么设置，程序相关的log信息都是能在控制台打印出来的，但是我却怎么也无法在.log文件看到本应该有的相关log信息，所有的.log文件都一直是空的，也就是没有任何信息被写入进去。后来我发现我自己犯了一个愚蠢错误，因为实际上真正在运行的程序是&#x2F;target文件夹下的，也就是说我应该去&#x2F;target文件夹下的对应的logs文件夹中查看相应的文件，然不是在&#x2F;src文件夹下看对应的log文件，之后我去&#x2F;target文件夹也即是运行程序的文件夹下查看了对应的.log文件，果然日志信息已经被写进去了。 4.测试日志的产生package com.duoka.test; import org.apache.log4j.Logger; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; /** * Created on 2015/12/24 22:49. */ @Controller public class Test &#123; Logger logger = Logger.getLogger(Test.class); @RequestMapping(&quot;/test&quot;) public String test() &#123; logger.error(&quot;start server&quot;); logger.info(&quot;asdsd&quot;); logger.debug(&quot;asdsadas&quot;); logger.warn(&quot;sadasdsad&quot;); return &quot;test&quot;; &#125; &#125; 书写一个如上的测试程序，发现在控制台和.log文件中均可以可以产生相关的日志文件，log4j的使用环境搭建成功。 关于如何配置 log4j.properties 文件，可以参阅log4j.properties 文件的配置","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"在 Sublime Text 2 中编译和运行 C 程序","slug":"compile-and-run-the-C-program-in-Sublime-Text 2","date":"2015-12-18T00:00:00.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2015/12/18/compile-and-run-the-C-program-in-Sublime-Text 2/","link":"","permalink":"https://www.nosuchfield.com/2015/12/18/compile-and-run-the-C-program-in-Sublime-Text%202/","excerpt":"","text":"因为最近经常用 C 语言来写一些小的测试程序，这些程序如果开了 Visual Studio 来写那么就显得有些笨重了，但是频繁的在命令行手动编译又显得有些麻烦，于是便用Sublime Text 2搭建了一个轻量级的C语言开发环境。 1.下载MinGW并且把编译器加入到环境变量中去在MinGW的官网下载MinGW编译环境，然后把&#123;path&#125;\\MinGW\\bin文件夹加入到环境变量中，接着试着在命令行中敲击gcc，如果显示gcc fatal error no input files就说明你的编译器已经安装到环境变量中去了，这里的错误是因为你没有添加对应的编译文件。 2.安装Sublime Text 2在Sublime Text 2的官网上下载安装程序，然后安装。 3.配置Sublime Text 2 打开Sublime Text 2，然后点击 Tools → Build System → New Build System… 把以下内容复制到到文本框中，然后保存。保存的文件应为 C.sublime-build，后缀名一定要对，具体名称可以随你的喜好。 &#123; &quot;cmd&quot;: [&quot;gcc&quot;, &quot;$&#123;file&#125;&quot;, &quot;-std=c99&quot;, &quot;-o&quot;,&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;&quot;], &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:?(.*)$&quot;, &quot;working_dir&quot;: &quot;$&#123;file_path&#125;&quot;, &quot;encoding&quot;:&quot;utf-8&quot;, &quot;selector&quot;: &quot;source.c&quot;, &quot;variants&quot;: [ &#123; &quot;name&quot;: &quot;Run&quot;, &quot;cmd&quot;: [&quot;$&#123;file_path&#125;\\\\\\\\$&#123;file_base_name&#125;.exe&quot;] &#125; ] &#125; 点击 Tools → Build System ，选择你之前保存的文件名所对应的编译模式。 写一个程序，然后按 Ctrl + B 编译，按 Ctrl + Shift + B 运行，运行结果如下所示：","categories":[],"tags":[]},{"title":"MySQL 基础知识","slug":"MySQL-basics","date":"2015-12-12T00:00:00.000Z","updated":"2025-08-22T15:42:13.344Z","comments":true,"path":"2015/12/12/MySQL-basics/","link":"","permalink":"https://www.nosuchfield.com/2015/12/12/MySQL-basics/","excerpt":"","text":"0.MySQL的常用操作SHOW DATABASES;显示所有的数据库 USE database;切换到某一个数据库 SHOW TABLES;显示当前数据库中的所有的表 SHOW COLUMNS FROM table;详细显示某一个表的信息 SHOW STATUS;显示服务器状态 SHOW CREATE DATABASE database&#x2F;SHOW CREATE TABLE table;显示创建某一个数据库&#x2F;表的语句 SHOW GRANTS;显示用户的权限 SHOW ERRORS&#x2F;SHOW WARNINGS 1.检索SELECTG DISTINCT xxx; 表示只检索返回不同的值 SELECT xxx FROM xxx LIMIT 5; 表示返回不多于 5 行 SELECT xxx FROM xxx LIMIT 5, 5; 第一个数表示开始的位置，第二个数表示要检索的行数 ~ LIMIT 4 OFFSET 3; 从第 3 开始取 4 行 ~ ORDER BY A, B; 先按照 A 排序，如果 A 一样，按照 B 排序 ~ ORDER BY A DESC; 降序排序 （默认升序 ASC） ~ WHERE A IS NULL; 当取不到值的时候符合要求 LIKE %：任意多个字符 _：一个字符 REGEXP ‘xxx’ 正则表达式匹配 Concat：字符拼接 SELECT Concat(name, “&#x3D;”, name) FROM ~ SELECT AVG() FROM ~ 所检索出来的值的平均值 SELECT COUNT(*) FROM ~ 把所有取到的值计算进来，然后得出检索出的总数据条数 SELECT COUNT(column) FROM ~ 写指定的列的名字，只对该列为非空的情况下计算为一条数据 ~ GROUP BY a HAVING b &gt; 10; 分组查询 ~ GROUP BY a HAVING b &gt; 10 ORDER BY a LIMIT 5 OFFSET 2; 一条包含常见检索条件的SQL语句 UNION 指示MySQL执行多条SELECT语句，并把输出组合成单个查询结果 UNION 必须由两条或者两条以上的SELECT语句组成，检索的数据应该相同 UNION ALL 取出所有的行（包括重复的行），UNION 在检索时默认会去除重复的行 2.插入INSERT INTO table (aa, bb) VALUES (cc, dd); 插入数据 INSERT LOW_PRIORITY INTO ~ 降低插入相对于检索来说的优先级 3.更新UPDATE table SET aa &#x3D; bb WHERE cc &#x3D; dd; 数据更新操作 UPDATE IGNORE table ~ 如果更新时遇到错误，也要继续更新 4.删除DELETE FROM table WHERE aa &#x3D; bb; 删除一整条数据 DELETE从表中删除行，甚至是删除所有的行，但是DELETE不删除表本身 表的清空：TRUNCATE table; 此条语句实际上是删除原来的表并重新创建一个表，而不是逐行删除表中的数据，所以速度很快 5.创建表PRIMARY KEY (a, b) 创建主键 AUTO_INCREMENT 自增 SELECT last_insert_id() 获得最后一个AUTO_INCREMENT 的值 DEFAULT a 制定默认值 InnoDB 可靠的事务处理引擎，不支持全文本搜索 MEMORY 功能上等同于 MyISAM，数据存储在内存，速度很快 MyISAM 性能极高，支持全文本搜索，不支持事务处理 6.重命名表RENAME TABLE a TO b, c TO d; 7.更新表ALTER TABLE table ~ ~ ADD a CHAR(20) 增加一个列a ~ DROP COLUMN a 删除列a 8.删除表DROP TABLE a; 9.视图视图是虚拟的表。 可以把某整个查询包装成一个视图 优点： 重用SQL语句 简化复杂的SQL操作 使用表的的组成部分而不是整个表 保护数据 视图可以嵌套，即一个视图可以从其他视图获得数据 视图的操作语句： CREATE VIEW; 创建视图 SHOW CREATE VIEW viewname;查看创建视图的语句 DROP VIEW viewname;删除视图 CREATE OR REPLACE VIEW 视图存在，则更新；不存在，则创建 CREATE VIEW aaa AS SELECT ~ 创建一个视图 接下来，可以对视图进行操作，例如：SELECT * FROM aaa; *视图可以用于数据的更新、插入和删除，但是一般来说，应该只将视图用于数据的检索 10.存储过程创建存储过程： CREATE PROCEDURE aaa() BEGIN SELECT a FROM b; END; DELIMITER &#x2F;&#x2F; 把&#x2F;&#x2F;作为新的语句结束符 DELIMITER ; 重新把;作为MySQL语句结束符号 调用上面的存储过程： CALL aaa();他将会执行定义的操作过程 删除过程：DROP PROCEDURE aaa; 优化版本：DROP PROCEDURE IF EXISTS aaa; SHOW CREATE PROCEDURE aaa; 显示存储过程的CREATE语句 SHOW PROCEDURE STATUS; 显示存储过程的详细信息，可以通过 LIKE 语句对过程名进行过滤 如何使用一个存储过程： CREATE PROCEDURE ordertotal( IN onumber INT, OUT ototal DECIMAL(8,2) ) BEGIN SELECT sum(item_price*quantity) FROM orderitems WHERE order_number = onumber INTO ototal; END; CALL ordertotal(20005, @total); SELECT @total; 上面的操作中： 第一步是创建一个存储过程，并且IN表明这是一个输入的参数，OUT表明这是一个要输出的参数。INTO ototal表示把下面查询操作所检索出来的值放到ototal中。 第二步是调用存储过程，把20005传入，存储过程传出的参数用变量@total来保存 第三步是取得变量@total的值 11.游标 声明（定义）游标 打开游标 操作 关闭游标 DECLARE ordernumbers CURSOR FOR ~ OPEN ordernumbers; CLOSE ordernumbers; 游标的操作要依附于存储过程来进行。 12.触发器当发生DELETE、INSERT、UPDATE时，会自动进行某些操作 CREATE TRIGGER newproduct AFTER INSERT ON products FOR EACH ROW SELECT &quot;Product added&quot;;--创建触发器 DROP TRIGGER newproduct; --删除触发器 只有表才支持触发器，视图不支持触发器。 CREATE TRIGGER newproduct AFTER INSERT ON products FOR EACH ROW SELECT NEW.product; -- 检索最新插入的那条数据的product列 CREATE TRIGGER deleteorder BEFORE DELETE ON orders FOR EACH ROW BEGIN INSERT INTO archive_orders(order_num) VALUES(OLD.oreder_num); END; – UPDATE 的触发器：NEW代表更新之后的值，OLD表示跟新之前的值 CREATE TRIGGER updateevendor BEFORE UPDATE ON vendors FOR EACH ROW SET NEW.vend_state = Upper(NEW.vend_state); 13.事务处理START TRANSACTION; DELETE FROM ordertotals; ROLLBACK;/COMMIT; SAVEPOINT delete1; ROLLBACK TO delete1; SET autocommit = 0; 关闭自动提交（只对每一个连接有效，对数据库服务器无效）。","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"汇编语言学习笔记","slug":"assembly-language-learning-notes","date":"2015-12-08T00:00:00.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2015/12/08/assembly-language-learning-notes/","link":"","permalink":"https://www.nosuchfield.com/2015/12/08/assembly-language-learning-notes/","excerpt":"","text":"最近在看《汇编语言（第2版）》来学习汇编。 之所以要学习汇编语言，主要是因为在看《CSAPP》的时候，感觉涉及到汇编的部分都看不懂，影响了对知识点的理解，于是决定先把汇编语言做一番了解之后再继续看《CSAPP》。 1.CPU如何对存储器中的数据进行操作我们在这里讨论的都是8086系列的Intel处理器，首先我们要了解CPU的三个属性。 地址总线 数据总线 控制总线 其中地址总线的根数 N 被称之为CPU的地址总线宽度，该CPU最多可以寻找 2 的 N 个次方的内存单元。地址总线的宽度决定了CPU的寻址能力 而数据总线是CPU和存储器进行数据传输的硬件通道，有多少根数据总线，在一个时钟周期，CPU就可以与存储器传输多少位的数据。数据总线的宽度决定了CPU与其它器件进行数据传送时以此数据传送量。 控制总线用来控制数据的读写操作。控制总线的宽度决定了CPU对其他器件的控制能力。 2.寄存器 - CPU中可以存储数据的器件一个CPU中有多个寄存器，例如AX，BX等等，这些字母是寄存器的代号。 首先我们来了解一下AX，BX，CX，DX这四个通用寄存器，他们均为16位寄存器。 AX，BX，CX，DX这四个寄存器我们称之为通用寄存器，8086CPU为了与之前的 8 位寄存器系列CPU兼容，它的 16 位通用寄存器又可以被拆分为两个互相独立的 8 位寄存器，他们分别是AH，AL，BH，BL，CH，CL，DH，DL，分别占据了 16 位寄存器的高八位和低八位，它们可以被当作为独立的 8 位寄存器来使用。 操作一个寄存器的值的方式为：mov ax,0000h，即把一个16进制的16位的数据存入ax寄存器中。同样的，mov al,88h，表示将一个8位的数据存入al寄存器中。 我们在前面说到，一个CPU的寻址能力 &#x3D; 2地址总线宽度，8086CPU 的地址总线为16根，那么它的寻址范围就为 216 &#x3D; 64k，但是当时的机器内存是远大于64K的，也就是说超出了CPU的寻址能力。那怎么办，那么我们多余出来的内存不就会被浪费掉了吗？8086的设计者通过一个巧妙的方法解决了这个问题。 在8086CPU中，地址总线的数据被人为的划分成了段地址和偏移地址这两种数据，也就是说，我们可以把上一个时钟周期的地址总线数据认为是段地址，而这个时刻的数据认为是偏移地址，并且：物理地址 &#x3D; 段地址 x 16 + 偏移地址。这样一来，CPU的寻址能力大大提高，也就能够扩大CPU的访问内存了。 在8086CPU中有4个段寄存器，顾名思义，他们就是用来存段地址的，它们分别为CS、DS、SS、ES，其中的S就是segment的缩写。 我们首先来讨论一下CS： CS被我们称之为代码段寄存器，也就是说，它对应的是代码的段地址，这里的代码段和接下来的数据段等等，都是我们人为区分的，为了方便人的操作，对CPU而言所有的数据都是一样的。有了段地址还不够，我们还要有偏移地址才能得到完整的内存地址，IP（指令指针寄存器）就是与CS对应的一个偏移地址，也就是说，如果我们有了CS:IP，那么我们就可以让CPU确定内存中的一个确定的位置了（CS x 16 + IP即为它对应的物理地址）。那么CS:IP所指向的位置有什么特殊的吗？为什么我们单独把他们拿出来说呢？其实，该物理地址对应的位置通常是存放代码的，而CPU会根据CS:IP来获得该地址，并且取出该位置的代码来执行。所以你会想了，我们可以通过mov cs,ffffh来修改这个寄存器值并且让CPU执行指定位置的的代码，很遗憾，这种方式是不行的。这8086中我们无法直接操作段寄存器，而是要通过mov ax,ffffhmov cs,ax这种方式来改变段寄存器。另一个更通用的修改CS:IP的方法是 JMP 命令，你可以通过使用 jmp ffffh:ffffh来修改CS和IP的值为ffff。又或者，你可以通过jmp 一个合法的寄存器来修改IP为该寄存器中的值（相当于mov IP,AX 但是直接使用该指令是非法的） DS寄存器，通常是用来存放数据地址的寄存器。比如，我们要把内存中的数据一个内容送入寄存器，那么是哪一个内存单元中的数据呢？我们可以通过MOV AX,[0]来实现把指定内存中的数据转入到AX寄存器中，其中 [0] 是内存单元的偏移地址，而段地址CPU会自行的取DS中的数据（[]表示操作对象是一个内存单元）。8086不支持将数据直接送入段寄存器，要通过通用寄存器来转接，即要通过 mov ax,ffffh ，mov ds,ax 来实现把数据存到ds中。[BX]：内存数据的偏移地址，和[0]的效果一样，只不过是取了BX中的值,也就说我们可以灵活的控制数据偏移地址了。 inc bx指令：bx的内容自加一。 3.在汇编语言中实现循环（loop）要想在汇编语言中实现循环，我们先要知道如何书写一个完整的汇编程序。下面给出了一个完整的汇编程序示例： assume CS:code ;CS意味着code段是一个代码段，我们可以声明多个段，中间用逗号连接 code segment ;code段开始 start: mov ax,0111h ;start代表程序的入口，并不一定要是start，只要是end后面的单词即可 mov ax,4c00h int 21h ;以上两句用来声明一个程序已经结束 code ends ;段结束 end start ;声明start代表着该程序的入口，CPU会从start出开始运行程序 loop所执行的操作： (CX) &#x3D; (CX) -1 检测(CX)，如果(CX) !&#x3D; 0，转至标号处执行程序，否则向下执行 语法如下： ... mov cx,6 s: add ax,1111h ;add表示 ax += 1111h loop s ... 4.汇编语言中栈的实现PUSH AX 把AX压入栈顶，高位位于高位，低位位于低位 POP AX 把栈顶的元素弹出来交给AX SS寄存器：存放栈顶段地址 SP寄存器：存放栈顶偏移地址 任意时刻，SS:SP指向栈顶元素，PUSH或POP指令执行时，CPU从SS:SP中获得栈顶地址 PUSH：先改变SP（SP &#x3D; SP - 2），然后把值压入SS:SP POP：先把值弹出，然后改变SP（SP &#x3D; SP + 2） 当栈中没有元素的时候，SS:SP指向栈底的下一个字的位置 5.其他DW：define word，定义若干个字，中间用逗号连接 一个程序可以命名多个段，mov ax.data表示将名称为data的段的段地址送入ax mov ax,data mov ds,ax mov bx,ds:[6] 将data中的第六个字转入bx end start ;表示程序从start指令开始执行 and 和 or 指令：进行二进制位运算 mov al,’a’ 汇编器会将’’里面的内容转化为其对应的ASCII码，然后交给CPU db ‘unIX’ 相当于 db 75h,6eh,49h,58 mov al,’f’ 相当于 mov al,61h 一个字母，不管他原来是大写还是小写，只要把他的第 5 位置0，它就会变成大写；将他的第 5 位置 1，他将会变为小写（二进制下） mov ax,[200+bx] mov ax,200[bx] mov ax,[bx].200 以上三种表示偏移地址是 bx + 200，三种写法意义是一样的 SI、DI寄存器功能类似于BX寄存器 [bx+si] 与 [bx+di]：偏移地址相加，也可以写成[bx][si] [bx+si+idata]也可以写成： [bx+200+si] [200+bx+si] 200[bx][si] [bx].200[si] [bx][si].200 一般来说，当我们想保存临时数据的时候，就应该使用栈 6.附录汇编语言的编译器和链接器的使用。 把汇编器和链接器加入环境变量。 在DOS环境下（Windows中可以在Command Prompt中操作）输入MSAM，进入编译器，输入文件名 + ;，敲回车，如果没有错误会在当前目录生成一个文件名.obj文件 输入LINK，进入连接模式，然后输入 文件名 + ;，敲回车，可以生产可执行文件。","categories":[],"tags":[]},{"title":"简介 JavaWeb 中的过滤器","slug":"introduction-to-filters-in-JavaWeb","date":"2015-12-05T00:00:00.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2015/12/05/introduction-to-filters-in-JavaWeb/","link":"","permalink":"https://www.nosuchfield.com/2015/12/05/introduction-to-filters-in-JavaWeb/","excerpt":"","text":"过滤器（filter），其主要目的是为了对request或者response进行处理。 过滤器可以用于登录、加密、解密、会话检查等等。 过滤器可以配置为拦截一个或多个资源。 过滤器可以拦截某一个或某一类操作，然后读取其中的request或者response并能进行修改 每一个过滤器都必须实现javax.servlet.Filter接口，该接口定义了过滤器的三个生命周期方法：init、doFilter、destroy。 在doFilter方法中，可以传入另一个Filter对象，这样多个过滤器互相调用，就可以形成一个过滤器链。那么最后一个需要再调用其它的过滤器的过滤器的doFilter方法该怎么办呢？具体做法是把FilterChain的对象传入doFilter方法，并且在该方法中执行FilterChain.doFilter()方法用于终止过滤器链。 配置过滤器的两种方式：通过注解的方式来配置： @WebFilter(filterName=&quot;TestFilter&quot;, urlPatterns=(&quot;/*&quot;)) 通过配置文件的方式来配置： &lt;filter&gt; &lt;filter-name&gt;TestFilter&lt;/filter-name&gt; &lt;filter-class&gt;Filter文件的完整路径&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;TestFilter&lt;/filter-name&gt; &lt;urlpattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 这样一来，就可通过在filter中更改请求和响应的内容从而实现过滤功能。","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"简介 JavaWeb 中的监听器","slug":"introduction-to-JavaWeb-in-the-listener","date":"2015-12-01T00:00:00.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2015/12/01/introduction-to-JavaWeb-in-the-listener/","link":"","permalink":"https://www.nosuchfield.com/2015/12/01/introduction-to-JavaWeb-in-the-listener/","excerpt":"","text":"为了在Servlet&#x2F;JSP应用程序中使用事件驱动编程(Event-Driven Programming)，Servlet&#x2F;JSP提供了一套监听器的接口和类。 简单的说，监听器就是能够在某种操作发生时，检测到这种操作的发生，并且执行一定动作的操作。 Servlet&#x2F;JSP应用提供以下两种方式来创建一个监听器： 使用WebListener注解(简单易用，直接实现对应的Listener接口即可)： @WebListener public class _ListenerClass_ implements _ListenerInterface_ &#123; &#125; 在配置文件中配置listener元素： &lt;lisenter&gt; &lt;listener-class&gt;_fully-qualified listener class_&lt;/listener-class&gt; &lt;/lisenter&gt; 常见的监听器以及他们所监听的事件：I. Servlet Context监听器： ServletContextListener：监听ServletContext初始化或者销毁操作 ServletContext初始化时：void contextInitialized (ServletContextEvent event); ServletContext销毁时：void contextDestroyed (ServletContextEvent event); ServletContextAttributeListener：监听ServletContext的属性的添加、删除或者替换 ServletContext属性添加时：void attributeAdded (ServletContextAttributeEvent event); ServletContext属性删除时：void attributeRemoved (ServletContextAttributeEvent event); ServletContext属性替换时：void attributeReplaced (ServletContextAttributeEvent event); II. Session监听器： HttpSessionListener：监听HttpSession的创建或销毁 HttpSession创建时：void sessionCreated (HttpSessionEvent event); HttpSession销毁时：void sessionDestroyed (HttpSessionEvent event); HttpSessionAttributeListener：监听HttpSession的属性的添加、删除或者替换 HttpSession属性添加时：void attributeAdded (HttpSessionBindingEvent event); HttpSession属性删除时：void attributeRemoved (HttpSessionBindingEvent event); HttpSession属性替换时：void attributeReplaced (HttpSessionBindingEvent event); HttpSessionActivationListener：分布式应用中，Session可能被序列化或者被激活 Session属性激活时：void sessionDidActivate (HttpSessionEvent event); Session属性序列化时：void sessionWillPassivate (HttpSessionEvent event); HttpSessionBindingListener：监听是否有Session进行了绑定或者取消绑定 III. ServletRequest监听器: ServletRequestListener：监听ServletRequest的创建和销毁（可用来检测一个请求所花费的时间） 当发起一个HTTP请求时：void requestInitialized (ServletRequestEvent event); 当ServletRequest被销毁时：void requestDestroyed (ServletRequestEvent event); ServletRequestAttributeListener：监听ServletRequest的添加、删除或者修改 当ServletRequest的某个属性被添加时：void attributeAdded (ServletRequestAttributeEvent event); 当ServletRequest的某个属性被删除时：void attributeRemoved (ServletRequestAttributeEvent event); 当ServletRequest的某个属性被替换时：void attributeReplaced (ServletRequestAttributeEvent event);","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"Clean Code","slug":"clean-code","date":"2015-11-29T00:00:00.000Z","updated":"2025-08-22T15:42:13.352Z","comments":true,"path":"2015/11/29/clean-code/","link":"","permalink":"https://www.nosuchfield.com/2015/11/29/clean-code/","excerpt":"","text":"如何写出逻辑清晰易于维护的代码： 能够通过所有的测试 没有重复代码 体现设计理念 包括尽量少的实体 应该给变量起一个好名字，最好见名知意 不要直接使用常量，先定义常量然后再使用 函数的第一规则是要短小，第二规则是要更短小 函数只应该做一件事，实现一个功能（测试函数是否还可以拆分） 封装 switch 语句 函数应该能够被从上至下阅读 把 try catch 交给上一个新建的函数来处理 限制并且谨慎的使用注释 包申明、包导入与各个函数之间应该用一个空行隔开，除此之外的地方一律不要空行；函数内部不要空行 变量声明应尽量靠近其使用位置 若函数调用了另一个函数，那么就应该把他们靠近放置；并且被调用者应位于调用者的下方（垂直分隔，距离越短越好） 一行代码最多不应超过120个字符（不超过100个最佳） 使用 DTO （数据传输对象）来解决数据传输的问题 记得进行 null 值的判断 未通过单元测试的代码不可进行生产操作 逐步测试、逐步修改、逐步改进 遵循“最小惊异原则” 不要继承常量 利用枚举替代常量","categories":[],"tags":[]},{"title":"Java 注解处理器","slug":"java-annotation-processor","date":"2015-11-29T00:00:00.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2015/11/29/java-annotation-processor/","link":"","permalink":"https://www.nosuchfield.com/2015/11/29/java-annotation-processor/","excerpt":"","text":"Java从JDK1.5开始加入“注解”这一功能，目的是为了对抗以C#为首的一批类Java语言，这里简要介绍一下Java注解的使用以及定义等操作。 1.定义一个注解：12345678910111213package myannotation;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;@Retention(RetentionPolicy.RUNTIME)public @interface A &#123; public int id() default 0; public String value() default &quot;default&quot;;&#125; 2.定义一个使用了该注解的类：123456789101112package myannotation;@Apublic class C &#123; @A(&quot;age&quot;) public int age; @A(id = 10, value = &quot;welcome&quot;) public void hello()&#123;&#125;&#125; 3.通过Java的反射机制来实现「注解处理器」：123456789101112131415161718192021222324252627282930313233package myannotation;import java.lang.reflect.Field;import java.lang.reflect.Method;public class Test &#123; public static void main(String[] args)&#123; if(C.class.isAnnotationPresent(A.class))&#123; A a = (A)C.class.getAnnotation(A.class); System.out.printf(&quot;Class: id = %s, value = %s\\n&quot;, a.id(), a.value()); &#125; Field[] fields = C.class.getFields(); for (Field field : fields)&#123; if(field.isAnnotationPresent(A.class))&#123; A a = (A)field.getAnnotation(A.class); System.out.printf(&quot;Field: id = %s, value = %s\\n&quot;, a.id(), a.value()); &#125; &#125; Method[] methods = C.class.getMethods(); for (Method method : methods)&#123; if(method.isAnnotationPresent(A.class))&#123; A a = (A)method.getAnnotation(A.class); System.out.printf(&quot;Method: id = %s, value = %s\\n&quot;, a.id(), a.value()); &#125; &#125; &#125;&#125; 上面这个类的运行结果为： Class: id = 0, value = default Field: id = 0, value = age Method: id = 10, value = welcome 结果符合我们在类中对注解所赋予的值。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"Java多线程中的竞争条件、锁以及同步的概念","slug":"java-multithreading-in-the-competitive-conditions-the-concept-of-lock-and-synchronization","date":"2015-11-29T00:00:00.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2015/11/29/java-multithreading-in-the-competitive-conditions-the-concept-of-lock-and-synchronization/","link":"","permalink":"https://www.nosuchfield.com/2015/11/29/java-multithreading-in-the-competitive-conditions-the-concept-of-lock-and-synchronization/","excerpt":"","text":"1.竞争条件：在Java多线程中，当两个或以上的线程对同一个数据进行操作的时候，可能会产生“竞争条件”的现象。这种现象产生的根本原因是因为多个线程在对同一个数据进行操作，此时对该数据的操作是非“原子化”的，可能前一个线程对数据的操作还没有结束，后一个线程又开始对同样的数据开始进行操作，这就可能会造成数据结果的变化未知。 竞争条件参考以下的例子： 123456789101112131415161718192021222324252627282930public class TestThread &#123; public static void main(String[] args) &#123; // new 出一个新的对象 t MyThread t = new MyThread(); /** * 两个线程是在对同一个对象进行操作 */ Thread ta = new Thread(t, &quot;Thread-A&quot;); Thread tb = new Thread(t, &quot;Thread-B&quot;); ta.start(); tb.start(); &#125; &#125;class MyThread implements Runnable &#123; // 变量 a 被两个线程共同操作，可能会造成线程竞争 int a = 10; @Override public void run() &#123; for (int i = 0; i &lt; 5; i++) &#123; a -= 1; try &#123; Thread.sleep(1); &#125; catch (InterruptedException e) &#123;&#125; System.out.println(Thread.currentThread().getName() + &quot; → a = &quot; + a); &#125; &#125; &#125; 最终运行结果如下： Thread-A → a = 8 Thread-B → a = 7 Thread-A → a = 6 Thread-B → a = 5 Thread-A → a = 4 Thread-B → a = 3 Thread-A → a = 2 Thread-B → a = 1 Thread-A → a = 0 Thread-B → a = 0 从上面的结果中我们可以看到，在线程A对数据进行了操作之后，他还没有来得及数据进行下一次的操作，此时线程B也对数据进行了操作，导致数据a一次性被减了两次，以至于a为9的时候的值根本没有打印出来，a为0的时候却被打印了两次。 那么，我们要如何才能避免结果这种情况的出现呢？ 2.线程锁如果在一个线程对数据进行操作的时候，禁止另外一个线程操作此数据，那么，就能很好的解决以上的问题了。这种操作叫做给线程加锁。 123456789101112131415161718192021222324252627282930313233343536373839import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class TestThread &#123; public static void main(String[] args) &#123; // new 出一个新的对象 t MyThread t = new MyThread(); /** * 两个线程是在对同一个对象进行操作 */ Thread ta = new Thread(t, &quot;Thread-A&quot;); Thread tb = new Thread(t, &quot;Thread-B&quot;); ta.start(); tb.start(); &#125; &#125; class MyThread implements Runnable &#123; // 声明锁 private Lock lock = new ReentrantLock(); // 变量 a 被两个线程共同操作，可能会造成线程竞争 int a = 10; @Override public void run() &#123; // 加锁 lock.lock(); for (int i = 0; i &lt; 5; i++) &#123; a -= 1; try &#123; Thread.sleep(1); &#125; catch (InterruptedException e) &#123;&#125; System.out.println(Thread.currentThread().getName() + &quot; → a = &quot; + a); &#125; // 解锁 lock.unlock(); &#125; &#125; 上面的代码给出了给线程枷锁的方式，可以看到，在线程对数据进行操作之前先给此操作加一把锁，那么在此线程对数据进行操作的时候，其他的线程无法对此数据进行操作，只能“阻塞”在一边等待当前线程对数据操作结束后再对数据进行下一次的操作，当前线程在数据的操作完成之后会解开当前的锁以便下一个线程操作此数据。 加锁之后的运行结果如下所示，运行结果符合了我们一开始的要求了。 Thread-A → a = 9 Thread-A → a = 8 Thread-A → a = 7 Thread-A → a = 6 Thread-A → a = 5 Thread-B → a = 4 Thread-B → a = 3 Thread-B → a = 2 Thread-B → a = 1 Thread-B → a = 0 3.线程同步从JDK1.0开始，Java中的每一个对象都拥有一个内部锁，如果一个方法用关键字synchronized声明，那么对象的锁将保护整个方法。synchronized关键字使得我们不需要再去创建一个锁对象，而只需要在声明一个方法时加上此关键字，那么方法在被一个线程操作时就会自动的被上锁，这种操作的结果和目的与手动创建Lock对象来对数据进行加锁的结果和目的相类似。 用synchronized关键字加锁来对方法进行加锁： 12345678910111213141516171819202122232425262728import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class TestThread &#123; public static void main(String[] args) &#123; MyThread t = new MyThread(); Thread ta = new Thread(t, &quot;Thread-A&quot;); Thread tb = new Thread(t, &quot;Thread-B&quot;); ta.start(); tb.start(); &#125; &#125; class MyThread implements Runnable &#123; int a = 10; // synchronized 关键字对方法进行加锁 @Override public synchronized void run() &#123; for (int i = 0; i &lt; 5; i++) &#123; a -= 1; try &#123; Thread.sleep(1); &#125; catch (InterruptedException e) &#123;&#125; System.out.println(Thread.currentThread().getName() + &quot; → a = &quot; + a); &#125; &#125; &#125; 其结果和第二节中的结果一致。 总结：ava中的多线程，当多个线程对一个数据进行操作时，可能会产生“竞争条件”的现象，这时候需要对线程的操作进行加锁，来解决多线程操作一个数据时可能产生问题。加锁方式有两种，一个是申明Lock对象来对语句快进行加锁，另一种是通过synchronized关键字来对方法进行加锁。以上两种方法都可以有效解决Java多线程中存在的竞争条件的问题。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"Servlet 知识点总结","slug":"servlet-knowledge-points-summary","date":"2015-11-29T00:00:00.000Z","updated":"2025-08-22T15:42:13.353Z","comments":true,"path":"2015/11/29/servlet-knowledge-points-summary/","link":"","permalink":"https://www.nosuchfield.com/2015/11/29/servlet-knowledge-points-summary/","excerpt":"","text":"Servlet本身没有main方法，他受控于另一个Java应用，这个Java应用称为“容器”，Tomcat就是一个这样的容器。 要由“容器”来为Servlet提供HTTP的请求和响应，而且要由“容器”来调用Servlet的方法。 servlet容器、web容器和应用服务器区别： servlet容器，负责管理servlet生命周期。 web容器，负责管理和部署web应用，其本身可能具备servlet容器组件；如果没有，一般能将第三方servlet容器作为组件整合进web容器。 应用服务器，其功能远远大于web容器，因为它可以部署EJB应用，可以实现容器管理的事务，一般的应用服务器有weblogic和websphere等，它们都是商业服务器，功能强大但都是收费的。 当Servlet被要求加载的时候，如果这个Servlet还没有被初始化，那么容器就会加载这个Servlet并且初始化它。 客户端发起对服务器的请求时Servlet所做的操作： 调用init()方法； 调用Service()方法，然后根据请求的类型是GET还是POST，Service()再调用doGet()或者doPost()方法。 HTTP1.1中对幂等性的定义 Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request. GET方法：是幂等的，即不会意外的产生多次请求； POST方法：非幂等的，可能会意外的产生多次的请求数据。 POST请求中会把请求参数放在请求体之中并且通过(K, V)的方式来描述，如果有多个参数，那么参数之间通过 &amp; 来连接。例如： String color = request.getParameter(&quot;color&quot;); getParameter方法只返回一个String类型的值；但是在很多时候，我们从页面上面获取的数据可能不是一个值，而是一组数据(比如复选框，就是一个数组)，这时候就要使用 getParameterValues()方法了，例如： String[] values = request.getParameterValues(&quot;values&quot;); MIME：用来描述文件的类型。 setHeader(&quot;&quot;,&quot;&quot;);把响应首部的某一个参数改变掉； addHeader(&quot;&quot;,&quot;&quot;);为响应首部增加某一个参数。 如果在路径的最前方放置了”&#x2F;“参数，那么表示当前使用的路径是该项目的根路径，否则是使用的就是相对路径。 监听器(Listener)：用于Web服务的初始化操作，他只会在容器启动和消亡时被执行。","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"JSP 知识点总结","slug":"JSP-knowledge-points-summary","date":"2015-11-28T00:00:00.000Z","updated":"2025-08-22T15:42:13.342Z","comments":true,"path":"2015/11/28/JSP-knowledge-points-summary/","link":"","permalink":"https://www.nosuchfield.com/2015/11/28/JSP-knowledge-points-summary/","excerpt":"","text":"&lt;% %&gt;中可以插入 Java 代码。 JSP页面指令： page include taglib 指令提供了一种特殊的方法，可以在页面转换时向容器提出特殊的指示，例如： &lt;%@ page import=&quot;com.*,java.util.*&quot; %&gt;表示引入相关的jar包 Java 代码放在&lt;% %&gt;之间，而指令会为元素开始记号再添加一个 @。&lt;%@ %&gt; JSP中的4种语法： scriptlet:&lt;% %&gt; 声明 :&lt;%! %&gt; → 这个声明内的东西会被放到类中，即全局变量，亦可以创造一个方法在这之中。 指令 :&lt;%@ %&gt;(参见上面) JSP中含有隐藏的变量，这些变量在Servlet中都有相应的对应值 Servlet: JSP: JspWriter out HttpServletRequest request HttpServletResponse response HttpSession session ServletContext application ServletConfig config JspException exception PageContext pageContext Object page 当对 JSP页 面进行请求的时候才会生成或更新 JSP 对应的Servlet类并且把其编译成.class文件。 EL(Expression Language)：表达式语言，用来替代scriptlet。 EL：${person.name} 等价于 ${person[“name”]} EL表示：对象.属性；K.V；param.name；header.host；pageContext.request.method；cookie.name.value; EL函数：貌似不常用… 两种导入文件到JSP内的方式： include指令：&lt;%@ include file=&quot;**.jsp&quot;%&gt; JSP标准动作：&amp;lt;jsp:include page=&quot;**.jsp&quot; /&amp;gt; JSTL:JSP Standard Tag Library，核心库标签13个，包括 表达式标签： out set remove catch 流程控制标签： if choose when otherwise 循环控制： forEach forTokens URL操作标签： import url redirect ClassicTag，传统标记 指令标记库：taglib 的定制文件的后缀名为 .tld 调用方法：&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt; SimpleTag，简单标记 标记文件：后缀名为 .tag 调用方法：&lt;%@ taglib prefix=&quot;mYtagd&quot; tagdir=&quot;/WEB-INF/tags&quot; %&gt; WEB-INF 文件夹下的任何内容都无法被外界直接访问，即 WEB-INF 是受保护的。 出错页面：&lt;%@ page errorPage&#x3D;”ErrorPage.jsp” %&gt; 错误显示页面(ErrorPage.jsp)：&lt;%@ page isErrorPage&#x3D;”true” %&gt; Action(动作)：运行期间的命令 jsp:useBean jsp:setProperty,jsp:getProperty jsp:include jsp:param jsp:forward jsp:param jsp:plugin 两种页面跳转方式： response.sendRedirect 使用的是不同的request，第一个访问的页面命令客户端再重行对指定的新的页面发起一次新的请求； jsp:forward 使用的是同一个request，是在服务器端进行的跳转，跳转前和跳转后所使用的是同一个request，即客户端只发起了一次请求。 4种JSP页面的数据： page：对应的是一个页面； request：对应的是一次请求； session：对应的是一个会话(Session和浏览器窗口是一一对应的)； application：对应的是整个webapp。 页面跳转的方式： JSP 跳转到 Servlet：&lt;jsp:forward page=&quot;xxx&quot; /&gt;或者sendRedirect； Servlet 跳转到 JSP：getServletConfig().getServletContext().getRequestDispatcher(&quot;a.jsp&quot;).forward(request, response);","categories":[],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"}]},{"title":"一个 Ajax 的实现的 Demo","slug":"an-Ajax-implementation-of-the-Demo","date":"2015-11-27T00:00:00.000Z","updated":"2025-08-22T15:42:13.351Z","comments":true,"path":"2015/11/27/an-Ajax-implementation-of-the-Demo/","link":"","permalink":"https://www.nosuchfield.com/2015/11/27/an-Ajax-implementation-of-the-Demo/","excerpt":"","text":"在以前，当人们想要提交一个网页表单的时候，必须提交整个页面，这种操作方式不仅浪费了CPU带宽等硬件资源，并且也降低了用户体验，Ajax技术的出现解决了这一问题。 Ajax（Asynchronous Javascript And XML），是一种通过JavaScript来发送HTTP请求并且接受HTTP响应的方式，JavaScript在通过DOM对HTML页面的操作方式下可以在不提交整个表单的时候，实现网页页面的局部与服务器通信并且刷新。 一个典型的Ajax实现如下所示，该示例程序可以获取指定URL的HTTP响应信息： 123456789101112131415161718192021222324252627// 定义一个请求变量var req;// 执行页面操作后所执行的方法，function checkName()&#123; // 新建请求 req = new XMLHttpRequest(); // 初始化请求参数 req.open(&quot;GET&quot;,&quot;url&quot;,true); // 发送请求 req.send(null); // 接受请求，获得服务器返回的 Text 类型的值 var value = req.responseText; /* 当 req 的 readyState 发生改变的时候，调用 callback 方法 */ req.onreadystatechange = callback;&#125;function callback()&#123; document.getElementById(&quot;msg&quot;).innerText = req.readyState; // 当 req 的 readyState 等于 4 时 if(req.readyState == 4)&#123; // 当 req 的 status 等于 200 时 if(req.status == 200)&#123; // 获得服务器返回的 XML 类型的值 var msg = req.responseXML.getElementsByTagName(&quot;&quot;)[0].childNodes[0].nodeValue; &#125; &#125;&#125; 其中，req.onreadystatechange = callback;代码快表示：当 req 的 onreadystatechange 发生改变的时候，调用 callback() 方法。","categories":[],"tags":[]},{"title":"使用 JUnit 进行单元测试","slug":"use-JUnit-for-unit-testing","date":"2015-11-27T00:00:00.000Z","updated":"2025-08-22T15:42:13.354Z","comments":true,"path":"2015/11/27/use-JUnit-for-unit-testing/","link":"","permalink":"https://www.nosuchfield.com/2015/11/27/use-JUnit-for-unit-testing/","excerpt":"","text":"如今，人们已经越来越意识到了测试对于软件开发的重要性，如今的软件开发已经形成了一套 单元测试 → 集成测试 → 系统测试 的流水线式的测试体系，其中的单元测试是在开发人员在开发的同时所进行的一向测试操作，他可以保证开发人员所开发的代码能够实现开发需求，并且大大的降低了项目中的bug被隐藏的可能性。 JUnit是一个优秀的Java单元测试工具，这里大致的介绍一下JUnit的使用方式。 首先要我们创建一个JUnit单元测试类，然后在类中我们可以通过实现各种方法来帮助我们对测试对象进行详细的单元测试。 JUnit 4 常用的几个annotation介绍： @Before：初始化方法，在任何一个测试执行之前必须执行的代码; @After：释放资源，在任何测试执行之后需要进行的收尾工作。在每个测试方法执行之后执行一次，该annotation只能修饰 public void 方法; @Test：测试方法，表明这是一个测试方法。在Junit中将会自动被执行。该annotation只你呢个修饰public void 方法。对于方法的声明也有如下要求：名字可以随便取，没有任何限制，但是返回值必须为void，而且不能有任何参数。如果违反这些规定，会在运行时抛出一个异常。至于方法内该写些什么，那就要看你需要测试些什么了;在这里可以测试期望异常和超时时间，如 @Test(timeout &#x3D; 100)：我们给测试函数设定一个执行时间，超过了这个时间(100毫秒)，它们就会被系统强行终止，并且系统还会向你汇报该函数结束的原因是因为超时，这样你就可以发现这些Bug了。 @Ignore：忽略的测试方法，标注的含义就是“某些方法尚未完成，暂不参与此次测试”;这样的话测试结果就会提示你有几个测试被忽略，而不是失败。一旦你完成了相应函数，只需要把@Ignore标注删去，就可以进行正常的测试。 @BeforeClass：针对所有测试，只执行一次，且必须为public static void; @AfterClass：针对所有测试，将会在所有测试方法执行结束后执行一次，且必须为public static void; 所以一个Junit 4 的单元测试用例执行顺序为：@BeforeClass –&gt; @Before –&gt; @Test –&gt; @After –&gt; @AfterClass;每一个测试方法的调用顺序为：@Before –&gt; @Test –&gt; @After。 JUnit中常用的断言介绍： assertEquals([String message],Object target,Object result)target与result不相等，中断测试方法，输出message assertTrue/False([String message],Boolean result)Result为 false&#x2F;true，中断测试方法，输出message assertNotNull/Null（[String message],Obejct resultRetult&#x3D; &#x3D; null&#x2F;result!&#x3D;null,中断测试方法，输出message assertSame/NotSame（Object target,Object result）Traget与result 不指向&#x2F;指向 同一内存地址（实例），中断测试方法，输出message fail([String message])中断测试方法，输出message","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"}]},{"title":"理解 Cookie 和 Session 之间的联系与区别","slug":"understanding-the-distinction-and-connection-in-cookie-and-session","date":"2015-11-23T00:00:00.000Z","updated":"2025-08-22T15:42:13.354Z","comments":true,"path":"2015/11/23/understanding-the-distinction-and-connection-in-cookie-and-session/","link":"","permalink":"https://www.nosuchfield.com/2015/11/23/understanding-the-distinction-and-connection-in-cookie-and-session/","excerpt":"","text":"Cookie 是一种保存在客户端本地的数据，可以附在HTTP请求头中发送给服务器，也可以由服务器通过HTTP响应头设置给客户端。 Cookie分为两种： 保存在本地文本文件里面（可长期保存）； 保存在浏览器的内存里面（浏览器关闭，数据消失）。 Session 是一种保存在服务器内存中的数据。 JavaWeb中通过Session来辨识客户身份的方式： 客户端发起请求； 服务器接收到请求，生成一个SessionID，把这个SessionID记录在内存中，并通过 Cookie 的机制把SessionID发送给客户端； 客户端接受到Cookie之后把Cookie保存起来，之后每次请求的时候都会在请求报文中附带Cookie的信息； 服务器接受到客户端发送过来的Cookie信息，与现存的 Session 进行比对，判断客户端的身份。","categories":[],"tags":[]},{"title":"阿里云 Ubuntu 14.04 JavaWeb 应用部署","slug":"Aliyun-Ubuntu-14.04-JavaWeb-Application-Deployment","date":"2015-11-15T00:12:00.000Z","updated":"2025-08-22T15:42:13.330Z","comments":true,"path":"2015/11/15/Aliyun-Ubuntu-14.04-JavaWeb-Application-Deployment/","link":"","permalink":"https://www.nosuchfield.com/2015/11/15/Aliyun-Ubuntu-14.04-JavaWeb-Application-Deployment/","excerpt":"","text":"最近双11阿里云云服务器ECS搞活动，之前一直想买个服务器来玩一玩，正好最近阿里云有优惠，就买了个域名和ECS服务器来倒腾倒腾了。 我先是在万网上面购买了一个域名，然后在阿里云ECS购买了一个ECS服务器，配置如下： 名称 配置 CPU 1核 RAM 512M 操作系统 ubuntu 14.04 带宽 1M 因为主要是为了体验一把，所以所有的配置都是买的最低配置，而且宽带也是选择了按量计费，在流量使用较低的情况下，能比按月计费少一些支出。大家可以酌情选择。 好了废话不多说，接下来就讲讲我环境搭建的步骤。 1 把域名解析到云主机。这一步的操作比较简单，就是在服务商的操作页面把域名指向服务器的公网IP地址，可以按照服务提供商的手册来操作就行。 2 进入操作系统，安装JDK和Tomcat这里确实比较复杂，因为以前没接触过 Linux 操作系统，所以好是花了一番功夫，接下就详细的说明一下。 2.1 把JDK和Tomcat的安装包添加到服务器上因为是在纯命令行下，所以浏览器下载就不要想了，我在这里使用的是 pscp 软件来把安装包传到服务器上面去。具体的操作就是： 在Windows上面下载对应的Linux的安装包，记得下载以 .tar.gz 为后缀名的文档。 在Windows下安装 pscp，安装好了之后之后把其加入到环境变量里面去。接着，在命令行里面执行：pscp location username@hostname:/director，文档就会开始上传到服务器上面去了。 这里需要解释的几点的是： location的本地文档的路径，定位到该文档就Ok； username就是你在ubuntu操作系统里面用户名； hostname就填你机器名，一般添上你的机器的公网IP就可以了； director是你的文档上传目标路径的文档夹，这里需要提一点的是，如果你是用的用户是root用户，那么冒号后面的斜杠相当于定位到了root/文档夹，其他非root用户则是定位到了/username/这一层文档夹，如果你的当前文档夹下还有目录，可以继续在&#x2F;后面添加目录名称。 噢，有一点差点忘了，文档上传的时候会要求你填写密码的，记得填写正确的密码！ 2.2 在服务器上安装JDK和Tomcat这一步操作也非常简单，因为我们上传的都是 .tar.gz 类型的文档，所以只要解压了就可以直接使用了，至于解压到什么文档夹下就看你自己的喜好了，最好文档的分布要有规律，不要这里放一个、那里放一个就行。文档解压后还要把程序添加到环境变量里面去，具体怎么添加可以Google，在这里就不赘述了，毕竟不要重新造轮子嘛~~~ 假设你的JDK和Tomcat已经解压完毕，并且已经添加到环境变量里面去了，此时的Tomcat和Java程序应给都可以使用了才对，进入tomcat/bin文档夹并执行startuo.sh文档，然后在本地浏览器里面输入 example.com:8080 （example.com就是你申请的域名），是不是能看到熟悉的tomcat的首页页面了呢？如果能看到，恭喜你，你的服务器已经搭建好了，接下来，就可以把自己写好的网站上传到服务器上面去，然后设置好Tomcat的项目路径，这样别人就可以访问到你的网站啦！ 3 部署项目部署项目其实没什么好说的，主要就是Tomcat的路径的问题，Tomcat的项目部署主要有以下三种方式： 打开tomcat/conf/server.xml，在&lt;host&gt;&lt;/host&gt;之间加入代码：&lt;Context docBase=&quot;项目路径&quot; path=&quot;&quot; debug=&quot;0&quot; reloadable=&quot;true&quot;/&gt;这样重新启动tomcat，我们的 主目录就被设置为bidding这个项目了。（推荐方式） 将tomcat安装目录下的ROOT下的所有文档全部删除，然后将工程的解压后的文档全部拷进去。 Tomcat5.0以下版本在tomcat/conf/Catalina/localhost目录下会自动生成了一个ROOT.Xml，但是5.0以上版本不再生成此文档，所以可以新建个ROOT.xml,在里面加入如下代码： 小结：阿里云云服务器感觉还是很方便的，而且性能上因为项目比较简单，并没有对性能的太大要求，至少我在操作的时候一直都很流畅，所以对阿里云的性能并没有做出太多的测试。而且在这要提醒你的是因为天朝的特色，如果你的网站要监听在 80 端口的话，是需要备案的，而且这种备案一般耗时都很长，需要做好心里准备。其次关于防火墙的问题，我的建议是除了需要使用的端口（如22和8080），其他的一律关闭，关于防火墙可以 Google 一下 “ufw” 关键字，你会得到你想要的的。 好了，今天就写到这里，如果后面还有新的内容的话我会继续补充的，以上。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"Linux","slug":"Linux","permalink":"https://www.nosuchfield.com/tags/Linux/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://www.nosuchfield.com/tags/Ubuntu/"},{"name":"环境搭建","slug":"环境搭建","permalink":"https://www.nosuchfield.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}]},{"title":"iframe的数据获取的方法","slug":"How-to-get-data-from-an-iframe","date":"2015-03-21T23:09:00.000Z","updated":"2025-08-22T15:42:13.340Z","comments":true,"path":"2015/03/21/How-to-get-data-from-an-iframe/","link":"","permalink":"https://www.nosuchfield.com/2015/03/21/How-to-get-data-from-an-iframe/","excerpt":"","text":"在主页面里面把iframe的src设置成某一个action，然后这个iframe的位置的action会对应的指对到struts.xml里面的action，然后在打开主页时，iframe的位置就进入对应的action，然后就可以执行Action文档里面的内容，如果Action的返回页面还为这个页面，那么就还可以把对应的值传回给这个iframe，就可以把action里面的数据直接传输到iframe里面，而不用通过主页面来传输数据，这样就可以实现iframe的数据的独立操作而不依赖于主页面。","categories":[],"tags":[{"name":"iframe","slug":"iframe","permalink":"https://www.nosuchfield.com/tags/iframe/"}]},{"title":"checkbox一些用法","slug":"Some-uses-of-checkbox","date":"2015-03-11T22:56:00.000Z","updated":"2025-08-22T15:42:13.347Z","comments":true,"path":"2015/03/11/Some-uses-of-checkbox/","link":"","permalink":"https://www.nosuchfield.com/2015/03/11/Some-uses-of-checkbox/","excerpt":"","text":"123456789String[] delid = req.getParameterValues(&quot;delid&quot;);if (delid != null) &#123; for (int i = 0; i &lt; delid.length; i++) &#123; TextEntity te = new TextEntity(delid[i], word); TextDao text = new TextDao(conn, te); text.delete(); conn.commit(); &#125;&#125; checkbox拥有选中才提交的属性，当某一个按钮被选中后，在页面提交的时候，他的value才会被提交。 在提交到Servlet之后，Servlet得到的值是一个数组，数组的每一个值是*.jsp的页面上的checkbox按照从先到后的串行来进行取值的。所以在Servlet界面是通过一个循环来取值的，如上面的代码所示。在从jsp页面取到name&#x3D;“delid”的值后，判断取得的值不会为零，然后通过循环把每一个值赋给te的一个变量，然后执行下面的其他操作。 总结：1、checkbox具有选择才被提交的属性；2、checkbox在被提交后得到的值是一个数组。","categories":[],"tags":[{"name":"servlet","slug":"servlet","permalink":"https://www.nosuchfield.com/tags/servlet/"},{"name":"checkbox","slug":"checkbox","permalink":"https://www.nosuchfield.com/tags/checkbox/"},{"name":"jsp","slug":"jsp","permalink":"https://www.nosuchfield.com/tags/jsp/"},{"name":"网页制作","slug":"网页制作","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/"}]},{"title":"doGet和doPost的数据的获取","slug":"Getting-data-for-doGet-and-doPost","date":"2015-03-11T21:02:00.000Z","updated":"2025-08-22T15:42:13.339Z","comments":true,"path":"2015/03/11/Getting-data-for-doGet-and-doPost/","link":"","permalink":"https://www.nosuchfield.com/2015/03/11/Getting-data-for-doGet-and-doPost/","excerpt":"","text":"在Servlet里面，其中有一种方式是通过 1&lt;a href=&quot;&lt;%=request.getContextPath() %&gt;/search?username=&lt;%=name %&gt;&quot; title=&quot;查看个人资料&quot; target=&quot;_blank&quot;&gt; 来提交信息，在点击点击链接的时候，username的数据传给链接到的页面，在打开的页面里，因为他是一个doGet方法，所以汉字可能会产生乱码，这时候在接受页面要通过 12String notUsername = req.getParameter(&quot;username&quot;);String username = new String(notUsername.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;); 的方式，把接受过来汉字通过UTF-8的编码方式进行解码，这样才能保证得到的文本不出现乱码。 但是，在正常的doPost页面，不能通过这种方式，而是应该使用 1String username = req.getParameter(&quot;username&quot;); 的方式来进行数据的获取，各种方式必须使用对应的格式，否则会产生乱码。综上，在doPost方式中，应该使用 1String username = req.getParameter(&quot;username&quot;); 在doGet方式中，应该使用 12String notUsername = req.getParameter(&quot;username&quot;);String username = new String(notUsername.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;);","categories":[],"tags":[{"name":"jdbc","slug":"jdbc","permalink":"https://www.nosuchfield.com/tags/jdbc/"},{"name":"j2ee","slug":"j2ee","permalink":"https://www.nosuchfield.com/tags/j2ee/"},{"name":"servlet","slug":"servlet","permalink":"https://www.nosuchfield.com/tags/servlet/"},{"name":"html","slug":"html","permalink":"https://www.nosuchfield.com/tags/html/"},{"name":"doGet","slug":"doGet","permalink":"https://www.nosuchfield.com/tags/doGet/"},{"name":"doPost","slug":"doPost","permalink":"https://www.nosuchfield.com/tags/doPost/"}]}],"categories":[],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://www.nosuchfield.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Java","slug":"Java","permalink":"https://www.nosuchfield.com/tags/Java/"},{"name":"XXL-JOB","slug":"XXL-JOB","permalink":"https://www.nosuchfield.com/tags/XXL-JOB/"},{"name":"分布式任务调度","slug":"分布式任务调度","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://www.nosuchfield.com/tags/Spring-Boot/"},{"name":"任务调度","slug":"任务调度","permalink":"https://www.nosuchfield.com/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"},{"name":"JWT","slug":"JWT","permalink":"https://www.nosuchfield.com/tags/JWT/"},{"name":"API网关","slug":"API网关","permalink":"https://www.nosuchfield.com/tags/API%E7%BD%91%E5%85%B3/"},{"name":"认证授权","slug":"认证授权","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.nosuchfield.com/tags/Nginx/"},{"name":"APISIX","slug":"APISIX","permalink":"https://www.nosuchfield.com/tags/APISIX/"},{"name":"Lua","slug":"Lua","permalink":"https://www.nosuchfield.com/tags/Lua/"},{"name":"算法","slug":"算法","permalink":"https://www.nosuchfield.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"机器学习","slug":"机器学习","permalink":"https://www.nosuchfield.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://www.nosuchfield.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"推荐系统","slug":"推荐系统","permalink":"https://www.nosuchfield.com/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"},{"name":"数据挖掘","slug":"数据挖掘","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"},{"name":"产品设计","slug":"产品设计","permalink":"https://www.nosuchfield.com/tags/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/"},{"name":"用户体验","slug":"用户体验","permalink":"https://www.nosuchfield.com/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"},{"name":"心理学","slug":"心理学","permalink":"https://www.nosuchfield.com/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"},{"name":"习惯养成","slug":"习惯养成","permalink":"https://www.nosuchfield.com/tags/%E4%B9%A0%E6%83%AF%E5%85%BB%E6%88%90/"},{"name":"JVM","slug":"JVM","permalink":"https://www.nosuchfield.com/tags/JVM/"},{"name":"Kotlin","slug":"Kotlin","permalink":"https://www.nosuchfield.com/tags/Kotlin/"},{"name":"ComfyUI","slug":"ComfyUI","permalink":"https://www.nosuchfield.com/tags/ComfyUI/"},{"name":"AI","slug":"AI","permalink":"https://www.nosuchfield.com/tags/AI/"},{"name":"图像生成","slug":"图像生成","permalink":"https://www.nosuchfield.com/tags/%E5%9B%BE%E5%83%8F%E7%94%9F%E6%88%90/"},{"name":"Stable Diffusion","slug":"Stable-Diffusion","permalink":"https://www.nosuchfield.com/tags/Stable-Diffusion/"},{"name":"自然语言处理","slug":"自然语言处理","permalink":"https://www.nosuchfield.com/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"视频编码","slug":"视频编码","permalink":"https://www.nosuchfield.com/tags/%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81/"},{"name":"视频","slug":"视频","permalink":"https://www.nosuchfield.com/tags/%E8%A7%86%E9%A2%91/"},{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://www.nosuchfield.com/tags/ffmpeg/"},{"name":"码率","slug":"码率","permalink":"https://www.nosuchfield.com/tags/%E7%A0%81%E7%8E%87/"},{"name":"开源","slug":"开源","permalink":"https://www.nosuchfield.com/tags/%E5%BC%80%E6%BA%90/"},{"name":"apache","slug":"apache","permalink":"https://www.nosuchfield.com/tags/apache/"},{"name":"网络","slug":"网络","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"代理","slug":"代理","permalink":"https://www.nosuchfield.com/tags/%E4%BB%A3%E7%90%86/"},{"name":"ssh","slug":"ssh","permalink":"https://www.nosuchfield.com/tags/ssh/"},{"name":"frp","slug":"frp","permalink":"https://www.nosuchfield.com/tags/frp/"},{"name":"shell","slug":"shell","permalink":"https://www.nosuchfield.com/tags/shell/"},{"name":"bash","slug":"bash","permalink":"https://www.nosuchfield.com/tags/bash/"},{"name":"zsh","slug":"zsh","permalink":"https://www.nosuchfield.com/tags/zsh/"},{"name":"网关","slug":"网关","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E5%85%B3/"},{"name":"运维","slug":"运维","permalink":"https://www.nosuchfield.com/tags/%E8%BF%90%E7%BB%B4/"},{"name":"Openresty","slug":"Openresty","permalink":"https://www.nosuchfield.com/tags/Openresty/"},{"name":"编译原理","slug":"编译原理","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"编译器","slug":"编译器","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91%E5%99%A8/"},{"name":"虚拟机","slug":"虚拟机","permalink":"https://www.nosuchfield.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"ANTLR4","slug":"ANTLR4","permalink":"https://www.nosuchfield.com/tags/ANTLR4/"},{"name":"字节码","slug":"字节码","permalink":"https://www.nosuchfield.com/tags/%E5%AD%97%E8%8A%82%E7%A0%81/"},{"name":"词法分析","slug":"词法分析","permalink":"https://www.nosuchfield.com/tags/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"},{"name":"语法分析","slug":"语法分析","permalink":"https://www.nosuchfield.com/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"},{"name":"ANTLR","slug":"ANTLR","permalink":"https://www.nosuchfield.com/tags/ANTLR/"},{"name":"分布式系统","slug":"分布式系统","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"},{"name":"分布式","slug":"分布式","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"数据库","slug":"数据库","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"ShardingSphere","slug":"ShardingSphere","permalink":"https://www.nosuchfield.com/tags/ShardingSphere/"},{"name":"分布式数据库","slug":"分布式数据库","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"编译","slug":"编译","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E8%AF%91/"},{"name":"HTTP","slug":"HTTP","permalink":"https://www.nosuchfield.com/tags/HTTP/"},{"name":"安全","slug":"安全","permalink":"https://www.nosuchfield.com/tags/%E5%AE%89%E5%85%A8/"},{"name":"k8s","slug":"k8s","permalink":"https://www.nosuchfield.com/tags/k8s/"},{"name":"云原生","slug":"云原生","permalink":"https://www.nosuchfield.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"},{"name":"数据结构","slug":"数据结构","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"数学","slug":"数学","permalink":"https://www.nosuchfield.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"消息队列","slug":"消息队列","permalink":"https://www.nosuchfield.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"Python","slug":"Python","permalink":"https://www.nosuchfield.com/tags/Python/"},{"name":"分布式一致性","slug":"分布式一致性","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7/"},{"name":"一致性","slug":"一致性","permalink":"https://www.nosuchfield.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7/"},{"name":"大数据","slug":"大数据","permalink":"https://www.nosuchfield.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"设计模式","slug":"设计模式","permalink":"https://www.nosuchfield.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"软件架构","slug":"软件架构","permalink":"https://www.nosuchfield.com/tags/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/"},{"name":"树莓派","slug":"树莓派","permalink":"https://www.nosuchfield.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"文件共享","slug":"文件共享","permalink":"https://www.nosuchfield.com/tags/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/"},{"name":"Samba","slug":"Samba","permalink":"https://www.nosuchfield.com/tags/Samba/"},{"name":"计算","slug":"计算","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97/"},{"name":"计算机","slug":"计算机","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"经济","slug":"经济","permalink":"https://www.nosuchfield.com/tags/%E7%BB%8F%E6%B5%8E/"},{"name":"ElasticSearch","slug":"ElasticSearch","permalink":"https://www.nosuchfield.com/tags/ElasticSearch/"},{"name":"GC","slug":"GC","permalink":"https://www.nosuchfield.com/tags/GC/"},{"name":"垃圾收集器","slug":"垃圾收集器","permalink":"https://www.nosuchfield.com/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"},{"name":"压力测试","slug":"压力测试","permalink":"https://www.nosuchfield.com/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"},{"name":"操作系统","slug":"操作系统","permalink":"https://www.nosuchfield.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.nosuchfield.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"无线网","slug":"无线网","permalink":"https://www.nosuchfield.com/tags/%E6%97%A0%E7%BA%BF%E7%BD%91/"},{"name":"nlp","slug":"nlp","permalink":"https://www.nosuchfield.com/tags/nlp/"},{"name":"分词","slug":"分词","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E8%AF%8D/"},{"name":"流式计算","slug":"流式计算","permalink":"https://www.nosuchfield.com/tags/%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://www.nosuchfield.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"TCP","slug":"TCP","permalink":"https://www.nosuchfield.com/tags/TCP/"},{"name":"TCP协议","slug":"TCP协议","permalink":"https://www.nosuchfield.com/tags/TCP%E5%8D%8F%E8%AE%AE/"},{"name":"监控","slug":"监控","permalink":"https://www.nosuchfield.com/tags/%E7%9B%91%E6%8E%A7/"},{"name":"软件工程","slug":"软件工程","permalink":"https://www.nosuchfield.com/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"},{"name":"重构","slug":"重构","permalink":"https://www.nosuchfield.com/tags/%E9%87%8D%E6%9E%84/"},{"name":"Golang","slug":"Golang","permalink":"https://www.nosuchfield.com/tags/Golang/"},{"name":"C","slug":"C","permalink":"https://www.nosuchfield.com/tags/C/"},{"name":"编码","slug":"编码","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E7%A0%81/"},{"name":"编程语言","slug":"编程语言","permalink":"https://www.nosuchfield.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"一致性算法","slug":"一致性算法","permalink":"https://www.nosuchfield.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/"},{"name":"一致性协议","slug":"一致性协议","permalink":"https://www.nosuchfield.com/tags/%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/"},{"name":"分布式计算","slug":"分布式计算","permalink":"https://www.nosuchfield.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"},{"name":"Spark","slug":"Spark","permalink":"https://www.nosuchfield.com/tags/Spark/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"Linux","slug":"Linux","permalink":"https://www.nosuchfield.com/tags/Linux/"},{"name":"C语言","slug":"C语言","permalink":"https://www.nosuchfield.com/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"杂谈","slug":"杂谈","permalink":"https://www.nosuchfield.com/tags/%E6%9D%82%E8%B0%88/"},{"name":"无用的知识","slug":"无用的知识","permalink":"https://www.nosuchfield.com/tags/%E6%97%A0%E7%94%A8%E7%9A%84%E7%9F%A5%E8%AF%86/"},{"name":"架构","slug":"架构","permalink":"https://www.nosuchfield.com/tags/%E6%9E%B6%E6%9E%84/"},{"name":"框架","slug":"框架","permalink":"https://www.nosuchfield.com/tags/%E6%A1%86%E6%9E%B6/"},{"name":"Web","slug":"Web","permalink":"https://www.nosuchfield.com/tags/Web/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://www.nosuchfield.com/tags/JavaWeb/"},{"name":"Spring","slug":"Spring","permalink":"https://www.nosuchfield.com/tags/Spring/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.nosuchfield.com/tags/JavaScript/"},{"name":"笔记","slug":"笔记","permalink":"https://www.nosuchfield.com/tags/%E7%AC%94%E8%AE%B0/"},{"name":"随想","slug":"随想","permalink":"https://www.nosuchfield.com/tags/%E9%9A%8F%E6%83%B3/"},{"name":"容器","slug":"容器","permalink":"https://www.nosuchfield.com/tags/%E5%AE%B9%E5%99%A8/"},{"name":"PHP","slug":"PHP","permalink":"https://www.nosuchfield.com/tags/PHP/"},{"name":"MIT-6.828","slug":"MIT-6-828","permalink":"https://www.nosuchfield.com/tags/MIT-6-828/"},{"name":"Wiki","slug":"Wiki","permalink":"https://www.nosuchfield.com/tags/Wiki/"},{"name":"杂项","slug":"杂项","permalink":"https://www.nosuchfield.com/tags/%E6%9D%82%E9%A1%B9/"},{"name":"Git","slug":"Git","permalink":"https://www.nosuchfield.com/tags/Git/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://www.nosuchfield.com/tags/Ubuntu/"},{"name":"环境搭建","slug":"环境搭建","permalink":"https://www.nosuchfield.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"name":"iframe","slug":"iframe","permalink":"https://www.nosuchfield.com/tags/iframe/"},{"name":"servlet","slug":"servlet","permalink":"https://www.nosuchfield.com/tags/servlet/"},{"name":"checkbox","slug":"checkbox","permalink":"https://www.nosuchfield.com/tags/checkbox/"},{"name":"jsp","slug":"jsp","permalink":"https://www.nosuchfield.com/tags/jsp/"},{"name":"网页制作","slug":"网页制作","permalink":"https://www.nosuchfield.com/tags/%E7%BD%91%E9%A1%B5%E5%88%B6%E4%BD%9C/"},{"name":"jdbc","slug":"jdbc","permalink":"https://www.nosuchfield.com/tags/jdbc/"},{"name":"j2ee","slug":"j2ee","permalink":"https://www.nosuchfield.com/tags/j2ee/"},{"name":"html","slug":"html","permalink":"https://www.nosuchfield.com/tags/html/"},{"name":"doGet","slug":"doGet","permalink":"https://www.nosuchfield.com/tags/doGet/"},{"name":"doPost","slug":"doPost","permalink":"https://www.nosuchfield.com/tags/doPost/"}]}